// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.HashMapImplementation = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  if (key == null)
    throw $.$$throw($.CTC);
  var t1 = $.get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1, 0, 0);
  var hash = (t1 & this._keys.length - 1) >>> 0;
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC9 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(2, numberOfProbes0, key, insertionIndex, hash);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      var key = env0;
      t1 = env1;
      break;
    case 2:
      numberOfProbes0 = env0;
      key = env1;
      insertionIndex = env2;
      hash = env3;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.CTC);
      var t1 = $.get$hashCode(key);
    case 1:
      state0 = 0;
      var hash = $.and(t1, this._keys.length - 1);
      var numberOfProbes = 1;
      var insertionIndex = -1;
    case 2:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
              if (hash !== (hash | 0))
                throw $.iae(hash);
              if (hash < 0 || hash >= t1.length)
                throw $.ioore(hash);
              var existingKey = t1[hash];
              if (existingKey == null) {
                if (insertionIndex < 0)
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if (insertionIndex < 0 && $.CTC9 === existingKey)
                insertionIndex = hash;
              var numberOfProbes0 = numberOfProbes + 1;
              hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
            case 2:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  if (key == null)
    throw $.$$throw($.CTC);
  var hash = $.and($.get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (var numberOfProbes = 1; true;) {
    var t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  for (var numberOfProbes = 1; true;) {
    var t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  var capacity = this._keys.length;
  if (typeof newNumberOfEntries !== 'number')
    throw $.iae(newNumberOfEntries);
  var numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  var t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity = this._keys.length;
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  var oldKeys = this._keys;
  var oldValues = this._values;
  this._keys = $.ListImplementation_List(newCapacity);
  this._values = $.ListImplementation_List(newCapacity);
  for (var i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    var key = oldKeys[i];
    if (key == null || key === $.CTC9)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    var value = oldValues[i];
    var newIndex = this._probeForAdding$1(key);
    var t1 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = key;
    t1 = this._values;
    if (newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  var t1 = this._keys;
  var length$ = t1.length;
  for (var t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  this._ensureCapacity$0();
  var index = this._probeForAdding$1(key);
  var t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC9)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  var t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 remove$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = $.sub(this._numberOfEntries, 1);
    var t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    var value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC9;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$ = this._keys.length;
  for (var i = 0; i < length$; ++i) {
    var t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    var key = t1[i];
    if (!(key == null) && !(key === $.CTC9)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_keys__(t1, list));
  return list;
},
 get$values: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_1 = 0;
  this.forEach$1(new $.HashMapImplementation_values__(list, t1));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $.ListImplementation_List(8);
  this._values = $.ListImplementation_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$.KeyValuePair = {"": ["key?", "value="],
 "super": "Object"
};

$$.LinkedHashMapImplementation = {"": ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    this._map.operator$index$1(key).get$element().set$value(value);
  else {
    this._list.addLast$1($.KeyValuePair$(key, value));
    this._map.operator$indexSet$2(key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = this._map.operator$index$1(key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_10 = 0;
  this._list.forEach$1(new $.LinkedHashMapImplementation_keys__(list, t1));
  return list;
},
 get$values: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_1 = 0;
  this._list.forEach$1(new $.LinkedHashMapImplementation_values__(t1, list));
  return list;
},
 forEach$1: function(f) {
  this._list.forEach$1(new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  this._map.clear$0();
  this._list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.HashMapImplementation$();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.DoubleLinkedQueueEntry = {"": ["_previous!", "_next=", "_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this.addLast$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$last: function() {
  return this._sentinel._previous.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    var nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
    entry = nextEntry;
  }
},
 map$1: function(f) {
  var other = $.Queue_Queue();
  var entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    var nextEntry = entry.get$_next();
    $.addLast(other, f.call$1(entry.get$_element()));
    entry = nextEntry;
  }
  return other;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 filter$1: function(f) {
  var other = $.Queue_Queue();
  var entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    var nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      $.addLast(other, entry.get$_element());
    entry = nextEntry;
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.JSSyntaxRegExp = {"": ["_lib0_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$RegExp: true
};

$$.ArgumentError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_functionName", "_arguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var sb = $.StringBuffer_StringBuffer('');
  var t1 = this._arguments;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, sb);
  var i = 0;
  for (; i < t1.length; ++i) {
    if (i > 0)
      $.add$1(sb, ', ');
    if (i >= t1.length)
      throw $.ioore(i);
    $.add$1(sb, $.NoSuchMethodError_safeToString(t1[i]));
  }
  t1 = this._existingArgumentNames;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, sb, t1);
  var actualParameters = $.toString(sb);
  sb = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t1.length; ++i) {
    if (i > 0)
      $.add$1(sb, ', ');
    if (i >= t1.length)
      throw $.ioore(i);
    $.add$1(sb, t1[i]);
  }
  var formalParameters = $.toString(sb);
  t1 = this._functionName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      sb = env1;
      break;
    case 2:
      sb = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
      var sb = $.StringBuffer_StringBuffer('');
      var t1 = this._arguments;
    case 1:
      state0 = 0;
      var i = 0;
      for (; $.ltB(i, $.get$length(t1)); ++i) {
        if (i > 0)
          $.add$1(sb, ', ');
        $.add$1(sb, $.NoSuchMethodError_safeToString($.index(t1, i)));
      }
      t1 = this._existingArgumentNames;
    case 2:
      state0 = 0;
      if (t1 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._functionName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(sb) + ']';
      else {
        var actualParameters = $.toString(sb);
        sb = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.get$length(t1)); ++i) {
          if (i > 0)
            $.add$1(sb, ', ');
          $.add$1(sb, $.index(t1, i));
        }
        var formalParameters = $.toString(sb);
        t1 = this._functionName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'Unsupported operation: message';
}
};

$$.StateError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'Bad state: message';
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.IndexOutOfRangeException = {"": ["_value?"],
 "super": "Object",
 toString$0: function() {
  return 'IndexOutOfRangeException: ' + $.S(this._value);
},
 is$Exception: true
};

$$.FormatException = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NullPointerException = {"": ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.NotImplementedException = {"": ["_message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._message;
  return !(t1 == null) ? 'NotImplementedException: ' + $.S(t1) : 'NotImplementedException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace?"],
 "super": "Object",
 toString$0: function() {
  return 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.replaceAll($.toString(this.source), '\n', '\n  ')) + '\n' + 'original stack trace:\n  ' + $.S($.replaceAll($.toString(this.stackTrace), '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value?", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true)
    this._successListeners.push(onSuccess);
  else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    var t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function() {
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (var t1 = $.iterator(this._exceptionHandlers); t1.get$hasNext() === true;) {
        var handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.get$hasNext() === true;) {
        var listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.get$hasNext() === true;) {
      var listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.toString(obj);
  if (str == null || $.get$isEmpty(str) === true)
    return this;
  $.add$1(this._buffer, str);
  this._length = $.add(this._length, $.get$length(str));
  return this;
},
 addAll$1: function(objects) {
  for (var t1 = $.iterator(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $.ListImplementation_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var result = $.StringImplementation_concatAll(this._buffer);
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.CastErrorImplementation = {"": ["actualType", "expectedType"],
 "super": "Object",
 toString$0: function() {
  return 'CastError: Casting value of type ' + $.S(this.actualType) + ' to' + ' incompatible type ' + $.S(this.expectedType);
}
};

$$.ConstantMap = {"": ["length?", "_jsObject", "_lib2_keys"],
 "super": "Object",
 containsKey$1: function(key) {
  if ($.eqB(key, '__proto__'))
    return false;
  return $.jsHasOwnProperty(this._jsObject, key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  $.forEach(this._lib2_keys, new $.ConstantMap_forEach_anon(f, this));
},
 get$keys: function() {
  return this._lib2_keys;
},
 get$values: function() {
  var result = [];
  $.forEach(this._lib2_keys, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot modify unmodifiable Map'));
},
 operator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag?", "_tags", "_set?"],
 "super": "Object"
};

$$.WebGL_Geometry_Extrude_By_U_Shapes = {"": ["container", "camera", "scene", "renderer", "windowHalfX", "windowHalfY", "mouseX", "mouseXOnMouseDown", "targetRotation", "targetRotationOnMouseDown", "parent=", "text!", "plane"],
 "super": "Object",
 run$0: function() {
  this.windowHalfX = $.div($.window().get$innerWidth(), 2);
  this.windowHalfY = $.div($.window().get$innerHeight(), 2);
  this.init$0();
  this.animate$1(0);
},
 _addGeometry$9: function(geometry, color, x, y, z, rx, ry, rz, s) {
  var mesh = $.createMultiMaterialObject(geometry, [$.MeshLambertMaterial$(0, 16777215, 205, 100, 204, 1, color, 0, true, true, 0, null, true, null, null, false, false, '', 0.2, false, false, 0, 0, 1, 0.98, 2, 0, false, null, true, 0, true, false, 'round', 'round', 1, false, null), $.MeshBasicMaterial$(0, 205, 100, 204, 1, 0, 0, true, true, null, true, null, null, false, '', 0.3, false, false, 0, 0, 1, 0.98, 2, 0, false, null, false, 0, true, true, 'round', 'round', 1)]);
  mesh.position.setValues$3(x, y, z - 75);
  mesh.scale.setValues$3(s, s, s);
  $.add$1(this.parent, mesh);
},
 init$0: function() {
  this.container = $.Element_Element$tag('div');
  $.add$1($.document().get$body().get$nodes(), this.container);
  this.camera = $.PerspectiveCamera$(50, $.div($.window().get$innerWidth(), $.window().get$innerHeight()), 1, 1000);
  this.camera.get$position().setValues$3(0, 150, 500);
  this.scene = $.Scene$();
  var light = $.DirectionalLight$(16777215, 1, 0);
  light.position.setValues$3(0, 0, 1);
  $.add$1(this.scene, light);
  this.parent = $.Object3D$();
  this.parent.get$position().set$y(50);
  $.add$1(this.scene, this.parent);
  var pts = [];
  for (var l = null, i = 0; i < 10; ++i) {
    l = $.mod(i, 2) === 1 ? 5 : 10;
    var a = i / 5 * 3.141592653589793;
    pts.push($.Vector2$($.cos(a) * l, $.sin(a) * l));
  }
  var starShape = $.Shape$(pts);
  var rnd = $.Random_Random(null);
  var line = $.LineCurve3$($.Vector3$(0, 0, 0), $.Vector3$(100, 0, 0));
  var line2 = $.LineCurve3$($.Vector3$(100, 0, 0), $.Vector3$(200, 50, 0));
  var curvepath = $.CurvePath$();
  curvepath.add$1(line);
  curvepath.add$1(line2);
  var randomPoints = [$.Vector3$(200, 50, 0)];
  for (i = 0; i < 5; ++i)
    randomPoints.push($.Vector3$($.mul(rnd.nextDouble$0(), 200), $.mul(rnd.nextDouble$0(), 200), $.mul(rnd.nextDouble$0(), 200)));
  curvepath.add$1($.SplineCurve3$(randomPoints));
  var extrudeUSteps = $.ListImplementation_List(null);
  var curvepathLength = $.get$length(curvepath);
  if (typeof curvepathLength !== 'number')
    return this.init$0$bailout(1, starShape, extrudeUSteps, curvepath, curvepathLength);
  for (var t1 = $.iterator(curvepath.curves), initU = 0; t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (typeof t2 === 'object' && t2 !== null && !!t2.is$LineCurve3) {
      initU = $.add(initU, $.div($.get$length(t2), curvepathLength));
      extrudeUSteps.push(initU);
    } else {
      for (var d = 0; d <= 40; ++d) {
        var t3 = d / 40;
        var t4 = $.div($.get$length(t2), curvepathLength);
        if (typeof t4 !== 'number')
          throw $.iae(t4);
        extrudeUSteps.push($.add(initU, t3 * t4));
      }
      initU = $.get$last(extrudeUSteps);
    }
  }
  $.print('[WebGL_Geometry_Extrude_By_U_Shapes] ' + $.S(extrudeUSteps));
  var circleShape = $.Shape$(null);
  circleShape.moveTo$2(0, 4);
  circleShape.quadraticCurveTo$4(4, 4, 4, 0);
  circleShape.quadraticCurveTo$4(4, -4, 0, -4);
  circleShape.quadraticCurveTo$4(-4, -4, -4, 0);
  circleShape.quadraticCurveTo$4(-4, 4, 0, 4);
  var rectShape = $.Shape$(null);
  rectShape.moveTo$2(-6, -2);
  rectShape.lineTo$2(-6, 2);
  rectShape.lineTo$2(6, 2);
  rectShape.lineTo$2(6, -6);
  rectShape.lineTo$2(-6, -6);
  var smileyShape = $.Shape$(null);
  smileyShape.moveTo$2(80, 40);
  smileyShape.arc$6(40, 40, 40, 0, 6.283185307179586, false);
  var smileyEye1Path = $.Path$(null);
  smileyEye1Path.moveTo$2(35, 20);
  smileyEye1Path.arc$6(25, 20, 10, 0, 6.283185307179586, true);
  t1 = smileyShape.holes;
  t1.push(smileyEye1Path);
  var smileyEye2Path = $.Path$(null);
  smileyEye2Path.moveTo$2(65, 20);
  smileyEye2Path.arc$6(55, 20, 10, 0, 6.283185307179586, true);
  t1.push(smileyEye2Path);
  var smileyMouthPath = $.Path$(null);
  smileyMouthPath.moveTo$2(20, 40);
  smileyMouthPath.quadraticCurveTo$4(40, 60, 60, 40);
  smileyMouthPath.bezierCurveTo$6(70, 45, 70, 50, 60, 60);
  smileyMouthPath.quadraticCurveTo$4(40, 80, 20, 60);
  smileyMouthPath.quadraticCurveTo$4(5, 50, 20, 40);
  t1.push(smileyMouthPath);
  var circle3d = starShape.extrude$5$amount$bevelEnabled$bevelSegments$extrudePath$steps(200, false, 2, curvepath, extrudeUSteps);
  var tube = $.TubeGeometry$(curvepath, 40, 4, 5, false, true);
  this._addGeometry$9(circle3d, 16716049, -100, 0, 0, 0, 0, 0, 1);
  this._addGeometry$9(tube, 65297, 0, 0, 0, 0, 0, 0, 1);
  this.renderer = $.WebGLRenderer$(true, true, null, 0, 0, 4, 'highp', true, false, true);
  this.renderer.setSize$2($.window().get$innerWidth(), $.window().get$innerHeight());
  this.renderer.set$sortObjects(false);
  $.add$1(this.container.get$nodes(), this.renderer.get$domElement());
  $.document().get$on().get$mouseDown().add$2(this.get$onDocumentMouseDown(), false);
  $.document().get$on().get$touchStart().add$2(this.get$onDocumentTouchStart(), false);
  $.document().get$on().get$touchMove().add$2(this.get$onDocumentTouchMove(), false);
  $.add$1($.window().get$on().get$resize(), this.get$onWindowResize());
},
 init$0$bailout: function(state0, starShape, extrudeUSteps, curvepath, curvepathLength) {
  for (var t1 = $.iterator(curvepath.curves), initU = 0; t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (typeof t2 === 'object' && t2 !== null && !!t2.is$LineCurve3) {
      initU = $.add(initU, $.div($.get$length(t2), curvepathLength));
      extrudeUSteps.push(initU);
    } else {
      for (var d = 0; d <= 40; ++d) {
        var t3 = d / 40;
        var t4 = $.div($.get$length(t2), curvepathLength);
        if (typeof t4 !== 'number')
          throw $.iae(t4);
        extrudeUSteps.push($.add(initU, t3 * t4));
      }
      initU = $.get$last(extrudeUSteps);
    }
  }
  $.print('[WebGL_Geometry_Extrude_By_U_Shapes] ' + $.S(extrudeUSteps));
  var circleShape = $.Shape$(null);
  circleShape.moveTo$2(0, 4);
  circleShape.quadraticCurveTo$4(4, 4, 4, 0);
  circleShape.quadraticCurveTo$4(4, -4, 0, -4);
  circleShape.quadraticCurveTo$4(-4, -4, -4, 0);
  circleShape.quadraticCurveTo$4(-4, 4, 0, 4);
  var rectShape = $.Shape$(null);
  rectShape.moveTo$2(-6, -2);
  rectShape.lineTo$2(-6, 2);
  rectShape.lineTo$2(6, 2);
  rectShape.lineTo$2(6, -6);
  rectShape.lineTo$2(-6, -6);
  var smileyShape = $.Shape$(null);
  smileyShape.moveTo$2(80, 40);
  smileyShape.arc$6(40, 40, 40, 0, 6.283185307179586, false);
  var smileyEye1Path = $.Path$(null);
  smileyEye1Path.moveTo$2(35, 20);
  smileyEye1Path.arc$6(25, 20, 10, 0, 6.283185307179586, true);
  t1 = smileyShape.holes;
  t1.push(smileyEye1Path);
  var smileyEye2Path = $.Path$(null);
  smileyEye2Path.moveTo$2(65, 20);
  smileyEye2Path.arc$6(55, 20, 10, 0, 6.283185307179586, true);
  t1.push(smileyEye2Path);
  var smileyMouthPath = $.Path$(null);
  smileyMouthPath.moveTo$2(20, 40);
  smileyMouthPath.quadraticCurveTo$4(40, 60, 60, 40);
  smileyMouthPath.bezierCurveTo$6(70, 45, 70, 50, 60, 60);
  smileyMouthPath.quadraticCurveTo$4(40, 80, 20, 60);
  smileyMouthPath.quadraticCurveTo$4(5, 50, 20, 40);
  t1.push(smileyMouthPath);
  var circle3d = starShape.extrude$5$amount$bevelEnabled$bevelSegments$extrudePath$steps(200, false, 2, curvepath, extrudeUSteps);
  var tube = $.TubeGeometry$(curvepath, 40, 4, 5, false, true);
  this._addGeometry$9(circle3d, 16716049, -100, 0, 0, 0, 0, 0, 1);
  this._addGeometry$9(tube, 65297, 0, 0, 0, 0, 0, 0, 1);
  this.renderer = $.WebGLRenderer$(true, true, null, 0, 0, 4, 'highp', true, false, true);
  this.renderer.setSize$2($.window().get$innerWidth(), $.window().get$innerHeight());
  this.renderer.set$sortObjects(false);
  $.add$1(this.container.get$nodes(), this.renderer.get$domElement());
  $.document().get$on().get$mouseDown().add$2(this.get$onDocumentMouseDown(), false);
  $.document().get$on().get$touchStart().add$2(this.get$onDocumentTouchStart(), false);
  $.document().get$on().get$touchMove().add$2(this.get$onDocumentTouchMove(), false);
  $.add$1($.window().get$on().get$resize(), this.get$onWindowResize());
},
 onWindowResize$1: function(event$) {
  this.windowHalfX = $.div($.window().get$innerWidth(), 2);
  this.windowHalfY = $.div($.window().get$innerHeight(), 2);
  var t1 = $.div($.window().get$innerWidth(), $.window().get$innerHeight());
  this.camera.set$aspect(t1);
  this.camera.updateProjectionMatrix$0();
  this.renderer.setSize$2($.window().get$innerWidth(), $.window().get$innerHeight());
},
 get$onWindowResize: function() { return new $.BoundClosure(this, 'onWindowResize$1'); },
 onDocumentMouseDown$1: function(event$) {
  event$.preventDefault$0();
  $.document().get$on().get$mouseMove().add$2(this.get$onDocumentMouseMove(), false);
  $.document().get$on().get$mouseUp().add$2(this.get$onDocumentMouseUp(), false);
  $.document().get$on().get$mouseOut().add$2(this.get$onDocumentMouseOut(), false);
  this.mouseXOnMouseDown = $.sub(event$.get$clientX(), this.windowHalfX);
  this.targetRotationOnMouseDown = this.targetRotation;
},
 get$onDocumentMouseDown: function() { return new $.BoundClosure(this, 'onDocumentMouseDown$1'); },
 onDocumentMouseMove$1: function(event$) {
  this.mouseX = $.sub(event$.get$clientX(), this.windowHalfX);
  var t1 = this.targetRotationOnMouseDown;
  var t2 = $.mul($.sub(this.mouseX, this.mouseXOnMouseDown), 0.02);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  this.targetRotation = t1 + t2;
},
 get$onDocumentMouseMove: function() { return new $.BoundClosure(this, 'onDocumentMouseMove$1'); },
 onDocumentMouseUp$1: function(event$) {
  $.document().get$on().get$mouseMove().remove$2(this.get$onDocumentMouseMove(), false);
  $.document().get$on().get$mouseUp().remove$2(this.get$onDocumentMouseUp(), false);
  $.document().get$on().get$mouseOut().remove$2(this.get$onDocumentMouseOut(), false);
},
 get$onDocumentMouseUp: function() { return new $.BoundClosure(this, 'onDocumentMouseUp$1'); },
 onDocumentMouseOut$1: function(event$) {
  $.document().get$on().get$mouseMove().remove$2(this.get$onDocumentMouseMove(), false);
  $.document().get$on().get$mouseUp().remove$2(this.get$onDocumentMouseUp(), false);
  $.document().get$on().get$mouseOut().remove$2(this.get$onDocumentMouseOut(), false);
},
 get$onDocumentMouseOut: function() { return new $.BoundClosure(this, 'onDocumentMouseOut$1'); },
 onDocumentTouchStart$1: function(event$) {
  if ($.eqB($.get$length(event$.get$touches()), 1)) {
    event$.preventDefault$0();
    this.mouseXOnMouseDown = $.sub($.index(event$.get$touches(), 0).get$pageX(), this.windowHalfX);
    this.targetRotationOnMouseDown = this.targetRotation;
  }
},
 get$onDocumentTouchStart: function() { return new $.BoundClosure(this, 'onDocumentTouchStart$1'); },
 onDocumentTouchMove$1: function(event$) {
  if ($.eqB($.get$length(event$.get$touches()), 1)) {
    event$.preventDefault$0();
    this.mouseX = $.sub($.index(event$.get$touches(), 0).get$pageX(), this.windowHalfX);
    var t1 = this.targetRotationOnMouseDown;
    var t2 = $.mul($.sub(this.mouseX, this.mouseXOnMouseDown), 0.05);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    this.targetRotation = t1 + t2;
  }
},
 get$onDocumentTouchMove: function() { return new $.BoundClosure(this, 'onDocumentTouchMove$1'); },
 animate$1: function(time) {
  $.window().requestAnimationFrame$1(this.get$animate());
  this.render$0();
},
 get$animate: function() { return new $.BoundClosure(this, 'animate$1'); },
 render$0: function() {
  var t1 = this.parent.get$rotation();
  var t2 = t1.get$y();
  var t3 = this.targetRotation;
  var t4 = this.parent.get$rotation().get$y();
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  t1.set$y($.add(t2, (t3 - t4) * 0.05));
  this.renderer.render$2(this.scene, this.camera);
},
 get$render: function() { return new $.BoundClosure0(this, 'render$0'); }
};

$$._AbstractWorkerEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._AudioContextEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$._BatteryManagerEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._BodyElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$resize: function() {
  return this.operator$index$1('resize');
}
};

$$._DOMApplicationCacheEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._DedicatedWorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_WorkerContextEventsImpl"
};

$$._FilteredElementList = {"": ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  return $.ListImplementation_List$from($.filter(this._childNodes, new $._FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  $.forEach(this.get$_filtered(), f);
},
 operator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$('Invalid list length'));
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  $.add$1(this._childNodes, value);
},
 get$add: function() { return new $.BoundClosure(this, 'add$1'); },
 addAll$1: function(collection) {
  $.forEach(collection, this.get$add());
},
 addLast$1: function(value) {
  this.add$1(value);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('TODO(jacobr): should we impl?'));
},
 removeRange$2: function(start, rangeLength) {
  $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $._FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  $.clear(this._childNodes);
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 map$1: function(f) {
  return $.map(this.get$_filtered(), f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $.filter(this.get$_filtered(), f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this.get$_filtered(), start, rangeLength);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this.get$_filtered(), element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return $.get$last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._DocumentEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$copy: function() {
  return this.operator$index$1('copy');
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$touchMove: function() {
  return this.operator$index$1('touchmove');
},
 get$touchStart: function() {
  return this.operator$index$1('touchstart');
}
};

$$._ChildrenElementList = {"": ["_lib_element?", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  var t3 = t1.length;
  var output = $.ListImplementation_List(t3);
  for (var len = t1.length, i = 0; i < len; ++i) {
    var t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, t1) {
  var output = $.ListImplementation_List($.get$length(t1));
  for (var len = $.get$length(t1), i = 0; $.ltB(i, len); ++i) {
    var t2 = $.index(t1, i);
    if (i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 forEach$1: function(f) {
  for (var t1 = $.iterator(this._childElements); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output = [];
  this.forEach$1(new $._ChildrenElementList_filter_anon(output, f));
  return $._FrozenElementList$_wrap(output);
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return this._lib_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 operator$indexSet$2: function(index, value) {
  this._lib_element.$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 add$1: function(value) {
  this._lib_element.$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  return this.add$1(value);
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._lib_element; t1.get$hasNext() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('TODO(jacobr): should we impl?'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC13);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  this._lib_element.set$text('');
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._lib_element.$dom_removeChild$1(result);
  return result;
},
 get$last: function() {
  return this._lib_element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {"": ["_nodeList"],
 "super": "Object",
 forEach$1: function(f) {
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      out.push(t2);
  }
  return out;
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 set$length: function(newLength) {
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(''));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._nodeList, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 get$last: function() {
  return $.get$last(this._nodeList);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {"": ["_lib_list", "_index"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var t1 = this._lib_list;
  var t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  return $.lt(this._index, $.get$length(this._lib_list));
}
};

$$._ElementAttributeMap = {"": ["_lib_element?"],
 "super": "Object",
 containsKey$1: function(key) {
  return this._lib_element.$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._lib_element.$dom_getAttribute$1(key);
},
 operator$indexSet$2: function(key, value) {
  this._lib_element.$dom_setAttribute$2(key, $.S(value));
},
 remove$1: function(key) {
  var t1 = this._lib_element;
  var value = t1.$dom_getAttribute$1(key);
  t1.$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes);
  for (var i = attributes.length - 1; i >= 0; --i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state0, attributes) {
  for (var i = $.sub($.get$length(attributes), 1); $.geB(i, 0); i = $.sub(i, 1))
    this.remove$1($.index(attributes, i).get$name());
},
 forEach$1: function(f) {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    var item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state0, f, attributes) {
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var item = $.index(attributes, i);
    f.call$2(item.get$name(), item.get$value());
  }
},
 get$keys: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$keys$bailout(1, attributes);
  var t2 = attributes.length;
  var keys = $.ListImplementation_List(t2);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$name();
    if (i >= t2)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$keys$bailout: function(state0, attributes) {
  var keys = $.ListImplementation_List($.get$length(attributes));
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var t1 = $.index(attributes, i).get$name();
    if (i >= keys.length)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$values: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$values$bailout(1, attributes);
  var t2 = attributes.length;
  var values = $.ListImplementation_List(t2);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$value();
    if (i >= t2)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$values$bailout: function(state0, attributes) {
  var values = $.ListImplementation_List($.get$length(attributes));
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var t1 = $.index(attributes, i).get$value();
    if (i >= values.length)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$length: function() {
  return $.get$length(this._lib_element.get$$$dom_attributes());
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 is$Map: function() { return true; }
};

$$._ElementEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$copy: function() {
  return this.operator$index$1('copy');
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$touchMove: function() {
  return this.operator$index$1('touchmove');
},
 get$touchStart: function() {
  return this.operator$index$1('touchstart');
}
};

$$._EventSourceEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._EventsImpl = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $._EventListenerListImpl$(this._ptr, type);
}
};

$$._EventListenerListImpl = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._add$2(listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._remove$2(listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
},
 _add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
},
 _remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._type, listener, useCapture);
}
};

$$._FileReaderEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._FileWriterEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._FrameSetElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$resize: function() {
  return this.operator$index$1('resize');
}
};

$$._HttpRequestEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._HttpRequestUploadEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._IDBDatabaseEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._IDBOpenDBRequestEventsImpl = {"": ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._IDBRequestEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._IDBTransactionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$._IDBVersionChangeRequestEventsImpl = {"": ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._InputElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._JavaScriptAudioNodeEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._LocalWindowEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$resize: function() {
  return this.operator$index$1('resize');
},
 get$touchMove: function() {
  return this.operator$index$1('touchmove');
},
 get$touchStart: function() {
  return this.operator$index$1('touchstart');
}
};

$$._MediaElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._MediaStreamEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackListEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._MessagePortEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._ChildNodeListLazy = {"": ["_this"],
 "super": "Object",
 get$last: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._this.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._this.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._ListWrapper = {"": [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._lib_list);
},
 forEach$1: function(f) {
  return $.forEach(this._lib_list, f);
},
 map$1: function(f) {
  return $.map(this._lib_list, f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $.filter(this._lib_list, f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._lib_list);
},
 get$length: function() {
  return $.get$length(this._lib_list);
},
 operator$index$1: function(index) {
  return $.index(this._lib_list, index);
},
 operator$indexSet$2: function(index, value) {
  $.indexSet(this._lib_list, index, value);
},
 set$length: function(newLength) {
  $.set$length(this._lib_list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._lib_list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._lib_list, value);
},
 addAll$1: function(collection) {
  return $.addAll(this._lib_list, collection);
},
 sort$1: function(compare) {
  return $.sort$1(this._lib_list, compare);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._lib_list, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  return $.clear(this._lib_list);
},
 removeLast$0: function() {
  return $.removeLast(this._lib_list);
},
 get$last: function() {
  return $.get$last(this._lib_list);
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this._lib_list, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  return $.removeRange(this._lib_list, start, rangeLength);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._NodeListWrapper = {"": ["_lib_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._NodeListWrapper$($.filter(this._lib_list, f));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($.getRange(this._lib_list, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._NotificationEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$._PeerConnection00EventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._RTCDataChannelEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$._RTCPeerConnectionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._SVGElementInstanceEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$copy: function() {
  return this.operator$index$1('copy');
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$resize: function() {
  return this.operator$index$1('resize');
}
};

$$._SharedWorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_WorkerContextEventsImpl"
};

$$._SpeechRecognitionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$start: function() {
  return this.operator$index$1('start');
}
};

$$._TextTrackCueEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackListEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._WebSocketEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$._WorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._WorkerEventsImpl = {"": ["_ptr"],
 "super": "_AbstractWorkerEventsImpl"
};

$$._DOMWindowCrossFrameImpl = {"": ["_window"],
 "super": "Object",
 get$parent: function() {
  return $._DOMWindowCrossFrameImpl__createSafe(this._window.parent);
},
 close$0: function() {
  return this._window.close();
}
};

$$._FixedSizeListIterator = {"": ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": ["_array?"],
 "super": "Object",
 get$hasNext: function() {
  return $.gt($.get$length(this._array), this._pos);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  var t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId?", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  if ($.get$isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.HashMapImplementation$();
  this.managers = $.HashMapImplementation$();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id=", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  var result = null;
  try {
    result = code.call$0();
  } finally {
    var t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($._ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.get$isEmpty(this.ports) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1 = $._globalState();
  var t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.HashMapImplementation$();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.get$isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function() {
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      var t1 = $.unwrapException(exception);
      var e = t1;
      var trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 set$id: function(i) {
  throw $.$$throw($.NotImplementedException$(null));
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($._ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer = $.Completer_Completer();
  var port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, replyTo, message));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, replyTo, message));
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    var t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitWorkerSendPort$1: function(port) {
  return ['sendport', port._workerId, port._isolateId, port._receivePortId];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId = $.index(x, 1);
  var isolateId = $.index(x, 2);
  var receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    var isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return this._getAttachedInfo$1(object);
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  this._setAttachedInfo$2(object, info);
},
 reset$0: function() {
  this.tagged = $.ListImplementation_List(null);
},
 cleanup$0: function() {
  var length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  var i = 0;
  for (; i < length$; ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 _clearAttachedInfo$1: function(o) {
  o['__MessageTraverser__attached_info__'] = null;
},
 _setAttachedInfo$2: function(o, info) {
  o['__MessageTraverser__attached_info__'] = info;
},
 _getAttachedInfo$1: function(o) {
  return o['__MessageTraverser__attached_info__'];
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  var result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  var copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  var len = list.length;
  copy = $.ListImplementation_List(len);
  $.indexSet(this._visited, list, copy);
  for (var i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, list) {
  var copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  var len = $.get$length(list);
  copy = $.ListImplementation_List(len);
  $.indexSet(this._visited, list, copy);
  for (var i = 0; $.ltB(i, len); ++i) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  var t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.HashMapImplementation$();
  $.indexSet(this._visited, map, t1.copy_10);
  map.forEach$1(new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  var len = list.length;
  var result = $.ListImplementation_List(len);
  for (var i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list) {
  var len = $.get$length(list);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.ltB(i, len); ++i) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  this._deserialized = $.HashMapImplementation$();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id = $.index(x, 1);
  var dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  var len = dartList.length;
  for (var i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    var t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, dartList, id) {
  $.indexSet(this._deserialized, id, dartList);
  var len = $.get$length(dartList);
  for (var i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result = $.HashMapImplementation$();
  var id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  var keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  var values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  var len = keys.length;
  for (var i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    var key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    result.operator$indexSet$2(key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var x = env0;
      result = env1;
      keys = env2;
      break;
    case 2:
      values = env0;
      result = env1;
      keys = env2;
      break;
  }
  switch (state0) {
    case 0:
      var result = $.HashMapImplementation$();
      var id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      var keys = $.index(x, 2);
    case 1:
      state0 = 0;
      var values = $.index(x, 3);
    case 2:
      state0 = 0;
      var len = $.get$length(keys);
      for (var i = 0; $.ltB(i, len); ++i)
        result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon0(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon(callback, this), milliSeconds);
}
};

$$._Random = {"": [],
 "super": "Object",
 nextInt$1: function(max) {
  if (max < 0)
    throw $.$$throw($.ArgumentError$('negative max: ' + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
},
 nextDouble$0: function() {
  return Math.random();
}
};

$$.Camera = {"": ["matrixWorldInverse?", "projectionMatrix?", "near?", "far?"],
 "super": "Object3D",
 is$Camera: true
};

$$.PerspectiveCamera = {"": ["fov", "aspect!", "_fullWidth", "_fullHeight", "_x", "_y", "_width", "_height", "matrixWorldInverse", "projectionMatrix", "projectionMatrixInverse", "near", "far", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Camera",
 updateProjectionMatrix$0: function() {
  var t1 = this._fullWidth;
  var t2 = !(t1 == null);
  var t3 = this.projectionMatrix;
  var t4 = this.near;
  var t5 = this.fov;
  var t6 = this.far;
  if (t2) {
    t2 = this._fullHeight;
    var aspect = $.div(t1, t2);
    var t7 = $.tan($.div($.mul(t5, 3.141592653589793), 360));
    if (typeof t4 !== 'number')
      throw $.iae(t4);
    var top$ = t7 * t4;
    var bottom = -top$;
    var left = $.mul(aspect, bottom);
    var width = $.abs($.sub($.mul(aspect, top$), left));
    var height = $.abs(top$ - bottom);
    t7 = this._x;
    var t8 = $.add(left, $.div($.mul(t7, width), t1));
    var t9 = $.add(left, $.div($.mul($.add(t7, width), width), t1));
    var t10 = this._y;
    var t11 = $.div($.mul($.add(t10, height), height), t2);
    if (typeof t11 !== 'number')
      throw $.iae(t11);
    t11 = top$ - t11;
    t2 = $.div($.mul(t10, height), t2);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    t3.makeFrustum$6(t8, t9, t11, top$ - t2, t4, t6);
  } else
    t3.makePerspective$4(t5, this.aspect, t4, t6);
},
 PerspectiveCamera$4: function(fov, aspect, near, far) {
  this.updateProjectionMatrix$0();
}
};

$$.Vector3 = {"": ["x=", "y=", "z="],
 "super": "Object",
 setValues$3: function(x, y, z) {
  this.x = x;
  this.y = y;
  this.z = z;
  return this;
},
 setY$1: function(y) {
  this.y = y;
  return this;
},
 copy$1: function(v) {
  this.x = v.get$x();
  this.y = v.get$y();
  this.z = v.get$z();
  return this;
},
 add$2: function(v1, v2) {
  this.x = $.add(v1.get$x(), v2.get$x());
  this.y = $.add(v1.get$y(), v2.get$y());
  this.z = $.add(v1.get$z(), v2.get$z());
  return this;
},
 addSelf$1: function(v) {
  this.x = $.add(this.x, v.get$x());
  this.y = $.add(this.y, v.get$y());
  this.z = $.add(this.z, v.get$z());
  return this;
},
 sub$2: function(v1, v2) {
  this.x = $.sub(v1.get$x(), v2.get$x());
  this.y = $.sub(v1.get$y(), v2.get$y());
  this.z = $.sub(v1.get$z(), v2.get$z());
  return this;
},
 subSelf$1: function(v) {
  this.x = $.sub(this.x, v.get$x());
  this.y = $.sub(this.y, v.get$y());
  this.z = $.sub(this.z, v.get$z());
  return this;
},
 multiply$2: function(a, b) {
  this.x = $.mul(a.get$x(), b.get$x());
  this.y = $.mul(a.get$y(), b.get$y());
  this.z = $.mul(a.get$z(), b.get$z());
  return this;
},
 multiplyScalar$1: function(s) {
  this.x = $.mul(this.x, s);
  this.y = $.mul(this.y, s);
  this.z = $.mul(this.z, s);
  return this;
},
 divideScalar$1: function(s) {
  if (!$.eqB(s, 0)) {
    this.x = $.div(this.x, s);
    this.y = $.div(this.y, s);
    this.z = $.div(this.z, s);
  } else {
    this.x = 0;
    this.y = 0;
    this.z = 0;
  }
  return this;
},
 negate$0: function() {
  return this.multiplyScalar$1(-1);
},
 dot$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.dot$1$bailout(1, v, t1, 0, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.dot$1$bailout(2, v, t3, t1, 0);
  t3 = t1 * t3;
  t1 = this.y;
  if (typeof t1 !== 'number')
    return this.dot$1$bailout(3, v, t3, t1, 0);
  var t6 = v.get$y();
  if (typeof t6 !== 'number')
    return this.dot$1$bailout(4, v, t6, t3, t1);
  t3 += t1 * t6;
  var t8 = this.z;
  if (typeof t8 !== 'number')
    return this.dot$1$bailout(5, v, t3, t8, 0);
  var t10 = v.get$z();
  if (typeof t10 !== 'number')
    return this.dot$1$bailout(6, t3, t10, t8, 0);
  return t3 + t8 * t10;
},
 dot$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 3:
      v = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 4:
      v = env0;
      t6 = env1;
      t3 = env2;
      t1 = env3;
      break;
    case 5:
      v = env0;
      t3 = env1;
      t8 = env2;
      break;
    case 6:
      t3 = env0;
      t10 = env1;
      t8 = env2;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = this.x;
    case 1:
      state0 = 0;
      var t3 = v.get$x();
    case 2:
      state0 = 0;
      t3 = $.mul(t1, t3);
      t1 = this.y;
    case 3:
      state0 = 0;
      var t6 = v.get$y();
    case 4:
      state0 = 0;
      t3 = $.add(t3, $.mul(t1, t6));
      var t8 = this.z;
    case 5:
      state0 = 0;
      var t10 = v.get$z();
    case 6:
      state0 = 0;
      return $.add(t3, $.mul(t8, t10));
  }
},
 lengthSq$0: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  t1 = $.add(t1, $.mul(t2, t2));
  var t3 = this.z;
  return $.add(t1, $.mul(t3, t3));
},
 length$0: function() {
  return $.sqrt(this.lengthSq$0());
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  return this.divideScalar$1(this.length$0());
},
 cross$2: function(a, b) {
  var t1 = a.get$y();
  if (typeof t1 !== 'number')
    return this.cross$2$bailout(1, a, b, t1, 0, 0);
  var t3 = b.get$z();
  if (typeof t3 !== 'number')
    return this.cross$2$bailout(2, a, b, t1, t3, 0);
  t3 = t1 * t3;
  t1 = a.get$z();
  if (typeof t1 !== 'number')
    return this.cross$2$bailout(3, a, b, t1, t3, 0);
  var t6 = b.get$y();
  if (typeof t6 !== 'number')
    return this.cross$2$bailout(4, a, b, t6, t1, t3);
  this.x = t3 - t1 * t6;
  var t8 = a.get$z();
  if (typeof t8 !== 'number')
    return this.cross$2$bailout(5, a, b, t8, 0, 0);
  var t10 = b.get$x();
  if (typeof t10 !== 'number')
    return this.cross$2$bailout(6, a, b, t10, t8, 0);
  t10 = t8 * t10;
  t8 = a.get$x();
  if (typeof t8 !== 'number')
    return this.cross$2$bailout(7, a, b, t10, t8, 0);
  var t13 = b.get$z();
  if (typeof t13 !== 'number')
    return this.cross$2$bailout(8, a, b, t10, t8, t13);
  this.y = t10 - t8 * t13;
  var t15 = a.get$x();
  if (typeof t15 !== 'number')
    return this.cross$2$bailout(9, a, b, t15, 0, 0);
  var t17 = b.get$y();
  if (typeof t17 !== 'number')
    return this.cross$2$bailout(10, a, b, t15, t17, 0);
  t17 = t15 * t17;
  t15 = a.get$y();
  if (typeof t15 !== 'number')
    return this.cross$2$bailout(11, b, t17, t15, 0, 0);
  var t20 = b.get$x();
  if (typeof t20 !== 'number')
    return this.cross$2$bailout(12, t17, t15, t20, 0, 0);
  this.z = t17 - t15 * t20;
  return this;
},
 cross$2$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      var a = env0;
      var b = env1;
      t1 = env2;
      break;
    case 2:
      a = env0;
      b = env1;
      t1 = env2;
      t3 = env3;
      break;
    case 3:
      a = env0;
      b = env1;
      t1 = env2;
      t3 = env3;
      break;
    case 4:
      a = env0;
      b = env1;
      t6 = env2;
      t1 = env3;
      t3 = env4;
      break;
    case 5:
      a = env0;
      b = env1;
      t8 = env2;
      break;
    case 6:
      a = env0;
      b = env1;
      t10 = env2;
      t8 = env3;
      break;
    case 7:
      a = env0;
      b = env1;
      t10 = env2;
      t8 = env3;
      break;
    case 8:
      a = env0;
      b = env1;
      t10 = env2;
      t8 = env3;
      t13 = env4;
      break;
    case 9:
      a = env0;
      b = env1;
      t15 = env2;
      break;
    case 10:
      a = env0;
      b = env1;
      t15 = env2;
      t17 = env3;
      break;
    case 11:
      b = env0;
      t17 = env1;
      t15 = env2;
      break;
    case 12:
      t17 = env0;
      t15 = env1;
      t20 = env2;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = a.get$y();
    case 1:
      state0 = 0;
      var t3 = b.get$z();
    case 2:
      state0 = 0;
      t3 = $.mul(t1, t3);
      t1 = a.get$z();
    case 3:
      state0 = 0;
      var t6 = b.get$y();
    case 4:
      state0 = 0;
      this.x = $.sub(t3, $.mul(t1, t6));
      var t8 = a.get$z();
    case 5:
      state0 = 0;
      var t10 = b.get$x();
    case 6:
      state0 = 0;
      t10 = $.mul(t8, t10);
      t8 = a.get$x();
    case 7:
      state0 = 0;
      var t13 = b.get$z();
    case 8:
      state0 = 0;
      this.y = $.sub(t10, $.mul(t8, t13));
      var t15 = a.get$x();
    case 9:
      state0 = 0;
      var t17 = b.get$y();
    case 10:
      state0 = 0;
      t17 = $.mul(t15, t17);
      t15 = a.get$y();
    case 11:
      state0 = 0;
      var t20 = b.get$x();
    case 12:
      state0 = 0;
      this.z = $.sub(t17, $.mul(t15, t20));
      return this;
  }
},
 crossSelf$1: function(v) {
  var x2 = this.x;
  var y2 = this.y;
  var z2 = this.z;
  this.x = $.sub($.mul(y2, v.get$z()), $.mul(z2, v.get$y()));
  this.y = $.sub($.mul(z2, v.get$x()), $.mul(x2, v.get$z()));
  this.z = $.sub($.mul(x2, v.get$y()), $.mul(y2, v.get$x()));
  return this;
},
 distanceTo$1: function(v) {
  return $.sqrt(this.distanceToSquared$1(v));
},
 distanceToSquared$1: function(v) {
  return $.Vector3$(0, 0, 0).sub$2(this, v).lengthSq$0();
},
 setEulerFromRotationMatrix$2: function(m, order) {
  var clamp = new $.Vector3_setEulerFromRotationMatrix_anon();
  var te = m.get$elements();
  var m11 = $.index(te, 0);
  var m12 = $.index(te, 4);
  var m13 = $.index(te, 8);
  var m21 = $.index(te, 1);
  var m22 = $.index(te, 5);
  var m23 = $.index(te, 9);
  var m31 = $.index(te, 2);
  var m32 = $.index(te, 6);
  var m33 = $.index(te, 10);
  if ($.eqB(order, 'XYZ')) {
    this.y = $.asin(clamp.call$1(m13));
    if ($.ltB($.abs(m13), 0.99999)) {
      this.x = $.atan2($.neg(m23), m33);
      this.z = $.atan2($.neg(m12), m11);
    } else {
      this.x = $.atan2(m21, m22);
      this.z = 0;
    }
  } else if ($.eqB(order, 'YXZ')) {
    this.x = $.asin($.neg(clamp.call$1(m23)));
    if ($.ltB($.abs(m23), 0.99999)) {
      this.y = $.atan2(m13, m33);
      this.z = $.atan2(m21, m22);
    } else {
      this.y = $.atan2($.neg(m31), m11);
      this.z = 0;
    }
  } else if ($.eqB(order, 'ZXY')) {
    this.x = $.asin(clamp.call$1(m32));
    if ($.ltB($.abs(m32), 0.99999)) {
      this.y = $.atan2($.neg(m31), m33);
      this.z = $.atan2($.neg(m12), m22);
    } else {
      this.y = 0;
      this.z = $.atan2(m13, m11);
    }
  } else if ($.eqB(order, 'ZYX')) {
    this.y = $.asin($.neg(clamp.call$1(m31)));
    if ($.ltB($.abs(m31), 0.99999)) {
      this.x = $.atan2(m32, m33);
      this.z = $.atan2(m21, m11);
    } else {
      this.x = 0;
      this.z = $.atan2($.neg(m12), m22);
    }
  } else if ($.eqB(order, 'YZX')) {
    this.z = $.asin(clamp.call$1(m21));
    if ($.ltB($.abs(m21), 0.99999)) {
      this.x = $.atan2($.neg(m23), m22);
      this.y = $.atan2($.neg(m31), m11);
    } else {
      this.x = 0;
      this.y = $.atan2(m31, m33);
    }
  } else if ($.eqB(order, 'XZY')) {
    this.z = $.asin($.neg(clamp.call$1(m12)));
    if ($.ltB($.abs(m12), 0.99999)) {
      this.x = $.atan2(m32, m22);
      this.y = $.atan2(m13, m11);
    } else {
      this.x = $.atan2($.neg(m13), m33);
      this.y = 0;
    }
  }
  return this;
},
 equals$1: function(v) {
  if (v == null)
    return false;
  return $.eqB(v.get$x(), this.x) && $.eqB(v.get$y(), this.y) && $.eqB(v.get$z(), this.z);
},
 isZero$0: function() {
  return $.lt(this.lengthSq$0(), 0.0001);
},
 clone$0: function() {
  return $.Vector3$(this.x, this.y, this.z);
},
 toString$0: function() {
  return '(' + $.S(this.x) + ', ' + $.S(this.y) + ', ' + $.S(this.z) + ')';
},
 is$Vector3: true
};

$$.Matrix3 = {"": ["elements?"],
 "super": "Object",
 getInverse$1: function(matrix) {
  var me = matrix.get$elements();
  var a11 = $.sub($.mul($.index(me, 10), $.index(me, 5)), $.mul($.index(me, 6), $.index(me, 9)));
  var a21 = $.add($.mul($.neg($.index(me, 10)), $.index(me, 1)), $.mul($.index(me, 2), $.index(me, 9)));
  var a31 = $.sub($.mul($.index(me, 6), $.index(me, 1)), $.mul($.index(me, 2), $.index(me, 5)));
  var a12 = $.add($.mul($.neg($.index(me, 10)), $.index(me, 4)), $.mul($.index(me, 6), $.index(me, 8)));
  var a22 = $.sub($.mul($.index(me, 10), $.index(me, 0)), $.mul($.index(me, 2), $.index(me, 8)));
  var a32 = $.add($.mul($.neg($.index(me, 6)), $.index(me, 0)), $.mul($.index(me, 2), $.index(me, 4)));
  var a13 = $.sub($.mul($.index(me, 9), $.index(me, 4)), $.mul($.index(me, 5), $.index(me, 8)));
  var a23 = $.add($.mul($.neg($.index(me, 9)), $.index(me, 0)), $.mul($.index(me, 1), $.index(me, 8)));
  var a33 = $.sub($.mul($.index(me, 5), $.index(me, 0)), $.mul($.index(me, 1), $.index(me, 4)));
  var det = $.add($.add($.mul($.index(me, 0), a11), $.mul($.index(me, 1), a12)), $.mul($.index(me, 2), a13));
  if ($.eqB(det, 0))
    $.print('Matrix3.getInverse(): determinant == 0');
  if (typeof det !== 'number')
    throw $.iae(det);
  var idet = 1 / det;
  var m = this.elements;
  if (typeof a11 !== 'number')
    throw $.iae(a11);
  $.indexSet(m, 0, idet * a11);
  if (typeof a21 !== 'number')
    throw $.iae(a21);
  $.indexSet(m, 1, idet * a21);
  if (typeof a31 !== 'number')
    throw $.iae(a31);
  $.indexSet(m, 2, idet * a31);
  if (typeof a12 !== 'number')
    throw $.iae(a12);
  $.indexSet(m, 3, idet * a12);
  if (typeof a22 !== 'number')
    throw $.iae(a22);
  $.indexSet(m, 4, idet * a22);
  if (typeof a32 !== 'number')
    throw $.iae(a32);
  $.indexSet(m, 5, idet * a32);
  if (typeof a13 !== 'number')
    throw $.iae(a13);
  $.indexSet(m, 6, idet * a13);
  if (typeof a23 !== 'number')
    throw $.iae(a23);
  $.indexSet(m, 7, idet * a23);
  if (typeof a33 !== 'number')
    throw $.iae(a33);
  $.indexSet(m, 8, idet * a33);
  return this;
},
 transpose$0: function() {
  var m = this.elements;
  var tmp = $.index(m, 1);
  $.indexSet(m, 1, $.index(m, 3));
  $.indexSet(m, 3, tmp);
  tmp = $.index(m, 2);
  $.indexSet(m, 2, $.index(m, 6));
  $.indexSet(m, 6, tmp);
  tmp = $.index(m, 5);
  $.indexSet(m, 5, $.index(m, 7));
  $.indexSet(m, 7, tmp);
  return this;
}
};

$$.Matrix4 = {"": ["elements?"],
 "super": "Object",
 setValues$16: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  var te = this.elements;
  $.indexSet(te, 0, n11);
  $.indexSet(te, 4, n12);
  $.indexSet(te, 8, n13);
  $.indexSet(te, 12, n14);
  $.indexSet(te, 1, n21);
  $.indexSet(te, 5, n22);
  $.indexSet(te, 9, n23);
  $.indexSet(te, 13, n24);
  $.indexSet(te, 2, n31);
  $.indexSet(te, 6, n32);
  $.indexSet(te, 10, n33);
  $.indexSet(te, 14, n34);
  $.indexSet(te, 3, n41);
  $.indexSet(te, 7, n42);
  $.indexSet(te, 11, n43);
  $.indexSet(te, 15, n44);
  return this;
},
 copy$1: function(m) {
  var me = m.get$elements();
  this.setValues$16($.index(me, 0), $.index(me, 4), $.index(me, 8), $.index(me, 12), $.index(me, 1), $.index(me, 5), $.index(me, 9), $.index(me, 13), $.index(me, 2), $.index(me, 6), $.index(me, 10), $.index(me, 14), $.index(me, 3), $.index(me, 7), $.index(me, 11), $.index(me, 15));
  return this;
},
 multiply$2: function(a, b) {
  var ae = a.get$elements();
  var be = b.get$elements();
  var te = this.elements;
  var a11 = $.index(ae, 0);
  var a12 = $.index(ae, 4);
  var a13 = $.index(ae, 8);
  var a14 = $.index(ae, 12);
  var a21 = $.index(ae, 1);
  var a22 = $.index(ae, 5);
  var a23 = $.index(ae, 9);
  var a24 = $.index(ae, 13);
  var a31 = $.index(ae, 2);
  var a32 = $.index(ae, 6);
  var a33 = $.index(ae, 10);
  var a34 = $.index(ae, 14);
  var a41 = $.index(ae, 3);
  var a42 = $.index(ae, 7);
  var a43 = $.index(ae, 11);
  var a44 = $.index(ae, 15);
  var b11 = $.index(be, 0);
  var b12 = $.index(be, 4);
  var b13 = $.index(be, 8);
  var b14 = $.index(be, 12);
  var b21 = $.index(be, 1);
  var b22 = $.index(be, 5);
  var b23 = $.index(be, 9);
  var b24 = $.index(be, 13);
  var b31 = $.index(be, 2);
  var b32 = $.index(be, 6);
  var b33 = $.index(be, 10);
  var b34 = $.index(be, 14);
  var b41 = $.index(be, 3);
  var b42 = $.index(be, 7);
  var b43 = $.index(be, 11);
  var b44 = $.index(be, 15);
  $.indexSet(te, 0, $.add($.add($.add($.mul(a11, b11), $.mul(a12, b21)), $.mul(a13, b31)), $.mul(a14, b41)));
  $.indexSet(te, 4, $.add($.add($.add($.mul(a11, b12), $.mul(a12, b22)), $.mul(a13, b32)), $.mul(a14, b42)));
  $.indexSet(te, 8, $.add($.add($.add($.mul(a11, b13), $.mul(a12, b23)), $.mul(a13, b33)), $.mul(a14, b43)));
  $.indexSet(te, 12, $.add($.add($.add($.mul(a11, b14), $.mul(a12, b24)), $.mul(a13, b34)), $.mul(a14, b44)));
  $.indexSet(te, 1, $.add($.add($.add($.mul(a21, b11), $.mul(a22, b21)), $.mul(a23, b31)), $.mul(a24, b41)));
  $.indexSet(te, 5, $.add($.add($.add($.mul(a21, b12), $.mul(a22, b22)), $.mul(a23, b32)), $.mul(a24, b42)));
  $.indexSet(te, 9, $.add($.add($.add($.mul(a21, b13), $.mul(a22, b23)), $.mul(a23, b33)), $.mul(a24, b43)));
  $.indexSet(te, 13, $.add($.add($.add($.mul(a21, b14), $.mul(a22, b24)), $.mul(a23, b34)), $.mul(a24, b44)));
  $.indexSet(te, 2, $.add($.add($.add($.mul(a31, b11), $.mul(a32, b21)), $.mul(a33, b31)), $.mul(a34, b41)));
  $.indexSet(te, 6, $.add($.add($.add($.mul(a31, b12), $.mul(a32, b22)), $.mul(a33, b32)), $.mul(a34, b42)));
  $.indexSet(te, 10, $.add($.add($.add($.mul(a31, b13), $.mul(a32, b23)), $.mul(a33, b33)), $.mul(a34, b43)));
  $.indexSet(te, 14, $.add($.add($.add($.mul(a31, b14), $.mul(a32, b24)), $.mul(a33, b34)), $.mul(a34, b44)));
  $.indexSet(te, 3, $.add($.add($.add($.mul(a41, b11), $.mul(a42, b21)), $.mul(a43, b31)), $.mul(a44, b41)));
  $.indexSet(te, 7, $.add($.add($.add($.mul(a41, b12), $.mul(a42, b22)), $.mul(a43, b32)), $.mul(a44, b42)));
  $.indexSet(te, 11, $.add($.add($.add($.mul(a41, b13), $.mul(a42, b23)), $.mul(a43, b33)), $.mul(a44, b43)));
  $.indexSet(te, 15, $.add($.add($.add($.mul(a41, b14), $.mul(a42, b24)), $.mul(a43, b34)), $.mul(a44, b44)));
  return this;
},
 multiplySelf$1: function(m) {
  return this.multiply$2(this, m);
},
 multiplyScalar$1: function(s) {
  var te = this.elements;
  $.indexSet(te, 0, $.mul($.index(te, 0), s));
  $.indexSet(te, 4, $.mul($.index(te, 4), s));
  $.indexSet(te, 8, $.mul($.index(te, 8), s));
  $.indexSet(te, 12, $.mul($.index(te, 12), s));
  $.indexSet(te, 1, $.mul($.index(te, 1), s));
  $.indexSet(te, 5, $.mul($.index(te, 5), s));
  $.indexSet(te, 9, $.mul($.index(te, 9), s));
  $.indexSet(te, 13, $.mul($.index(te, 13), s));
  $.indexSet(te, 2, $.mul($.index(te, 2), s));
  $.indexSet(te, 6, $.mul($.index(te, 6), s));
  $.indexSet(te, 10, $.mul($.index(te, 10), s));
  $.indexSet(te, 14, $.mul($.index(te, 14), s));
  $.indexSet(te, 3, $.mul($.index(te, 3), s));
  $.indexSet(te, 7, $.mul($.index(te, 7), s));
  $.indexSet(te, 11, $.mul($.index(te, 11), s));
  $.indexSet(te, 15, $.mul($.index(te, 15), s));
  return this;
},
 multiplyVector3$1: function(v) {
  var te = this.elements;
  if (typeof te !== 'string' && (typeof te !== 'object' || te === null || te.constructor !== Array && !te.is$JavaScriptIndexingBehavior()))
    return this.multiplyVector3$1$bailout(1, v, te, 0, 0, 0, 0, 0, 0);
  var vx = v.get$x();
  if (typeof vx !== 'number')
    return this.multiplyVector3$1$bailout(2, v, te, vx, 0, 0, 0, 0, 0);
  var vy = v.get$y();
  if (typeof vy !== 'number')
    return this.multiplyVector3$1$bailout(3, v, te, vy, vx, 0, 0, 0, 0);
  var vz = v.get$z();
  if (typeof vz !== 'number')
    return this.multiplyVector3$1$bailout(4, v, te, vy, vz, vx, 0, 0, 0);
  var t5 = te.length;
  if (3 >= t5)
    throw $.ioore(3);
  var t6 = te[3];
  if (typeof t6 !== 'number')
    return this.multiplyVector3$1$bailout(5, v, te, vy, vz, vx, t6, 0, 0);
  t6 *= vx;
  if (7 >= t5)
    throw $.ioore(7);
  var t8 = te[7];
  if (typeof t8 !== 'number')
    return this.multiplyVector3$1$bailout(6, v, te, vy, vz, vx, t6, t8, 0);
  t6 += t8 * vy;
  if (11 >= t5)
    throw $.ioore(11);
  var t10 = te[11];
  if (typeof t10 !== 'number')
    return this.multiplyVector3$1$bailout(7, v, t6, te, vy, vz, vx, t10, 0);
  t6 += t10 * vz;
  if (15 >= t5)
    throw $.ioore(15);
  var t12 = te[15];
  if (typeof t12 !== 'number')
    return this.multiplyVector3$1$bailout(8, v, te, vy, vz, vx, t6, t12, 0);
  var d = 1 / (t6 + t12);
  var t14 = te[0];
  if (typeof t14 !== 'number')
    return this.multiplyVector3$1$bailout(9, v, d, te, vy, vz, vx, t14, 0);
  t14 *= vx;
  var t16 = te[4];
  if (typeof t16 !== 'number')
    return this.multiplyVector3$1$bailout(10, v, d, te, vy, vz, vx, t14, t16);
  t14 += t16 * vy;
  var t18 = te[8];
  if (typeof t18 !== 'number')
    return this.multiplyVector3$1$bailout(11, v, d, t18, te, vy, vz, vx, t14);
  t14 += t18 * vz;
  var t20 = te[12];
  if (typeof t20 !== 'number')
    return this.multiplyVector3$1$bailout(12, v, d, te, vy, vz, vx, t20, t14);
  v.set$x((t14 + t20) * d);
  var t22 = te.length;
  if (1 >= t22)
    throw $.ioore(1);
  var t23 = te[1];
  if (typeof t23 !== 'number')
    return this.multiplyVector3$1$bailout(13, v, d, te, vy, vz, vx, t23, 0);
  t23 *= vx;
  if (5 >= t22)
    throw $.ioore(5);
  var t25 = te[5];
  if (typeof t25 !== 'number')
    return this.multiplyVector3$1$bailout(14, v, d, t23, te, vy, vz, vx, t25);
  t23 += t25 * vy;
  if (9 >= t22)
    throw $.ioore(9);
  var t27 = te[9];
  if (typeof t27 !== 'number')
    return this.multiplyVector3$1$bailout(15, v, d, te, vy, vz, vx, t23, t27);
  t23 += t27 * vz;
  if (13 >= t22)
    throw $.ioore(13);
  var t29 = te[13];
  if (typeof t29 !== 'number')
    return this.multiplyVector3$1$bailout(16, v, d, t29, te, vy, vz, vx, t23);
  v.set$y((t23 + t29) * d);
  var t31 = te.length;
  if (2 >= t31)
    throw $.ioore(2);
  var t32 = te[2];
  if (typeof t32 !== 'number')
    return this.multiplyVector3$1$bailout(17, v, d, te, vy, vz, vx, t32, 0);
  t32 *= vx;
  if (6 >= t31)
    throw $.ioore(6);
  var t34 = te[6];
  if (typeof t34 !== 'number')
    return this.multiplyVector3$1$bailout(18, v, d, te, vy, vz, t32, t34, 0);
  t32 += t34 * vy;
  if (10 >= t31)
    throw $.ioore(10);
  var t36 = te[10];
  if (typeof t36 !== 'number')
    return this.multiplyVector3$1$bailout(19, v, d, t32, te, t36, vz, 0, 0);
  t32 += t36 * vz;
  if (14 >= t31)
    throw $.ioore(14);
  var t38 = te[14];
  if (typeof t38 !== 'number')
    return this.multiplyVector3$1$bailout(20, v, d, t32, t38, 0, 0, 0, 0);
  v.set$z((t32 + t38) * d);
  return v;
},
 multiplyVector3$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      var v = env0;
      te = env1;
      break;
    case 2:
      v = env0;
      te = env1;
      vx = env2;
      break;
    case 3:
      v = env0;
      te = env1;
      vy = env2;
      vx = env3;
      break;
    case 4:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      break;
    case 5:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      t5 = env5;
      break;
    case 6:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      t5 = env5;
      t7 = env6;
      break;
    case 7:
      v = env0;
      t5 = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t9 = env6;
      break;
    case 8:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      t5 = env5;
      t11 = env6;
      break;
    case 9:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t11 = env6;
      break;
    case 10:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t11 = env6;
      t13 = env7;
      break;
    case 11:
      v = env0;
      d = env1;
      t15 = env2;
      te = env3;
      vy = env4;
      vz = env5;
      vx = env6;
      t11 = env7;
      break;
    case 12:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t17 = env6;
      t11 = env7;
      break;
    case 13:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t19 = env6;
      break;
    case 14:
      v = env0;
      d = env1;
      t19 = env2;
      te = env3;
      vy = env4;
      vz = env5;
      vx = env6;
      t21 = env7;
      break;
    case 15:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t19 = env6;
      t23 = env7;
      break;
    case 16:
      v = env0;
      d = env1;
      t25 = env2;
      te = env3;
      vy = env4;
      vz = env5;
      vx = env6;
      t19 = env7;
      break;
    case 17:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t27 = env6;
      break;
    case 18:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      t27 = env5;
      t29 = env6;
      break;
    case 19:
      v = env0;
      d = env1;
      t27 = env2;
      te = env3;
      t31 = env4;
      vz = env5;
      break;
    case 20:
      v = env0;
      d = env1;
      t27 = env2;
      t33 = env3;
      break;
  }
  switch (state0) {
    case 0:
      var te = this.elements;
    case 1:
      state0 = 0;
      var vx = v.get$x();
    case 2:
      state0 = 0;
      var vy = v.get$y();
    case 3:
      state0 = 0;
      var vz = v.get$z();
    case 4:
      state0 = 0;
      var t5 = $.index(te, 3);
    case 5:
      state0 = 0;
      t5 = $.mul(t5, vx);
      var t7 = $.index(te, 7);
    case 6:
      state0 = 0;
      t5 = $.add(t5, $.mul(t7, vy));
      var t9 = $.index(te, 11);
    case 7:
      state0 = 0;
      t5 = $.add(t5, $.mul(t9, vz));
      var t11 = $.index(te, 15);
    case 8:
      state0 = 0;
      t11 = $.add(t5, t11);
      if (typeof t11 !== 'number')
        throw $.iae(t11);
      var d = 1 / t11;
      t11 = $.index(te, 0);
    case 9:
      state0 = 0;
      t11 = $.mul(t11, vx);
      var t13 = $.index(te, 4);
    case 10:
      state0 = 0;
      t11 = $.add(t11, $.mul(t13, vy));
      var t15 = $.index(te, 8);
    case 11:
      state0 = 0;
      t11 = $.add(t11, $.mul(t15, vz));
      var t17 = $.index(te, 12);
    case 12:
      state0 = 0;
      v.set$x($.mul($.add(t11, t17), d));
      var t19 = $.index(te, 1);
    case 13:
      state0 = 0;
      t19 = $.mul(t19, vx);
      var t21 = $.index(te, 5);
    case 14:
      state0 = 0;
      t19 = $.add(t19, $.mul(t21, vy));
      var t23 = $.index(te, 9);
    case 15:
      state0 = 0;
      t19 = $.add(t19, $.mul(t23, vz));
      var t25 = $.index(te, 13);
    case 16:
      state0 = 0;
      v.set$y($.mul($.add(t19, t25), d));
      var t27 = $.index(te, 2);
    case 17:
      state0 = 0;
      t27 = $.mul(t27, vx);
      var t29 = $.index(te, 6);
    case 18:
      state0 = 0;
      t27 = $.add(t27, $.mul(t29, vy));
      var t31 = $.index(te, 10);
    case 19:
      state0 = 0;
      t27 = $.add(t27, $.mul(t31, vz));
      var t33 = $.index(te, 14);
    case 20:
      state0 = 0;
      v.set$z($.mul($.add(t27, t33), d));
      return v;
  }
},
 determinant$0: function() {
  var te = this.elements;
  var n11 = $.index(te, 0);
  var n12 = $.index(te, 4);
  var n13 = $.index(te, 8);
  var n14 = $.index(te, 12);
  var n21 = $.index(te, 1);
  var n22 = $.index(te, 5);
  var n23 = $.index(te, 9);
  var n24 = $.index(te, 13);
  var n31 = $.index(te, 2);
  var n32 = $.index(te, 6);
  var n33 = $.index(te, 10);
  var n34 = $.index(te, 14);
  var n41 = $.index(te, 3);
  var n42 = $.index(te, 7);
  var n43 = $.index(te, 11);
  var n44 = $.index(te, 15);
  return $.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.mul($.mul($.mul(n14, n23), n32), n41), $.mul($.mul($.mul(n13, n24), n32), n41)), $.mul($.mul($.mul(n14, n22), n33), n41)), $.mul($.mul($.mul(n12, n24), n33), n41)), $.mul($.mul($.mul(n13, n22), n34), n41)), $.mul($.mul($.mul(n12, n23), n34), n41)), $.mul($.mul($.mul(n14, n23), n31), n42)), $.mul($.mul($.mul(n13, n24), n31), n42)), $.mul($.mul($.mul(n14, n21), n33), n42)), $.mul($.mul($.mul(n11, n24), n33), n42)), $.mul($.mul($.mul(n13, n21), n34), n42)), $.mul($.mul($.mul(n11, n23), n34), n42)), $.mul($.mul($.mul(n14, n22), n31), n43)), $.mul($.mul($.mul(n12, n24), n31), n43)), $.mul($.mul($.mul(n14, n21), n32), n43)), $.mul($.mul($.mul(n11, n24), n32), n43)), $.mul($.mul($.mul(n12, n21), n34), n43)), $.mul($.mul($.mul(n11, n22), n34), n43)), $.mul($.mul($.mul(n13, n22), n31), n44)), $.mul($.mul($.mul(n12, n23), n31), n44)), $.mul($.mul($.mul(n13, n21), n32), n44)), $.mul($.mul($.mul(n11, n23), n32), n44)), $.mul($.mul($.mul(n12, n21), n33), n44)), $.mul($.mul($.mul(n11, n22), n33), n44));
},
 transpose$0: function() {
  var te = this.elements;
  var tmp = $.index(te, 1);
  $.indexSet(te, 1, $.index(te, 4));
  $.indexSet(te, 4, tmp);
  tmp = $.index(te, 2);
  $.indexSet(te, 2, $.index(te, 8));
  $.indexSet(te, 8, tmp);
  tmp = $.index(te, 6);
  $.indexSet(te, 6, $.index(te, 9));
  $.indexSet(te, 9, tmp);
  tmp = $.index(te, 3);
  $.indexSet(te, 3, $.index(te, 12));
  $.indexSet(te, 12, tmp);
  tmp = $.index(te, 7);
  $.indexSet(te, 7, $.index(te, 13));
  $.indexSet(te, 13, tmp);
  tmp = $.index(te, 11);
  $.indexSet(te, 11, $.index(te, 14));
  $.indexSet(te, 14, tmp);
  return this;
},
 flattenToArray$1: function(flat) {
  if (typeof flat !== 'object' || flat === null || (flat.constructor !== Array || !!flat.immutable$list) && !flat.is$JavaScriptIndexingBehavior())
    return this.flattenToArray$1$bailout(1, flat, 0);
  var te = this.elements;
  if (typeof te !== 'string' && (typeof te !== 'object' || te === null || te.constructor !== Array && !te.is$JavaScriptIndexingBehavior()))
    return this.flattenToArray$1$bailout(2, flat, te);
  var t2 = te.length;
  if (0 >= t2)
    throw $.ioore(0);
  var t3 = te[0];
  var t4 = flat.length;
  if (0 >= t4)
    throw $.ioore(0);
  flat[0] = t3;
  if (1 >= t2)
    throw $.ioore(1);
  t3 = te[1];
  if (1 >= t4)
    throw $.ioore(1);
  flat[1] = t3;
  if (2 >= t2)
    throw $.ioore(2);
  t3 = te[2];
  if (2 >= t4)
    throw $.ioore(2);
  flat[2] = t3;
  if (3 >= t2)
    throw $.ioore(3);
  t3 = te[3];
  if (3 >= t4)
    throw $.ioore(3);
  flat[3] = t3;
  if (4 >= t2)
    throw $.ioore(4);
  t3 = te[4];
  if (4 >= t4)
    throw $.ioore(4);
  flat[4] = t3;
  if (5 >= t2)
    throw $.ioore(5);
  t3 = te[5];
  if (5 >= t4)
    throw $.ioore(5);
  flat[5] = t3;
  if (6 >= t2)
    throw $.ioore(6);
  t3 = te[6];
  if (6 >= t4)
    throw $.ioore(6);
  flat[6] = t3;
  if (7 >= t2)
    throw $.ioore(7);
  t3 = te[7];
  if (7 >= t4)
    throw $.ioore(7);
  flat[7] = t3;
  if (8 >= t2)
    throw $.ioore(8);
  t3 = te[8];
  if (8 >= t4)
    throw $.ioore(8);
  flat[8] = t3;
  if (9 >= t2)
    throw $.ioore(9);
  t3 = te[9];
  if (9 >= t4)
    throw $.ioore(9);
  flat[9] = t3;
  if (10 >= t2)
    throw $.ioore(10);
  t3 = te[10];
  if (10 >= t4)
    throw $.ioore(10);
  flat[10] = t3;
  if (11 >= t2)
    throw $.ioore(11);
  t3 = te[11];
  if (11 >= t4)
    throw $.ioore(11);
  flat[11] = t3;
  if (12 >= t2)
    throw $.ioore(12);
  t3 = te[12];
  if (12 >= t4)
    throw $.ioore(12);
  flat[12] = t3;
  if (13 >= t2)
    throw $.ioore(13);
  t3 = te[13];
  if (13 >= t4)
    throw $.ioore(13);
  flat[13] = t3;
  if (14 >= t2)
    throw $.ioore(14);
  t3 = te[14];
  if (14 >= t4)
    throw $.ioore(14);
  flat[14] = t3;
  if (15 >= t2)
    throw $.ioore(15);
  t3 = te[15];
  if (15 >= t4)
    throw $.ioore(15);
  flat[15] = t3;
  return flat;
},
 flattenToArray$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      var flat = env0;
      break;
    case 2:
      flat = env0;
      te = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var te = this.elements;
    case 2:
      state0 = 0;
      $.indexSet(flat, 0, $.index(te, 0));
      $.indexSet(flat, 1, $.index(te, 1));
      $.indexSet(flat, 2, $.index(te, 2));
      $.indexSet(flat, 3, $.index(te, 3));
      $.indexSet(flat, 4, $.index(te, 4));
      $.indexSet(flat, 5, $.index(te, 5));
      $.indexSet(flat, 6, $.index(te, 6));
      $.indexSet(flat, 7, $.index(te, 7));
      $.indexSet(flat, 8, $.index(te, 8));
      $.indexSet(flat, 9, $.index(te, 9));
      $.indexSet(flat, 10, $.index(te, 10));
      $.indexSet(flat, 11, $.index(te, 11));
      $.indexSet(flat, 12, $.index(te, 12));
      $.indexSet(flat, 13, $.index(te, 13));
      $.indexSet(flat, 14, $.index(te, 14));
      $.indexSet(flat, 15, $.index(te, 15));
      return flat;
  }
},
 flattenToArrayOffset$2: function(flat, offset) {
  if (typeof flat !== 'object' || flat === null || (flat.constructor !== Array || !!flat.immutable$list) && !flat.is$JavaScriptIndexingBehavior())
    return this.flattenToArrayOffset$2$bailout(1, flat, offset, 0);
  var te = this.elements;
  if (typeof te !== 'string' && (typeof te !== 'object' || te === null || te.constructor !== Array && !te.is$JavaScriptIndexingBehavior()))
    return this.flattenToArrayOffset$2$bailout(2, flat, offset, te);
  var t2 = te.length;
  if (0 >= t2)
    throw $.ioore(0);
  var t3 = te[0];
  var t4 = flat.length;
  if (offset < 0 || offset >= t4)
    throw $.ioore(offset);
  flat[offset] = t3;
  t3 = offset + 1;
  if (1 >= t2)
    throw $.ioore(1);
  var t5 = te[1];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  t5 = offset + 2;
  if (2 >= t2)
    throw $.ioore(2);
  t3 = te[2];
  if (t5 >= t4)
    throw $.ioore(t5);
  flat[t5] = t3;
  t3 = offset + 3;
  if (3 >= t2)
    throw $.ioore(3);
  t5 = te[3];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  t5 = offset + 4;
  if (4 >= t2)
    throw $.ioore(4);
  t3 = te[4];
  if (t5 >= t4)
    throw $.ioore(t5);
  flat[t5] = t3;
  t3 = offset + 5;
  if (5 >= t2)
    throw $.ioore(5);
  t5 = te[5];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  t5 = offset + 6;
  if (6 >= t2)
    throw $.ioore(6);
  t3 = te[6];
  if (t5 >= t4)
    throw $.ioore(t5);
  flat[t5] = t3;
  t3 = offset + 7;
  if (7 >= t2)
    throw $.ioore(7);
  t5 = te[7];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  t5 = offset + 8;
  if (8 >= t2)
    throw $.ioore(8);
  t3 = te[8];
  if (t5 >= t4)
    throw $.ioore(t5);
  flat[t5] = t3;
  t3 = offset + 9;
  if (9 >= t2)
    throw $.ioore(9);
  t5 = te[9];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  t5 = offset + 10;
  if (10 >= t2)
    throw $.ioore(10);
  t3 = te[10];
  if (t5 >= t4)
    throw $.ioore(t5);
  flat[t5] = t3;
  t3 = offset + 11;
  if (11 >= t2)
    throw $.ioore(11);
  t5 = te[11];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  t5 = offset + 12;
  if (12 >= t2)
    throw $.ioore(12);
  t3 = te[12];
  if (t5 >= t4)
    throw $.ioore(t5);
  flat[t5] = t3;
  t3 = offset + 13;
  if (13 >= t2)
    throw $.ioore(13);
  t5 = te[13];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  t5 = offset + 14;
  if (14 >= t2)
    throw $.ioore(14);
  t3 = te[14];
  if (t5 >= t4)
    throw $.ioore(t5);
  flat[t5] = t3;
  t3 = offset + 15;
  if (15 >= t2)
    throw $.ioore(15);
  t5 = te[15];
  if (t3 >= t4)
    throw $.ioore(t3);
  flat[t3] = t5;
  return flat;
},
 flattenToArrayOffset$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var flat = env0;
      var offset = env1;
      break;
    case 2:
      flat = env0;
      offset = env1;
      te = env2;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var te = this.elements;
    case 2:
      state0 = 0;
      $.indexSet(flat, offset, $.index(te, 0));
      $.indexSet(flat, offset + 1, $.index(te, 1));
      $.indexSet(flat, offset + 2, $.index(te, 2));
      $.indexSet(flat, offset + 3, $.index(te, 3));
      $.indexSet(flat, offset + 4, $.index(te, 4));
      $.indexSet(flat, offset + 5, $.index(te, 5));
      $.indexSet(flat, offset + 6, $.index(te, 6));
      $.indexSet(flat, offset + 7, $.index(te, 7));
      $.indexSet(flat, offset + 8, $.index(te, 8));
      $.indexSet(flat, offset + 9, $.index(te, 9));
      $.indexSet(flat, offset + 10, $.index(te, 10));
      $.indexSet(flat, offset + 11, $.index(te, 11));
      $.indexSet(flat, offset + 12, $.index(te, 12));
      $.indexSet(flat, offset + 13, $.index(te, 13));
      $.indexSet(flat, offset + 14, $.index(te, 14));
      $.indexSet(flat, offset + 15, $.index(te, 15));
      return flat;
  }
},
 getPosition$0: function() {
  var t1 = $.Matrix4___v1();
  var t2 = this.elements;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.getPosition$0$bailout(1, t1, t2);
  var t4 = t2.length;
  if (12 >= t4)
    throw $.ioore(12);
  var t5 = t2[12];
  if (13 >= t4)
    throw $.ioore(13);
  var t6 = t2[13];
  if (14 >= t4)
    throw $.ioore(14);
  return t1.setValues$3(t5, t6, t2[14]);
},
 getPosition$0$bailout: function(state0, t1, t2) {
  return t1.setValues$3($.index(t2, 12), $.index(t2, 13), $.index(t2, 14));
},
 setPosition$1: function(v) {
  var te = this.elements;
  $.indexSet(te, 12, v.get$x());
  $.indexSet(te, 13, v.get$y());
  $.indexSet(te, 14, v.get$z());
  return this;
},
 getInverse$1: function(m) {
  var te = this.elements;
  var me = m.get$elements();
  var n11 = $.index(me, 0);
  var n12 = $.index(me, 4);
  var n13 = $.index(me, 8);
  var n14 = $.index(me, 12);
  var n21 = $.index(me, 1);
  var n22 = $.index(me, 5);
  var n23 = $.index(me, 9);
  var n24 = $.index(me, 13);
  var n31 = $.index(me, 2);
  var n32 = $.index(me, 6);
  var n33 = $.index(me, 10);
  var n34 = $.index(me, 14);
  var n41 = $.index(me, 3);
  var n42 = $.index(me, 7);
  var n43 = $.index(me, 11);
  var n44 = $.index(me, 15);
  $.indexSet(te, 0, $.add($.sub($.sub($.add($.sub($.mul($.mul(n23, n34), n42), $.mul($.mul(n24, n33), n42)), $.mul($.mul(n24, n32), n43)), $.mul($.mul(n22, n34), n43)), $.mul($.mul(n23, n32), n44)), $.mul($.mul(n22, n33), n44)));
  $.indexSet(te, 4, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n33), n42), $.mul($.mul(n13, n34), n42)), $.mul($.mul(n14, n32), n43)), $.mul($.mul(n12, n34), n43)), $.mul($.mul(n13, n32), n44)), $.mul($.mul(n12, n33), n44)));
  $.indexSet(te, 8, $.add($.sub($.sub($.add($.sub($.mul($.mul(n13, n24), n42), $.mul($.mul(n14, n23), n42)), $.mul($.mul(n14, n22), n43)), $.mul($.mul(n12, n24), n43)), $.mul($.mul(n13, n22), n44)), $.mul($.mul(n12, n23), n44)));
  $.indexSet(te, 12, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n23), n32), $.mul($.mul(n13, n24), n32)), $.mul($.mul(n14, n22), n33)), $.mul($.mul(n12, n24), n33)), $.mul($.mul(n13, n22), n34)), $.mul($.mul(n12, n23), n34)));
  $.indexSet(te, 1, $.sub($.add($.add($.sub($.sub($.mul($.mul(n24, n33), n41), $.mul($.mul(n23, n34), n41)), $.mul($.mul(n24, n31), n43)), $.mul($.mul(n21, n34), n43)), $.mul($.mul(n23, n31), n44)), $.mul($.mul(n21, n33), n44)));
  $.indexSet(te, 5, $.add($.sub($.sub($.add($.sub($.mul($.mul(n13, n34), n41), $.mul($.mul(n14, n33), n41)), $.mul($.mul(n14, n31), n43)), $.mul($.mul(n11, n34), n43)), $.mul($.mul(n13, n31), n44)), $.mul($.mul(n11, n33), n44)));
  $.indexSet(te, 9, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n23), n41), $.mul($.mul(n13, n24), n41)), $.mul($.mul(n14, n21), n43)), $.mul($.mul(n11, n24), n43)), $.mul($.mul(n13, n21), n44)), $.mul($.mul(n11, n23), n44)));
  $.indexSet(te, 13, $.add($.sub($.sub($.add($.sub($.mul($.mul(n13, n24), n31), $.mul($.mul(n14, n23), n31)), $.mul($.mul(n14, n21), n33)), $.mul($.mul(n11, n24), n33)), $.mul($.mul(n13, n21), n34)), $.mul($.mul(n11, n23), n34)));
  $.indexSet(te, 2, $.add($.sub($.sub($.add($.sub($.mul($.mul(n22, n34), n41), $.mul($.mul(n24, n32), n41)), $.mul($.mul(n24, n31), n42)), $.mul($.mul(n21, n34), n42)), $.mul($.mul(n22, n31), n44)), $.mul($.mul(n21, n32), n44)));
  $.indexSet(te, 6, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n32), n41), $.mul($.mul(n12, n34), n41)), $.mul($.mul(n14, n31), n42)), $.mul($.mul(n11, n34), n42)), $.mul($.mul(n12, n31), n44)), $.mul($.mul(n11, n32), n44)));
  $.indexSet(te, 10, $.add($.sub($.sub($.add($.sub($.mul($.mul(n12, n24), n41), $.mul($.mul(n14, n22), n41)), $.mul($.mul(n14, n21), n42)), $.mul($.mul(n11, n24), n42)), $.mul($.mul(n12, n21), n44)), $.mul($.mul(n11, n22), n44)));
  $.indexSet(te, 14, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n22), n31), $.mul($.mul(n12, n24), n31)), $.mul($.mul(n14, n21), n32)), $.mul($.mul(n11, n24), n32)), $.mul($.mul(n12, n21), n34)), $.mul($.mul(n11, n22), n34)));
  $.indexSet(te, 3, $.sub($.add($.add($.sub($.sub($.mul($.mul(n23, n32), n41), $.mul($.mul(n22, n33), n41)), $.mul($.mul(n23, n31), n42)), $.mul($.mul(n21, n33), n42)), $.mul($.mul(n22, n31), n43)), $.mul($.mul(n21, n32), n43)));
  $.indexSet(te, 7, $.add($.sub($.sub($.add($.sub($.mul($.mul(n12, n33), n41), $.mul($.mul(n13, n32), n41)), $.mul($.mul(n13, n31), n42)), $.mul($.mul(n11, n33), n42)), $.mul($.mul(n12, n31), n43)), $.mul($.mul(n11, n32), n43)));
  $.indexSet(te, 11, $.sub($.add($.add($.sub($.sub($.mul($.mul(n13, n22), n41), $.mul($.mul(n12, n23), n41)), $.mul($.mul(n13, n21), n42)), $.mul($.mul(n11, n23), n42)), $.mul($.mul(n12, n21), n43)), $.mul($.mul(n11, n22), n43)));
  $.indexSet(te, 15, $.add($.sub($.sub($.add($.sub($.mul($.mul(n12, n23), n31), $.mul($.mul(n13, n22), n31)), $.mul($.mul(n13, n21), n32)), $.mul($.mul(n11, n23), n32)), $.mul($.mul(n12, n21), n33)), $.mul($.mul(n11, n22), n33)));
  var t1 = m.determinant$0();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  this.multiplyScalar$1(1 / t1);
  return this;
},
 setRotationFromEuler$2: function(v, order) {
  var te = this.elements;
  var x = v.get$x();
  var y = v.get$y();
  var z = v.get$z();
  var a = $.cos(x);
  var b = $.sin(x);
  var c = $.cos(y);
  var d = $.sin(y);
  var e = $.cos(z);
  var f = $.sin(z);
  switch (order) {
    case 'YXZ':
      var ce = c * e;
      var cf = c * f;
      var de = d * e;
      var df = d * f;
      $.indexSet(te, 0, ce + df * b);
      $.indexSet(te, 4, de * b - cf);
      $.indexSet(te, 8, a * d);
      $.indexSet(te, 1, a * f);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, -b);
      $.indexSet(te, 2, cf * b - de);
      $.indexSet(te, 6, df + ce * b);
      $.indexSet(te, 10, a * c);
      break;
    case 'ZXY':
      ce = c * e;
      cf = c * f;
      de = d * e;
      df = d * f;
      $.indexSet(te, 0, ce - df * b);
      var t1 = -a;
      $.indexSet(te, 4, t1 * f);
      $.indexSet(te, 8, de + cf * b);
      $.indexSet(te, 1, cf + de * b);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, df - ce * b);
      $.indexSet(te, 2, t1 * d);
      $.indexSet(te, 6, b);
      $.indexSet(te, 10, a * c);
      break;
    case 'ZYX':
      var ae = a * e;
      var af = a * f;
      var be = b * e;
      var bf = b * f;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, be * d - af);
      $.indexSet(te, 8, ae * d + bf);
      $.indexSet(te, 1, c * f);
      $.indexSet(te, 5, bf * d + ae);
      $.indexSet(te, 9, af * d - be);
      $.indexSet(te, 2, -d);
      $.indexSet(te, 6, b * c);
      $.indexSet(te, 10, a * c);
      break;
    case 'YZX':
      var ac = a * c;
      var ad = a * d;
      var bc = b * c;
      var bd = b * d;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, bd - ac * f);
      $.indexSet(te, 8, bc * f + ad);
      $.indexSet(te, 1, f);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, -b * e);
      $.indexSet(te, 2, -d * e);
      $.indexSet(te, 6, ad * f + bc);
      $.indexSet(te, 10, ac - bd * f);
      break;
    case 'XZY':
      ac = a * c;
      ad = a * d;
      bc = b * c;
      bd = b * d;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, -f);
      $.indexSet(te, 8, d * e);
      $.indexSet(te, 1, ac * f + bd);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, ad * f - bc);
      $.indexSet(te, 2, bc * f - ad);
      $.indexSet(te, 6, b * e);
      $.indexSet(te, 10, bd * f + ac);
      break;
    default:
      ae = a * e;
      af = a * f;
      be = b * e;
      bf = b * f;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, -c * f);
      $.indexSet(te, 8, d);
      $.indexSet(te, 1, af + be * d);
      $.indexSet(te, 5, ae - bf * d);
      $.indexSet(te, 9, -b * c);
      $.indexSet(te, 2, bf - ae * d);
      $.indexSet(te, 6, be + af * d);
      $.indexSet(te, 10, a * c);
      break;
  }
  return this;
},
 setRotationFromQuaternion$1: function(q) {
  var te = this.elements;
  var x = q.x;
  var y = q.y;
  var z = q.z;
  var w = q.w;
  var x2 = $.add(x, x);
  var y2 = $.add(y, y);
  var z2 = $.add(z, z);
  var xx = $.mul(x, x2);
  var xy = $.mul(x, y2);
  var xz = $.mul(x, z2);
  var yy = $.mul(y, y2);
  var yz = $.mul(y, z2);
  var zz = $.mul(z, z2);
  var wx = $.mul(w, x2);
  var wy = $.mul(w, y2);
  var wz = $.mul(w, z2);
  var t1 = $.add(yy, zz);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  $.indexSet(te, 0, 1 - t1);
  $.indexSet(te, 4, $.sub(xy, wz));
  $.indexSet(te, 8, $.add(xz, wy));
  $.indexSet(te, 1, $.add(xy, wz));
  var t2 = $.add(xx, zz);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  $.indexSet(te, 5, 1 - t2);
  $.indexSet(te, 9, $.sub(yz, wx));
  $.indexSet(te, 2, $.sub(xz, wy));
  $.indexSet(te, 6, $.add(yz, wx));
  var t3 = $.add(xx, yy);
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  $.indexSet(te, 10, 1 - t3);
  return this;
},
 scale$1: function(v) {
  var te = this.elements;
  var x = v.x;
  var y = v.y;
  var z = v.z;
  $.indexSet(te, 0, $.mul($.index(te, 0), x));
  $.indexSet(te, 4, $.mul($.index(te, 4), y));
  $.indexSet(te, 8, $.mul($.index(te, 8), z));
  $.indexSet(te, 1, $.mul($.index(te, 1), x));
  $.indexSet(te, 5, $.mul($.index(te, 5), y));
  $.indexSet(te, 9, $.mul($.index(te, 9), z));
  $.indexSet(te, 2, $.mul($.index(te, 2), x));
  $.indexSet(te, 6, $.mul($.index(te, 6), y));
  $.indexSet(te, 10, $.mul($.index(te, 10), z));
  $.indexSet(te, 3, $.mul($.index(te, 3), x));
  $.indexSet(te, 7, $.mul($.index(te, 7), y));
  $.indexSet(te, 11, $.mul($.index(te, 11), z));
  return this;
},
 get$scale: function() { return new $.BoundClosure(this, 'scale$1'); },
 getMaxScaleOnAxis$0: function() {
  var te = this.elements;
  return $.sqrt($.max($.add($.add($.mul($.index(te, 0), $.index(te, 0)), $.mul($.index(te, 1), $.index(te, 1))), $.mul($.index(te, 2), $.index(te, 2))), $.max($.add($.add($.mul($.index(te, 4), $.index(te, 4)), $.mul($.index(te, 5), $.index(te, 5))), $.mul($.index(te, 6), $.index(te, 6))), $.add($.add($.mul($.index(te, 8), $.index(te, 8)), $.mul($.index(te, 9), $.index(te, 9))), $.mul($.index(te, 10), $.index(te, 10))))));
},
 makeRotationAxis$2: function(axis, angle) {
  var c = $.cos(angle);
  var s = $.sin(angle);
  var t = 1 - c;
  var x = axis.get$x();
  var y = axis.get$y();
  var z = axis.get$z();
  if (typeof x !== 'number')
    throw $.iae(x);
  var tx = t * x;
  if (typeof y !== 'number')
    throw $.iae(y);
  var ty = t * y;
  var t1 = tx * x + c;
  var t2 = tx * y;
  if (typeof z !== 'number')
    throw $.iae(z);
  var t3 = s * z;
  var t4 = t2 - t3;
  var t5 = tx * z;
  var t6 = s * y;
  var t7 = t5 + t6;
  t3 = t2 + t3;
  t2 = ty * y + c;
  var t8 = ty * z;
  var t9 = s * x;
  this.setValues$16(t1, t4, t7, 0, t3, t2, t8 - t9, 0, t5 - t6, t8 + t9, t * z * z + c, 0, 0, 0, 0, 1);
  return this;
},
 makeFrustum$6: function(left, right, bottom, top$, near, far) {
  var te = this.elements;
  if (typeof near !== 'number')
    throw $.iae(near);
  var t1 = 2 * near;
  var t2 = $.sub(right, left);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  var x = t1 / t2;
  t2 = $.sub(top$, bottom);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  var y = t1 / t2;
  var a = $.div($.add(right, left), $.sub(right, left));
  var b = $.div($.add(top$, bottom), $.sub(top$, bottom));
  var c = $.div($.neg($.add(far, near)), $.sub(far, near));
  if (typeof far !== 'number')
    throw $.iae(far);
  var d = -2 * far * near / (far - near);
  $.indexSet(te, 0, x);
  $.indexSet(te, 4, 0);
  $.indexSet(te, 8, a);
  $.indexSet(te, 12, 0);
  $.indexSet(te, 1, 0);
  $.indexSet(te, 5, y);
  $.indexSet(te, 9, b);
  $.indexSet(te, 13, 0);
  $.indexSet(te, 2, 0);
  $.indexSet(te, 6, 0);
  $.indexSet(te, 10, c);
  $.indexSet(te, 14, d);
  $.indexSet(te, 3, 0);
  $.indexSet(te, 7, 0);
  $.indexSet(te, 11, -1);
  $.indexSet(te, 15, 0);
  return this;
},
 makePerspective$4: function(fov, aspect, near, far) {
  var ymax = $.mul(near, $.tan($.div($.mul(fov, 3.141592653589793), 360)));
  var ymin = $.neg(ymax);
  return this.makeFrustum$6($.mul(ymin, aspect), $.mul(ymax, aspect), ymin, ymax, near, far);
},
 clone$0: function() {
  var te = this.elements;
  if (typeof te !== 'string' && (typeof te !== 'object' || te === null || te.constructor !== Array && !te.is$JavaScriptIndexingBehavior()))
    return this.clone$0$bailout(1, te);
  var t2 = te.length;
  if (0 >= t2)
    throw $.ioore(0);
  var t3 = te[0];
  if (4 >= t2)
    throw $.ioore(4);
  var t4 = te[4];
  if (8 >= t2)
    throw $.ioore(8);
  var t5 = te[8];
  if (12 >= t2)
    throw $.ioore(12);
  var t6 = te[12];
  var t7 = te[1];
  var t8 = te[5];
  var t9 = te[9];
  if (13 >= t2)
    throw $.ioore(13);
  var t10 = te[13];
  var t11 = te[2];
  var t12 = te[6];
  var t13 = te[10];
  if (14 >= t2)
    throw $.ioore(14);
  var t14 = te[14];
  var t15 = te[3];
  var t16 = te[7];
  var t17 = te[11];
  if (15 >= t2)
    throw $.ioore(15);
  return $.Matrix4$(t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, te[15]);
},
 clone$0$bailout: function(state0, te) {
  return $.Matrix4$($.index(te, 0), $.index(te, 4), $.index(te, 8), $.index(te, 12), $.index(te, 1), $.index(te, 5), $.index(te, 9), $.index(te, 13), $.index(te, 2), $.index(te, 6), $.index(te, 10), $.index(te, 14), $.index(te, 3), $.index(te, 7), $.index(te, 11), $.index(te, 15));
},
 Matrix4$16: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  this.setValues$16(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
},
 is$Matrix4: true
};

$$.Quaternion = {"": ["x=", "y=", "z=", "w?"],
 "super": "Object",
 setValues$4: function(newX, newY, newZ, newW) {
  this.x = newX;
  this.y = newY;
  this.z = newZ;
  this.w = newW;
  return this;
},
 copy$1: function(q) {
  this.x = q.get$x();
  this.y = q.get$y();
  this.z = q.get$z();
  this.w = q.get$w();
  return this;
},
 length$0: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  t1 = $.add(t1, $.mul(t2, t2));
  var t3 = this.z;
  t1 = $.add(t1, $.mul(t3, t3));
  var t4 = this.w;
  return $.sqrt($.add(t1, $.mul(t4, t4)));
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.normalize$0$bailout(1, t1, 0);
  t1 *= t1;
  var t3 = this.y;
  if (typeof t3 !== 'number')
    return this.normalize$0$bailout(2, t1, t3);
  t1 += t3 * t3;
  var t5 = this.z;
  if (typeof t5 !== 'number')
    return this.normalize$0$bailout(3, t5, t1);
  t1 += t5 * t5;
  var t7 = this.w;
  if (typeof t7 !== 'number')
    return this.normalize$0$bailout(4, t1, t7);
  var l = $.sqrt(t1 + t7 * t7);
  if (l === 0) {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 0;
  } else {
    l = 1 / l;
    t1 = this.x;
    if (typeof t1 !== 'number')
      return this.normalize$0$bailout(5, t1, l);
    this.x = t1 * l;
    t3 = this.y;
    if (typeof t3 !== 'number')
      return this.normalize$0$bailout(6, t3, l);
    this.y = t3 * l;
    t5 = this.z;
    if (typeof t5 !== 'number')
      return this.normalize$0$bailout(7, t5, l);
    this.z = t5 * l;
    t7 = this.w;
    if (typeof t7 !== 'number')
      return this.normalize$0$bailout(8, t7, l);
    this.w = t7 * l;
  }
  return this;
},
 normalize$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
    case 3:
      t5 = env0;
      t1 = env1;
      break;
    case 4:
      t1 = env0;
      t7 = env1;
      break;
    case 5:
      t1 = env0;
      l = env1;
      break;
    case 6:
      t3 = env0;
      l = env1;
      break;
    case 7:
      t5 = env0;
      l = env1;
      break;
    case 8:
      t7 = env0;
      l = env1;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = this.x;
    case 1:
      state0 = 0;
      t1 = $.mul(t1, t1);
      var t3 = this.y;
    case 2:
      state0 = 0;
      t1 = $.add(t1, $.mul(t3, t3));
      var t5 = this.z;
    case 3:
      state0 = 0;
      t1 = $.add(t1, $.mul(t5, t5));
      var t7 = this.w;
    case 4:
      state0 = 0;
      var l = $.sqrt($.add(t1, $.mul(t7, t7)));
    default:
      if (state0 === 0 && l === 0) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
      } else
        switch (state0) {
          case 0:
            l = 1 / l;
            t1 = this.x;
          case 5:
            state0 = 0;
            this.x = $.mul(t1, l);
            t3 = this.y;
          case 6:
            state0 = 0;
            this.y = $.mul(t3, l);
            t5 = this.z;
          case 7:
            state0 = 0;
            this.z = $.mul(t5, l);
            t7 = this.w;
          case 8:
            state0 = 0;
            this.w = $.mul(t7, l);
        }
      return this;
  }
},
 multiply$2: function(q1, q2) {
  this.x = $.add($.sub($.add($.mul(q1.get$x(), q2.get$w()), $.mul(q1.get$y(), q2.get$z())), $.mul(q1.get$z(), q2.get$y())), $.mul(q1.get$w(), q2.get$x()));
  this.y = $.add($.add($.add($.mul($.neg(q1.get$x()), q2.get$z()), $.mul(q1.get$y(), q2.get$w())), $.mul(q1.get$z(), q2.get$x())), $.mul(q1.get$w(), q2.get$y()));
  this.z = $.add($.add($.sub($.mul(q1.get$x(), q2.get$y()), $.mul(q1.get$y(), q2.get$x())), $.mul(q1.get$z(), q2.get$w())), $.mul(q1.get$w(), q2.get$z()));
  this.w = $.add($.sub($.sub($.mul($.neg(q1.get$x()), q2.get$x()), $.mul(q1.get$y(), q2.get$y())), $.mul(q1.get$z(), q2.get$z())), $.mul(q1.get$w(), q2.get$w()));
  return this;
},
 multiplyVector3$2: function(vec, dest) {
  if (dest == null)
    dest = vec;
  var _x = vec.get$x();
  if (typeof _x !== 'number')
    return this.multiplyVector3$2$bailout(1, vec, dest, _x, 0, 0, 0, 0, 0);
  var _y = vec.get$y();
  if (typeof _y !== 'number')
    return this.multiplyVector3$2$bailout(2, vec, dest, _x, _y, 0, 0, 0, 0);
  var _z = vec.get$z();
  if (typeof _z !== 'number')
    return this.multiplyVector3$2$bailout(3, dest, _x, _y, _z, 0, 0, 0, 0);
  var qx = this.x;
  if (typeof qx !== 'number')
    return this.multiplyVector3$2$bailout(4, qx, dest, _x, _y, _z, 0, 0, 0);
  var qy = this.y;
  if (typeof qy !== 'number')
    return this.multiplyVector3$2$bailout(5, qx, qy, dest, _x, _y, _z, 0, 0);
  var qz = this.z;
  if (typeof qz !== 'number')
    return this.multiplyVector3$2$bailout(6, qx, qy, qz, dest, _x, _y, _z, 0);
  var qw = this.w;
  if (typeof qw !== 'number')
    return this.multiplyVector3$2$bailout(7, qx, qy, qz, qw, dest, _x, _y, _z);
  var ix = qw * _x + qy * _z - qz * _y;
  var iy = qw * _y + qz * _x - qx * _z;
  var iz = qw * _z + qx * _y - qy * _x;
  var t8 = -qx;
  var iw = t8 * _x - qy * _y - qz * _z;
  var t9 = ix * qw + iw * t8;
  var t10 = -qz;
  t9 += iy * t10;
  var t11 = -qy;
  dest.set$x(t9 - iz * t11);
  dest.set$y(iy * qw + iw * t11 + iz * t8 - ix * t10);
  dest.set$z(iz * qw + iw * t10 + ix * t11 - iy * t8);
  return dest;
},
 multiplyVector3$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      var vec = env0;
      dest = env1;
      _x = env2;
      break;
    case 2:
      vec = env0;
      dest = env1;
      _x = env2;
      _y = env3;
      break;
    case 3:
      dest = env0;
      _x = env1;
      _y = env2;
      _z = env3;
      break;
    case 4:
      qx = env0;
      dest = env1;
      _x = env2;
      _y = env3;
      _z = env4;
      break;
    case 5:
      qx = env0;
      qy = env1;
      dest = env2;
      _x = env3;
      _y = env4;
      _z = env5;
      break;
    case 6:
      qx = env0;
      qy = env1;
      qz = env2;
      dest = env3;
      _x = env4;
      _y = env5;
      _z = env6;
      break;
    case 7:
      qx = env0;
      qy = env1;
      qz = env2;
      qw = env3;
      dest = env4;
      _x = env5;
      _y = env6;
      _z = env7;
      break;
  }
  switch (state0) {
    case 0:
      if (dest == null)
        var dest = vec;
      var _x = vec.get$x();
    case 1:
      state0 = 0;
      var _y = vec.get$y();
    case 2:
      state0 = 0;
      var _z = vec.get$z();
    case 3:
      state0 = 0;
      var qx = this.x;
    case 4:
      state0 = 0;
      var qy = this.y;
    case 5:
      state0 = 0;
      var qz = this.z;
    case 6:
      state0 = 0;
      var qw = this.w;
    case 7:
      state0 = 0;
      var ix = $.sub($.add($.mul(qw, _x), $.mul(qy, _z)), $.mul(qz, _y));
      var iy = $.sub($.add($.mul(qw, _y), $.mul(qz, _x)), $.mul(qx, _z));
      var iz = $.sub($.add($.mul(qw, _z), $.mul(qx, _y)), $.mul(qy, _x));
      var iw = $.sub($.sub($.mul($.neg(qx), _x), $.mul(qy, _y)), $.mul(qz, _z));
      dest.set$x($.sub($.add($.add($.mul(ix, qw), $.mul(iw, $.neg(qx))), $.mul(iy, $.neg(qz))), $.mul(iz, $.neg(qy))));
      dest.set$y($.sub($.add($.add($.mul(iy, qw), $.mul(iw, $.neg(qy))), $.mul(iz, $.neg(qx))), $.mul(ix, $.neg(qz))));
      dest.set$z($.sub($.add($.add($.mul(iz, qw), $.mul(iw, $.neg(qz))), $.mul(ix, $.neg(qy))), $.mul(iy, $.neg(qx))));
      return dest;
  }
},
 multiplyVector3$1: function(vec) {
  return this.multiplyVector3$2(vec,null)
},
 clone$0: function() {
  return $.Quaternion$(this.x, this.y, this.z, this.w);
},
 is$IVector4: true
};

$$.Vector4 = {"": ["x=", "y=", "z=", "w?"],
 "super": "Object",
 setValues$4: function(x, y, z, w) {
  this.x = x;
  this.y = y;
  this.z = z;
  this.w = w;
  return this;
},
 copy$1: function(v) {
  this.x = v.get$x();
  this.y = v.get$y();
  this.z = v.get$z();
  if (typeof v === 'object' && v !== null && !!v.is$IVector4)
    this.w = v.get$w();
  else
    this.w = 1;
},
 add$2: function(v1, v2) {
  this.x = $.add(v1.get$x(), v2.get$x());
  this.y = $.add(v1.get$y(), v2.get$y());
  this.z = $.add(v1.get$z(), v2.get$z());
  this.w = $.add(v1.get$w(), v2.get$w());
  return this;
},
 addSelf$1: function(v) {
  this.x = $.add(this.x, v.get$x());
  this.y = $.add(this.y, v.get$y());
  this.z = $.add(this.z, v.get$z());
  this.w = $.add(this.w, v.get$w());
  return this;
},
 sub$2: function(v1, v2) {
  this.x = $.sub(v1.get$x(), v2.get$x());
  this.y = $.sub(v1.get$y(), v2.get$y());
  this.z = $.sub(v1.get$z(), v2.get$z());
  this.w = $.sub(v1.get$w(), v2.get$w());
  return this;
},
 subSelf$1: function(v) {
  this.x = $.sub(this.x, v.get$x());
  this.y = $.sub(this.y, v.get$y());
  this.z = $.sub(this.z, v.get$z());
  this.w = $.sub(this.w, v.get$w());
  return this;
},
 multiplyScalar$1: function(s) {
  this.x = $.mul(this.x, s);
  this.y = $.mul(this.y, s);
  this.z = $.mul(this.z, s);
  this.w = $.mul(this.w, s);
  return this;
},
 divideScalar$1: function(s) {
  if (typeof s !== 'number')
    return this.divideScalar$1$bailout(1, s, 0);
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.divideScalar$1$bailout(2, s, t1);
  this.x = t1 / s;
  var t3 = this.y;
  if (typeof t3 !== 'number')
    return this.divideScalar$1$bailout(3, s, t3);
  this.y = t3 / s;
  var t5 = this.z;
  if (typeof t5 !== 'number')
    return this.divideScalar$1$bailout(4, s, t5);
  this.z = t5 / s;
  var t7 = this.w;
  if (typeof t7 !== 'number')
    return this.divideScalar$1$bailout(5, s, t7);
  this.w = t7 / s;
  return this;
},
 divideScalar$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      var s = env0;
      break;
    case 2:
      s = env0;
      t1 = env1;
      break;
    case 3:
      s = env0;
      t3 = env1;
      break;
    case 4:
      s = env0;
      t5 = env1;
      break;
    case 5:
      s = env0;
      t7 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    default:
      if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && !(s == null))
        switch (state0) {
          case 0:
            var t1 = this.x;
          case 2:
            state0 = 0;
            this.x = $.div(t1, s);
            var t3 = this.y;
          case 3:
            state0 = 0;
            this.y = $.div(t3, s);
            var t5 = this.z;
          case 4:
            state0 = 0;
            this.z = $.div(t5, s);
            var t7 = this.w;
          case 5:
            state0 = 0;
            this.w = $.div(t7, s);
        }
      else {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 1;
      }
      return this;
  }
},
 negate$0: function() {
  return this.multiplyScalar$1(-1);
},
 dot$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.dot$1$bailout(1, v, t1, 0, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.dot$1$bailout(2, v, t1, t3, 0);
  t3 = t1 * t3;
  t1 = this.y;
  if (typeof t1 !== 'number')
    return this.dot$1$bailout(3, v, t1, t3, 0);
  var t6 = v.get$y();
  if (typeof t6 !== 'number')
    return this.dot$1$bailout(4, v, t6, t1, t3);
  t3 += t1 * t6;
  var t8 = this.z;
  if (typeof t8 !== 'number')
    return this.dot$1$bailout(5, v, t3, t8, 0);
  var t10 = v.get$z();
  if (typeof t10 !== 'number')
    return this.dot$1$bailout(6, v, t3, t8, t10);
  t3 += t8 * t10;
  var t12 = this.w;
  if (typeof t12 !== 'number')
    return this.dot$1$bailout(7, v, t3, t12, 0);
  var t14 = v.get$w();
  if (typeof t14 !== 'number')
    return this.dot$1$bailout(8, t3, t14, t12, 0);
  return t3 + t12 * t14;
},
 dot$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 3:
      v = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 4:
      v = env0;
      t6 = env1;
      t1 = env2;
      t3 = env3;
      break;
    case 5:
      v = env0;
      t3 = env1;
      t8 = env2;
      break;
    case 6:
      v = env0;
      t3 = env1;
      t8 = env2;
      t10 = env3;
      break;
    case 7:
      v = env0;
      t3 = env1;
      t12 = env2;
      break;
    case 8:
      t3 = env0;
      t14 = env1;
      t12 = env2;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = this.x;
    case 1:
      state0 = 0;
      var t3 = v.get$x();
    case 2:
      state0 = 0;
      t3 = $.mul(t1, t3);
      t1 = this.y;
    case 3:
      state0 = 0;
      var t6 = v.get$y();
    case 4:
      state0 = 0;
      t3 = $.add(t3, $.mul(t1, t6));
      var t8 = this.z;
    case 5:
      state0 = 0;
      var t10 = v.get$z();
    case 6:
      state0 = 0;
      t3 = $.add(t3, $.mul(t8, t10));
      var t12 = this.w;
    case 7:
      state0 = 0;
      var t14 = v.get$w();
    case 8:
      state0 = 0;
      return $.add(t3, $.mul(t12, t14));
  }
},
 lengthSq$0: function() {
  return this.dot$1(this);
},
 length$0: function() {
  return $.sqrt(this.lengthSq$0());
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  return this.divideScalar$1(this.length$0());
},
 clone$0: function() {
  return $.Vector4$(this.x, this.y, this.z, this.w);
},
 is$Vector4: true,
 is$IVector4: true
};

$$.Object3D = {"": ["id=", "name?", "properties", "parent=", "children?", "up", "position?", "rotation?", "scale?", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth?", "matrix", "matrixWorld?", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible?", "castShadow?", "receiveShadow?", "frustumCulled?", "_vector", "__data"],
 "super": "Object",
 scale$1: function(arg0) { return this.scale.call$1(arg0); },
 get$Dynamic: function() {
  return this._dynamic;
},
 add$1: function(object) {
  if ($.eqB(object, this)) {
    $.print('THREE.Object3D.add: An object can\'t be added as a child of itself.');
    return;
  }
  if (!(object.get$parent() == null))
    object.get$parent().remove$1(object);
  object.set$parent(this);
  this.children.push(object);
  for (var scene = this; !(scene.get$parent() == null);)
    scene = scene.get$parent();
  if (typeof scene === 'object' && scene !== null && !!scene.is$Scene)
    scene.addObject$1(object);
},
 remove$1: function(object) {
  var t1 = this.children;
  var index = $.indexOf$1(t1, object);
  if (!$.eqB(index, -1)) {
    object.set$parent(null);
    $.removeRange(t1, index, 1);
    for (var scene = this; !(scene.get$parent() == null);)
      scene = scene.get$parent();
    if (typeof scene === 'object' && scene !== null && !!scene.is$Scene)
      scene.removeObject$1(object);
  }
},
 updateMatrix$0: function() {
  this.matrix.setPosition$1(this.position);
  var t1 = this.useQuaternion;
  var t2 = this.matrix;
  if (t1)
    t2.setRotationFromQuaternion$1(this.quaternion);
  else
    t2.setRotationFromEuler$2(this.rotation, this.eulerOrder);
  t1 = this.scale;
  if (!$.eqB(t1.x, 1) || !$.eqB(t1.y, 1) || !$.eqB(t1.z, 1)) {
    this.matrix.scale$1(t1);
    this.boundRadiusScale = $.max(t1.x, $.max(t1.y, t1.z));
  }
  this.matrixWorldNeedsUpdate = true;
},
 updateMatrixWorld$1: function(force) {
  var t1 = {};
  t1.force_1 = force;
  if (this.matrixAutoUpdate === true)
    this.updateMatrix$0();
  if (this.matrixWorldNeedsUpdate || t1.force_1 === true) {
    var t2 = this.parent;
    var t3 = !(t2 == null);
    var t4 = this.matrixWorld;
    if (t3)
      t4.multiply$2(t2.get$matrixWorld(), this.matrix);
    else
      t4.copy$1(this.matrix);
    this.matrixWorldNeedsUpdate = false;
    t1.force_1 = true;
  }
  $.forEach(this.children, new $.Object3D_updateMatrixWorld_anon(t1));
},
 updateMatrixWorld$0: function() {
  return this.updateMatrixWorld$1(false)
},
 clone$0: function() {
},
 get$_data: function() {
  if (this.__data == null)
    this.__data = $.makeLiteralMap([]);
  return this.__data;
},
 operator$index$1: function(key) {
  return $.index(this.get$_data(), key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this.get$_data(), key, value);
  return value;
}
};

$$.Color = {"": ["r?", "g?", "b?"],
 "super": "Object",
 copy$1: function(color) {
  this.r = color.get$r();
  this.g = color.get$g();
  this.b = color.get$b();
  return this;
},
 copyGammaToLinear$1: function(color) {
  this.r = $.mul(color.get$r(), color.get$r());
  var t1 = color.get$g();
  this.g = $.mul(t1, t1);
  var t2 = color.get$b();
  this.b = $.mul(t2, t2);
  return this;
},
 setRGB$3: function(newR, newG, newB) {
  this.r = newR;
  this.g = newG;
  this.b = newB;
  return this;
},
 setHex$1: function(hex) {
  var h = $.toInt($.floor(hex));
  this.r = $.div($.shr($.and(h, 16711680), 16), 255);
  this.g = $.div($.shr($.and(h, 65280), 8), 255);
  this.b = $.div($.and(h, 255), 255);
  return this;
},
 clone$0: function() {
  return $.Color$(null).setRGB$3(this.r, this.g, this.b);
},
 Color$1: function(hex) {
  if (typeof hex === 'number')
    this.setHex$1(hex);
},
 is$Color: true
};

$$.Face3 = {"": ["a?", "b?", "c?", "normal?", "vertexNormals?", "vertexColors?", "vertexTangents?", "color?", "materialIndex?", "centroid?"],
 "super": "Object",
 clone$0: function() {
  var face = $.Face3$(this.a, this.b, this.c, null, null, null);
  face.normal.copy$1(this.normal);
  face.color.copy$1(this.color);
  face.centroid.copy$1(this.centroid);
  face.materialIndex = this.materialIndex;
  face.vertexNormals = $.map(this.vertexNormals, new $.Face3_clone_anon());
  face.vertexColors = $.map(this.vertexColors, new $.Face3_clone_anon0());
  face.vertexTangents = $.map(this.vertexTangents, new $.Face3_clone_anon1());
  return face;
},
 Face3$6: function(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  this.normal = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && !!normalOrVertexNormals.is$Vector3 ? normalOrVertexNormals : $.Vector3$(0, 0, 0);
  this.vertexNormals = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && (normalOrVertexNormals.constructor === Array || normalOrVertexNormals.is$List()) ? normalOrVertexNormals : [];
  this.color = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && !!colorOrVertexColors.is$Color ? colorOrVertexColors : $.Color$(null);
  this.vertexColors = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && (colorOrVertexColors.constructor === Array || colorOrVertexColors.is$List()) ? colorOrVertexColors : [];
  this.vertexTangents = [];
  this.centroid = $.Vector3$(0, 0, 0);
},
 is$Face3: true
};

$$.Face4 = {"": ["a?", "b?", "c?", "d?", "normal?", "vertexNormals?", "vertexColors?", "vertexTangents?", "color?", "materialIndex?", "centroid?"],
 "super": "Object",
 clone$0: function() {
  var face = $.Face4$(this.a, this.b, this.c, this.d, null, null, null);
  face.normal.copy$1(this.normal);
  face.color.copy$1(this.color);
  face.centroid.copy$1(this.centroid);
  face.materialIndex = this.materialIndex;
  face.vertexNormals = $.map(this.vertexNormals, new $.Face4_clone_anon());
  face.vertexColors = $.map(this.vertexColors, new $.Face4_clone_anon0());
  face.vertexTangents = $.map(this.vertexTangents, new $.Face4_clone_anon1());
  return face;
},
 Face4$7: function(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  this.normal = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && !!normalOrVertexNormals.is$Vector3 ? normalOrVertexNormals : $.Vector3$(0, 0, 0);
  this.vertexNormals = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && (normalOrVertexNormals.constructor === Array || normalOrVertexNormals.is$List()) ? normalOrVertexNormals : [];
  this.color = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && !!colorOrVertexColors.is$Color ? colorOrVertexColors : $.Color$(null);
  this.vertexColors = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && (colorOrVertexColors.constructor === Array || colorOrVertexColors.is$List()) ? colorOrVertexColors : [];
  this.vertexTangents = [];
  this.materialIndex = this.materialIndex;
  this.centroid = $.Vector3$(0, 0, 0);
},
 is$Face4: true
};

$$.Frustum = {"": ["planes"],
 "super": "Object",
 setFromMatrix$1: function(m) {
  var me = m.elements;
  var me0 = $.index(me, 0);
  var me1 = $.index(me, 1);
  var me2 = $.index(me, 2);
  var me3 = $.index(me, 3);
  var me4 = $.index(me, 4);
  var me5 = $.index(me, 5);
  var me6 = $.index(me, 6);
  var me7 = $.index(me, 7);
  var me8 = $.index(me, 8);
  var me9 = $.index(me, 9);
  var me10 = $.index(me, 10);
  var me11 = $.index(me, 11);
  var me12 = $.index(me, 12);
  var me13 = $.index(me, 13);
  var me14 = $.index(me, 14);
  var me15 = $.index(me, 15);
  var t1 = this.planes;
  if (0 >= t1.length)
    throw $.ioore(0);
  t1[0].setValues$4($.sub(me3, me0), $.sub(me7, me4), $.sub(me11, me8), $.sub(me15, me12));
  if (1 >= t1.length)
    throw $.ioore(1);
  t1[1].setValues$4($.add(me3, me0), $.add(me7, me4), $.add(me11, me8), $.add(me15, me12));
  if (2 >= t1.length)
    throw $.ioore(2);
  t1[2].setValues$4($.add(me3, me1), $.add(me7, me5), $.add(me11, me9), $.add(me15, me13));
  if (3 >= t1.length)
    throw $.ioore(3);
  t1[3].setValues$4($.sub(me3, me1), $.sub(me7, me5), $.sub(me11, me9), $.sub(me15, me13));
  if (4 >= t1.length)
    throw $.ioore(4);
  t1[4].setValues$4($.sub(me3, me2), $.sub(me7, me6), $.sub(me11, me10), $.sub(me15, me14));
  if (5 >= t1.length)
    throw $.ioore(5);
  t1[5].setValues$4($.add(me3, me2), $.add(me7, me6), $.add(me11, me10), $.add(me15, me14));
  for (var i = 0, plane = null; i < 6; ++i) {
    if (i >= t1.length)
      throw $.ioore(i);
    plane = t1[i];
    plane.divideScalar$1($.sqrt($.add($.add($.mul(plane.get$x(), plane.get$x()), $.mul(plane.get$y(), plane.get$y())), $.mul(plane.get$z(), plane.get$z()))));
  }
},
 contains$1: function(object) {
  var matrix = object.get$matrixWorld();
  var me = matrix.get$elements();
  if (typeof me !== 'string' && (typeof me !== 'object' || me === null || me.constructor !== Array && !me.is$JavaScriptIndexingBehavior()))
    return this.contains$1$bailout(1, object, matrix, me, 0, 0, 0, 0);
  var t2 = object.get$geometry().get$boundingSphere().get$radius();
  if (typeof t2 !== 'number')
    return this.contains$1$bailout(2, t2, matrix, me, 0, 0, 0, 0);
  t2 = -t2;
  var t4 = matrix.getMaxScaleOnAxis$0();
  if (typeof t4 !== 'number')
    return this.contains$1$bailout(3, t2, t4, me, 0, 0, 0, 0);
  var radius = t2 * t4;
  for (var t1 = this.planes, distance = 0, i = 0; i < 6; ++i) {
    if (i >= t1.length)
      throw $.ioore(i);
    t2 = t1[i].get$x();
    if (t2 !== (t2 | 0))
      return this.contains$1$bailout(4, t2, i, me, t1, radius, 0, 0);
    if (12 >= me.length)
      throw $.ioore(12);
    t4 = me[12];
    if (t4 !== (t4 | 0))
      return this.contains$1$bailout(5, t2, t4, i, t1, me, radius, 0);
    t4 = t2 * t4;
    if (i >= t1.length)
      throw $.ioore(i);
    t2 = t1[i].get$y();
    if (t2 !== (t2 | 0))
      return this.contains$1$bailout(6, i, me, t4, t1, t2, radius, 0);
    if (13 >= me.length)
      throw $.ioore(13);
    var t7 = me[13];
    if (t7 !== (t7 | 0))
      return this.contains$1$bailout(7, i, me, t4, t1, t2, radius, t7);
    t4 += t2 * t7;
    if (i >= t1.length)
      throw $.ioore(i);
    var t9 = t1[i].get$z();
    if (t9 !== (t9 | 0))
      return this.contains$1$bailout(8, t4, me, i, t9, t1, radius, 0);
    if (14 >= me.length)
      throw $.ioore(14);
    var t11 = me[14];
    if (t11 !== (t11 | 0))
      return this.contains$1$bailout(9, t4, i, t9, t1, me, t11, radius);
    t4 += t9 * t11;
    if (i >= t1.length)
      throw $.ioore(i);
    var t13 = t1[i].get$w();
    if (t13 !== (t13 | 0))
      return this.contains$1$bailout(10, t13, me, i, t1, radius, t4, 0);
    distance = t4 + t13;
    if (distance <= radius)
      return false;
  }
  return true;
},
 contains$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      var object = env0;
      matrix = env1;
      me = env2;
      break;
    case 2:
      t2 = env0;
      matrix = env1;
      me = env2;
      break;
    case 3:
      t2 = env0;
      t4 = env1;
      me = env2;
      break;
    case 4:
      t2 = env0;
      i = env1;
      me = env2;
      t1 = env3;
      radius = env4;
      break;
    case 5:
      t2 = env0;
      t4 = env1;
      i = env2;
      t1 = env3;
      me = env4;
      radius = env5;
      break;
    case 6:
      i = env0;
      me = env1;
      t4 = env2;
      t1 = env3;
      t2 = env4;
      radius = env5;
      break;
    case 7:
      i = env0;
      me = env1;
      t4 = env2;
      t1 = env3;
      t2 = env4;
      radius = env5;
      t7 = env6;
      break;
    case 8:
      t4 = env0;
      me = env1;
      i = env2;
      t9 = env3;
      t1 = env4;
      radius = env5;
      break;
    case 9:
      t4 = env0;
      i = env1;
      t9 = env2;
      t1 = env3;
      me = env4;
      t11 = env5;
      radius = env6;
      break;
    case 10:
      t13 = env0;
      me = env1;
      i = env2;
      t1 = env3;
      radius = env4;
      t4 = env5;
      break;
  }
  switch (state0) {
    case 0:
      var matrix = object.get$matrixWorld();
      var me = matrix.get$elements();
    case 1:
      state0 = 0;
      var t2 = object.get$geometry().get$boundingSphere().get$radius();
    case 2:
      state0 = 0;
      t2 = $.neg(t2);
      var t4 = matrix.getMaxScaleOnAxis$0();
    case 3:
      state0 = 0;
      var radius = $.mul(t2, t4);
      var t1 = this.planes;
      var distance = 0;
      var i = 0;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(i < 6))
                break L0;
              if (i >= t1.length)
                throw $.ioore(i);
              t2 = t1[i].get$x();
            case 4:
              state0 = 0;
              t4 = $.index(me, 12);
            case 5:
              state0 = 0;
              t4 = $.mul(t2, t4);
              if (i >= t1.length)
                throw $.ioore(i);
              t2 = t1[i].get$y();
            case 6:
              state0 = 0;
              var t7 = $.index(me, 13);
            case 7:
              state0 = 0;
              t4 = $.add(t4, $.mul(t2, t7));
              if (i >= t1.length)
                throw $.ioore(i);
              var t9 = t1[i].get$z();
            case 8:
              state0 = 0;
              var t11 = $.index(me, 14);
            case 9:
              state0 = 0;
              t4 = $.add(t4, $.mul(t9, t11));
              if (i >= t1.length)
                throw $.ioore(i);
              var t13 = t1[i].get$w();
            case 10:
              state0 = 0;
              distance = $.add(t4, t13);
              if ($.leB(distance, radius))
                return false;
              ++i;
          }
      return true;
  }
}
};

$$.Geometry = {"": ["id=", "name?", "vertices=", "colors?", "materials?", "faces=", "faceUvs?", "faceVertexUvs?", "morphTargets?", "morphColors", "morphNormals?", "skinWeights?", "skinIndices?", "__tmpVertices?", "boundingBox", "boundingSphere?", "hasTangents?", "_dynamic", "bones?", "animation", "__data"],
 "super": "Object",
 get$Dynamic: function() {
  return this._dynamic;
},
 computeCentroids$0: function() {
  $.forEach(this.faces, new $.Geometry_computeCentroids_anon(this));
},
 computeFaceNormals$0: function() {
  var t1 = {};
  t1.vA_1 = null;
  t1.vB_2 = null;
  t1.vC_3 = null;
  var cb = $.Vector3$(0, 0, 0);
  var ab = $.Vector3$(0, 0, 0);
  $.forEach(this.faces, new $.Geometry_computeFaceNormals_anon(t1, this, ab, cb));
},
 computeVertexNormals$0: function() {
  var t1 = {};
  t1.vertices_1 = null;
  var t2 = this.__tmpVertices;
  if (t2 == null) {
    this.__tmpVertices = [];
    $.forEach(this.vertices, new $.Geometry_computeVertexNormals_anon(this));
    t1.vertices_1 = this.__tmpVertices;
    $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon0());
  } else {
    t1.vertices_1 = t2;
    var vl = $.get$length(this.vertices);
    if (typeof vl !== 'number')
      return this.computeVertexNormals$0$bailout(1, t1, vl);
    for (var v = 0; v < vl; ++v)
      $.index(t1.vertices_1, v).setValues$3(0, 0, 0);
  }
  $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon1(t1));
  $.forEach(t1.vertices_1, new $.Geometry_computeVertexNormals_anon2());
  $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon3(t1));
},
 computeVertexNormals$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      vl = env1;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = {};
      t1.vertices_1 = null;
      var t2 = this.__tmpVertices;
    case 1:
      if (state0 === 0 && t2 == null) {
        this.__tmpVertices = [];
        $.forEach(this.vertices, new $.Geometry_computeVertexNormals_anon(this));
        t1.vertices_1 = this.__tmpVertices;
        $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon0());
      } else
        switch (state0) {
          case 0:
            t1.vertices_1 = t2;
            var vl = $.get$length(this.vertices);
          case 1:
            state0 = 0;
            for (var v = 0; $.ltB(v, vl); ++v)
              $.index(t1.vertices_1, v).setValues$3(0, 0, 0);
        }
      $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon1(t1));
      $.forEach(t1.vertices_1, new $.Geometry_computeVertexNormals_anon2());
      $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon3(t1));
  }
},
 computeBoundingSphere$0: function() {
  var t1 = {};
  t1.radiusSq_1 = null;
  this.boundingSphere = $.BoundingSphere$($.sqrt($.reduce(this.vertices, 0, new $.Geometry_computeBoundingSphere_anon(t1))));
},
 clone$0: function() {
},
 get$_data: function() {
  if (this.__data == null)
    this.__data = $.makeLiteralMap([]);
  return this.__data;
},
 operator$index$1: function(key) {
  return $.index(this.get$_data(), key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this.get$_data(), key, value);
  return value;
},
 is$Geometry: true
};

$$.BoundingSphere = {"": ["radius?"],
 "super": "Object"
};

$$.Vector2 = {"": ["x=", "y="],
 "super": "Object",
 setValues$2: function(x, y) {
  this.x = x;
  this.y = y;
  return this;
},
 copy$1: function(v) {
  this.x = v.get$x();
  this.y = v.get$y();
  return this;
},
 add$2: function(v1, v2) {
  this.x = $.add(v1.get$x(), v2.get$x());
  this.y = $.add(v1.get$y(), v2.get$y());
  return this;
},
 addSelf$1: function(v) {
  this.x = $.add(this.x, v.get$x());
  this.y = $.add(this.y, v.get$y());
  return this;
},
 sub$2: function(v1, v2) {
  this.x = $.sub(v1.get$x(), v2.get$x());
  this.y = $.sub(v1.get$y(), v2.get$y());
  return this;
},
 subSelf$1: function(v) {
  this.x = $.sub(this.x, v.get$x());
  this.y = $.sub(this.y, v.get$y());
  return this;
},
 multiplyScalar$1: function(s) {
  this.x = $.mul(this.x, s);
  this.y = $.mul(this.y, s);
  return this;
},
 divideScalar$1: function(s) {
  if (typeof s !== 'number')
    return this.divideScalar$1$bailout(1, s, 0);
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.divideScalar$1$bailout(2, s, t1);
  this.x = t1 / s;
  var t3 = this.y;
  if (typeof t3 !== 'number')
    return this.divideScalar$1$bailout(3, s, t3);
  this.y = t3 / s;
  return this;
},
 divideScalar$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      var s = env0;
      break;
    case 2:
      s = env0;
      t1 = env1;
      break;
    case 3:
      s = env0;
      t3 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    default:
      if (state0 === 3 || state0 === 2 || state0 === 0 && !(s == null))
        switch (state0) {
          case 0:
            var t1 = this.x;
          case 2:
            state0 = 0;
            this.x = $.div(t1, s);
            var t3 = this.y;
          case 3:
            state0 = 0;
            this.y = $.div(t3, s);
        }
      else
        this.setValues$2(0, 0);
      return this;
  }
},
 negate$0: function() {
  return this.multiplyScalar$1(-1);
},
 dot$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.dot$1$bailout(1, v, t1, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.dot$1$bailout(2, v, t3, t1);
  t3 = t1 * t3;
  t1 = this.y;
  if (typeof t1 !== 'number')
    return this.dot$1$bailout(3, t1, v, t3);
  var t6 = v.get$y();
  if (typeof t6 !== 'number')
    return this.dot$1$bailout(4, t1, t6, t3);
  return t3 + t1 * t6;
},
 dot$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 3:
      t1 = env0;
      v = env1;
      t3 = env2;
      break;
    case 4:
      t1 = env0;
      t6 = env1;
      t3 = env2;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = this.x;
    case 1:
      state0 = 0;
      var t3 = v.get$x();
    case 2:
      state0 = 0;
      t3 = $.mul(t1, t3);
      t1 = this.y;
    case 3:
      state0 = 0;
      var t6 = v.get$y();
    case 4:
      state0 = 0;
      return $.add(t3, $.mul(t1, t6));
  }
},
 lengthSq$0: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  return $.add(t1, $.mul(t2, t2));
},
 length$0: function() {
  return $.sqrt(this.lengthSq$0());
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  return this.divideScalar$1(this.length$0());
},
 distanceTo$1: function(v) {
  return $.sqrt(this.distanceToSquared$1(v));
},
 distanceToSquared$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.distanceToSquared$1$bailout(1, v, t1, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.distanceToSquared$1$bailout(2, v, t1, t3);
  var dx = t1 - t3;
  t3 = this.y;
  if (typeof t3 !== 'number')
    return this.distanceToSquared$1$bailout(3, v, t3, dx);
  var t5 = v.get$y();
  if (typeof t5 !== 'number')
    return this.distanceToSquared$1$bailout(4, t5, t3, dx);
  var dy = t3 - t5;
  return dx * dx + dy * dy;
},
 distanceToSquared$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 3:
      v = env0;
      t3 = env1;
      dx = env2;
      break;
    case 4:
      t5 = env0;
      t3 = env1;
      dx = env2;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = this.x;
    case 1:
      state0 = 0;
      var t3 = v.get$x();
    case 2:
      state0 = 0;
      var dx = $.sub(t1, t3);
      t3 = this.y;
    case 3:
      state0 = 0;
      var t5 = v.get$y();
    case 4:
      state0 = 0;
      var dy = $.sub(t3, t5);
      return $.add($.mul(dx, dx), $.mul(dy, dy));
  }
},
 equals$1: function(v) {
  return $.eqB(v.get$x(), this.x) && $.eqB(v.get$y(), this.y);
},
 isZero$0: function() {
  return $.lt(this.lengthSq$0(), 0.0001);
},
 clone$0: function() {
  return $.Vector2$(this.x, this.y);
},
 is$Vector2: true
};

$$.UV = {"": ["u?", "v?"],
 "super": "Object",
 setValues$2: function(u, v) {
  this.u = u;
  this.v = v;
  return this;
},
 copy$1: function(uv) {
  this.u = uv.get$u();
  this.v = uv.get$v();
  return this;
},
 clone$0: function() {
  return $.UV$(this.u, this.v);
}
};

$$.CylinderGeometry = {"": ["radiusTop", "radiusBottom", "height=", "segmentsRadius", "segmentsHeight", "openEnded", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "bones", "animation", "__data"],
 "super": "Geometry",
 CylinderGeometry$6: function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
  if (typeof segmentsRadius !== 'number')
    return this.CylinderGeometry$6$bailout(1, segmentsRadius, segmentsHeight, openEnded, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (typeof segmentsHeight !== 'number')
    return this.CylinderGeometry$6$bailout(1, segmentsRadius, segmentsHeight, openEnded, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var heightHalf = $.div(this.height, 2);
  if (typeof heightHalf !== 'number')
    return this.CylinderGeometry$6$bailout(2, segmentsRadius, segmentsHeight, openEnded, heightHalf, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var vertices = [];
  var uvs = [];
  var t1 = this.radiusBottom;
  if (typeof t1 !== 'number')
    return this.CylinderGeometry$6$bailout(3, t1, segmentsRadius, segmentsHeight, openEnded, heightHalf, vertices, uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var t3 = this.radiusTop;
  if (typeof t3 !== 'number')
    return this.CylinderGeometry$6$bailout(4, t1, t3, segmentsRadius, segmentsHeight, openEnded, heightHalf, vertices, uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var t5 = t1 - t3;
  var x = null;
  var y = 0;
  for (; y <= segmentsHeight; ++y) {
    var verticesRow = [];
    var uvsRow = [];
    var v = y / segmentsHeight;
    var radius = v * t5 + t3;
    for (var t2 = -v, t4 = 1 - v, x = 0; x <= segmentsRadius; ++x) {
      var u = x / segmentsRadius;
      var vertex = $.Vector3$(0, 0, 0);
      var t6 = u * 3.141592653589793 * 2;
      vertex.x = radius * $.sin(t6);
      var t7 = this.height;
      if (typeof t7 !== 'number')
        throw $.iae(t7);
      vertex.y = t2 * t7 + heightHalf;
      vertex.z = radius * $.cos(t6);
      $.add$1(this.vertices, vertex);
      verticesRow.push($.sub($.get$length(this.vertices), 1));
      uvsRow.push($.UV$(u, t4));
    }
    vertices.push(verticesRow);
    uvs.push(uvsRow);
  }
  t2 = this.height;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  var tanTheta = t5 / t2;
  for (var t2 = this.faceVertexUvs, t4 = !(t3 === 0), na = null, nb = null, x = 0; x < segmentsRadius; ++x) {
    t5 = vertices.length;
    t6 = this.vertices;
    t7 = x + 1;
    if (t4) {
      if (0 >= t5)
        throw $.ioore(0);
      na = $.index(t6, $.index(vertices[0], x)).clone$0();
      var t8 = this.vertices;
      if (0 >= vertices.length)
        throw $.ioore(0);
      nb = $.index(t8, $.index(vertices[0], t7)).clone$0();
    } else {
      if (1 >= t5)
        throw $.ioore(1);
      na = $.index(t6, $.index(vertices[1], x)).clone$0();
      t8 = this.vertices;
      if (1 >= vertices.length)
        throw $.ioore(1);
      nb = $.index(t8, $.index(vertices[1], t7)).clone$0();
    }
    na.setY$1($.sqrt($.add($.mul(na.get$x(), na.get$x()), $.mul(na.get$z(), na.get$z()))) * tanTheta).normalize$0();
    nb.setY$1($.sqrt($.add($.mul(nb.get$x(), nb.get$x()), $.mul(nb.get$z(), nb.get$z()))) * tanTheta).normalize$0();
    for (y = 0; y < segmentsHeight; ++y) {
      t5 = vertices.length;
      if (y >= t5)
        throw $.ioore(y);
      t6 = vertices[y];
      if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(5, t6, na, nb, x, vertices, uvs, tanTheta, t7, segmentsHeight, y, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (x >= t6.length)
        throw $.ioore(x);
      var v1 = t6[x];
      var t9 = y + 1;
      if (t9 >= t5)
        throw $.ioore(t9);
      var t10 = vertices[t9];
      if (typeof t10 !== 'string' && (typeof t10 !== 'object' || t10 === null || t10.constructor !== Array && !t10.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(6, v1, na, nb, x, t9, vertices, uvs, t10, tanTheta, t7, segmentsHeight, t2, y, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (x >= t10.length)
        throw $.ioore(x);
      var v2 = t10[x];
      t10 = vertices[t9];
      if (typeof t10 !== 'string' && (typeof t10 !== 'object' || t10 === null || t10.constructor !== Array && !t10.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(7, v1, na, nb, x, t9, vertices, v2, uvs, t10, tanTheta, t7, segmentsHeight, y, t2, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t7 >= t10.length)
        throw $.ioore(t7);
      var v3 = t10[t7];
      if (t7 >= t6.length)
        throw $.ioore(t7);
      var v4 = t6[t7];
      var n1 = na.clone$0();
      var n2 = na.clone$0();
      var n3 = nb.clone$0();
      var n4 = nb.clone$0();
      if (y >= uvs.length)
        throw $.ioore(y);
      t6 = uvs[y];
      if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(9, t6, v1, na, nb, x, t9, v2, uvs, vertices, tanTheta, t7, v3, y, t2, segmentsHeight, v4, n1, n2, n3, n4, 0, 0);
      if (x >= t6.length)
        throw $.ioore(x);
      var uv1 = t6[x].clone$0();
      if (t9 >= uvs.length)
        throw $.ioore(t9);
      var t13 = uvs[t9];
      if (typeof t13 !== 'string' && (typeof t13 !== 'object' || t13 === null || t13.constructor !== Array && !t13.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(10, vertices, uv1, v1, t13, na, x, t9, v2, uvs, nb, tanTheta, t7, v3, y, t2, segmentsHeight, v4, n1, n2, n3, n4, 0);
      if (x >= t13.length)
        throw $.ioore(x);
      var uv2 = t13[x].clone$0();
      if (t9 >= uvs.length)
        throw $.ioore(t9);
      t9 = uvs[t9];
      if (typeof t9 !== 'string' && (typeof t9 !== 'object' || t9 === null || t9.constructor !== Array && !t9.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(11, vertices, uv1, v1, na, nb, uv2, x, v2, uvs, t9, tanTheta, t7, v3, y, t2, segmentsHeight, v4, n1, n2, n3, n4, 0);
      if (t7 >= t9.length)
        throw $.ioore(t7);
      var uv3 = t9[t7].clone$0();
      if (y >= uvs.length)
        throw $.ioore(y);
      var t16 = uvs[y];
      if (typeof t16 !== 'string' && (typeof t16 !== 'object' || t16 === null || t16.constructor !== Array && !t16.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(12, uv1, v1, na, nb, uv2, x, v2, vertices, uvs, tanTheta, uv3, v3, y, t16, segmentsHeight, t2, t7, v4, n1, n2, n3, n4);
      if (t7 >= t16.length)
        throw $.ioore(t7);
      var uv4 = t16[t7].clone$0();
      $.add$1(this.faces, $.Face4$(v1, v2, v3, v4, [n1, n2, n3, n4], null, null));
      if (0 >= t2.length)
        throw $.ioore(0);
      $.add$1(t2[0], [uv1, uv2, uv3, uv4]);
    }
  }
  t4 = openEnded !== true;
  if (t4 && t3 > 0) {
    $.add$1(this.vertices, $.Vector3$(0, heightHalf, 0));
    for (x = 0; x < segmentsRadius; ++x) {
      if (0 >= vertices.length)
        throw $.ioore(0);
      v1 = $.index(vertices[0], x);
      if (0 >= vertices.length)
        throw $.ioore(0);
      t3 = vertices[0];
      t5 = x + 1;
      v2 = $.index(t3, t5);
      v3 = $.sub($.get$length(this.vertices), 1);
      n1 = $.Vector3$(0, 1, 0);
      n2 = $.Vector3$(0, 1, 0);
      n3 = $.Vector3$(0, 1, 0);
      if (0 >= uvs.length)
        throw $.ioore(0);
      uv1 = $.index(uvs[0], x).clone$0();
      if (0 >= uvs.length)
        throw $.ioore(0);
      uv2 = $.index(uvs[0], t5).clone$0();
      uv3 = $.UV$(uv2.get$u(), 0);
      $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
      if (0 >= t2.length)
        throw $.ioore(0);
      $.add$1(t2[0], [uv1, uv2, uv3]);
    }
  }
  if (t4 && t1 > 0) {
    $.add$1(this.vertices, $.Vector3$(0, -heightHalf, 0));
    for (x = 0; x < segmentsRadius; ++x) {
      if (y < 0 || y >= vertices.length)
        throw $.ioore(y);
      t1 = vertices[y];
      t3 = x + 1;
      v1 = $.index(t1, t3);
      if (y >= vertices.length)
        throw $.ioore(y);
      v2 = $.index(vertices[y], x);
      v3 = $.sub($.get$length(this.vertices), 1);
      n1 = $.Vector3$(0, -1, 0);
      n2 = $.Vector3$(0, -1, 0);
      n3 = $.Vector3$(0, -1, 0);
      if (y >= uvs.length)
        throw $.ioore(y);
      uv1 = $.index(uvs[y], t3).clone$0();
      if (y >= uvs.length)
        throw $.ioore(y);
      uv2 = $.index(uvs[y], x).clone$0();
      uv3 = $.UV$(uv2.get$u(), 1);
      $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
      if (0 >= t2.length)
        throw $.ioore(0);
      $.add$1(t2[0], [uv1, uv2, uv3]);
    }
  }
  this.computeCentroids$0();
  this.computeFaceNormals$0();
},
 CylinderGeometry$6$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16, env17, env18, env19, env20, env21) {
  switch (state0) {
    case 1:
      var segmentsRadius = env0;
      var segmentsHeight = env1;
      var openEnded = env2;
      break;
    case 2:
      segmentsRadius = env0;
      segmentsHeight = env1;
      openEnded = env2;
      heightHalf = env3;
      break;
    case 3:
      t1 = env0;
      segmentsRadius = env1;
      segmentsHeight = env2;
      openEnded = env3;
      heightHalf = env4;
      vertices = env5;
      uvs = env6;
      break;
    case 4:
      t1 = env0;
      t3 = env1;
      segmentsRadius = env2;
      segmentsHeight = env3;
      openEnded = env4;
      heightHalf = env5;
      vertices = env6;
      uvs = env7;
      break;
    case 5:
      t5 = env0;
      na = env1;
      nb = env2;
      x = env3;
      vertices = env4;
      uvs = env5;
      tanTheta = env6;
      t4 = env7;
      segmentsY = env8;
      y = env9;
      t2 = env10;
      break;
    case 6:
      v1 = env0;
      na = env1;
      nb = env2;
      x = env3;
      t5 = env4;
      vertices = env5;
      uvs = env6;
      t7 = env7;
      tanTheta = env8;
      t4 = env9;
      segmentsY = env10;
      t2 = env11;
      y = env12;
      break;
    case 7:
      v1 = env0;
      na = env1;
      nb = env2;
      x = env3;
      t5 = env4;
      vertices = env5;
      v2 = env6;
      uvs = env7;
      t7 = env8;
      tanTheta = env9;
      t4 = env10;
      segmentsY = env11;
      y = env12;
      t2 = env13;
      break;
    case 8:
      v1 = env0;
      na = env1;
      nb = env2;
      x = env3;
      t5 = env4;
      v2 = env5;
      uvs = env6;
      vertices = env7;
      tanTheta = env8;
      t4 = env9;
      v3 = env10;
      t2 = env11;
      y = env12;
      t7 = env13;
      segmentsY = env14;
      break;
    case 9:
      t7 = env0;
      v1 = env1;
      na = env2;
      nb = env3;
      x = env4;
      t5 = env5;
      v2 = env6;
      uvs = env7;
      vertices = env8;
      tanTheta = env9;
      t4 = env10;
      v3 = env11;
      y = env12;
      t2 = env13;
      segmentsY = env14;
      v4 = env15;
      n1 = env16;
      n2 = env17;
      n3 = env18;
      n4 = env19;
      break;
    case 10:
      vertices = env0;
      uv1 = env1;
      v1 = env2;
      t12 = env3;
      na = env4;
      x = env5;
      t5 = env6;
      v2 = env7;
      uvs = env8;
      nb = env9;
      tanTheta = env10;
      t4 = env11;
      v3 = env12;
      y = env13;
      t2 = env14;
      segmentsY = env15;
      v4 = env16;
      n1 = env17;
      n2 = env18;
      n3 = env19;
      n4 = env20;
      break;
    case 11:
      vertices = env0;
      uv1 = env1;
      v1 = env2;
      na = env3;
      nb = env4;
      uv2 = env5;
      x = env6;
      v2 = env7;
      uvs = env8;
      t5 = env9;
      tanTheta = env10;
      t4 = env11;
      v3 = env12;
      y = env13;
      t2 = env14;
      segmentsY = env15;
      v4 = env16;
      n1 = env17;
      n2 = env18;
      n3 = env19;
      n4 = env20;
      break;
    case 12:
      uv1 = env0;
      v1 = env1;
      na = env2;
      nb = env3;
      uv2 = env4;
      x = env5;
      v2 = env6;
      vertices = env7;
      uvs = env8;
      tanTheta = env9;
      uv3 = env10;
      v3 = env11;
      y = env12;
      t15 = env13;
      segmentsY = env14;
      t2 = env15;
      t4 = env16;
      v4 = env17;
      n1 = env18;
      n2 = env19;
      n3 = env20;
      n4 = env21;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var heightHalf = $.div(this.height, 2);
    case 2:
      state0 = 0;
      var vertices = [];
      var uvs = [];
      var t1 = this.radiusBottom;
    case 3:
      state0 = 0;
      var t3 = this.radiusTop;
    case 4:
      state0 = 0;
      var segmentsY = segmentsHeight;
      var x = null;
      var y = 0;
      for (; $.leB(y, segmentsY); ++y) {
        var verticesRow = [];
        var uvsRow = [];
        if (typeof segmentsY !== 'number')
          throw $.iae(segmentsY);
        var v = y / segmentsY;
        var t2 = $.sub(t1, t3);
        if (typeof t2 !== 'number')
          throw $.iae(t2);
        t2 = v * t2;
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        var radius = t2 + t3;
        for (var t2 = -v, t4 = 1 - v, x = 0; $.leB(x, segmentsRadius); ++x) {
          if (typeof segmentsRadius !== 'number')
            throw $.iae(segmentsRadius);
          var u = x / segmentsRadius;
          var vertex = $.Vector3$(0, 0, 0);
          var t5 = u * 3.141592653589793 * 2;
          vertex.x = radius * $.sin(t5);
          var t6 = this.height;
          if (typeof t6 !== 'number')
            throw $.iae(t6);
          t6 = t2 * t6;
          if (typeof heightHalf !== 'number')
            throw $.iae(heightHalf);
          vertex.y = t6 + heightHalf;
          vertex.z = radius * $.cos(t5);
          $.add$1(this.vertices, vertex);
          verticesRow.push($.sub($.get$length(this.vertices), 1));
          uvsRow.push($.UV$(u, t4));
        }
        vertices.push(verticesRow);
        uvs.push(uvsRow);
      }
      var tanTheta = $.div($.sub(t1, t3), this.height);
      t2 = this.faceVertexUvs;
      var na = null;
      var nb = null;
      x = 0;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(x, segmentsRadius))
                break L0;
              t4 = !$.eqB(t3, 0);
              t5 = vertices.length;
              t6 = this.vertices;
              var t7 = x + 1;
              if (t4) {
                if (0 >= t5)
                  throw $.ioore(0);
                na = $.index(t6, $.index(vertices[0], x)).clone$0();
                t4 = this.vertices;
                if (0 >= vertices.length)
                  throw $.ioore(0);
                nb = $.index(t4, $.index(vertices[0], t7)).clone$0();
              } else {
                if (1 >= t5)
                  throw $.ioore(1);
                na = $.index(t6, $.index(vertices[1], x)).clone$0();
                t4 = this.vertices;
                if (1 >= vertices.length)
                  throw $.ioore(1);
                nb = $.index(t4, $.index(vertices[1], t7)).clone$0();
              }
              t4 = $.sqrt($.add($.mul(na.get$x(), na.get$x()), $.mul(na.get$z(), na.get$z())));
              if (typeof tanTheta !== 'number')
                throw $.iae(tanTheta);
              na.setY$1(t4 * tanTheta).normalize$0();
              nb.setY$1($.sqrt($.add($.mul(nb.get$x(), nb.get$x()), $.mul(nb.get$z(), nb.get$z()))) * tanTheta).normalize$0();
              t4 = x + 1;
              y = 0;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.ltB(y, segmentsY))
                        break L1;
                      if (y >= vertices.length)
                        throw $.ioore(y);
                      t5 = vertices[y];
                    case 5:
                      state0 = 0;
                      var v1 = $.index(t5, x);
                      t5 = y + 1;
                      if (t5 >= vertices.length)
                        throw $.ioore(t5);
                      t7 = vertices[t5];
                    case 6:
                      state0 = 0;
                      var v2 = $.index(t7, x);
                      if (t5 >= vertices.length)
                        throw $.ioore(t5);
                      t7 = vertices[t5];
                    case 7:
                      state0 = 0;
                      var v3 = $.index(t7, t4);
                      if (y >= vertices.length)
                        throw $.ioore(y);
                      t7 = vertices[y];
                    case 8:
                      state0 = 0;
                      var v4 = $.index(t7, t4);
                      var n1 = na.clone$0();
                      var n2 = na.clone$0();
                      var n3 = nb.clone$0();
                      var n4 = nb.clone$0();
                      if (y >= uvs.length)
                        throw $.ioore(y);
                      t7 = uvs[y];
                    case 9:
                      state0 = 0;
                      var uv1 = $.index(t7, x).clone$0();
                      if (t5 >= uvs.length)
                        throw $.ioore(t5);
                      var t12 = uvs[t5];
                    case 10:
                      state0 = 0;
                      var uv2 = $.index(t12, x).clone$0();
                      if (t5 >= uvs.length)
                        throw $.ioore(t5);
                      t5 = uvs[t5];
                    case 11:
                      state0 = 0;
                      var uv3 = $.index(t5, t4).clone$0();
                      if (y >= uvs.length)
                        throw $.ioore(y);
                      var t15 = uvs[y];
                    case 12:
                      state0 = 0;
                      var uv4 = $.index(t15, t4).clone$0();
                      $.add$1(this.faces, $.Face4$(v1, v2, v3, v4, [n1, n2, n3, n4], null, null));
                      if (0 >= t2.length)
                        throw $.ioore(0);
                      $.add$1(t2[0], [uv1, uv2, uv3, uv4]);
                      ++y;
                  }
              ++x;
          }
      t4 = openEnded !== true;
      if (t4 && $.gtB(t3, 0)) {
        $.add$1(this.vertices, $.Vector3$(0, heightHalf, 0));
        for (x = 0; $.ltB(x, segmentsRadius); ++x) {
          if (0 >= vertices.length)
            throw $.ioore(0);
          v1 = $.index(vertices[0], x);
          if (0 >= vertices.length)
            throw $.ioore(0);
          t3 = vertices[0];
          t5 = x + 1;
          v2 = $.index(t3, t5);
          v3 = $.sub($.get$length(this.vertices), 1);
          n1 = $.Vector3$(0, 1, 0);
          n2 = $.Vector3$(0, 1, 0);
          n3 = $.Vector3$(0, 1, 0);
          if (0 >= uvs.length)
            throw $.ioore(0);
          uv1 = $.index(uvs[0], x).clone$0();
          if (0 >= uvs.length)
            throw $.ioore(0);
          uv2 = $.index(uvs[0], t5).clone$0();
          uv3 = $.UV$(uv2.get$u(), 0);
          $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
          if (0 >= t2.length)
            throw $.ioore(0);
          $.add$1(t2[0], [uv1, uv2, uv3]);
        }
      }
      if (t4 && $.gtB(t1, 0)) {
        $.add$1(this.vertices, $.Vector3$(0, $.neg(heightHalf), 0));
        for (x = 0; $.ltB(x, segmentsRadius); ++x) {
          if (y < 0 || y >= vertices.length)
            throw $.ioore(y);
          t1 = vertices[y];
          t3 = x + 1;
          v1 = $.index(t1, t3);
          if (y >= vertices.length)
            throw $.ioore(y);
          v2 = $.index(vertices[y], x);
          v3 = $.sub($.get$length(this.vertices), 1);
          n1 = $.Vector3$(0, -1, 0);
          n2 = $.Vector3$(0, -1, 0);
          n3 = $.Vector3$(0, -1, 0);
          if (y >= uvs.length)
            throw $.ioore(y);
          uv1 = $.index(uvs[y], t3).clone$0();
          if (y >= uvs.length)
            throw $.ioore(y);
          uv2 = $.index(uvs[y], x).clone$0();
          uv3 = $.UV$(uv2.get$u(), 1);
          $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
          if (0 >= t2.length)
            throw $.ioore(0);
          $.add$1(t2[0], [uv1, uv2, uv3]);
        }
      }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
  }
}
};

$$.ExtrudeGeometry = {"": ["shapes", "shapebb", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "bones", "animation", "__data"],
 "super": "Geometry",
 addShapeList$13: function(shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames$, material, extrudeMaterial) {
  if (typeof shapes !== 'string' && (typeof shapes !== 'object' || shapes === null || shapes.constructor !== Array && !shapes.is$JavaScriptIndexingBehavior()))
    return this.addShapeList$13$bailout(1, shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames$, material, extrudeMaterial);
  var sl = shapes.length;
  for (var s = 0; s < sl; ++s) {
    if (s >= shapes.length)
      throw $.ioore(s);
    this.addShape$13(shapes[s], amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames$, material, extrudeMaterial);
  }
},
 addShapeList$13$bailout: function(state0, shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames$, material, extrudeMaterial) {
  var sl = $.get$length(shapes);
  for (var s = 0; $.ltB(s, sl); ++s)
    this.addShape$13($.index(shapes, s), amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames$, material, extrudeMaterial);
},
 _scalePt2$3: function(pt, vec, size) {
  if (vec == null)
    $.print('die');
  return vec.clone$0().multiplyScalar$1(size).addSelf$1(pt);
},
 _getBevelVec2$3: function(pt_i, pt_j, pt_k) {
  var a = $.ExtrudeGeometry___v1();
  var b = $.ExtrudeGeometry___v2();
  var v_hat = $.ExtrudeGeometry___v3();
  var w_hat = $.ExtrudeGeometry___v4();
  var p = $.ExtrudeGeometry___v5();
  var q = $.ExtrudeGeometry___v6();
  a.setValues$2($.sub(pt_i.get$x(), pt_j.get$x()), $.sub(pt_i.get$y(), pt_j.get$y()));
  b.setValues$2($.sub(pt_i.get$x(), pt_k.get$x()), $.sub(pt_i.get$y(), pt_k.get$y()));
  var v = a.normalize$0();
  var w = b.normalize$0();
  v_hat.setValues$2($.neg(v.get$y()), v.get$x());
  w_hat.setValues$2(w.get$y(), $.neg(w.get$x()));
  p.copy$1(pt_i).addSelf$1(v_hat);
  q.copy$1(pt_i).addSelf$1(w_hat);
  if (p.equals$1(q) === true)
    return w_hat.clone$0();
  p.copy$1(pt_j).addSelf$1(v_hat);
  q.copy$1(pt_k).addSelf$1(w_hat);
  var v_dot_w_hat = v.dot$1(w_hat);
  var q_sub_p_dot_w_hat = q.subSelf$1(p).dot$1(w_hat);
  if ($.eqB(v_dot_w_hat, 0)) {
    $.print('Either infinite or no solutions!');
    if ($.eqB(q_sub_p_dot_w_hat, 0))
      $.print('Its finite solutions.');
    else
      $.print('Too bad, no solutions.');
  }
  var s = $.div(q_sub_p_dot_w_hat, v_dot_w_hat);
  if ($.ltB(s, 0))
    return this._getBevelVec1$3(pt_i, pt_j, pt_k);
  return v.multiplyScalar$1(s).addSelf$1(p).subSelf$1(pt_i).clone$0();
},
 _getBevelVec$3: function(pt_i, pt_j, pt_k) {
  return this._getBevelVec2$3(pt_i, pt_j, pt_k);
},
 _getBevelVec1$3: function(pt_i, pt_j, pt_k) {
  var anglea = $.atan2($.sub(pt_j.get$y(), pt_i.get$y()), $.sub(pt_j.get$x(), pt_i.get$x()));
  var angleb = $.atan2($.sub(pt_k.get$y(), pt_i.get$y()), $.sub(pt_k.get$x(), pt_i.get$x()));
  if (anglea > angleb)
    angleb += 6.283185307179586;
  var anglec = (anglea + angleb) / 2;
  return $.Vector2$(-$.cos(anglec), -$.sin(anglec));
},
 _v$3: function(x, y, z) {
  $.add$1(this.vertices, $.Vector3$(x, y, z));
},
 _reverse$1: function(list) {
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._reverse$1$bailout(1, list);
  var reversed = [];
  var i = list.length;
  for (; i > 0;) {
    --i;
    if (i >= list.length)
      throw $.ioore(i);
    reversed.push(list[i]);
  }
  return reversed;
},
 _reverse$1$bailout: function(state0, list) {
  var reversed = [];
  var i = $.get$length(list);
  for (; $.gtB(i, 0);) {
    i = $.sub(i, 1);
    reversed.push($.index(list, i));
  }
  return reversed;
},
 addShape$14: function(shape, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames$, material, extrudeMaterial, UVGenerator) {
  var t1 = {};
  t1.bevelSegments_1 = bevelSegments;
  if (typeof amount !== 'number')
    return this.addShape$14$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames$, material, extrudeMaterial, UVGenerator, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (typeof bevelThickness !== 'number')
    return this.addShape$14$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames$, material, extrudeMaterial, UVGenerator, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (typeof bevelSize !== 'number')
    return this.addShape$14$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames$, material, extrudeMaterial, UVGenerator, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (typeof bevelEnabled !== 'boolean')
    return this.addShape$14$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames$, material, extrudeMaterial, UVGenerator, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (typeof steps !== 'number')
    return this.addShape$14$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames$, material, extrudeMaterial, UVGenerator, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var uvgen = !(UVGenerator == null) ? UVGenerator : $.ExtrudeGeometryWorldUVGenerator$();
  if (typeof steps === 'object' && steps !== null && (steps.constructor === Array || steps.is$List())) {
    var t2 = $.get$length(steps);
    if (typeof t2 !== 'number')
      return this.addShape$14$bailout(2, shape, amount, bevelThickness, bevelSize, bevelEnabled, t2, steps, bendPath, extrudePath, frames$, material, extrudeMaterial, t1, uvgen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    var nSteps = t2;
  } else
    nSteps = steps;
  if (!(extrudePath == null)) {
    if (typeof steps === 'object' && steps !== null && (steps.constructor === Array || steps.is$List())) {
      var divisions = [0];
      $.addAll(divisions, steps);
      var extrudePts = extrudePath.getUPoints$1(divisions);
    } else
      extrudePts = extrudePath.getSpacedPoints$1(steps);
    var splineTube = !(frames$ == null) ? frames$ : $.TubeGeometry$FrenetFrames(extrudePath, steps, false);
    var binormal = $.Vector3$(0, 0, 0);
    var normal = $.Vector3$(0, 0, 0);
    var position2 = $.Vector3$(0, 0, 0);
    bevelEnabled = false;
    var extrudeByPath = true;
  } else {
    splineTube = null;
    binormal = null;
    normal = null;
    position2 = null;
    extrudePts = null;
    extrudeByPath = false;
  }
  if (!bevelEnabled) {
    t1.bevelSegments_1 = 0;
    bevelThickness = 0;
    bevelSize = 0;
  }
  var shapesOffset = $.get$length(this.vertices);
  if (!(bendPath == null))
    shape.addWrapPath$1(bendPath);
  var shapePoints = shape.extractPoints$0();
  var vertices = $.index(shapePoints, 'shape');
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.addShape$14$bailout(3, shape, amount, bevelThickness, bevelSize, shapesOffset, nSteps, material, extrudeMaterial, t1, shapePoints, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, bevelEnabled, vertices, uvgen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var holes = $.index(shapePoints, 'holes');
  if (typeof holes !== 'object' || holes === null || (holes.constructor !== Array || !!holes.immutable$list) && !holes.is$JavaScriptIndexingBehavior())
    return this.addShape$14$bailout(4, shape, amount, bevelThickness, bevelSize, shapesOffset, nSteps, material, extrudeMaterial, t1, splineTube, binormal, normal, position2, holes, extrudePts, extrudeByPath, bevelEnabled, vertices, uvgen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if ($.isClockWise(vertices) !== true) {
    vertices = this._reverse$1(vertices);
    if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
      return this.addShape$14$bailout(5, shape, amount, bevelThickness, bevelSize, vertices, shapesOffset, nSteps, material, extrudeMaterial, t1, splineTube, binormal, normal, position2, holes, extrudePts, extrudeByPath, bevelEnabled, uvgen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    for (var ahole = null, h = 0; h < holes.length; ++h) {
      ahole = holes[h];
      if ($.isClockWise(ahole) === true) {
        t2 = this._reverse$1(ahole);
        if (h >= holes.length)
          throw $.ioore(h);
        holes[h] = t2;
      }
    }
  } else
    ahole = null;
  var faces = $.triangulateShape(vertices, holes);
  for (var vertices0 = vertices, h = 0; h < holes.length; ++h) {
    ahole = holes[h];
    vertices0 = $.ListImplementation_List$from(vertices0);
    $.addAll(vertices0, ahole);
  }
  var vlen = vertices0.length;
  var flen = faces.length;
  var clen = vertices.length;
  var contourMovements = $.ListImplementation_List(clen);
  var il = vertices.length;
  var j = il - 1;
  for (var i = 0, k = 1; i < il; ++i) {
    if (j === il)
      j = 0;
    if (k === il)
      k = 0;
    t2 = vertices.length;
    if (i >= t2)
      throw $.ioore(i);
    var pt_i = vertices[i];
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    var pt_j = vertices[j];
    if (k < 0 || k >= t2)
      throw $.ioore(k);
    var t3 = this._getBevelVec$3(pt_i, pt_j, vertices[k]);
    if (i >= clen)
      throw $.ioore(i);
    contourMovements[i] = t3;
    ++j;
    ++k;
  }
  var holesMovements = [];
  var verticesMovements = $.ListImplementation_List$from(contourMovements);
  for (var h = 0, oneHoleMovements = null; h < holes.length; ++h) {
    ahole = holes[h];
    oneHoleMovements = $.ListImplementation_List($.get$length(ahole));
    il = $.get$length(ahole);
    if (il !== (il | 0))
      return this.addShape$14$bailout(6, shape, amount, material, extrudeMaterial, t1, holesMovements, ahole, verticesMovements, splineTube, binormal, oneHoleMovements, normal, il, extrudePts, position2, bevelEnabled, extrudeByPath, h, vertices, flen, uvgen, faces, bevelThickness, vlen, bevelSize, contourMovements, shapesOffset, nSteps, holes, vertices0, 0, 0, 0, 0, 0, 0);
    j = il - 1;
    for (i = 0, k = 1; i < il; ++i) {
      if (j === il)
        j = 0;
      if (k === il)
        k = 0;
      t2 = this._getBevelVec$3($.index(ahole, i), $.index(ahole, j), $.index(ahole, k));
      if (i >= oneHoleMovements.length)
        throw $.ioore(i);
      oneHoleMovements[i] = t2;
      ++j;
      ++k;
    }
    holesMovements.push(oneHoleMovements);
    $.addAll(verticesMovements, oneHoleMovements);
  }
  var b = 0;
  var bs = null;
  var t = null;
  var z = null;
  var vert = null;
  while (true) {
    t2 = t1.bevelSegments_1;
    if (typeof t2 !== 'number')
      return this.addShape$14$bailout(7, shape, amount, ahole, h, material, extrudeMaterial, b, t1, t, verticesMovements, z, splineTube, binormal, holesMovements, normal, position2, vert, bs, extrudePts, extrudeByPath, vertices, bevelEnabled, flen, i, uvgen, bevelThickness, bevelSize, faces, contourMovements, vlen, shapesOffset, nSteps, oneHoleMovements, t2, holes, vertices0);
    if (!(b < t2))
      break;
    t = b / t2;
    z = bevelThickness * (1 - t);
    bs = bevelSize * $.sin(t * 3.141592653589793 / 2);
    for (t2 = -z, i = 0; i < vertices.length; ++i) {
      t3 = vertices[i];
      if (i >= clen)
        throw $.ioore(i);
      vert = this._scalePt2$3(t3, contourMovements[i], bs);
      this._v$3(vert.get$x(), vert.get$y(), t2);
    }
    for (h = 0; h < holes.length; ++h) {
      ahole = holes[h];
      if (h >= holesMovements.length)
        throw $.ioore(h);
      oneHoleMovements = holesMovements[h];
      i = 0;
      while (true) {
        t3 = $.get$length(ahole);
        if (typeof t3 !== 'number')
          return this.addShape$14$bailout(8, shape, amount, bs, material, extrudeMaterial, b, holesMovements, t3, t1, verticesMovements, splineTube, binormal, normal, ahole, extrudePts, oneHoleMovements, position2, bevelEnabled, extrudeByPath, vertices, vlen, flen, uvgen, faces, h, bevelThickness, bevelSize, contourMovements, shapesOffset, nSteps, vert, holes, t, z, i, vertices0);
        if (!(i < t3))
          break;
        vert = this._scalePt2$3($.index(ahole, i), $.index(oneHoleMovements, i), bs);
        this._v$3(vert.get$x(), vert.get$y(), t2);
        ++i;
      }
    }
    ++b;
  }
  for (t2 = !extrudeByPath, i = 0; i < vlen; ++i) {
    t3 = vertices0.length;
    if (bevelEnabled) {
      if (i >= t3)
        throw $.ioore(i);
      var t4 = vertices0[i];
      if (i >= verticesMovements.length)
        throw $.ioore(i);
      vert = this._scalePt2$3(t4, verticesMovements[i], bevelSize);
    } else {
      if (i >= t3)
        throw $.ioore(i);
      vert = vertices0[i];
    }
    if (t2)
      this._v$3(vert.get$x(), vert.get$y(), 0);
    else {
      t3 = splineTube.get$normals();
      if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
        return this.addShape$14$bailout(9, shape, amount, vertices0, ahole, h, material, extrudeMaterial, t1, holesMovements, t, verticesMovements, z, splineTube, binormal, normal, position2, extrudePts, bevelEnabled, vlen, vertices, flen, uvgen, faces, bevelThickness, vert, bevelSize, contourMovements, t2, shapesOffset, nSteps, oneHoleMovements, t3, holes, i, 0, 0);
      if (0 >= t3.length)
        throw $.ioore(0);
      normal.copy$1(t3[0]).multiplyScalar$1(vert.get$x());
      var t5 = splineTube.get$binormals();
      if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
        return this.addShape$14$bailout(10, shape, amount, vertices0, ahole, h, material, extrudeMaterial, t1, holesMovements, t, verticesMovements, z, splineTube, binormal, normal, position2, extrudePts, bevelEnabled, vlen, vertices, flen, uvgen, faces, bevelThickness, vert, bevelSize, contourMovements, t2, shapesOffset, nSteps, oneHoleMovements, t5, holes, i, 0, 0);
      if (0 >= t5.length)
        throw $.ioore(0);
      binormal.copy$1(t5[0]).multiplyScalar$1(vert.get$y());
      position2.copy$1($.index(extrudePts, 0)).addSelf$1(normal).addSelf$1(binormal);
      this._v$3(position2.get$x(), position2.get$y(), position2.get$z());
    }
  }
  for (var t3 = amount / nSteps, s = 1; s <= nSteps; ++s)
    for (t4 = t3 * s, i = 0; i < vlen; ++i) {
      t5 = vertices0.length;
      if (bevelEnabled) {
        if (i >= t5)
          throw $.ioore(i);
        var t6 = vertices0[i];
        if (i >= verticesMovements.length)
          throw $.ioore(i);
        vert = this._scalePt2$3(t6, verticesMovements[i], bevelSize);
      } else {
        if (i >= t5)
          throw $.ioore(i);
        vert = vertices0[i];
      }
      if (t2)
        this._v$3(vert.get$x(), vert.get$y(), t4);
      else {
        t5 = splineTube.get$normals();
        if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
          return this.addShape$14$bailout(11, amount, bevelSize, t2, nSteps, i, vert, verticesMovements, splineTube, binormal, normal, position2, extrudePts, bevelEnabled, s, vlen, t5, vertices0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (s >= t5.length)
          throw $.ioore(s);
        normal.copy$1(t5[s]).multiplyScalar$1(vert.get$x());
        var t7 = splineTube.get$binormals();
        if (typeof t7 !== 'string' && (typeof t7 !== 'object' || t7 === null || t7.constructor !== Array && !t7.is$JavaScriptIndexingBehavior()))
          return this.addShape$14$bailout(12, amount, bevelSize, t7, t2, nSteps, i, vert, verticesMovements, splineTube, binormal, normal, position2, extrudePts, bevelEnabled, s, vlen, vertices0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (s >= t7.length)
          throw $.ioore(s);
        binormal.copy$1(t7[s]).multiplyScalar$1(vert.get$y());
        position2.copy$1($.index(extrudePts, s)).addSelf$1(normal).addSelf$1(binormal);
        this._v$3(position2.get$x(), position2.get$y(), position2.get$z());
      }
    }
  t3 = t1.bevelSegments_1;
  if (typeof t3 !== 'number')
    return this.addShape$14$bailout(13, shape, amount, ahole, h, material, extrudeMaterial, t1, holesMovements, t, z, extrudePts, bevelEnabled, vlen, vertices, flen, uvgen, faces, bevelThickness, bevelSize, contourMovements, t2, shapesOffset, vert, nSteps, oneHoleMovements, i, t3, holes, 0, 0, 0, 0, 0, 0, 0, 0);
  b = t3 - 1;
  t3 = nSteps - 1;
  bs = bevelSize;
  for (; b >= 0; --b) {
    t4 = t1.bevelSegments_1;
    if (typeof t4 !== 'number')
      return this.addShape$14$bailout(14, ahole, amount, shape, b, material, extrudeMaterial, t1, holesMovements, vert, extrudePts, bevelEnabled, vertices, vlen, flen, uvgen, faces, bevelThickness, bevelSize, contourMovements, t2, oneHoleMovements, shapesOffset, nSteps, t4, holes, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    t = b / t4;
    z = bevelThickness * (1 - t);
    bs = bevelSize * $.sin(t * 3.141592653589793 / 2);
    for (t4 = amount + z, i = 0; i < vertices.length; ++i) {
      t5 = vertices[i];
      if (i >= clen)
        throw $.ioore(i);
      vert = this._scalePt2$3(t5, contourMovements[i], bs);
      this._v$3(vert.get$x(), vert.get$y(), t4);
    }
    for (h = 0; h < holes.length; ++h) {
      ahole = holes[h];
      if (h >= holesMovements.length)
        throw $.ioore(h);
      oneHoleMovements = holesMovements[h];
      i = 0;
      while (true) {
        t5 = $.get$length(ahole);
        if (typeof t5 !== 'number')
          return this.addShape$14$bailout(15, shape, amount, bs, b, material, t5, t1, holesMovements, extrudeMaterial, ahole, oneHoleMovements, extrudePts, bevelEnabled, vertices, h, flen, vlen, faces, bevelThickness, bevelSize, contourMovements, t2, shapesOffset, nSteps, uvgen, vert, t, holes, z, i, 0, 0, 0, 0, 0, 0);
        if (!(i < t5))
          break;
        vert = this._scalePt2$3($.index(ahole, i), $.index(oneHoleMovements, i), bs);
        if (t2)
          this._v$3(vert.get$x(), vert.get$y(), t4);
        else {
          t5 = vert.get$x();
          t6 = vert.get$y();
          if (typeof t6 !== 'number')
            return this.addShape$14$bailout(16, amount, bs, t5, t6, nSteps, t2, ahole, oneHoleMovements, extrudePts, vert, z, i, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          var t8 = $.index(extrudePts, t3).get$y();
          if (typeof t8 !== 'number')
            return this.addShape$14$bailout(17, amount, bs, t5, t6, nSteps, t8, t2, ahole, oneHoleMovements, extrudePts, vert, z, i, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = t6 + t8;
          t6 = $.index(extrudePts, t3).get$x();
          if (typeof t6 !== 'number')
            return this.addShape$14$bailout(18, amount, bs, t5, t2, nSteps, t8, t6, ahole, oneHoleMovements, extrudePts, vert, z, i, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          this._v$3(t5, t8, t6 + z);
        }
        ++i;
      }
    }
  }
  t2 = new $.ExtrudeGeometry_addShape_f3(material, uvgen, shapesOffset, this, shape);
  t3 = new $.ExtrudeGeometry_addShape_f4(uvgen, shapesOffset, this, extrudeMaterial, shape);
  if (bevelEnabled) {
    var offset = vlen * 0;
    for (var face = null, i = 0; i < flen; ++i) {
      if (i >= faces.length)
        throw $.ioore(i);
      face = faces[i];
      if (typeof face !== 'string' && (typeof face !== 'object' || face === null || face.constructor !== Array && !face.is$JavaScriptIndexingBehavior()))
        return this.addShape$14$bailout(19, faces, ahole, nSteps, i, t1, t2, t3, holes, offset, face, vertices, vlen, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (2 >= face.length)
        throw $.ioore(2);
      t5 = face[2];
      if (typeof t5 !== 'number')
        return this.addShape$14$bailout(20, faces, ahole, nSteps, i, t1, t2, t3, holes, offset, face, vertices, t5, flen, vlen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t5 += offset;
      t7 = face[1];
      if (typeof t7 !== 'number')
        return this.addShape$14$bailout(21, faces, t7, ahole, nSteps, i, t1, t2, t3, holes, offset, face, vertices, vlen, flen, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t7 += offset;
      var t9 = face[0];
      if (typeof t9 !== 'number')
        return this.addShape$14$bailout(22, faces, ahole, t7, t9, nSteps, i, t1, t2, t3, holes, offset, face, vertices, vlen, flen, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t2.call$4(t5, t7, t9 + offset, true);
    }
    t4 = t1.bevelSegments_1;
    if (typeof t4 !== 'number')
      return this.addShape$14$bailout(23, faces, ahole, nSteps, t1, t4, t2, t3, holes, face, vertices, vlen, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    offset = vlen * (nSteps + t4 * 2);
    for (i = 0; i < flen; ++i) {
      if (i >= faces.length)
        throw $.ioore(i);
      face = faces[i];
      if (typeof face !== 'string' && (typeof face !== 'object' || face === null || face.constructor !== Array && !face.is$JavaScriptIndexingBehavior()))
        return this.addShape$14$bailout(24, faces, ahole, i, nSteps, t1, t2, t3, offset, holes, face, vertices, vlen, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t5 = face.length;
      if (0 >= t5)
        throw $.ioore(0);
      t6 = face[0];
      if (typeof t6 !== 'number')
        return this.addShape$14$bailout(25, faces, ahole, i, nSteps, t1, t2, t3, offset, holes, face, t6, vertices, vlen, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t6 += offset;
      if (1 >= t5)
        throw $.ioore(1);
      t8 = face[1];
      if (typeof t8 !== 'number')
        return this.addShape$14$bailout(26, faces, ahole, vlen, i, nSteps, t1, t2, t3, offset, holes, face, vertices, t6, flen, t8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t8 += offset;
      if (2 >= t5)
        throw $.ioore(2);
      var t10 = face[2];
      if (typeof t10 !== 'number')
        return this.addShape$14$bailout(27, faces, t8, t10, ahole, i, nSteps, t1, t2, t3, offset, holes, face, vertices, t6, flen, vlen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t2.call$4(t6, t8, t10 + offset, false);
    }
  } else {
    for (face = null, i = 0; i < flen; ++i) {
      if (i >= faces.length)
        throw $.ioore(i);
      face = faces[i];
      if (typeof face !== 'string' && (typeof face !== 'object' || face === null || face.constructor !== Array && !face.is$JavaScriptIndexingBehavior()))
        return this.addShape$14$bailout(28, faces, ahole, nSteps, t1, face, t2, t3, i, holes, vlen, vertices, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (2 >= face.length)
        throw $.ioore(2);
      t2.call$4(face[2], face[1], face[0], true);
    }
    for (t4 = vlen * nSteps, i = 0; i < flen; ++i) {
      if (i >= faces.length)
        throw $.ioore(i);
      face = faces[i];
      if (typeof face !== 'string' && (typeof face !== 'object' || face === null || face.constructor !== Array && !face.is$JavaScriptIndexingBehavior()))
        return this.addShape$14$bailout(29, faces, ahole, i, nSteps, t1, t2, t3, holes, vlen, vertices, flen, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t6 = face.length;
      if (0 >= t6)
        throw $.ioore(0);
      t7 = face[0];
      if (typeof t7 !== 'number')
        return this.addShape$14$bailout(30, t7, faces, i, ahole, nSteps, t1, t2, t3, holes, vlen, vertices, face, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t7 += t4;
      if (1 >= t6)
        throw $.ioore(1);
      t9 = face[1];
      if (typeof t9 !== 'number')
        return this.addShape$14$bailout(31, faces, ahole, i, t7, t9, nSteps, t1, t2, t3, holes, vlen, vertices, face, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t9 += t4;
      if (2 >= t6)
        throw $.ioore(2);
      var t11 = face[2];
      if (typeof t11 !== 'number')
        return this.addShape$14$bailout(32, faces, ahole, i, t7, nSteps, t9, t11, t1, t2, t3, holes, vlen, vertices, face, flen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t2.call$4(t7, t9, t11 + t4, false);
    }
  }
  t1 = new $.ExtrudeGeometry_addShape_sidewalls(nSteps, t1, t3, vlen);
  t1.call$2(vertices, 0);
  var layeroffset = 0 + vertices.length;
  for (h = 0; h < holes.length; ++h) {
    ahole = holes[h];
    t1.call$2(ahole, layeroffset);
    t2 = $.get$length(ahole);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    layeroffset += t2;
  }
},
 addShape$14$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16, env17, env18, env19, env20, env21, env22, env23, env24, env25, env26, env27, env28, env29, env30, env31, env32, env33, env34, env35) {
  switch (state0) {
    case 1:
      var shape = env0;
      var amount = env1;
      var bevelThickness = env2;
      var bevelSize = env3;
      var bevelEnabled = env4;
      var steps = env5;
      var bendPath = env6;
      var extrudePath = env7;
      var frames$ = env8;
      var material = env9;
      var extrudeMaterial = env10;
      var UVGenerator = env11;
      t1 = env12;
      break;
    case 2:
      shape = env0;
      amount = env1;
      bevelThickness = env2;
      bevelSize = env3;
      bevelEnabled = env4;
      t2 = env5;
      steps = env6;
      bendPath = env7;
      extrudePath = env8;
      frames$ = env9;
      material = env10;
      extrudeMaterial = env11;
      t1 = env12;
      uvgen = env13;
      break;
    case 3:
      shape = env0;
      amount = env1;
      bevelThickness = env2;
      bevelSize = env3;
      shapesOffset = env4;
      nSteps = env5;
      material = env6;
      extrudeMaterial = env7;
      t1 = env8;
      shapePoints = env9;
      splineTube = env10;
      binormal = env11;
      normal = env12;
      position2 = env13;
      extrudePts = env14;
      extrudeByPath = env15;
      t2 = env16;
      vertices = env17;
      uvgen = env18;
      break;
    case 4:
      shape = env0;
      amount = env1;
      bevelThickness = env2;
      bevelSize = env3;
      shapesOffset = env4;
      nSteps = env5;
      material = env6;
      extrudeMaterial = env7;
      t1 = env8;
      splineTube = env9;
      binormal = env10;
      normal = env11;
      position2 = env12;
      holes = env13;
      extrudePts = env14;
      extrudeByPath = env15;
      t2 = env16;
      vertices = env17;
      uvgen = env18;
      break;
    case 5:
      shape = env0;
      amount = env1;
      bevelThickness = env2;
      bevelSize = env3;
      vertices = env4;
      shapesOffset = env5;
      nSteps = env6;
      material = env7;
      extrudeMaterial = env8;
      t1 = env9;
      splineTube = env10;
      binormal = env11;
      normal = env12;
      position2 = env13;
      holes = env14;
      extrudePts = env15;
      extrudeByPath = env16;
      t2 = env17;
      uvgen = env18;
      break;
    case 6:
      shape = env0;
      amount = env1;
      material = env2;
      extrudeMaterial = env3;
      t1 = env4;
      holesMovements = env5;
      ahole = env6;
      verticesMovements = env7;
      splineTube = env8;
      binormal = env9;
      oneHoleMovements = env10;
      normal = env11;
      il = env12;
      extrudePts = env13;
      position2 = env14;
      t2 = env15;
      extrudeByPath = env16;
      h = env17;
      vertices = env18;
      flen = env19;
      uvgen = env20;
      faces = env21;
      bevelThickness = env22;
      vlen = env23;
      bevelSize = env24;
      contourMovements = env25;
      shapesOffset = env26;
      nSteps = env27;
      holes = env28;
      vertices0 = env29;
      break;
    case 7:
      shape = env0;
      amount = env1;
      ahole = env2;
      h = env3;
      material = env4;
      extrudeMaterial = env5;
      b = env6;
      t1 = env7;
      t = env8;
      verticesMovements = env9;
      z = env10;
      splineTube = env11;
      binormal = env12;
      holesMovements = env13;
      normal = env14;
      position2 = env15;
      vert = env16;
      bs = env17;
      extrudePts = env18;
      extrudeByPath = env19;
      vertices = env20;
      t2 = env21;
      flen = env22;
      i = env23;
      uvgen = env24;
      bevelThickness = env25;
      bevelSize = env26;
      faces = env27;
      contourMovements = env28;
      vlen = env29;
      shapesOffset = env30;
      nSteps = env31;
      oneHoleMovements = env32;
      t3 = env33;
      holes = env34;
      vertices0 = env35;
      break;
    case 8:
      shape = env0;
      amount = env1;
      bs = env2;
      material = env3;
      extrudeMaterial = env4;
      b = env5;
      holesMovements = env6;
      t3 = env7;
      t1 = env8;
      verticesMovements = env9;
      splineTube = env10;
      binormal = env11;
      normal = env12;
      ahole = env13;
      extrudePts = env14;
      oneHoleMovements = env15;
      position2 = env16;
      t2 = env17;
      extrudeByPath = env18;
      vertices = env19;
      vlen = env20;
      flen = env21;
      uvgen = env22;
      faces = env23;
      h = env24;
      bevelThickness = env25;
      bevelSize = env26;
      contourMovements = env27;
      shapesOffset = env28;
      nSteps = env29;
      vert = env30;
      holes = env31;
      t = env32;
      z = env33;
      i = env34;
      vertices0 = env35;
      break;
    case 9:
      shape = env0;
      amount = env1;
      vertices0 = env2;
      ahole = env3;
      h = env4;
      material = env5;
      extrudeMaterial = env6;
      t1 = env7;
      holesMovements = env8;
      t = env9;
      verticesMovements = env10;
      z = env11;
      splineTube = env12;
      binormal = env13;
      normal = env14;
      position2 = env15;
      extrudePts = env16;
      t2 = env17;
      vlen = env18;
      vertices = env19;
      flen = env20;
      uvgen = env21;
      faces = env22;
      bevelThickness = env23;
      vert = env24;
      bevelSize = env25;
      contourMovements = env26;
      t3 = env27;
      shapesOffset = env28;
      nSteps = env29;
      oneHoleMovements = env30;
      t4 = env31;
      holes = env32;
      i = env33;
      break;
    case 10:
      shape = env0;
      amount = env1;
      vertices0 = env2;
      ahole = env3;
      h = env4;
      material = env5;
      extrudeMaterial = env6;
      t1 = env7;
      holesMovements = env8;
      t = env9;
      verticesMovements = env10;
      z = env11;
      splineTube = env12;
      binormal = env13;
      normal = env14;
      position2 = env15;
      extrudePts = env16;
      t2 = env17;
      vlen = env18;
      vertices = env19;
      flen = env20;
      uvgen = env21;
      faces = env22;
      bevelThickness = env23;
      vert = env24;
      bevelSize = env25;
      contourMovements = env26;
      t3 = env27;
      shapesOffset = env28;
      nSteps = env29;
      oneHoleMovements = env30;
      t6 = env31;
      holes = env32;
      i = env33;
      break;
    case 11:
      amount = env0;
      bevelSize = env1;
      t3 = env2;
      nSteps = env3;
      i = env4;
      vert = env5;
      verticesMovements = env6;
      splineTube = env7;
      binormal = env8;
      normal = env9;
      position2 = env10;
      extrudePts = env11;
      t2 = env12;
      s = env13;
      vlen = env14;
      t4 = env15;
      vertices0 = env16;
      break;
    case 12:
      amount = env0;
      bevelSize = env1;
      t6 = env2;
      t3 = env3;
      nSteps = env4;
      i = env5;
      vert = env6;
      verticesMovements = env7;
      splineTube = env8;
      binormal = env9;
      normal = env10;
      position2 = env11;
      extrudePts = env12;
      t2 = env13;
      s = env14;
      vlen = env15;
      vertices0 = env16;
      break;
    case 13:
      shape = env0;
      amount = env1;
      ahole = env2;
      h = env3;
      material = env4;
      extrudeMaterial = env5;
      t1 = env6;
      holesMovements = env7;
      t = env8;
      z = env9;
      extrudePts = env10;
      t2 = env11;
      vlen = env12;
      vertices = env13;
      flen = env14;
      uvgen = env15;
      faces = env16;
      bevelThickness = env17;
      bevelSize = env18;
      contourMovements = env19;
      t3 = env20;
      shapesOffset = env21;
      vert = env22;
      nSteps = env23;
      oneHoleMovements = env24;
      i = env25;
      t4 = env26;
      holes = env27;
      break;
    case 14:
      ahole = env0;
      amount = env1;
      shape = env2;
      b = env3;
      material = env4;
      extrudeMaterial = env5;
      t1 = env6;
      holesMovements = env7;
      vert = env8;
      extrudePts = env9;
      t2 = env10;
      vertices = env11;
      vlen = env12;
      flen = env13;
      uvgen = env14;
      faces = env15;
      bevelThickness = env16;
      bevelSize = env17;
      contourMovements = env18;
      t3 = env19;
      oneHoleMovements = env20;
      shapesOffset = env21;
      nSteps = env22;
      t4 = env23;
      holes = env24;
      break;
    case 15:
      shape = env0;
      amount = env1;
      bs = env2;
      b = env3;
      material = env4;
      t4 = env5;
      t1 = env6;
      holesMovements = env7;
      extrudeMaterial = env8;
      ahole = env9;
      oneHoleMovements = env10;
      extrudePts = env11;
      t2 = env12;
      vertices = env13;
      h = env14;
      flen = env15;
      vlen = env16;
      faces = env17;
      bevelThickness = env18;
      bevelSize = env19;
      contourMovements = env20;
      t3 = env21;
      shapesOffset = env22;
      nSteps = env23;
      uvgen = env24;
      vert = env25;
      t = env26;
      holes = env27;
      z = env28;
      i = env29;
      break;
    case 16:
      amount = env0;
      bs = env1;
      t4 = env2;
      t5 = env3;
      nSteps = env4;
      t3 = env5;
      ahole = env6;
      oneHoleMovements = env7;
      extrudePts = env8;
      vert = env9;
      z = env10;
      i = env11;
      h = env12;
      break;
    case 17:
      amount = env0;
      bs = env1;
      t4 = env2;
      t5 = env3;
      nSteps = env4;
      t7 = env5;
      t3 = env6;
      ahole = env7;
      oneHoleMovements = env8;
      extrudePts = env9;
      vert = env10;
      z = env11;
      i = env12;
      h = env13;
      break;
    case 18:
      amount = env0;
      bs = env1;
      t4 = env2;
      t3 = env3;
      nSteps = env4;
      t7 = env5;
      t5 = env6;
      ahole = env7;
      oneHoleMovements = env8;
      extrudePts = env9;
      vert = env10;
      z = env11;
      i = env12;
      h = env13;
      break;
    case 19:
      faces = env0;
      ahole = env1;
      nSteps = env2;
      i = env3;
      t1 = env4;
      t3 = env5;
      t4 = env6;
      holes = env7;
      offset = env8;
      face = env9;
      vertices = env10;
      vlen = env11;
      flen = env12;
      break;
    case 20:
      faces = env0;
      ahole = env1;
      nSteps = env2;
      i = env3;
      t1 = env4;
      t3 = env5;
      t4 = env6;
      holes = env7;
      offset = env8;
      face = env9;
      vertices = env10;
      t5 = env11;
      flen = env12;
      vlen = env13;
      break;
    case 21:
      faces = env0;
      t7 = env1;
      ahole = env2;
      nSteps = env3;
      i = env4;
      t1 = env5;
      t3 = env6;
      t4 = env7;
      holes = env8;
      offset = env9;
      face = env10;
      vertices = env11;
      vlen = env12;
      flen = env13;
      t5 = env14;
      break;
    case 22:
      faces = env0;
      ahole = env1;
      t7 = env2;
      t9 = env3;
      nSteps = env4;
      i = env5;
      t1 = env6;
      t3 = env7;
      t4 = env8;
      holes = env9;
      offset = env10;
      face = env11;
      vertices = env12;
      vlen = env13;
      flen = env14;
      t5 = env15;
      break;
    case 23:
      faces = env0;
      ahole = env1;
      nSteps = env2;
      t1 = env3;
      t2 = env4;
      t3 = env5;
      t4 = env6;
      holes = env7;
      face = env8;
      vertices = env9;
      vlen = env10;
      flen = env11;
      break;
    case 24:
      faces = env0;
      ahole = env1;
      i = env2;
      nSteps = env3;
      t1 = env4;
      t3 = env5;
      t4 = env6;
      offset = env7;
      holes = env8;
      face = env9;
      vertices = env10;
      vlen = env11;
      flen = env12;
      break;
    case 25:
      faces = env0;
      ahole = env1;
      i = env2;
      nSteps = env3;
      t1 = env4;
      t3 = env5;
      t4 = env6;
      offset = env7;
      holes = env8;
      face = env9;
      t5 = env10;
      vertices = env11;
      vlen = env12;
      flen = env13;
      break;
    case 26:
      faces = env0;
      ahole = env1;
      vlen = env2;
      i = env3;
      nSteps = env4;
      t1 = env5;
      t3 = env6;
      t4 = env7;
      offset = env8;
      holes = env9;
      face = env10;
      vertices = env11;
      t5 = env12;
      flen = env13;
      t7 = env14;
      break;
    case 27:
      faces = env0;
      t7 = env1;
      t9 = env2;
      ahole = env3;
      i = env4;
      nSteps = env5;
      t1 = env6;
      t3 = env7;
      t4 = env8;
      offset = env9;
      holes = env10;
      face = env11;
      vertices = env12;
      t5 = env13;
      flen = env14;
      vlen = env15;
      break;
    case 28:
      faces = env0;
      ahole = env1;
      nSteps = env2;
      t1 = env3;
      face = env4;
      t3 = env5;
      t4 = env6;
      i = env7;
      holes = env8;
      vlen = env9;
      vertices = env10;
      flen = env11;
      break;
    case 29:
      faces = env0;
      ahole = env1;
      i = env2;
      nSteps = env3;
      t1 = env4;
      t3 = env5;
      t4 = env6;
      holes = env7;
      vlen = env8;
      vertices = env9;
      flen = env10;
      face = env11;
      break;
    case 30:
      t5 = env0;
      faces = env1;
      i = env2;
      ahole = env3;
      nSteps = env4;
      t1 = env5;
      t3 = env6;
      t4 = env7;
      holes = env8;
      vlen = env9;
      vertices = env10;
      face = env11;
      flen = env12;
      break;
    case 31:
      faces = env0;
      ahole = env1;
      i = env2;
      t5 = env3;
      t7 = env4;
      nSteps = env5;
      t1 = env6;
      t3 = env7;
      t4 = env8;
      holes = env9;
      vlen = env10;
      vertices = env11;
      face = env12;
      flen = env13;
      break;
    case 32:
      faces = env0;
      ahole = env1;
      i = env2;
      t5 = env3;
      nSteps = env4;
      t7 = env5;
      t9 = env6;
      t1 = env7;
      t3 = env8;
      t4 = env9;
      holes = env10;
      vlen = env11;
      vertices = env12;
      face = env13;
      flen = env14;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = {};
      t1.bevelSegments_1 = bevelSegments;
    case 1:
      state0 = 0;
      var uvgen = !(UVGenerator == null) ? UVGenerator : $.ExtrudeGeometryWorldUVGenerator$();
    case 2:
      if (state0 === 2 || state0 === 0 && typeof steps === 'object' && steps !== null && (steps.constructor === Array || steps.is$List()))
        switch (state0) {
          case 0:
            var t2 = $.get$length(steps);
          case 2:
            state0 = 0;
            var nSteps = t2;
        }
      else
        nSteps = steps;
      if (!(extrudePath == null)) {
        if (typeof steps === 'object' && steps !== null && (steps.constructor === Array || steps.is$List())) {
          var divisions = [0];
          $.addAll(divisions, steps);
          var extrudePts = extrudePath.getUPoints$1(divisions);
        } else
          extrudePts = extrudePath.getSpacedPoints$1(steps);
        var splineTube = !(frames$ == null) ? frames$ : $.TubeGeometry$FrenetFrames(extrudePath, steps, false);
        var binormal = $.Vector3$(0, 0, 0);
        var normal = $.Vector3$(0, 0, 0);
        var position2 = $.Vector3$(0, 0, 0);
        bevelEnabled = false;
        var extrudeByPath = true;
      } else {
        splineTube = null;
        binormal = null;
        normal = null;
        position2 = null;
        extrudePts = null;
        extrudeByPath = false;
      }
      t2 = bevelEnabled === true;
      if (!t2) {
        t1.bevelSegments_1 = 0;
        bevelThickness = 0;
        bevelSize = 0;
      }
      var shapesOffset = $.get$length(this.vertices);
      if (!(bendPath == null))
        shape.addWrapPath$1(bendPath);
      var shapePoints = shape.extractPoints$0();
      var vertices = $.index(shapePoints, 'shape');
    case 3:
      state0 = 0;
      var holes = $.index(shapePoints, 'holes');
    case 4:
      state0 = 0;
    case 5:
      if (state0 === 5 || state0 === 0 && $.isClockWise(vertices) !== true)
        switch (state0) {
          case 0:
            vertices = this._reverse$1(vertices);
          case 5:
            state0 = 0;
            for (var ahole = null, h = 0; $.ltB(h, $.get$length(holes)); ++h) {
              ahole = $.index(holes, h);
              if ($.isClockWise(ahole) === true)
                $.indexSet(holes, h, this._reverse$1(ahole));
            }
        }
      else
        ahole = null;
      var faces = $.triangulateShape(vertices, holes);
      for (var vertices0 = vertices, h = 0; $.ltB(h, $.get$length(holes)); ++h) {
        ahole = $.index(holes, h);
        vertices0 = $.ListImplementation_List$from(vertices0);
        $.addAll(vertices0, ahole);
      }
      var vlen = $.get$length(vertices0);
      var flen = faces.length;
      $.get$length(vertices);
      var contourMovements = $.ListImplementation_List($.get$length(vertices));
      var il = $.get$length(vertices);
      var j = $.sub(il, 1);
      for (var i = 0, k = 1; $.ltB(i, il); ++i) {
        if ($.eqB(j, il))
          j = 0;
        if (k === il)
          k = 0;
        $.index(vertices, i);
        $.index(vertices, j);
        $.index(vertices, k);
        var t3 = this._getBevelVec$3($.index(vertices, i), $.index(vertices, j), $.index(vertices, k));
        if (i >= contourMovements.length)
          throw $.ioore(i);
        contourMovements[i] = t3;
        j = $.add(j, 1);
        ++k;
      }
      var holesMovements = [];
      var verticesMovements = $.ListImplementation_List$from(contourMovements);
      h = 0;
      var oneHoleMovements = null;
    case 6:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(h, $.get$length(holes)))
                break L0;
              ahole = $.index(holes, h);
              oneHoleMovements = $.ListImplementation_List($.get$length(ahole));
              il = $.get$length(ahole);
            case 6:
              state0 = 0;
              j = $.sub(il, 1);
              for (i = 0, k = 1; $.ltB(i, il); ++i) {
                if ($.eqB(j, il))
                  j = 0;
                if (k === il)
                  k = 0;
                t3 = this._getBevelVec$3($.index(ahole, i), $.index(ahole, j), $.index(ahole, k));
                if (i >= oneHoleMovements.length)
                  throw $.ioore(i);
                oneHoleMovements[i] = t3;
                j = $.add(j, 1);
                ++k;
              }
              holesMovements.push(oneHoleMovements);
              $.addAll(verticesMovements, oneHoleMovements);
              ++h;
          }
      var b = 0;
      var bs = null;
      var t = null;
      var z = null;
      var vert = null;
    default:
      L1:
        while (true)
          switch (state0) {
            case 0:
              t3 = t1.bevelSegments_1;
            case 7:
              state0 = 0;
              if (!$.ltB(b, t3))
                break L1;
              t3 = t1.bevelSegments_1;
              if (typeof t3 !== 'number')
                throw $.iae(t3);
              t = b / t3;
              z = $.mul(bevelThickness, 1 - t);
              bs = $.mul(bevelSize, $.sin(t * 3.141592653589793 / 2));
              for (i = 0; $.ltB(i, $.get$length(vertices)); ++i) {
                t3 = $.index(vertices, i);
                if (i >= contourMovements.length)
                  throw $.ioore(i);
                vert = this._scalePt2$3(t3, contourMovements[i], bs);
                this._v$3(vert.get$x(), vert.get$y(), $.neg(z));
              }
              h = 0;
            case 8:
              L2:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.ltB(h, $.get$length(holes)))
                        break L2;
                      ahole = $.index(holes, h);
                      if (h >= holesMovements.length)
                        throw $.ioore(h);
                      oneHoleMovements = holesMovements[h];
                      i = 0;
                    case 8:
                      L3:
                        while (true)
                          switch (state0) {
                            case 0:
                              t3 = $.get$length(ahole);
                            case 8:
                              state0 = 0;
                              if (!$.ltB(i, t3))
                                break L3;
                              vert = this._scalePt2$3($.index(ahole, i), $.index(oneHoleMovements, i), bs);
                              this._v$3(vert.get$x(), vert.get$y(), $.neg(z));
                              ++i;
                          }
                      ++h;
                  }
              ++b;
          }
      t3 = !extrudeByPath;
      i = 0;
    case 9:
    case 10:
      L4:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(i, vlen))
                break L4;
              if (t2) {
                var t4 = $.index(vertices0, i);
                if (i >= verticesMovements.length)
                  throw $.ioore(i);
                vert = this._scalePt2$3(t4, verticesMovements[i], bevelSize);
              } else
                vert = $.index(vertices0, i);
            default:
              if (state0 === 0 && t3)
                this._v$3(vert.get$x(), vert.get$y(), 0);
              else
                switch (state0) {
                  case 0:
                    t4 = splineTube.get$normals();
                  case 9:
                    state0 = 0;
                    normal.copy$1($.index(t4, 0)).multiplyScalar$1(vert.get$x());
                    var t6 = splineTube.get$binormals();
                  case 10:
                    state0 = 0;
                    binormal.copy$1($.index(t6, 0)).multiplyScalar$1(vert.get$y());
                    position2.copy$1($.index(extrudePts, 0)).addSelf$1(normal).addSelf$1(binormal);
                    this._v$3(position2.get$x(), position2.get$y(), position2.get$z());
                }
              ++i;
          }
      var s = 1;
    case 11:
    case 12:
      L5:
        while (true)
          switch (state0) {
            case 0:
              if (!$.leB(s, nSteps))
                break L5;
              i = 0;
            default:
              L6:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.ltB(i, vlen))
                        break L6;
                      if (t2) {
                        t4 = $.index(vertices0, i);
                        if (i >= verticesMovements.length)
                          throw $.ioore(i);
                        vert = this._scalePt2$3(t4, verticesMovements[i], bevelSize);
                      } else
                        vert = $.index(vertices0, i);
                    default:
                      if (state0 === 0 && t3)
                        this._v$3(vert.get$x(), vert.get$y(), $.mul($.div(amount, nSteps), s));
                      else
                        switch (state0) {
                          case 0:
                            t4 = splineTube.get$normals();
                          case 11:
                            state0 = 0;
                            normal.copy$1($.index(t4, s)).multiplyScalar$1(vert.get$x());
                            t6 = splineTube.get$binormals();
                          case 12:
                            state0 = 0;
                            binormal.copy$1($.index(t6, s)).multiplyScalar$1(vert.get$y());
                            position2.copy$1($.index(extrudePts, s)).addSelf$1(normal).addSelf$1(binormal);
                            this._v$3(position2.get$x(), position2.get$y(), position2.get$z());
                        }
                      ++i;
                  }
              ++s;
          }
      t4 = t1.bevelSegments_1;
    case 13:
      state0 = 0;
      b = $.sub(t4, 1);
      bs = bevelSize;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      L7:
        while (true)
          switch (state0) {
            case 0:
              if (!$.geB(b, 0))
                break L7;
              t4 = t1.bevelSegments_1;
            case 14:
              state0 = 0;
              t = $.div(b, t4);
              if (typeof t !== 'number')
                throw $.iae(t);
              z = $.mul(bevelThickness, 1 - t);
              bs = $.mul(bevelSize, $.sin(t * 3.141592653589793 / 2));
              for (i = 0; $.ltB(i, $.get$length(vertices)); ++i) {
                t4 = $.index(vertices, i);
                if (i >= contourMovements.length)
                  throw $.ioore(i);
                vert = this._scalePt2$3(t4, contourMovements[i], bs);
                this._v$3(vert.get$x(), vert.get$y(), $.add(amount, z));
              }
              h = 0;
            default:
              L8:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.ltB(h, $.get$length(holes)))
                        break L8;
                      ahole = $.index(holes, h);
                      if (h >= holesMovements.length)
                        throw $.ioore(h);
                      oneHoleMovements = holesMovements[h];
                      i = 0;
                    default:
                      L9:
                        while (true)
                          switch (state0) {
                            case 0:
                              t4 = $.get$length(ahole);
                            case 15:
                              state0 = 0;
                              if (!$.ltB(i, t4))
                                break L9;
                              vert = this._scalePt2$3($.index(ahole, i), $.index(oneHoleMovements, i), bs);
                            default:
                              if (state0 === 0 && t3)
                                this._v$3(vert.get$x(), vert.get$y(), $.add(amount, z));
                              else
                                switch (state0) {
                                  case 0:
                                    t4 = vert.get$x();
                                    var t5 = vert.get$y();
                                  case 16:
                                    state0 = 0;
                                    var t7 = $.index(extrudePts, $.sub(nSteps, 1)).get$y();
                                  case 17:
                                    state0 = 0;
                                    t7 = $.add(t5, t7);
                                    t5 = $.index(extrudePts, $.sub(nSteps, 1)).get$x();
                                  case 18:
                                    state0 = 0;
                                    this._v$3(t4, t7, $.add(t5, z));
                                }
                              ++i;
                          }
                      ++h;
                  }
              b = $.sub(b, 1);
          }
      t3 = new $.ExtrudeGeometry_addShape_f3(material, uvgen, shapesOffset, this, shape);
      t4 = new $.ExtrudeGeometry_addShape_f4(uvgen, shapesOffset, this, extrudeMaterial, shape);
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      if (state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 0 && t2)
        switch (state0) {
          case 0:
            var offset = $.mul(vlen, 0);
            var face = null;
            i = 0;
          default:
            L10:
              while (true)
                switch (state0) {
                  case 0:
                    if (!(i < flen))
                      break L10;
                    if (i >= faces.length)
                      throw $.ioore(i);
                    face = faces[i];
                  case 19:
                    state0 = 0;
                    t5 = $.index(face, 2);
                  case 20:
                    state0 = 0;
                    t5 = $.add(t5, offset);
                    t7 = $.index(face, 1);
                  case 21:
                    state0 = 0;
                    t7 = $.add(t7, offset);
                    var t9 = $.index(face, 0);
                  case 22:
                    state0 = 0;
                    t3.call$4(t5, t7, $.add(t9, offset), true);
                    ++i;
                }
            t2 = t1.bevelSegments_1;
          case 23:
            state0 = 0;
            offset = $.mul(vlen, $.add(nSteps, $.mul(t2, 2)));
            i = 0;
          case 24:
          case 25:
          case 26:
          case 27:
            L11:
              while (true)
                switch (state0) {
                  case 0:
                    if (!(i < flen))
                      break L11;
                    if (i >= faces.length)
                      throw $.ioore(i);
                    face = faces[i];
                  case 24:
                    state0 = 0;
                    t5 = $.index(face, 0);
                  case 25:
                    state0 = 0;
                    t5 = $.add(t5, offset);
                    t7 = $.index(face, 1);
                  case 26:
                    state0 = 0;
                    t7 = $.add(t7, offset);
                    t9 = $.index(face, 2);
                  case 27:
                    state0 = 0;
                    t3.call$4(t5, t7, $.add(t9, offset), false);
                    ++i;
                }
        }
      else
        switch (state0) {
          case 0:
            face = null;
            i = 0;
          case 28:
            L12:
              while (true)
                switch (state0) {
                  case 0:
                    if (!(i < flen))
                      break L12;
                    if (i >= faces.length)
                      throw $.ioore(i);
                    face = faces[i];
                  case 28:
                    state0 = 0;
                    t3.call$4($.index(face, 2), $.index(face, 1), $.index(face, 0), true);
                    ++i;
                }
            i = 0;
          default:
            L13:
              while (true)
                switch (state0) {
                  case 0:
                    if (!(i < flen))
                      break L13;
                    if (i >= faces.length)
                      throw $.ioore(i);
                    face = faces[i];
                  case 29:
                    state0 = 0;
                    t5 = $.index(face, 0);
                  case 30:
                    state0 = 0;
                    t5 = $.add(t5, $.mul(vlen, nSteps));
                    t7 = $.index(face, 1);
                  case 31:
                    state0 = 0;
                    t7 = $.add(t7, $.mul(vlen, nSteps));
                    t9 = $.index(face, 2);
                  case 32:
                    state0 = 0;
                    t3.call$4(t5, t7, $.add(t9, $.mul(vlen, nSteps)), false);
                    ++i;
                }
        }
      t1 = new $.ExtrudeGeometry_addShape_sidewalls(nSteps, t1, t4, vlen);
      t1.call$2(vertices, 0);
      t2 = $.get$length(vertices);
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      var layeroffset = 0 + t2;
      for (h = 0; $.ltB(h, $.get$length(holes)); ++h) {
        ahole = $.index(holes, h);
        t1.call$2(ahole, layeroffset);
        t2 = $.get$length(ahole);
        if (typeof t2 !== 'number')
          throw $.iae(t2);
        layeroffset += t2;
      }
  }
},
 addShape$13: function(shape,amount,bevelThickness,bevelSize,bevelSegments,bevelEnabled,curveSegments,steps,bendPath,extrudePath,frames$,material,extrudeMaterial) {
  return this.addShape$14(shape,amount,bevelThickness,bevelSize,bevelSegments,bevelEnabled,curveSegments,steps,bendPath,extrudePath,frames$,material,extrudeMaterial,null)
},
 ExtrudeGeometry$13$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$frames$$material$steps: function(shapes, amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, frames$, material, steps) {
  if (bevelSize == null)
    bevelSize = $.sub(bevelThickness, 2);
  var t1 = this.shapes;
  if (t1 == null) {
    this.shapes = [];
    return;
  }
  this.shapebb = $.get$last(t1).getBoundingBox$0();
  this.addShapeList$13(this.shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames$, material, extrudeMaterial);
  this.computeCentroids$0();
  this.computeFaceNormals$0();
}
};

$$.ExtrudeGeometryWorldUVGenerator = {"": [],
 "super": "Object",
 generateTopUV$6: function(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC) {
  var ax = $.index(geometry.get$vertices(), indexA).get$x();
  var ay = $.index(geometry.get$vertices(), indexA).get$y();
  var bx = $.index(geometry.get$vertices(), indexB).get$x();
  var by = $.index(geometry.get$vertices(), indexB).get$y();
  var cx = $.index(geometry.get$vertices(), indexC).get$x();
  var cy = $.index(geometry.get$vertices(), indexC).get$y();
  if (typeof ay !== 'number')
    throw $.iae(ay);
  var t1 = $.UV$(ax, 1 - ay);
  if (typeof by !== 'number')
    throw $.iae(by);
  var t2 = $.UV$(bx, 1 - by);
  if (typeof cy !== 'number')
    throw $.iae(cy);
  return [t1, t2, $.UV$(cx, 1 - cy)];
},
 generateBottomUV$6: function(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC) {
  return this.generateTopUV$6(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC);
},
 generateSideWallUV$10: function(geometry, extrudedShape, wallContour, extrudeOptions, indexA, indexB, indexC, indexD, stepIndex, stepsLength) {
  var ax = $.index(geometry.get$vertices(), indexA).get$x();
  var ay = $.index(geometry.get$vertices(), indexA).get$y();
  var az = $.index(geometry.get$vertices(), indexA).get$z();
  var bx = $.index(geometry.get$vertices(), indexB).get$x();
  var by = $.index(geometry.get$vertices(), indexB).get$y();
  var bz = $.index(geometry.get$vertices(), indexB).get$z();
  var cx = $.index(geometry.get$vertices(), indexC).get$x();
  var cy = $.index(geometry.get$vertices(), indexC).get$y();
  var cz = $.index(geometry.get$vertices(), indexC).get$z();
  var dx = $.index(geometry.get$vertices(), indexD).get$x();
  var dy = $.index(geometry.get$vertices(), indexD).get$y();
  var dz = $.index(geometry.get$vertices(), indexD).get$z();
  if ($.ltB($.abs($.sub(ay, by)), 0.01))
    return [$.UV$(ax, az), $.UV$(bx, bz), $.UV$(cx, cz), $.UV$(dx, dz)];
  else
    return [$.UV$(ay, az), $.UV$(by, bz), $.UV$(cy, cz), $.UV$(dy, dz)];
}
};

$$.TubeGeometry = {"": ["path?", "segments", "nSegments", "radius?", "segmentsRadius", "closed", "grid", "tangents?", "normals?", "binormals?", "debug", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "bones", "animation", "__data"],
 "super": "Geometry",
 _vert$3: function(x, y, z) {
  $.add$1(this.vertices, $.Vector3$(x, y, z));
  var t1 = $.get$length(this.vertices);
  if (typeof t1 !== 'number')
    return this._vert$3$bailout(1, t1);
  return t1 - 1;
},
 _vert$3$bailout: function(state0, t1) {
  return $.sub(t1, 1);
},
 _frenetFrames$3: function(ppath, psegments, pclosed) {
  var t1 = {};
  this.path = ppath;
  this.segments = psegments;
  this.closed = pclosed;
  $.Vector3$(0, 0, 0);
  var normal = $.Vector3$(0, 0, 0);
  $.Vector3$(0, 0, 0);
  var vec = $.Vector3$(0, 0, 0);
  var mat = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  t1.smallest_1 = null;
  t1.tx_2 = null;
  t1.ty_3 = null;
  t1.tz_4 = null;
  var t2 = this.segments;
  if (typeof t2 === 'number') {
    var length$ = this.segments;
    if (typeof length$ !== 'number')
      return this._frenetFrames$3$bailout(1, vec, t1, mat, normal, length$);
    this.segments = [];
    for (var i = 1; i <= length$; ++i)
      $.add$1(this.segments, i / length$);
  }
  this.nSegments = $.get$length(this.segments);
  var numpoints = $.add(this.nSegments, 1);
  if (typeof numpoints !== 'number')
    return this._frenetFrames$3$bailout(2, vec, t1, mat, numpoints, normal);
  this.tangents = $.ListImplementation_List(numpoints);
  this.normals = $.ListImplementation_List(numpoints);
  this.binormals = $.ListImplementation_List(numpoints);
  for (i = 0; i < numpoints; ++i) {
    t2 = this.tangents;
    var t3 = i === 0;
    var t4 = this.path;
    $.indexSet(t2, i, t3 ? t4.getTangentAt$1(0) : t4.getTangentAt$1($.index(this.segments, i - 1)));
    $.index(this.tangents, i).normalize$0();
  }
  new $.TubeGeometry__frenetFrames__initialNormal1(this);
  new $.TubeGeometry__frenetFrames__initialNormal2(0.0001, this);
  new $.TubeGeometry__frenetFrames__initialNormal3(vec, this, t1, normal).call$0();
  for (var i = 1, theta = null; i < numpoints; ++i) {
    t1 = this.normals;
    t2 = i - 1;
    $.indexSet(t1, i, $.index(t1, t2).clone$0());
    t1 = this.binormals;
    $.indexSet(t1, i, $.index(t1, t2).clone$0());
    vec.cross$2($.index(this.tangents, t2), $.index(this.tangents, i));
    if ($.gtB(vec.length$0(), 0.0001)) {
      vec.normalize$0();
      theta = $.acos($.index(this.tangents, t2).dot$1($.index(this.tangents, i)));
      mat.makeRotationAxis$2(vec, theta).multiplyVector3$1($.index(this.normals, i));
    }
    $.index(this.binormals, i).cross$2($.index(this.tangents, i), $.index(this.normals, i));
  }
  if (this.closed === true) {
    t1 = $.index(this.normals, 0);
    t2 = this.normals;
    t3 = numpoints - 1;
    theta = $.acos(t1.dot$1($.index(t2, t3))) / t3;
    if ($.gtB($.index(this.tangents, 0).dot$1(vec.cross$2($.index(this.normals, 0), $.index(this.normals, t3))), 0))
      theta = -theta;
    for (i = 1; i < numpoints; ++i) {
      mat.makeRotationAxis$2($.index(this.tangents, i), theta * i).multiplyVector3$1($.index(this.normals, i));
      $.index(this.binormals, i).cross$2($.index(this.tangents, i), $.index(this.normals, i));
    }
  }
},
 _frenetFrames$3$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      vec = env0;
      t1 = env1;
      mat = env2;
      normal = env3;
      length$ = env4;
      break;
    case 2:
      vec = env0;
      t1 = env1;
      mat = env2;
      numpoints = env3;
      normal = env4;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = {};
      this.path = ppath;
      this.segments = psegments;
      this.closed = pclosed;
      $.Vector3$(0, 0, 0);
      var normal = $.Vector3$(0, 0, 0);
      $.Vector3$(0, 0, 0);
      var vec = $.Vector3$(0, 0, 0);
      var mat = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      t1.smallest_1 = null;
      t1.tx_2 = null;
      t1.ty_3 = null;
      t1.tz_4 = null;
      var t2 = this.segments;
    case 1:
      if (state0 === 1 || state0 === 0 && typeof t2 === 'number')
        switch (state0) {
          case 0:
            var length$ = this.segments;
          case 1:
            state0 = 0;
            this.segments = [];
            for (var i = 1; $.leB(i, length$); ++i) {
              t2 = this.segments;
              if (typeof length$ !== 'number')
                throw $.iae(length$);
              $.add$1(t2, i / length$);
            }
        }
      this.nSegments = $.get$length(this.segments);
      var numpoints = $.add(this.nSegments, 1);
    case 2:
      state0 = 0;
      this.tangents = $.ListImplementation_List(numpoints);
      this.normals = $.ListImplementation_List(numpoints);
      this.binormals = $.ListImplementation_List(numpoints);
      for (i = 0; $.ltB(i, numpoints); ++i) {
        t2 = this.tangents;
        var t3 = i === 0;
        var t4 = this.path;
        $.indexSet(t2, i, t3 ? t4.getTangentAt$1(0) : t4.getTangentAt$1($.index(this.segments, i - 1)));
        $.index(this.tangents, i).normalize$0();
      }
      new $.TubeGeometry__frenetFrames__initialNormal1(this);
      new $.TubeGeometry__frenetFrames__initialNormal2(0.0001, this);
      new $.TubeGeometry__frenetFrames__initialNormal3(vec, this, t1, normal).call$0();
      for (var i = 1, theta = null; $.ltB(i, numpoints); ++i) {
        t1 = this.normals;
        t2 = i - 1;
        $.indexSet(t1, i, $.index(t1, t2).clone$0());
        t1 = this.binormals;
        $.indexSet(t1, i, $.index(t1, t2).clone$0());
        vec.cross$2($.index(this.tangents, t2), $.index(this.tangents, i));
        if ($.gtB(vec.length$0(), 0.0001)) {
          vec.normalize$0();
          theta = $.acos($.index(this.tangents, t2).dot$1($.index(this.tangents, i)));
          mat.makeRotationAxis$2(vec, theta).multiplyVector3$1($.index(this.normals, i));
        }
        $.index(this.binormals, i).cross$2($.index(this.tangents, i), $.index(this.normals, i));
      }
      if (this.closed === true) {
        theta = $.acos($.index(this.normals, 0).dot$1($.index(this.normals, $.sub(numpoints, 1))));
        t1 = $.sub(numpoints, 1);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        theta /= t1;
        if ($.gtB($.index(this.tangents, 0).dot$1(vec.cross$2($.index(this.normals, 0), $.index(this.normals, $.sub(numpoints, 1)))), 0))
          theta = -theta;
        for (i = 1; $.ltB(i, numpoints); ++i) {
          mat.makeRotationAxis$2($.index(this.tangents, i), theta * i).multiplyVector3$1($.index(this.normals, i));
          $.index(this.binormals, i).cross$2($.index(this.tangents, i), $.index(this.normals, i));
        }
      }
  }
},
 TubeGeometry$FrenetFrames$3: function(path, segments, closed$) {
  this._frenetFrames$3(path, segments, closed$);
},
 TubeGeometry$6: function(path, segments, radius, segmentsRadius, closed$, debug) {
  var t1 = debug === true;
  if (t1)
    this.debug = $.Object3D$();
  var numpoints = $.add(segments, 1);
  if (typeof numpoints !== 'number')
    return this.TubeGeometry$6$bailout(1, path, segments, t1, numpoints, closed$, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var pos2 = $.Vector3$(0, 0, 0);
  this._frenetFrames$3(path, segments, closed$);
  var t3 = this.grid;
  if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
    return this.TubeGeometry$6$bailout(2, path, numpoints, closed$, pos2, t1, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  $.set$length(t3, numpoints);
  var t2 = this.segmentsRadius;
  if (typeof t2 !== 'number')
    return this.TubeGeometry$6$bailout(3, path, numpoints, closed$, pos2, t1, t3, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var t5 = this.radius;
  if (typeof t5 !== 'number')
    return this.TubeGeometry$6$bailout(4, path, t5, numpoints, closed$, pos2, t1, t3, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var t7 = numpoints - 1;
  var t8 = -t5;
  var tangent = null;
  var normal = null;
  var binormal = null;
  var u = null;
  var v = null;
  var cx = null;
  var cy = null;
  var pos = null;
  var i = 0;
  var j = null;
  for (; i < numpoints; ++i) {
    var t4 = $.ListImplementation_List(t2);
    if (i >= t3.length)
      throw $.ioore(i);
    t3[i] = t4;
    u = i / t7;
    pos = path.getPointAt$1(u);
    tangent = $.index(this.tangents, i);
    normal = $.index(this.normals, i);
    binormal = $.index(this.binormals, i);
    if (t1) {
      $.add$1(this.debug, $.ArrowHelper$(tangent, pos, t5, 255));
      $.add$1(this.debug, $.ArrowHelper$(normal, pos, t5, 16711680));
      $.add$1(this.debug, $.ArrowHelper$(binormal, pos, t5, 65280));
    }
    for (j = 0; j < t2; ++j) {
      v = j / t2 * 2 * 3.141592653589793;
      cx = t8 * $.cos(v);
      cy = t5 * $.sin(v);
      pos2.copy$1(pos);
      t4 = pos2.x;
      var t6 = normal.get$x();
      if (typeof t6 !== 'number')
        throw $.iae(t6);
      t6 = cx * t6;
      var t9 = binormal.get$x();
      if (typeof t9 !== 'number')
        throw $.iae(t9);
      pos2.x = $.add(t4, t6 + cy * t9);
      var t10 = pos2.y;
      var t11 = normal.get$y();
      if (typeof t11 !== 'number')
        throw $.iae(t11);
      t11 = cx * t11;
      var t12 = binormal.get$y();
      if (typeof t12 !== 'number')
        throw $.iae(t12);
      pos2.y = $.add(t10, t11 + cy * t12);
      var t13 = pos2.z;
      var t14 = normal.get$z();
      if (typeof t14 !== 'number')
        throw $.iae(t14);
      t14 = cx * t14;
      var t15 = binormal.get$z();
      if (typeof t15 !== 'number')
        throw $.iae(t15);
      pos2.z = $.add(t13, t14 + cy * t15);
      if (i >= t3.length)
        throw $.ioore(i);
      var t16 = t3[i];
      if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
        return this.TubeGeometry$6$bailout(5, t16, path, closed$, j, t3, v, t1, i, t2, u, cx, pos, numpoints, t5, pos2, cy, tangent, normal, binormal);
      var t18 = this._vert$3(pos2.x, pos2.y, pos2.z);
      if (j >= t16.length)
        throw $.ioore(j);
      t16[j] = t18;
    }
  }
  for (var t1 = closed$ === true, t4 = this.faceVertexUvs, i = 0, ip = null, jp = null, a = null, b = null, c = null, d = null, uva = null, uvb = null, uvc = null, uvd = null; $.ltB(i, this.nSegments); ++i)
    for (var ip0 = i + 1, j = 0; j < t2; ++j) {
      if (t1) {
        t5 = this.nSegments;
        if (typeof t5 !== 'number')
          throw $.iae(t5);
        ip = $.mod(ip0, t5);
      } else
        ip = ip0;
      t5 = j + 1;
      jp = $.mod(t5, t2);
      t6 = t3.length;
      if (i >= t6)
        throw $.ioore(i);
      t7 = t3[i];
      if (typeof t7 !== 'string' && (typeof t7 !== 'object' || t7 === null || t7.constructor !== Array && !t7.is$JavaScriptIndexingBehavior()))
        return this.TubeGeometry$6$bailout(6, t5, jp, t7, i, t3, t2, t4, t1, ip0, j, ip, 0, 0, 0, 0, 0, 0, 0, 0);
      if (j >= t7.length)
        throw $.ioore(j);
      a = t7[j];
      if (ip !== (ip | 0))
        throw $.iae(ip);
      if (ip < 0 || ip >= t6)
        throw $.ioore(ip);
      b = $.index(t3[ip], j);
      if (ip >= t3.length)
        throw $.ioore(ip);
      c = $.index(t3[ip], jp);
      if (i >= t3.length)
        throw $.ioore(i);
      t7 = t3[i];
      if (typeof t7 !== 'string' && (typeof t7 !== 'object' || t7 === null || t7.constructor !== Array && !t7.is$JavaScriptIndexingBehavior()))
        return this.TubeGeometry$6$bailout(7, t5, jp, a, i, t3, b, t2, t4, c, t1, ip0, t7, j, ip, 0, 0, 0, 0, 0);
      if (jp !== (jp | 0))
        throw $.iae(jp);
      if (jp < 0 || jp >= t7.length)
        throw $.ioore(jp);
      d = t7[jp];
      t7 = this.nSegments;
      if (typeof t7 !== 'number')
        throw $.iae(t7);
      t7 = i / t7;
      t10 = j / t2;
      uva = $.UV$(t7, t10);
      t7 = this.nSegments;
      if (typeof t7 !== 'number')
        throw $.iae(t7);
      uvb = $.UV$(ip0 / t7, t10);
      t10 = this.nSegments;
      if (typeof t10 !== 'number')
        throw $.iae(t10);
      t10 = ip0 / t10;
      t5 /= t2;
      uvc = $.UV$(t10, t5);
      t10 = this.nSegments;
      if (typeof t10 !== 'number')
        throw $.iae(t10);
      uvd = $.UV$(i / t10, t5);
      $.add$1(this.faces, $.Face4$(a, b, c, d, null, null, null));
      if (0 >= t4.length)
        throw $.ioore(0);
      $.add$1(t4[0], [uva, uvb, uvc, uvd]);
    }
  this.computeCentroids$0();
  this.computeFaceNormals$0();
  this.computeVertexNormals$0();
},
 TubeGeometry$6$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16, env17, env18) {
  switch (state0) {
    case 1:
      var path = env0;
      var segments = env1;
      t1 = env2;
      numpoints = env3;
      var closed$ = env4;
      break;
    case 2:
      path = env0;
      numpoints = env1;
      closed$ = env2;
      pos2 = env3;
      t1 = env4;
      t3 = env5;
      break;
    case 3:
      path = env0;
      numpoints = env1;
      closed$ = env2;
      pos2 = env3;
      t1 = env4;
      t3 = env5;
      t2 = env6;
      break;
    case 4:
      path = env0;
      t5 = env1;
      numpoints = env2;
      closed$ = env3;
      pos2 = env4;
      t1 = env5;
      t3 = env6;
      t2 = env7;
      break;
    case 5:
      t4 = env0;
      path = env1;
      closed$ = env2;
      j = env3;
      t3 = env4;
      v = env5;
      t1 = env6;
      i = env7;
      t2 = env8;
      u = env9;
      cx = env10;
      pos = env11;
      numpoints = env12;
      t5 = env13;
      pos2 = env14;
      cy = env15;
      tangent = env16;
      normal = env17;
      binormal = env18;
      break;
    case 6:
      t5 = env0;
      jp = env1;
      t6 = env2;
      i = env3;
      t3 = env4;
      t2 = env5;
      t4 = env6;
      t1 = env7;
      ip0 = env8;
      j = env9;
      ip = env10;
      break;
    case 7:
      t5 = env0;
      jp = env1;
      a = env2;
      i = env3;
      t3 = env4;
      b = env5;
      t2 = env6;
      t4 = env7;
      c = env8;
      t1 = env9;
      ip0 = env10;
      t6 = env11;
      j = env12;
      ip = env13;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = debug === true;
      if (t1)
        this.debug = $.Object3D$();
      var numpoints = $.add(segments, 1);
    case 1:
      state0 = 0;
      var pos2 = $.Vector3$(0, 0, 0);
      this._frenetFrames$3(path, segments, closed$);
      var t3 = this.grid;
    case 2:
      state0 = 0;
      $.set$length(t3, numpoints);
      var t2 = this.segmentsRadius;
    case 3:
      state0 = 0;
      var t5 = this.radius;
    case 4:
      state0 = 0;
      var tangent = null;
      var normal = null;
      var binormal = null;
      var u = null;
      var v = null;
      var cx = null;
      var cy = null;
      var pos = null;
      var i = 0;
      var j = null;
    case 5:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(i, numpoints))
                break L0;
              $.indexSet(t3, i, $.ListImplementation_List(t2));
              var t4 = $.sub(numpoints, 1);
              if (typeof t4 !== 'number')
                throw $.iae(t4);
              u = i / t4;
              pos = path.getPointAt$1(u);
              tangent = $.index(this.tangents, i);
              normal = $.index(this.normals, i);
              binormal = $.index(this.binormals, i);
              if (t1) {
                $.add$1(this.debug, $.ArrowHelper$(tangent, pos, t5, 255));
                $.add$1(this.debug, $.ArrowHelper$(normal, pos, t5, 16711680));
                $.add$1(this.debug, $.ArrowHelper$(binormal, pos, t5, 65280));
              }
              j = 0;
            case 5:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.ltB(j, t2))
                        break L1;
                      if (typeof t2 !== 'number')
                        throw $.iae(t2);
                      v = j / t2 * 2 * 3.141592653589793;
                      cx = $.mul($.neg(t5), $.cos(v));
                      cy = $.mul(t5, $.sin(v));
                      pos2.copy$1(pos);
                      pos2.x = $.add(pos2.x, $.add($.mul(cx, normal.get$x()), $.mul(cy, binormal.get$x())));
                      pos2.y = $.add(pos2.y, $.add($.mul(cx, normal.get$y()), $.mul(cy, binormal.get$y())));
                      pos2.z = $.add(pos2.z, $.add($.mul(cx, normal.get$z()), $.mul(cy, binormal.get$z())));
                      t4 = $.index(t3, i);
                    case 5:
                      state0 = 0;
                      $.indexSet(t4, j, this._vert$3(pos2.x, pos2.y, pos2.z));
                      ++j;
                  }
              ++i;
          }
      t1 = closed$ === true;
      t4 = this.faceVertexUvs;
      i = 0;
      var ip = null;
      var jp = null;
      var a = null;
      var b = null;
      var c = null;
      var d = null;
      var uva = null;
      var uvb = null;
      var uvc = null;
      var uvd = null;
    default:
      L2:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(i, this.nSegments))
                break L2;
              var ip0 = i + 1;
              j = 0;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.ltB(j, t2))
                        break L3;
                      if (t1) {
                        t5 = this.nSegments;
                        if (typeof t5 !== 'number')
                          throw $.iae(t5);
                        ip = $.mod(ip0, t5);
                      } else
                        ip = ip0;
                      t5 = j + 1;
                      if (typeof t2 !== 'number')
                        throw $.iae(t2);
                      jp = $.mod(t5, t2);
                      var t6 = $.index(t3, i);
                    case 6:
                      state0 = 0;
                      a = $.index(t6, j);
                      b = $.index($.index(t3, ip), j);
                      c = $.index($.index(t3, ip), jp);
                      t6 = $.index(t3, i);
                    case 7:
                      state0 = 0;
                      d = $.index(t6, jp);
                      t6 = this.nSegments;
                      if (typeof t6 !== 'number')
                        throw $.iae(t6);
                      t6 = i / t6;
                      var t9 = j / t2;
                      uva = $.UV$(t6, t9);
                      t6 = this.nSegments;
                      if (typeof t6 !== 'number')
                        throw $.iae(t6);
                      uvb = $.UV$(ip0 / t6, t9);
                      t9 = this.nSegments;
                      if (typeof t9 !== 'number')
                        throw $.iae(t9);
                      t9 = ip0 / t9;
                      t5 /= t2;
                      uvc = $.UV$(t9, t5);
                      t9 = this.nSegments;
                      if (typeof t9 !== 'number')
                        throw $.iae(t9);
                      uvd = $.UV$(i / t9, t5);
                      $.add$1(this.faces, $.Face4$(a, b, c, d, null, null, null));
                      if (0 >= t4.length)
                        throw $.ioore(0);
                      $.add$1(t4[0], [uva, uvb, uvc, uvd]);
                      ++j;
                  }
              ++i;
          }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
      this.computeVertexNormals$0();
  }
}
};

$$.Curve = {"": ["needsUpdate="],
 "super": "Object",
 getPointAt$1: function(u) {
  return this.getPoint$1(this.getUtoTmapping$1(u));
},
 getPoints$2: function(divisions, closedPath) {
  if (typeof divisions !== 'number')
    return this.getPoints$2$bailout(1, divisions);
  var pts = [];
  for (var d = 0; d <= divisions; ++d)
    pts.push(this.getPoint$1(d / divisions));
  return pts;
},
 getPoints$2$bailout: function(state0, divisions) {
  if (divisions == null)
    divisions = 5;
  var pts = [];
  for (var d = 0; $.leB(d, divisions); ++d) {
    if (typeof divisions !== 'number')
      throw $.iae(divisions);
    pts.push(this.getPoint$1(d / divisions));
  }
  return pts;
},
 getPoints$0: function() {
  return this.getPoints$2(null,false)
},
 getPoints$1: function(divisions) {
  return this.getPoints$2(divisions,false)
},
 getSpacedPoints$2: function(divisions, closedPath) {
  if (typeof divisions !== 'number')
    return this.getSpacedPoints$2$bailout(1, divisions);
  var pts = [];
  for (var d = 0; d <= divisions; ++d)
    pts.push(this.getPointAt$1(d / divisions));
  return pts;
},
 getSpacedPoints$2$bailout: function(state0, divisions) {
  var pts = [];
  for (var d = 0; $.leB(d, divisions); ++d) {
    if (typeof divisions !== 'number')
      throw $.iae(divisions);
    pts.push(this.getPointAt$1(d / divisions));
  }
  return pts;
},
 getSpacedPoints$1: function(divisions) {
  return this.getSpacedPoints$2(divisions,false)
},
 getUPoints$2: function(uList, closedPath) {
  var pts = [];
  for (var t1 = $.iterator(uList); t1.get$hasNext() === true;)
    pts.push(this.getPointAt$1(t1.next$0()));
  return pts;
},
 getUPoints$1: function(uList) {
  return this.getUPoints$2(uList,false)
},
 get$length: function() {
  return $.get$last(this.getLengths$0());
},
 getLengths$1: function(divisions) {
  if (typeof divisions !== 'number')
    return this.getLengths$1$bailout(1, divisions);
  if (typeof divisions !== 'number')
    return this.getLengths$1$bailout(2, divisions);
  var t1 = this.cacheArcLengths;
  if (!(t1 == null) && $.eqB($.get$length(t1), divisions + 1) && this.needsUpdate !== true)
    return this.cacheArcLengths;
  this.needsUpdate = false;
  var cache = [];
  var last = this.getPoint$1(0);
  cache.push(0);
  for (var p = 1, current = null, sum = 0; p <= divisions; ++p) {
    current = this.getPoint$1(p / divisions);
    var distance = typeof current === 'object' && current !== null && !!current.is$Vector3 ? current.distanceTo$1($.propertyTypeCast(last, 'is$Vector3')) : $.propertyTypeCast(current, 'is$Vector2').distanceTo$1($.propertyTypeCast(last, 'is$Vector2'));
    if (typeof distance !== 'number')
      throw $.iae(distance);
    sum += distance;
    cache.push(sum);
    last = current;
  }
  this.cacheArcLengths = cache;
  return cache;
},
 getLengths$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      var divisions = env0;
      break;
    case 2:
      divisions = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (divisions == null) {
        divisions = this._arcLengthDivisions;
        divisions = !(divisions == null) ? divisions : 200;
      }
    case 2:
      state0 = 0;
      var t1 = this.cacheArcLengths;
      if (!(t1 == null) && $.eqB($.get$length(t1), $.add(divisions, 1)) && this.needsUpdate !== true)
        return this.cacheArcLengths;
      this.needsUpdate = false;
      var cache = [];
      var last = this.getPoint$1(0);
      cache.push(0);
      for (var p = 1, current = null, sum = 0; $.leB(p, divisions); ++p) {
        if (typeof divisions !== 'number')
          throw $.iae(divisions);
        current = this.getPoint$1(p / divisions);
        var distance = typeof current === 'object' && current !== null && !!current.is$Vector3 ? current.distanceTo$1($.propertyTypeCast(last, 'is$Vector3')) : $.propertyTypeCast(current, 'is$Vector2').distanceTo$1($.propertyTypeCast(last, 'is$Vector2'));
        if (typeof distance !== 'number')
          throw $.iae(distance);
        sum += distance;
        cache.push(sum);
        last = current;
      }
      this.cacheArcLengths = cache;
      return cache;
  }
},
 getLengths$0: function() {
  return this.getLengths$1(null)
},
 getUtoTmapping$2: function(u, distance) {
  if (typeof distance !== 'number')
    return this.getUtoTmapping$2$bailout(1, u, distance, 0);
  var arcLengths = this.getLengths$0();
  if (typeof arcLengths !== 'string' && (typeof arcLengths !== 'object' || arcLengths === null || arcLengths.constructor !== Array && !arcLengths.is$JavaScriptIndexingBehavior()))
    return this.getUtoTmapping$2$bailout(2, u, distance, arcLengths);
  var il = arcLengths.length;
  var targetArcLength = distance;
  if (typeof targetArcLength !== 'number')
    return this.getUtoTmapping$2$bailout(3, targetArcLength, arcLengths, il);
  var high = il - 1;
  for (var high0 = high, i = 0, low = 0, comparison = null; $.leB(low, high0);) {
    i = $.toInt($.floor($.add(low, $.div($.sub(high0, low), 2))));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= arcLengths.length)
      throw $.ioore(i);
    comparison = $.sub(arcLengths[i], targetArcLength);
    if ($.ltB(comparison, 0)) {
      low = i + 1;
      continue;
    } else if ($.gtB(comparison, 0)) {
      high0 = i - 1;
      continue;
    } else {
      high0 = i;
      break;
    }
  }
  if (high0 !== (high0 | 0))
    throw $.iae(high0);
  if (high0 < 0 || high0 >= arcLengths.length)
    throw $.ioore(high0);
  if ($.eqB(arcLengths[high0], targetArcLength))
    return high0 / high;
  var t1 = arcLengths.length;
  if (high0 >= t1)
    throw $.ioore(high0);
  var lengthBefore = arcLengths[high0];
  var t2 = high0 + 1;
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1)
    throw $.ioore(t2);
  var segmentLength = $.sub(arcLengths[t2], lengthBefore);
  if (typeof lengthBefore !== 'number')
    throw $.iae(lengthBefore);
  var t3 = targetArcLength - lengthBefore;
  if (typeof segmentLength !== 'number')
    throw $.iae(segmentLength);
  return $.div(high0 + t3 / segmentLength, high);
},
 getUtoTmapping$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var u = env0;
      var distance = env1;
      break;
    case 2:
      u = env0;
      distance = env1;
      arcLengths = env2;
      break;
    case 3:
      targetArcLength = env0;
      arcLengths = env1;
      il = env2;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var arcLengths = this.getLengths$0();
    case 2:
      state0 = 0;
      var il = $.get$length(arcLengths);
      var targetArcLength = !(distance == null) ? distance : $.mul(u, $.index(arcLengths, $.sub(il, 1)));
    case 3:
      state0 = 0;
      var high = $.sub(il, 1);
      for (var i = 0, low = 0, comparison = null; $.leB(low, high);) {
        i = $.toInt($.floor($.add(low, $.div($.sub(high, low), 2))));
        comparison = $.sub($.index(arcLengths, i), targetArcLength);
        if ($.ltB(comparison, 0)) {
          low = $.add(i, 1);
          continue;
        } else if ($.gtB(comparison, 0)) {
          high = $.sub(i, 1);
          continue;
        } else {
          high = i;
          break;
        }
      }
      if ($.eqB($.index(arcLengths, high), targetArcLength))
        return $.div(high, $.sub(il, 1));
      var lengthBefore = $.index(arcLengths, high);
      var segmentLength = $.sub($.index(arcLengths, $.add(high, 1)), lengthBefore);
      return $.div($.add(high, $.div($.sub(targetArcLength, lengthBefore), segmentLength)), $.sub(il, 1));
  }
},
 getUtoTmapping$1: function(u) {
  return this.getUtoTmapping$2(u,null)
},
 getTangent$1: function(t) {
  var t1 = $.sub(t, 0.0001);
  var t2 = $.add(t, 0.0001);
  if ($.ltB(t1, 0))
    t1 = 0;
  if ($.gtB(t2, 1))
    t2 = 1;
  var pt1 = this.getPoint$1(t1);
  return this.getPoint$1(t2).clone$0().subSelf$1(pt1).normalize$0();
},
 getTangentAt$1: function(u) {
  return this.getTangent$1(this.getUtoTmapping$1(u));
}
};

$$.Curve2D = {"": [],
 "super": "Curve",
 getNormalVector$1: function(t) {
  var vec = this.getTangent$1(t);
  var t1 = vec.get$y();
  if (typeof t1 !== 'number')
    return this.getNormalVector$1$bailout(1, vec, t1);
  return $.Vector2$(-t1, vec.get$x());
},
 getNormalVector$1$bailout: function(state0, vec, t1) {
  return $.Vector2$($.neg(t1), vec.get$x());
}
};

$$.Curve3D = {"": [],
 "super": "Curve"
};

$$.CurvePath = {"": ["curves", "_bends", "autoClose", "cacheLengths", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve",
 add$1: function(curve) {
  return this.curves.push(curve);
},
 getPoint$1: function(t) {
  var d = $.mul(t, $.get$length(this));
  if (typeof d !== 'number')
    return this.getPoint$1$bailout(1, d, 0);
  var curveLengths = this.getCurveLengths$0();
  if (typeof curveLengths !== 'string' && (typeof curveLengths !== 'object' || curveLengths === null || curveLengths.constructor !== Array && !curveLengths.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(2, d, curveLengths);
  for (var t1 = this.curves, i = 0; i < curveLengths.length;) {
    if ($.geB(curveLengths[i], d)) {
      if (i >= curveLengths.length)
        throw $.ioore(i);
      var diff = $.sub(curveLengths[i], d);
      if (i >= t1.length)
        throw $.ioore(i);
      var curve = t1[i];
      var t2 = $.div(diff, $.get$length(curve));
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      return curve.getPointAt$1(1 - t2);
    }
    ++i;
  }
  return;
},
 getPoint$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      d = env0;
      break;
    case 2:
      d = env0;
      curveLengths = env1;
      break;
  }
  switch (state0) {
    case 0:
      var d = $.mul(t, $.get$length(this));
    case 1:
      state0 = 0;
      var curveLengths = this.getCurveLengths$0();
    case 2:
      state0 = 0;
      for (var t1 = this.curves, i = 0; $.ltB(i, $.get$length(curveLengths));) {
        if ($.geB($.index(curveLengths, i), d)) {
          var diff = $.sub($.index(curveLengths, i), d);
          if (i >= t1.length)
            throw $.ioore(i);
          var curve = t1[i];
          var t2 = $.div(diff, $.get$length(curve));
          if (typeof t2 !== 'number')
            throw $.iae(t2);
          return curve.getPointAt$1(1 - t2);
        }
        ++i;
      }
      return;
  }
},
 get$length: function() {
  return $.get$last(this.getCurveLengths$0());
},
 getCurveLengths$0: function() {
  var t1 = this.cacheLengths;
  if (!(t1 == null) && $.eqB($.get$length(t1), this.curves.length))
    return this.cacheLengths;
  var lengths = [];
  t1 = this.curves;
  var il = t1.length;
  for (var sums = 0, i = 0; i < il; ++i) {
    if (i >= t1.length)
      throw $.ioore(i);
    var t2 = $.get$length(t1[i]);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    sums += t2;
    lengths.push(sums);
  }
  this.cacheLengths = lengths;
  return lengths;
},
 getBoundingBox$0: function() {
  var points = this.getPoints$0();
  if (typeof points !== 'string' && (typeof points !== 'object' || points === null || points.constructor !== Array && !points.is$JavaScriptIndexingBehavior()))
    return this.getBoundingBox$0$bailout(1, points);
  if (0 >= points.length)
    throw $.ioore(0);
  var t2 = points[0];
  var v3 = typeof t2 === 'object' && t2 !== null && !!t2.is$Vector3;
  var sum = v3 ? $.Vector3$(0, 0, 0) : $.Vector2$(0, 0);
  for (var minZ = null, p = null, i = 0, maxX = (-1/0), maxY = (-1/0), maxZ = null, minX = (1/0), minY = (1/0); i < points.length; ++i) {
    p = points[i];
    if ($.gtB(p.get$x(), maxX))
      maxX = p.get$x();
    else if ($.ltB(p.get$x(), minX))
      minX = p.get$x();
    if ($.gtB(p.get$y(), maxY))
      maxY = p.get$y();
    else if ($.ltB(p.get$y(), minY))
      minY = p.get$y();
    if (v3) {
      $.propertyTypeCast(p, 'is$Vector3');
      if ($.gtB(p.get$z(), maxZ))
        maxZ = p.get$z();
      else if ($.ltB(p.get$z(), minZ))
        minZ = p.get$z();
      $.propertyTypeCast(sum, 'is$Vector3').addSelf$1(p);
    } else
      $.propertyTypeCast(sum, 'is$Vector2').addSelf$1(p);
  }
  var ret = $.makeLiteralMap(['minX', minX, 'minY', minY, 'maxX', maxX, 'maxY', maxY, 'centroid', sum.divideScalar$1(null)]);
  if (v3) {
    $.indexSet(ret, 'maxZ', maxZ);
    $.indexSet(ret, 'minZ', minZ);
  }
  return ret;
},
 getBoundingBox$0$bailout: function(state0, points) {
  var t2 = $.index(points, 0);
  var v3 = typeof t2 === 'object' && t2 !== null && !!t2.is$Vector3;
  var sum = v3 ? $.Vector3$(0, 0, 0) : $.Vector2$(0, 0);
  for (var minZ = null, p = null, i = 0, maxX = (-1/0), maxY = (-1/0), maxZ = null, minX = (1/0), minY = (1/0); $.ltB(i, $.get$length(points)); ++i) {
    p = $.index(points, i);
    if ($.gtB(p.get$x(), maxX))
      maxX = p.get$x();
    else if ($.ltB(p.get$x(), minX))
      minX = p.get$x();
    if ($.gtB(p.get$y(), maxY))
      maxY = p.get$y();
    else if ($.ltB(p.get$y(), minY))
      minY = p.get$y();
    if (v3) {
      $.propertyTypeCast(p, 'is$Vector3');
      if ($.gtB(p.get$z(), maxZ))
        maxZ = p.get$z();
      else if ($.ltB(p.get$z(), minZ))
        minZ = p.get$z();
      $.propertyTypeCast(sum, 'is$Vector3').addSelf$1(p);
    } else
      $.propertyTypeCast(sum, 'is$Vector2').addSelf$1(p);
  }
  var ret = $.makeLiteralMap(['minX', minX, 'minY', minY, 'maxX', maxX, 'maxY', maxY, 'centroid', sum.divideScalar$1(null)]);
  if (v3) {
    $.indexSet(ret, 'maxZ', maxZ);
    $.indexSet(ret, 'minZ', minZ);
  }
  return ret;
},
 addWrapPath$1: function(bendpath) {
  return this._bends.push(bendpath);
},
 getTransformedPoints$2: function(segments, bends) {
  if (typeof bends !== 'object' || bends === null || bends.constructor !== Array || !!bends.fixed$length)
    return this.getTransformedPoints$2$bailout(1, segments, bends);
  var oldPts = this.getPoints$1(segments);
  for (var i = 0; i < bends.length; ++i)
    oldPts = this.getWrapPoints$2(oldPts, bends[i]);
  return oldPts;
},
 getTransformedPoints$2$bailout: function(state0, segments, bends) {
  var oldPts = this.getPoints$1(segments);
  if (bends == null)
    bends = this._bends;
  for (var i = 0; $.ltB(i, $.get$length(bends)); ++i)
    oldPts = this.getWrapPoints$2(oldPts, $.index(bends, i));
  return oldPts;
},
 getTransformedPoints$1: function(segments) {
  return this.getTransformedPoints$2(segments,null)
},
 getTransformedSpacedPoints$2: function(segments, bends) {
  if (typeof bends !== 'object' || bends === null || bends.constructor !== Array || !!bends.fixed$length)
    return this.getTransformedSpacedPoints$2$bailout(1, segments, bends);
  var oldPts = this.getSpacedPoints$1(segments);
  for (var i = 0; i < bends.length; ++i)
    oldPts = this.getWrapPoints$2(oldPts, bends[i]);
  return oldPts;
},
 getTransformedSpacedPoints$2$bailout: function(state0, segments, bends) {
  var oldPts = this.getSpacedPoints$1(segments);
  if (bends == null)
    bends = this._bends;
  for (var i = 0; $.ltB(i, $.get$length(bends)); ++i)
    oldPts = this.getWrapPoints$2(oldPts, $.index(bends, i));
  return oldPts;
},
 getTransformedSpacedPoints$1: function(segments) {
  return this.getTransformedSpacedPoints$2(segments,null)
},
 getWrapPoints$2: function(oldPts, path) {
  if (typeof oldPts !== 'string' && (typeof oldPts !== 'object' || oldPts === null || oldPts.constructor !== Array && !oldPts.is$JavaScriptIndexingBehavior()))
    return this.getWrapPoints$2$bailout(1, oldPts, path, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var bounds = this.getBoundingBox$0();
  for (var i = 0, p = null, oldX = null, oldY = null, xNorm = null; i < oldPts.length; ++i) {
    p = oldPts[i];
    oldX = p.get$x();
    if (typeof oldX !== 'number')
      return this.getWrapPoints$2$bailout(2, oldPts, path, bounds, i, p, oldX, 0, 0, 0, 0, 0, 0);
    oldY = p.get$y();
    var t2 = bounds.get$maxX();
    if (typeof t2 !== 'number')
      return this.getWrapPoints$2$bailout(3, t2, path, oldPts, bounds, i, p, oldX, oldY, 0, 0, 0, 0);
    xNorm = path.getUtoTmapping$2(oldX / t2, oldX);
    var pathPt = path.getPoint$1(xNorm);
    var normal = path.getNormalVector$1(xNorm).multiplyScalar$1(oldY);
    var t4 = pathPt.get$x();
    if (typeof t4 !== 'number')
      return this.getWrapPoints$2$bailout(4, oldPts, path, xNorm, pathPt, bounds, normal, t4, i, p, oldX, oldY, 0);
    var t6 = normal.get$x();
    if (typeof t6 !== 'number')
      return this.getWrapPoints$2$bailout(5, oldPts, path, xNorm, pathPt, bounds, normal, t4, t6, i, p, oldX, oldY);
    p.set$x(t4 + t6);
    var t8 = pathPt.get$y();
    if (typeof t8 !== 'number')
      return this.getWrapPoints$2$bailout(6, oldPts, path, xNorm, bounds, normal, i, t8, p, oldX, oldY, 0, 0);
    var t10 = normal.get$y();
    if (typeof t10 !== 'number')
      return this.getWrapPoints$2$bailout(7, oldY, oldPts, path, xNorm, bounds, i, t8, t10, p, oldX, 0, 0);
    p.set$y(t8 + t10);
  }
  return oldPts;
},
 getWrapPoints$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11) {
  switch (state0) {
    case 1:
      var oldPts = env0;
      var path = env1;
      break;
    case 2:
      oldPts = env0;
      path = env1;
      bounds = env2;
      i = env3;
      p = env4;
      oldX = env5;
      break;
    case 3:
      t2 = env0;
      path = env1;
      oldPts = env2;
      bounds = env3;
      i = env4;
      p = env5;
      oldX = env6;
      oldY = env7;
      break;
    case 4:
      oldPts = env0;
      path = env1;
      xNorm = env2;
      pathPt = env3;
      bounds = env4;
      normal = env5;
      t4 = env6;
      i = env7;
      p = env8;
      oldX = env9;
      oldY = env10;
      break;
    case 5:
      oldPts = env0;
      path = env1;
      xNorm = env2;
      pathPt = env3;
      bounds = env4;
      normal = env5;
      t4 = env6;
      t6 = env7;
      i = env8;
      p = env9;
      oldX = env10;
      oldY = env11;
      break;
    case 6:
      oldPts = env0;
      path = env1;
      xNorm = env2;
      bounds = env3;
      normal = env4;
      i = env5;
      t8 = env6;
      p = env7;
      oldX = env8;
      oldY = env9;
      break;
    case 7:
      oldY = env0;
      oldPts = env1;
      path = env2;
      xNorm = env3;
      bounds = env4;
      i = env5;
      t8 = env6;
      t10 = env7;
      p = env8;
      oldX = env9;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var bounds = this.getBoundingBox$0();
      var i = 0;
      var p = null;
      var oldX = null;
      var oldY = null;
      var xNorm = null;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(i, $.get$length(oldPts)))
                break L0;
              p = $.index(oldPts, i);
              oldX = p.get$x();
            case 2:
              state0 = 0;
              oldY = p.get$y();
              var t2 = bounds.get$maxX();
            case 3:
              state0 = 0;
              xNorm = path.getUtoTmapping$2($.div(oldX, t2), oldX);
              var pathPt = path.getPoint$1(xNorm);
              var normal = path.getNormalVector$1(xNorm).multiplyScalar$1(oldY);
              var t4 = pathPt.get$x();
            case 4:
              state0 = 0;
              var t6 = normal.get$x();
            case 5:
              state0 = 0;
              p.set$x($.add(t4, t6));
              var t8 = pathPt.get$y();
            case 6:
              state0 = 0;
              var t10 = normal.get$y();
            case 7:
              state0 = 0;
              p.set$y($.add(t8, t10));
              ++i;
          }
      return oldPts;
  }
}
};

$$.PathAction = {"": ["action?", "args?"],
 "super": "Object"
};

$$.Path = {"": ["useSpacedPoints", "_points", "actions", "curves", "_bends", "autoClose", "cacheLengths", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "CurvePath",
 _fromPoints$1: function(vectors) {
  if (typeof vectors !== 'string' && (typeof vectors !== 'object' || vectors === null || vectors.constructor !== Array && !vectors.is$JavaScriptIndexingBehavior()))
    return this._fromPoints$1$bailout(1, vectors);
  if (0 >= vectors.length)
    throw $.ioore(0);
  var t1 = vectors[0].get$x();
  if (0 >= vectors.length)
    throw $.ioore(0);
  this.moveTo$2(t1, vectors[0].get$y());
  for (var vlen = vectors.length, v = 1; v < vlen; ++v) {
    if (v >= vectors.length)
      throw $.ioore(v);
    t1 = vectors[v].get$x();
    if (v >= vectors.length)
      throw $.ioore(v);
    this.lineTo$2(t1, vectors[v].get$y());
  }
},
 _fromPoints$1$bailout: function(state0, vectors) {
  this.moveTo$2($.index(vectors, 0).get$x(), $.index(vectors, 0).get$y());
  for (var vlen = $.get$length(vectors), v = 1; $.ltB(v, vlen); ++v)
    this.lineTo$2($.index(vectors, v).get$x(), $.index(vectors, v).get$y());
},
 addAction$2: function(action, args) {
  return this.actions.push($.PathAction$(action, args));
},
 moveTo$2: function(x, y) {
  return this.addAction$2('moveTo', [x, y]);
},
 lineTo$2: function(x, y) {
  var args = [x, y];
  var lastargs = $.get$last(this.actions).get$args();
  if (typeof lastargs !== 'string' && (typeof lastargs !== 'object' || lastargs === null || lastargs.constructor !== Array && !lastargs.is$JavaScriptIndexingBehavior()))
    return this.lineTo$2$bailout(1, x, y, lastargs, args);
  var t2 = lastargs.length;
  var t3 = t2 - 2;
  if (t3 < 0)
    throw $.ioore(t3);
  var x0 = lastargs[t3];
  t3 = t2 - 1;
  if (t3 < 0)
    throw $.ioore(t3);
  var curve = $.LineCurve$($.Vector2$(x0, lastargs[t3]), $.Vector2$(x, y));
  this.curves.push(curve);
  this.addAction$2('lineTo', args);
},
 lineTo$2$bailout: function(state0, x, y, lastargs, args) {
  var curve = $.LineCurve$($.Vector2$($.index(lastargs, $.sub($.get$length(lastargs), 2)), $.index(lastargs, $.sub($.get$length(lastargs), 1))), $.Vector2$(x, y));
  this.curves.push(curve);
  this.addAction$2('lineTo', args);
},
 quadraticCurveTo$4: function(aCPx, aCPy, aX, aY) {
  var args = [aCPx, aCPy, aX, aY];
  var lastargs = $.get$last(this.actions).get$args();
  var curve = $.QuadraticBezierCurve$($.Vector2$($.index(lastargs, $.sub($.get$length(lastargs), 2)), $.index(lastargs, $.sub($.get$length(lastargs), 1))), $.Vector2$(aCPx, aCPy), $.Vector2$(aX, aY));
  this.curves.push(curve);
  this.addAction$2('quadraticCurveTo', args);
},
 bezierCurveTo$6: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
  var args = [aCP1x, aCP1y, aCP2x, aCP2y, aX, aY];
  var lastargs = $.get$last(this.actions).get$args();
  var curve = $.CubicBezierCurve$($.Vector2$($.index(lastargs, $.sub($.get$length(lastargs), 2)), $.index(lastargs, $.sub($.get$length(lastargs), 1))), $.Vector2$(aCP1x, aCP1y), $.Vector2$(aCP2x, aCP2y), $.Vector2$(aX, aY));
  this.curves.push(curve);
  this.addAction$2('bezierCurveTo', args);
},
 arc$6: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  var t1 = this.actions;
  var t2 = t1.length;
  var t3 = t2 - 1;
  if (t3 < 0)
    throw $.ioore(t3);
  var lastargs = t1[t3].get$args();
  var x0 = $.index(lastargs, $.sub($.get$length(lastargs), 2));
  var y0 = $.index(lastargs, $.sub($.get$length(lastargs), 1));
  if (typeof x0 !== 'number')
    throw $.iae(x0);
  var t4 = aX + x0;
  if (typeof y0 !== 'number')
    throw $.iae(y0);
  this.absarc$6(t4, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
},
 absarc$6: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  this.absellipse$7(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
},
 absellipse$7: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise) {
  var args = [aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise];
  var curve = $.EllipseCurve$(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise);
  this.curves.push(curve);
  var lastPoint = curve.getPoint$1(aClockwise ? 1 : 0);
  args.push(lastPoint.get$x());
  args.push(lastPoint.get$y());
  this.addAction$2('ellipse', args);
},
 getSpacedPoints$2: function(divisions, closedPath) {
  if (typeof divisions !== 'number')
    return this.getSpacedPoints$2$bailout(1, divisions);
  var points = [];
  for (var i = 0; i < divisions; ++i)
    points.push(this.getPoint$1(i / divisions));
  return points;
},
 getSpacedPoints$2$bailout: function(state0, divisions) {
  if (divisions == null)
    divisions = 40;
  var points = [];
  for (var i = 0; $.ltB(i, divisions); ++i) {
    if (typeof divisions !== 'number')
      throw $.iae(divisions);
    points.push(this.getPoint$1(i / divisions));
  }
  return points;
},
 getSpacedPoints$1: function(divisions) {
  return this.getSpacedPoints$2(divisions,false)
},
 getPoints$2: function(divisions, closedPath) {
  if (this.useSpacedPoints)
    return this.getSpacedPoints$2(divisions, closedPath);
  if (divisions == null)
    divisions = 12;
  var points = [];
  for (var t1 = this.actions, laste = null, j = null, t = null, tx = null, ty = null, i = 0, item = null, action = null, args = null, cpx = null, cpy = null, cpx2 = null, cpy2 = null, cpx1 = null, cpy1 = null, cpx0 = null, cpy0 = null; t2 = t1.length, i < t2; ++i) {
    item = t1[i];
    action = item.get$action();
    args = item.get$args();
    switch (action) {
      case 'moveTo':
        points.push($.Vector2$($.index(args, 0), $.index(args, 1)));
        break;
      case 'lineTo':
        points.push($.Vector2$($.index(args, 0), $.index(args, 1)));
        break;
      case 'quadraticCurveTo':
        cpx = $.index(args, 2);
        cpy = $.index(args, 3);
        cpx1 = $.index(args, 0);
        cpy1 = $.index(args, 1);
        var t2 = points.length;
        if (t2 > 0) {
          laste = points[t2 - 1];
          cpx0 = laste.get$x();
          cpy0 = laste.get$y();
        } else {
          t2 = i - 1;
          if (t2 < 0 || t2 >= t1.length)
            throw $.ioore(t2);
          laste = t1[t2].get$args();
          cpx0 = $.index(laste, $.sub($.get$length(laste), 2));
          cpy0 = $.index(laste, $.sub($.get$length(laste), 1));
        }
        for (j = 1; $.leB(j, divisions); ++j) {
          if (typeof divisions !== 'number')
            throw $.iae(divisions);
          t = j / divisions;
          tx = $.b2(t, cpx0, cpx1, cpx);
          ty = $.b2(t, cpy0, cpy1, cpy);
          points.push($.Vector2$(tx, ty));
        }
        break;
      case 'bezierCurveTo':
        cpx = $.index(args, 4);
        cpy = $.index(args, 5);
        cpx1 = $.index(args, 0);
        cpy1 = $.index(args, 1);
        cpx2 = $.index(args, 2);
        cpy2 = $.index(args, 3);
        t2 = points.length;
        if (t2 > 0) {
          laste = points[t2 - 1];
          cpx0 = laste.get$x();
          cpy0 = laste.get$y();
        } else {
          t2 = i - 1;
          if (t2 < 0 || t2 >= t1.length)
            throw $.ioore(t2);
          laste = t1[t2].get$args();
          cpx0 = $.index(laste, $.sub($.get$length(laste), 2));
          cpy0 = $.index(laste, $.sub($.get$length(laste), 1));
        }
        for (j = 1; $.leB(j, divisions); ++j) {
          if (typeof divisions !== 'number')
            throw $.iae(divisions);
          t = j / divisions;
          tx = $.b3(t, cpx0, cpx1, cpx2, cpx);
          ty = $.b3(t, cpy0, cpy1, cpy2, cpy);
          points.push($.Vector2$(tx, ty));
        }
        break;
      case 'splineThru':
        var t3 = i - 1;
        if (t3 < 0)
          throw $.ioore(t3);
        laste = t1[t3].get$args();
        var spts = [$.Vector2$($.index(laste, $.sub($.get$length(laste), 2)), $.index(laste, $.sub($.get$length(laste), 1)))];
        var n = $.mul(divisions, $.get$length($.index(args, 0)));
        $.addAll(spts, $.index(args, 0));
        var spline = $.SplineCurve$(spts);
        for (j = 1; $.leB(j, n); ++j) {
          if (typeof n !== 'number')
            throw $.iae(n);
          points.push(spline.getPointAt$1(j / n));
        }
        break;
      case 'arc':
        t3 = i - 1;
        if (t3 < 0)
          throw $.ioore(t3);
        laste = t1[t3].get$args();
        var aX = $.index(args, 0);
        var aY = $.index(args, 1);
        var aRadius = $.index(args, 2);
        var aStartAngle = $.index(args, 3);
        var aEndAngle = $.index(args, 4);
        var t4 = $.index(args, 5) !== true;
        var deltaAngle = $.sub(aEndAngle, aStartAngle);
        var tdivisions = $.mul(divisions, 2);
        for (var j = 1, angle = null; $.leB(j, tdivisions); ++j) {
          if (typeof tdivisions !== 'number')
            throw $.iae(tdivisions);
          t = j / tdivisions;
          if (t4)
            t = 1 - t;
          if (typeof deltaAngle !== 'number')
            throw $.iae(deltaAngle);
          angle = $.add(aStartAngle, t * deltaAngle);
          tx = $.add(aX, $.mul(aRadius, $.cos(angle)));
          ty = $.add(aY, $.mul(aRadius, $.sin(angle)));
          points.push($.Vector2$(tx, ty));
        }
        break;
      case 'ellipse':
        aX = $.index(args, 0);
        aY = $.index(args, 1);
        var xRadius = $.index(args, 2);
        var yRadius = $.index(args, 3);
        aStartAngle = $.index(args, 4);
        aEndAngle = $.index(args, 5);
        t2 = $.index(args, 6) !== true;
        deltaAngle = $.sub(aEndAngle, aStartAngle);
        tdivisions = $.mul(divisions, 2);
        for (j = 1, angle = null; $.leB(j, tdivisions); ++j) {
          if (typeof tdivisions !== 'number')
            throw $.iae(tdivisions);
          t = j / tdivisions;
          if (t2)
            t = 1 - t;
          if (typeof deltaAngle !== 'number')
            throw $.iae(deltaAngle);
          angle = $.add(aStartAngle, t * deltaAngle);
          tx = $.add(aX, $.mul(xRadius, $.cos(angle)));
          ty = $.add(aY, $.mul(yRadius, $.sin(angle)));
          points.push($.Vector2$(tx, ty));
        }
        break;
    }
  }
  t1 = points.length;
  t2 = t1 - 1;
  if (t2 < 0)
    throw $.ioore(t2);
  var lastPoint = points[t2];
  t1 = lastPoint.get$x();
  if (0 >= points.length)
    throw $.ioore(0);
  if ($.ltB($.abs($.sub(t1, points[0].get$x())), 1e-10)) {
    t1 = lastPoint.get$y();
    if (0 >= points.length)
      throw $.ioore(0);
    t2 = $.ltB($.abs($.sub(t1, points[0].get$y())), 1e-10);
    t1 = t2;
  } else
    t1 = false;
  if (t1) {
    if (0 >= points.length)
      throw $.ioore(0);
    points.pop();
  }
  if (closedPath === true) {
    if (0 >= points.length)
      throw $.ioore(0);
    points.push(points[0]);
  }
  return points;
},
 getPoints$0: function() {
  return this.getPoints$2(null,false)
},
 getPoints$1: function(divisions) {
  return this.getPoints$2(divisions,false)
},
 Path$1: function(points) {
  if (!(points == null))
    this._fromPoints$1(points);
}
};

$$.Shape = {"": ["holes", "useSpacedPoints", "_points", "actions", "curves", "_bends", "autoClose", "cacheLengths", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Path",
 extrude$11$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$material$steps: function(amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, material, steps) {
  if (bevelSize == null)
    bevelSize = $.sub(bevelThickness, 2);
  return $.ExtrudeGeometry$([this], amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, null, material, steps);
},
 extrude$5$amount$bevelEnabled$bevelSegments$extrudePath$steps: function(amount,bevelEnabled,bevelSegments,extrudePath,steps) {
  return this.extrude$11$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$material$steps(amount,null,bevelEnabled,bevelSegments,null,6,12,null,extrudePath,null,steps)
},
 getPointsHoles$1: function(divisions) {
  var t1 = this.holes;
  var il = t1.length;
  var holesPts = $.ListImplementation_List(il);
  for (var t2 = this._bends, i = 0; i < il; ++i) {
    if (i >= t1.length)
      throw $.ioore(i);
    holesPts[i] = t1[i].getTransformedPoints$2(divisions, t2);
  }
  return holesPts;
},
 getSpacedPointsHoles$1: function(divisions) {
  var t1 = this.holes;
  var il = t1.length;
  var holesPts = $.ListImplementation_List(il);
  for (var t2 = this._bends, i = 0; i < il; ++i) {
    if (i >= t1.length)
      throw $.ioore(i);
    holesPts[i] = t1[i].getTransformedSpacedPoints$2(divisions, t2);
  }
  return holesPts;
},
 extractAllPoints$1: function(divisions) {
  return $.makeLiteralMap(['shape', this.getTransformedPoints$1(divisions), 'holes', this.getPointsHoles$1(divisions)]);
},
 extractPoints$1: function(divisions) {
  if (this.useSpacedPoints)
    return this.extractAllSpacedPoints$1(divisions);
  return this.extractAllPoints$1(divisions);
},
 extractPoints$0: function() {
  return this.extractPoints$1(null)
},
 extractAllSpacedPoints$1: function(divisions) {
  return $.makeLiteralMap(['shape', this.getTransformedSpacedPoints$1(divisions), 'holes', this.getSpacedPointsHoles$1(divisions)]);
}
};

$$.LineCurve = {"": ["v1", "v2", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve2D",
 getPoint$1: function(t) {
  var t1 = this.v2.clone$0();
  var t2 = this.v1;
  var point = t1.subSelf$1(t2);
  point.multiplyScalar$1(t).addSelf$1(t2);
  return point;
},
 getPointAt$1: function(u) {
  return this.getPoint$1(u);
},
 getTangent$1: function(t) {
  return this.v2.clone$0().subSelf$1(this.v1).normalize$0();
}
};

$$.QuadraticBezierCurve = {"": ["v0", "v1", "v2", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve2D",
 getPoint$1: function(t) {
  var t1 = this.v0;
  var t2 = t1.x;
  var t3 = this.v1;
  var t4 = t3.x;
  var t5 = this.v2;
  return $.Vector2$($.b2(t, t2, t4, t5.x), $.b2(t, t1.y, t3.y, t5.y));
},
 getTangent$1: function(t) {
  var t1 = this.v0;
  var t2 = t1.x;
  var t3 = this.v1;
  var t4 = t3.x;
  var t5 = this.v2;
  return $.Vector2$($.tangentQuadraticBezier(t, t2, t4, t5.x), $.tangentQuadraticBezier(t, t1.y, t3.y, t5.y)).normalize$0();
}
};

$$.CubicBezierCurve = {"": ["v0", "v1", "v2", "v3", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve2D",
 getPoint$1: function(t) {
  var t1 = this.v0;
  var t2 = t1.x;
  var t3 = this.v1;
  var t4 = t3.x;
  var t5 = this.v2;
  var t6 = t5.x;
  var t7 = this.v3;
  return $.Vector2$($.b3(t, t2, t4, t6, t7.x), $.b3(t, t1.y, t3.y, t5.y, t7.y));
},
 getTangent$1: function(t) {
  var t1 = this.v0;
  var t2 = t1.x;
  var t3 = this.v1;
  var t4 = t3.x;
  var t5 = this.v2;
  var t6 = t5.x;
  var t7 = this.v3;
  return $.Vector2$($.tangentCubicBezier(t, t2, t4, t6, t7.x), $.tangentCubicBezier(t, t1.y, t3.y, t5.y, t7.y)).normalize$0();
}
};

$$.SplineCurve = {"": ["points=", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve2D",
 getPoint$1: function(t) {
  if (typeof t !== 'number')
    return this.getPoint$1$bailout(1, t, 0, 0, 0, 0, 0, 0);
  var v = $.Vector2$(0, 0);
  var c = $.ListImplementation_List(4);
  var t1 = $.get$length(this.points);
  if (typeof t1 !== 'number')
    return this.getPoint$1$bailout(2, c, t, t1, v, 0, 0, 0);
  var point = (t1 - 1) * t;
  var intPoint = $.toInt($.floor(point));
  if (typeof intPoint !== 'number')
    return this.getPoint$1$bailout(3, c, point, v, intPoint, 0, 0, 0);
  var weight = point - intPoint;
  if (intPoint === 0)
    t1 = intPoint;
  else
    t1 = intPoint - 1;
  c[0] = t1;
  c[1] = intPoint;
  t1 = $.get$length(this.points);
  if (typeof t1 !== 'number')
    return this.getPoint$1$bailout(4, c, t1, v, intPoint, weight, 0, 0);
  if (intPoint > t1 - 2) {
    t1 = $.get$length(this.points);
    if (typeof t1 !== 'number')
      return this.getPoint$1$bailout(5, c, t1, v, intPoint, weight, 0, 0);
    --t1;
  } else
    t1 = intPoint + 1;
  c[2] = t1;
  t1 = $.get$length(this.points);
  if (typeof t1 !== 'number')
    return this.getPoint$1$bailout(6, c, t1, v, intPoint, weight, 0, 0);
  if (intPoint > t1 - 3) {
    t1 = $.get$length(this.points);
    if (typeof t1 !== 'number')
      return this.getPoint$1$bailout(7, c, t1, v, weight, 0, 0, 0);
    --t1;
  } else
    t1 = intPoint + 2;
  c[3] = t1;
  t1 = this.points;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(8, c, t1, v, weight, 0, 0, 0);
  var t3 = c[0];
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  var t4 = t1[t3].get$x();
  var t5 = this.points;
  if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(9, c, t4, v, t5, weight, 0, 0);
  var t7 = c[1];
  if (t7 !== (t7 | 0))
    throw $.iae(t7);
  if (t7 < 0 || t7 >= t5.length)
    throw $.ioore(t7);
  var t8 = t5[t7].get$x();
  var t9 = this.points;
  if (typeof t9 !== 'string' && (typeof t9 !== 'object' || t9 === null || t9.constructor !== Array && !t9.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(10, t8, v, t9, weight, c, t4, 0);
  var t11 = c[2];
  if (t11 !== (t11 | 0))
    throw $.iae(t11);
  if (t11 < 0 || t11 >= t9.length)
    throw $.ioore(t11);
  var t12 = t9[t11].get$x();
  var t13 = this.points;
  if (typeof t13 !== 'string' && (typeof t13 !== 'object' || t13 === null || t13.constructor !== Array && !t13.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(11, t8, v, t12, weight, c, t4, t13);
  var t15 = c[3];
  if (t15 !== (t15 | 0))
    throw $.iae(t15);
  if (t15 < 0 || t15 >= t13.length)
    throw $.ioore(t15);
  v.x = $.interpolate(t4, t8, t12, t13[t15].get$x(), weight);
  var t16 = this.points;
  if (typeof t16 !== 'string' && (typeof t16 !== 'object' || t16 === null || t16.constructor !== Array && !t16.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(12, c, t16, v, weight, 0, 0, 0);
  var t18 = c[0];
  if (t18 !== (t18 | 0))
    throw $.iae(t18);
  if (t18 < 0 || t18 >= t16.length)
    throw $.ioore(t18);
  var t19 = t16[t18].get$y();
  var t20 = this.points;
  if (typeof t20 !== 'string' && (typeof t20 !== 'object' || t20 === null || t20.constructor !== Array && !t20.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(13, c, t20, v, t19, weight, 0, 0);
  var t22 = c[1];
  if (t22 !== (t22 | 0))
    throw $.iae(t22);
  if (t22 < 0 || t22 >= t20.length)
    throw $.ioore(t22);
  var t23 = t20[t22].get$y();
  var t24 = this.points;
  if (typeof t24 !== 'string' && (typeof t24 !== 'object' || t24 === null || t24.constructor !== Array && !t24.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(14, v, t19, weight, c, t23, t24, 0);
  var t26 = c[2];
  if (t26 !== (t26 | 0))
    throw $.iae(t26);
  if (t26 < 0 || t26 >= t24.length)
    throw $.ioore(t26);
  var t27 = t24[t26].get$y();
  var t28 = this.points;
  if (typeof t28 !== 'string' && (typeof t28 !== 'object' || t28 === null || t28.constructor !== Array && !t28.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(15, t27, v, t19, weight, c, t23, t28);
  var t30 = c[3];
  if (t30 !== (t30 | 0))
    throw $.iae(t30);
  if (t30 < 0 || t30 >= t28.length)
    throw $.ioore(t30);
  v.y = $.interpolate(t19, t23, t27, t28[t30].get$y(), weight);
  return v;
},
 getPoint$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      var t = env0;
      break;
    case 2:
      c = env0;
      t = env1;
      t1 = env2;
      v = env3;
      break;
    case 3:
      c = env0;
      point = env1;
      v = env2;
      intPoint = env3;
      break;
    case 4:
      c = env0;
      t1 = env1;
      v = env2;
      intPoint = env3;
      weight = env4;
      break;
    case 5:
      c = env0;
      t1 = env1;
      v = env2;
      intPoint = env3;
      weight = env4;
      break;
    case 6:
      c = env0;
      t1 = env1;
      v = env2;
      intPoint = env3;
      weight = env4;
      break;
    case 7:
      c = env0;
      t1 = env1;
      v = env2;
      weight = env3;
      break;
    case 8:
      c = env0;
      t1 = env1;
      v = env2;
      weight = env3;
      break;
    case 9:
      c = env0;
      t3 = env1;
      v = env2;
      t4 = env3;
      weight = env4;
      break;
    case 10:
      t6 = env0;
      v = env1;
      t7 = env2;
      weight = env3;
      c = env4;
      t3 = env5;
      break;
    case 11:
      t6 = env0;
      v = env1;
      t9 = env2;
      weight = env3;
      c = env4;
      t3 = env5;
      t10 = env6;
      break;
    case 12:
      c = env0;
      t12 = env1;
      v = env2;
      weight = env3;
      break;
    case 13:
      c = env0;
      t15 = env1;
      v = env2;
      t14 = env3;
      weight = env4;
      break;
    case 14:
      v = env0;
      t14 = env1;
      weight = env2;
      c = env3;
      t17 = env4;
      t18 = env5;
      break;
    case 15:
      t20 = env0;
      v = env1;
      t14 = env2;
      weight = env3;
      c = env4;
      t17 = env5;
      t21 = env6;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var v = $.Vector2$(0, 0);
      var c = $.ListImplementation_List(4);
      var t1 = $.get$length(this.points);
    case 2:
      state0 = 0;
      var point = $.mul($.sub(t1, 1), t);
      var intPoint = $.toInt($.floor(point));
    case 3:
      state0 = 0;
      var weight = $.sub(point, intPoint);
      c[0] = $.eqB(intPoint, 0) ? intPoint : $.sub(intPoint, 1);
      c[1] = intPoint;
      t1 = $.get$length(this.points);
    case 4:
      state0 = 0;
    case 5:
      if (state0 === 5 || state0 === 0 && $.gtB(intPoint, $.sub(t1, 2)))
        switch (state0) {
          case 0:
            t1 = $.get$length(this.points);
          case 5:
            state0 = 0;
            t1 = $.sub(t1, 1);
        }
      else
        t1 = $.add(intPoint, 1);
      c[2] = t1;
      t1 = $.get$length(this.points);
    case 6:
      state0 = 0;
    case 7:
      if (state0 === 7 || state0 === 0 && $.gtB(intPoint, $.sub(t1, 3)))
        switch (state0) {
          case 0:
            t1 = $.get$length(this.points);
          case 7:
            state0 = 0;
            t1 = $.sub(t1, 1);
        }
      else
        t1 = $.add(intPoint, 2);
      c[3] = t1;
      t1 = this.points;
    case 8:
      state0 = 0;
      var t3 = $.index(t1, c[0]).get$x();
      var t4 = this.points;
    case 9:
      state0 = 0;
      var t6 = $.index(t4, c[1]).get$x();
      var t7 = this.points;
    case 10:
      state0 = 0;
      var t9 = $.index(t7, c[2]).get$x();
      var t10 = this.points;
    case 11:
      state0 = 0;
      v.x = $.interpolate(t3, t6, t9, $.index(t10, c[3]).get$x(), weight);
      var t12 = this.points;
    case 12:
      state0 = 0;
      var t14 = $.index(t12, c[0]).get$y();
      var t15 = this.points;
    case 13:
      state0 = 0;
      var t17 = $.index(t15, c[1]).get$y();
      var t18 = this.points;
    case 14:
      state0 = 0;
      var t20 = $.index(t18, c[2]).get$y();
      var t21 = this.points;
    case 15:
      state0 = 0;
      v.y = $.interpolate(t14, t17, t20, $.index(t21, c[3]).get$y(), weight);
      return v;
  }
},
 SplineCurve$1: function(points) {
  if (this.points == null)
    this.points = [];
}
};

$$.EllipseCurve = {"": ["aX", "aY", "xRadius", "yRadius", "aStartAngle", "aEndAngle", "aClockwise", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve2D",
 getPoint$1: function(t) {
  var t1 = this.aEndAngle;
  var t2 = this.aStartAngle;
  var deltaAngle = t1 - t2;
  if (!this.aClockwise) {
    if (typeof t !== 'number')
      throw $.iae(t);
    t = 1 - t;
  }
  t1 = $.mul(t, deltaAngle);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  var angle = t2 + t1;
  return $.Vector2$(this.aX + this.xRadius * $.cos(angle), this.aY + this.yRadius * $.sin(angle));
}
};

$$.LineCurve3 = {"": ["v1", "v2", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve3D",
 getPoint$1: function(t) {
  var r = $.Vector3$(0, 0, 0);
  var t1 = this.v2;
  var t2 = this.v1;
  r.sub$2(t1, t2);
  r.multiplyScalar$1(t);
  r.addSelf$1(t2);
  return r;
},
 is$LineCurve3: true
};

$$.SplineCurve3 = {"": ["points=", "_arcLengthDivisions", "cacheArcLengths", "needsUpdate"],
 "super": "Curve3D",
 getPoint$1: function(t) {
  if (typeof t !== 'number')
    return this.getPoint$1$bailout(1, t, 0, 0, 0, 0, 0, 0);
  var v = $.Vector3$(0, 0, 0);
  var c = $.ListImplementation_List(4);
  var t1 = $.get$length(this.points);
  if (typeof t1 !== 'number')
    return this.getPoint$1$bailout(2, c, t, t1, v, 0, 0, 0);
  var point = (t1 - 1) * t;
  var intPoint = $.toInt($.floor(point));
  if (typeof intPoint !== 'number')
    return this.getPoint$1$bailout(3, c, point, intPoint, v, 0, 0, 0);
  var weight = point - intPoint;
  if (intPoint === 0)
    t1 = intPoint;
  else
    t1 = intPoint - 1;
  c[0] = t1;
  c[1] = intPoint;
  t1 = $.get$length(this.points);
  if (typeof t1 !== 'number')
    return this.getPoint$1$bailout(4, c, t1, intPoint, v, weight, 0, 0);
  if (intPoint > t1 - 2) {
    t1 = $.get$length(this.points);
    if (typeof t1 !== 'number')
      return this.getPoint$1$bailout(5, c, t1, intPoint, v, weight, 0, 0);
    --t1;
  } else
    t1 = intPoint + 1;
  c[2] = t1;
  t1 = $.get$length(this.points);
  if (typeof t1 !== 'number')
    return this.getPoint$1$bailout(6, c, t1, intPoint, v, weight, 0, 0);
  if (intPoint > t1 - 3) {
    t1 = $.get$length(this.points);
    if (typeof t1 !== 'number')
      return this.getPoint$1$bailout(7, c, t1, v, weight, 0, 0, 0);
    --t1;
  } else
    t1 = intPoint + 2;
  c[3] = t1;
  t1 = this.points;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.getPoint$1$bailout(8, c, v, weight, t1, 0, 0, 0);
  var t3 = c[0];
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  var pt0 = t1[t3];
  t3 = c[1];
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  var pt1 = t1[t3];
  t3 = c[2];
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  var pt2 = t1[t3];
  t3 = c[3];
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  var pt3 = t1[t3];
  v.x = $.interpolate(pt0.get$x(), pt1.get$x(), pt2.get$x(), pt3.get$x(), weight);
  v.y = $.interpolate(pt0.get$y(), pt1.get$y(), pt2.get$y(), pt3.get$y(), weight);
  v.z = $.interpolate(pt0.get$z(), pt1.get$z(), pt2.get$z(), pt3.get$z(), weight);
  return v;
},
 getPoint$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      var t = env0;
      break;
    case 2:
      c = env0;
      t = env1;
      t1 = env2;
      v = env3;
      break;
    case 3:
      c = env0;
      point = env1;
      intPoint = env2;
      v = env3;
      break;
    case 4:
      c = env0;
      t1 = env1;
      intPoint = env2;
      v = env3;
      weight = env4;
      break;
    case 5:
      c = env0;
      t1 = env1;
      intPoint = env2;
      v = env3;
      weight = env4;
      break;
    case 6:
      c = env0;
      t1 = env1;
      intPoint = env2;
      v = env3;
      weight = env4;
      break;
    case 7:
      c = env0;
      t1 = env1;
      v = env2;
      weight = env3;
      break;
    case 8:
      c = env0;
      v = env1;
      weight = env2;
      t1 = env3;
      break;
    case 9:
      c = env0;
      t1 = env1;
      v = env2;
      weight = env3;
      pt0 = env4;
      break;
    case 10:
      v = env0;
      weight = env1;
      pt0 = env2;
      c = env3;
      t1 = env4;
      pt1 = env5;
      break;
    case 11:
      pt2 = env0;
      v = env1;
      weight = env2;
      pt0 = env3;
      c = env4;
      t1 = env5;
      pt1 = env6;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var v = $.Vector3$(0, 0, 0);
      var c = $.ListImplementation_List(4);
      var t1 = $.get$length(this.points);
    case 2:
      state0 = 0;
      var point = $.mul($.sub(t1, 1), t);
      var intPoint = $.toInt($.floor(point));
    case 3:
      state0 = 0;
      var weight = $.sub(point, intPoint);
      c[0] = $.eqB(intPoint, 0) ? intPoint : $.sub(intPoint, 1);
      c[1] = intPoint;
      t1 = $.get$length(this.points);
    case 4:
      state0 = 0;
    case 5:
      if (state0 === 5 || state0 === 0 && $.gtB(intPoint, $.sub(t1, 2)))
        switch (state0) {
          case 0:
            t1 = $.get$length(this.points);
          case 5:
            state0 = 0;
            t1 = $.sub(t1, 1);
        }
      else
        t1 = $.add(intPoint, 1);
      c[2] = t1;
      t1 = $.get$length(this.points);
    case 6:
      state0 = 0;
    case 7:
      if (state0 === 7 || state0 === 0 && $.gtB(intPoint, $.sub(t1, 3)))
        switch (state0) {
          case 0:
            t1 = $.get$length(this.points);
          case 7:
            state0 = 0;
            t1 = $.sub(t1, 1);
        }
      else
        t1 = $.add(intPoint, 2);
      c[3] = t1;
      t1 = this.points;
    case 8:
      state0 = 0;
      var pt0 = $.index(t1, c[0]);
      t1 = this.points;
    case 9:
      state0 = 0;
      var pt1 = $.index(t1, c[1]);
      t1 = this.points;
    case 10:
      state0 = 0;
      var pt2 = $.index(t1, c[2]);
      t1 = this.points;
    case 11:
      state0 = 0;
      var pt3 = $.index(t1, c[3]);
      v.x = $.interpolate(pt0.get$x(), pt1.get$x(), pt2.get$x(), pt3.get$x(), weight);
      v.y = $.interpolate(pt0.get$y(), pt1.get$y(), pt2.get$y(), pt3.get$y(), weight);
      v.z = $.interpolate(pt0.get$z(), pt1.get$z(), pt2.get$z(), pt3.get$z(), weight);
      return v;
  }
},
 SplineCurve3$1: function(points) {
  if (this.points == null)
    this.points = [];
}
};

$$.ArrowHelper = {"": ["line", "cone", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 setDirection$1: function(dir) {
  var axis = $.Vector3$(0, 1, 0).crossSelf$1(dir);
  var radians = $.acos($.Vector3$(0, 1, 0).dot$1(dir.clone$0().normalize$0()));
  this.matrix = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1).makeRotationAxis$2(axis.normalize$0(), radians);
  this.rotation.setEulerFromRotationMatrix$2(this.matrix, this.eulerOrder);
},
 setLength$1: function(length$) {
  return this.scale.setValues$3(length$, length$, length$);
},
 ArrowHelper$4: function(dir, origin, length$, hex) {
  var lineGeometry = $.Geometry$();
  $.add$1(lineGeometry.vertices, $.Vector3$(0, 0, 0));
  $.add$1(lineGeometry.vertices, $.Vector3$(0, 1, 0));
  this.line = $.Line$(lineGeometry, $.LineBasicMaterial$(0, 205, 100, 204, 1, hex, true, true, true, 'round', 'round', 1, '', 1, false, false, 0, 0, 0, false, 0, true), 0);
  this.add$1(this.line);
  this.cone = $.Mesh$($.CylinderGeometry$(0, 0.05, 0.25, 5, 1, false), $.MeshBasicMaterial$(0, 205, 100, 204, 1, hex, 0, true, true, null, true, null, null, false, '', 1, false, false, 0, 0, 1, 0.98, 2, 0, false, null, false, 0, true, false, 'round', 'round', 1));
  this.cone.get$position().setValues$3(0, 1, 0);
  this.add$1(this.cone);
  if (!(origin == null))
    this.position = origin;
  this.setDirection$1(dir);
  this.setLength$1(length$);
}
};

$$.DirectionalLight = {"": ["_position", "target", "intensity?", "distance?", "_castShadow", "onlyShadow?", "_shadowCameraLeft", "_shadowCameraRight", "_shadowCameraTop", "_shadowCameraBottom", "_shadowCameraVisible", "_shadowBias", "_shadowDarkness", "_shadowMapWidth", "_shadowMapHeight", "_shadowMap", "_shadowMapSize", "_shadowCamera", "_shadowMatrix", "color", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Light",
 DirectionalLight$3: function(hex, intensity, distance) {
  this._position = $.Vector3$(0, 1, 0);
  this.target = $.Object3D$();
  this._castShadow = false;
  this.onlyShadow = false;
  this._shadowCameraLeft = -500;
  this._shadowCameraRight = 500;
  this._shadowCameraTop = 500;
  this._shadowCameraBottom = -500;
  this._shadowCameraVisible = false;
  this._shadowBias = 0;
  this._shadowDarkness = 0.5;
  this._shadowMapWidth = 512;
  this._shadowMapHeight = 512;
  this._shadowMap = null;
  this._shadowMapSize = null;
  this._shadowCamera = null;
  this._shadowMatrix = null;
},
 is$DirectionalLight: true
};

$$.Light = {"": ["color?"],
 "super": "Object3D",
 is$Light: true
};

$$.Material = {"": ["name?", "id=", "side?", "opacity?", "blending?", "blendSrc?", "blendDst?", "blendEquation?", "alphaTest?", "polygonOffset?", "polygonOffsetFactor?", "polygonOffsetUnits?", "transparent=", "depthTest?", "depthWrite?", "visible?", "needsUpdate="],
 "super": "Object",
 blendEquation$1: function(arg0) { return this.blendEquation.call$1(arg0); },
 polygonOffset$2: function(arg0, arg1) { return this.polygonOffset.call$2(arg0, arg1); },
 get$_data: function() {
  if (this.__data == null)
    this.__data = $.makeLiteralMap([]);
  return this.__data;
},
 operator$index$1: function(key) {
  return $.index(this.get$_data(), key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this.get$_data(), key, value);
  return value;
}
};

$$.MeshBasicMaterial = {"": ["color?", "map?", "lightMap?", "specularMap?", "envMap?", "combine?", "reflectivity?", "refractionRatio?", "shading?", "wireframe?", "wireframeLinewidth?", "wireframeLinecap", "wireframeLinejoin", "skinning?", "morphTargets?", "vertexColors?", "fog?", "name", "id", "side", "opacity", "blending", "blendSrc", "blendDst", "blendEquation", "alphaTest", "polygonOffset", "polygonOffsetFactor", "polygonOffsetUnits", "transparent", "depthTest", "depthWrite", "overdraw", "visible", "needsUpdate", "__data"],
 "super": "Material",
 map$1: function(arg0) { return this.map.call$1(arg0); },
 is$MeshBasicMaterial: true
};

$$.LineBasicMaterial = {"": ["color?", "linewidth?", "linecap", "linejoin", "fog?", "vertexColors?", "name", "id", "side", "opacity", "blending", "blendSrc", "blendDst", "blendEquation", "alphaTest", "polygonOffset", "polygonOffsetFactor", "polygonOffsetUnits", "transparent", "depthTest", "depthWrite", "overdraw", "visible", "needsUpdate", "__data"],
 "super": "Material",
 is$LineBasicMaterial: true
};

$$.MeshLambertMaterial = {"": ["_parameters", "color?", "ambient?", "emissive?", "wrapAround?", "wrapRGB?", "map?", "lightMap?", "specularMap?", "envMap?", "combine?", "reflectivity?", "refractionRatio?", "shading?", "wireframe?", "wireframeLinewidth?", "wireframeLinecap", "wireframeLinejoin", "skinning?", "morphTargets?", "morphNormals?", "vertexColors?", "fog?", "name", "id", "side", "opacity", "blending", "blendSrc", "blendDst", "blendEquation", "alphaTest", "polygonOffset", "polygonOffsetFactor", "polygonOffsetUnits", "transparent", "depthTest", "depthWrite", "overdraw", "visible", "needsUpdate", "__data"],
 "super": "Material",
 map$1: function(arg0) { return this.map.call$1(arg0); },
 is$MeshLambertMaterial: true
};

$$.Mesh = {"": ["geometry?", "material?", "_morphTargetBase", "morphTargetForcedOrder?", "morphTargetInfluences?", "_morphTargetDictionary", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 Mesh$2: function(geometry, material) {
  if (this.material == null)
    this.material = $.MeshBasicMaterial$(0, 205, 100, 204, 1, $.Random_Random(null).nextInt$1(16777215), 0, true, true, null, true, null, null, false, '', 1, false, false, 0, 0, 1, 0.98, 2, 0, false, null, false, 0, true, true, 'round', 'round', 1);
  var t1 = this.geometry;
  if (!(t1 == null)) {
    if (t1.get$boundingSphere() == null)
      t1.computeBoundingSphere$0();
    this.boundRadius = t1.get$boundingSphere().get$radius();
    if (!$.eqB($.get$length(t1.get$morphTargets()), 0)) {
      this._morphTargetBase = -1;
      this.morphTargetForcedOrder = [];
      this.morphTargetInfluences = [];
      this._morphTargetDictionary = $.makeLiteralMap([]);
      for (var m = 0; $.ltB(m, $.get$length(t1.get$morphTargets())); ++m) {
        $.add$1(this.morphTargetInfluences, 0);
        $.indexSet(this._morphTargetDictionary, $.index(t1.get$morphTargets(), m).get$name(), m);
      }
    }
  }
},
 is$Mesh: true
};

$$.Line = {"": ["geometry?", "material?", "type?", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 Line$3: function(geometry, material, type) {
  if (this.material == null)
    this.material = $.LineBasicMaterial$(0, 205, 100, 204, 1, $.Random_Random(null).nextInt$1(16777215), true, true, true, 'round', 'round', 1, '', 1, false, false, 0, 0, 0, false, 0, true);
  var t1 = this.geometry;
  if (!(t1 == null))
    if (t1.get$boundingSphere() == null)
      t1.computeBoundingSphere$0();
},
 is$Line: true
};

$$.WebGLRenderer = {"": ["canvas", "_gl?", "precision", "clearColor", "clearAlpha", "maxLights", "alpha", "premultipliedAlpha", "antialias", "stencil", "preserveDrawingBuffer", "autoClear", "autoClearColor", "autoClearDepth", "autoClearStencil", "sortObjects!", "autoUpdateObjects", "autoUpdateScene", "gammaInput", "gammaOutput", "physicallyBasedShading", "shadowMapEnabled", "shadowMapAutoUpdate", "shadowMapSoft", "shadowMapCullFrontFaces", "shadowMapDebug", "shadowMapCascade", "maxMorphTargets", "maxMorphNormals", "autoScaleCubemaps", "renderPluginsPre", "renderPluginsPost", "info", "_programs", "_programs_counter", "_currentProgram", "_currentFramebuffer", "_currentMaterialId", "_currentGeometryGroupHash", "_currentCamera", "_geometryGroupCounter=", "_oldDoubleSided", "_oldFlipSided", "_oldBlending", "_oldBlendEquation", "_oldBlendSrc", "_oldBlendDst", "_oldDepthTest", "_oldDepthWrite", "_oldPolygonOffset", "_oldPolygonOffsetFactor", "_oldPolygonOffsetUnits", "_oldLineWidth", "_viewportX", "_viewportY", "_viewportWidth", "_viewportHeight", "_currentWidth", "_currentHeight", "_frustum", "_projScreenMatrix", "_projScreenMatrixPS", "_vector3", "_direction", "_lights", "_lightsNeedUpdate", "_glExtensionTextureFloat", "_glExtensionStandardDerivatives", "_glExtensionTextureFilterAnisotropic", "maxAnisotropy", "supportsVertexTextures", "supportsBoneTextures", "shadowMapPlugin", "maxVertexTextures", "maxTextureSize", "maxCubemapSize"],
 "super": "Object",
 clearColor$4: function(arg0, arg1, arg2, arg3) { return this.clearColor.call$4(arg0, arg1, arg2, arg3); },
 get$domElement: function() {
  return this.canvas;
},
 setSize$2: function(width, height) {
  this.canvas.set$width(width);
  this.canvas.set$height(height);
  this.setViewport$4(0, 0, this.canvas.get$width(), this.canvas.get$height());
},
 setViewport$4: function(x, y, width, height) {
  this._viewportX = x;
  this._viewportY = y;
  this._viewportWidth = !$.eqB(width, -1) ? width : this.canvas.get$width();
  this._viewportHeight = !$.eqB(height, -1) ? height : this.canvas.get$height();
  this._gl.viewport$4(this._viewportX, this._viewportY, this._viewportWidth, this._viewportHeight);
},
 clear$3: function(color, depth, stencil) {
  var bits = color === true ? 16384 : 0;
  if (depth === true)
    bits = (bits | 256) >>> 0;
  if (stencil === true)
    bits = (bits | 1024) >>> 0;
  this._gl.clear$1(bits);
},
 clear$0: function() {
  return this.clear$3(true,true,true)
},
 clear$1: function(color) {
  return this.clear$3(color,true,true)
},
 deallocateMaterial$1: function(material) {
  var program = material.get$program();
  if (program == null)
    return;
  material.set$program(null);
  program.set$usedTimes($.sub(program.get$usedTimes(), 1));
  if ($.eqB(program.get$usedTimes(), 0)) {
    var t1 = this._programs;
    $.removeRange(t1, $.indexOf$1(t1, program), 1);
    this._gl.deleteProgram$1(program.get$glProgram());
    t1 = this.info.memory;
    t1.programs = t1.programs - 1;
  }
},
 createParticleBuffers$1: function(geometry) {
  geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
  var t1 = this.info.memory;
  t1.geometries = t1.geometries + 1;
},
 createLineBuffers$1: function(geometry) {
  geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
  var t1 = this.info.memory;
  t1.geometries = t1.geometries + 1;
},
 createRibbonBuffers$1: function(geometry) {
  geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
  var t1 = this.info.memory;
  t1.geometries = t1.geometries + 1;
},
 createMeshBuffers$1: function(geometryGroup) {
  geometryGroup.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglNormalBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglTangentBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglColorBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglUVBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglUV2Buffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinVertexABuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinVertexBBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinIndicesBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinWeightsBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglFaceBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglLineBuffer(this._gl.createBuffer$0());
  if (!(geometryGroup.get$numMorphTargets() == null)) {
    geometryGroup.set$__webglMorphTargetsBuffers([]);
    var ml = geometryGroup.get$numMorphTargets();
    if (typeof ml !== 'number')
      return this.createMeshBuffers$1$bailout(1, geometryGroup, ml);
    for (var m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__webglMorphTargetsBuffers(), this._gl.createBuffer$0());
  }
  if (!(geometryGroup.get$numMorphNormals() == null)) {
    geometryGroup.set$__webglMorphNormalsBuffers([]);
    ml = geometryGroup.get$numMorphNormals();
    if (typeof ml !== 'number')
      return this.createMeshBuffers$1$bailout(2, geometryGroup, ml);
    for (m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__webglMorphNormalsBuffers(), this._gl.createBuffer$0());
  }
  var t1 = this.info.memory;
  t1.geometries = t1.geometries + 1;
},
 createMeshBuffers$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      var geometryGroup = env0;
      ml = env1;
      break;
    case 2:
      geometryGroup = env0;
      ml = env1;
      break;
  }
  switch (state0) {
    case 0:
      geometryGroup.set$__webglVertexBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglNormalBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglTangentBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglColorBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglUVBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglUV2Buffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinVertexABuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinVertexBBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinIndicesBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinWeightsBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglFaceBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglLineBuffer(this._gl.createBuffer$0());
    case 1:
      if (state0 === 1 || state0 === 0 && !(geometryGroup.get$numMorphTargets() == null))
        switch (state0) {
          case 0:
            geometryGroup.set$__webglMorphTargetsBuffers([]);
            var ml = geometryGroup.get$numMorphTargets();
          case 1:
            state0 = 0;
            for (var m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__webglMorphTargetsBuffers(), this._gl.createBuffer$0());
        }
    case 2:
      if (state0 === 2 || state0 === 0 && !(geometryGroup.get$numMorphNormals() == null))
        switch (state0) {
          case 0:
            geometryGroup.set$__webglMorphNormalsBuffers([]);
            ml = geometryGroup.get$numMorphNormals();
          case 2:
            state0 = 0;
            for (m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__webglMorphNormalsBuffers(), this._gl.createBuffer$0());
        }
      var t1 = this.info.memory;
      t1.geometries = t1.geometries + 1;
  }
},
 initCustomAttributes$2: function(geometry, object) {
  var nvertices = $.get$length(geometry.get$vertices());
  if (typeof nvertices !== 'number')
    return this.initCustomAttributes$2$bailout(1, geometry, object, nvertices);
  var material = object.get$webglmaterial();
  if (!(material.get$attributes() == null)) {
    if (geometry.get$__webglCustomAttributesList() == null)
      geometry.set$__webglCustomAttributesList([]);
    for (var t1 = $.iterator(material.get$attributes()); t1.get$hasNext() === true;) {
      var t2 = t1.next$0();
      var attribute = $.index(material.get$attributes(), t2);
      if ($.index(attribute, '__webglInitialized') !== true || attribute.get$createUniqueBuffers() === true) {
        $.indexSet(attribute, '__webglInitialized', true);
        if ($.eqB(attribute.get$type(), 'v2'))
          var size = 2;
        else if ($.eqB(attribute.get$type(), 'v3'))
          size = 3;
        else if ($.eqB(attribute.get$type(), 'v4'))
          size = 4;
        else
          size = $.eqB(attribute.get$type(), 'c') ? 3 : 1;
        attribute.set$size(size);
        attribute.set$array($.Float32Array_Float32Array(nvertices * size));
        attribute.set$buffer($.Buffer$(this._gl.createBuffer$0()));
        attribute.get$buffer().set$belongsToAttribute(t2);
        attribute.set$needsUpdate(true);
      }
      $.add$1(geometry.get$__webglCustomAttributesList(), attribute);
    }
  }
},
 initCustomAttributes$2$bailout: function(state0, geometry, object, nvertices) {
  var material = object.get$webglmaterial();
  if (!(material.get$attributes() == null)) {
    if (geometry.get$__webglCustomAttributesList() == null)
      geometry.set$__webglCustomAttributesList([]);
    for (var t1 = $.iterator(material.get$attributes()); t1.get$hasNext() === true;) {
      var t2 = t1.next$0();
      var attribute = $.index(material.get$attributes(), t2);
      if ($.index(attribute, '__webglInitialized') !== true || attribute.get$createUniqueBuffers() === true) {
        $.indexSet(attribute, '__webglInitialized', true);
        if ($.eqB(attribute.get$type(), 'v2'))
          var size = 2;
        else if ($.eqB(attribute.get$type(), 'v3'))
          size = 3;
        else if ($.eqB(attribute.get$type(), 'v4'))
          size = 4;
        else
          size = $.eqB(attribute.get$type(), 'c') ? 3 : 1;
        attribute.set$size(size);
        attribute.set$array($.Float32Array_Float32Array($.mul(nvertices, size)));
        attribute.set$buffer($.Buffer$(this._gl.createBuffer$0()));
        attribute.get$buffer().set$belongsToAttribute(t2);
        attribute.set$needsUpdate(true);
      }
      $.add$1(geometry.get$__webglCustomAttributesList(), attribute);
    }
  }
},
 initParticleBuffers$2: function(geometry, object) {
  var nvertices = $.get$length(geometry.get$vertices());
  geometry.set$__vertexArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
  geometry.set$__colorArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
  geometry.set$__sortArray([]);
  geometry.set$__webglParticleCount(nvertices);
  this.initCustomAttributes$2(geometry, object);
},
 initLineBuffers$2: function(geometry, object) {
  var nvertices = $.get$length(geometry.get$vertices());
  geometry.set$__vertexArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
  geometry.set$__colorArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
  geometry.set$__webglLineCount(nvertices);
  this.initCustomAttributes$2(geometry, object);
},
 initRibbonBuffers$1: function(geometry) {
  var nvertices = $.get$length(geometry.get$vertices());
  geometry.set$__vertexArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
  geometry.set$__colorArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
  geometry.set$__webglVertexCount(nvertices);
},
 initMeshBuffers$2: function(geometryGroup, object) {
  var geometry = object.get$geometry();
  var faces3 = geometryGroup.get$faces3();
  var faces4 = geometryGroup.get$faces4();
  var nvertices = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
  if (typeof nvertices !== 'number')
    return this.initMeshBuffers$2$bailout(1, geometryGroup, object, nvertices, geometry, faces3, faces4);
  var ntris = $.add($.mul($.get$length(faces3), 1), $.mul($.get$length(faces4), 2));
  var nlines = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
  var material = this.getBufferMaterial$2(object, geometryGroup);
  var uvType = this.bufferGuessUVType$1(material);
  var normalType = this.bufferGuessNormalType$1(material);
  var vertexColorType = this.bufferGuessVertexColorType$1(material);
  var t2 = nvertices * 3;
  geometryGroup.set$__vertexArray($.Float32Array_Float32Array(t2));
  if (!$.eqB(normalType, 0))
    geometryGroup.set$__normalArray($.Float32Array_Float32Array(t2));
  if (geometry.get$hasTangents() === true)
    geometryGroup.set$__tangentArray($.Float32Array_Float32Array(nvertices * 4));
  if (vertexColorType === true)
    geometryGroup.set$__colorArray($.Float32Array_Float32Array(t2));
  if (uvType === true) {
    if ($.gtB($.get$length(geometry.get$faceUvs()), 0) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 0))
      geometryGroup.set$__uvArray($.Float32Array_Float32Array(nvertices * 2));
    if ($.gtB($.get$length(geometry.get$faceUvs()), 1) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 1))
      geometryGroup.set$__uv2Array($.Float32Array_Float32Array(nvertices * 2));
  }
  if ($.get$isEmpty(object.get$geometry().get$skinWeights()) !== true && $.get$isEmpty(object.get$geometry().get$skinIndices()) !== true) {
    var t1 = nvertices * 4;
    geometryGroup.set$__skinVertexAArray($.Float32Array_Float32Array(t1));
    geometryGroup.set$__skinVertexBArray($.Float32Array_Float32Array(t1));
    geometryGroup.set$__skinIndexArray($.Float32Array_Float32Array(t1));
    geometryGroup.set$__skinWeightArray($.Float32Array_Float32Array(t1));
  }
  geometryGroup.set$__faceArray($.Uint16Array_Uint16Array($.mul(ntris, 3)));
  geometryGroup.set$__lineArray($.Uint16Array_Uint16Array($.mul(nlines, 2)));
  if (!(geometryGroup.get$numMorphTargets() == null)) {
    geometryGroup.set$__morphTargetsArrays([]);
    var ml = geometryGroup.get$numMorphTargets();
    if (typeof ml !== 'number')
      return this.initMeshBuffers$2$bailout(2, geometryGroup, nvertices, nlines, material, ml, ntris);
    for (var m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__morphTargetsArrays(), $.Float32Array_Float32Array(t2));
  }
  if (!(geometryGroup.get$numMorphNormals() == null)) {
    geometryGroup.set$__morphNormalsArrays([]);
    ml = geometryGroup.get$numMorphNormals();
    if (typeof ml !== 'number')
      return this.initMeshBuffers$2$bailout(3, geometryGroup, nvertices, nlines, ml, material, ntris);
    for (m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__morphNormalsArrays(), $.Float32Array_Float32Array(t2));
  }
  geometryGroup.set$__webglFaceCount($.mul(ntris, 3));
  geometryGroup.set$__webglLineCount($.mul(nlines, 2));
  if (!(material.get$attributes() == null)) {
    if (geometryGroup.get$__webglCustomAttributesList() == null)
      geometryGroup.set$__webglCustomAttributesList([]);
    $.forEach(material.get$attributes(), new $.WebGLRenderer_initMeshBuffers_anon(this, material, geometryGroup, nvertices));
  }
  geometryGroup.set$__inittedArrays(true);
},
 initMeshBuffers$2$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      var geometryGroup = env0;
      var object = env1;
      nvertices = env2;
      geometry = env3;
      faces3 = env4;
      faces4 = env5;
      break;
    case 2:
      geometryGroup = env0;
      nvertices = env1;
      nlines = env2;
      material = env3;
      ml = env4;
      ntris = env5;
      break;
    case 3:
      geometryGroup = env0;
      nvertices = env1;
      nlines = env2;
      ml = env3;
      material = env4;
      ntris = env5;
      break;
  }
  switch (state0) {
    case 0:
      var geometry = object.get$geometry();
      var faces3 = geometryGroup.get$faces3();
      var faces4 = geometryGroup.get$faces4();
      var nvertices = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
    case 1:
      state0 = 0;
      var ntris = $.add($.mul($.get$length(faces3), 1), $.mul($.get$length(faces4), 2));
      var nlines = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
      var material = this.getBufferMaterial$2(object, geometryGroup);
      var uvType = this.bufferGuessUVType$1(material);
      var normalType = this.bufferGuessNormalType$1(material);
      var vertexColorType = this.bufferGuessVertexColorType$1(material);
      geometryGroup.set$__vertexArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
      if (!$.eqB(normalType, 0))
        geometryGroup.set$__normalArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
      if (geometry.get$hasTangents() === true)
        geometryGroup.set$__tangentArray($.Float32Array_Float32Array($.mul(nvertices, 4)));
      if (vertexColorType === true)
        geometryGroup.set$__colorArray($.Float32Array_Float32Array($.mul(nvertices, 3)));
      if (uvType === true) {
        if ($.gtB($.get$length(geometry.get$faceUvs()), 0) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 0))
          geometryGroup.set$__uvArray($.Float32Array_Float32Array($.mul(nvertices, 2)));
        if ($.gtB($.get$length(geometry.get$faceUvs()), 1) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 1))
          geometryGroup.set$__uv2Array($.Float32Array_Float32Array($.mul(nvertices, 2)));
      }
      if ($.get$isEmpty(object.get$geometry().get$skinWeights()) !== true && $.get$isEmpty(object.get$geometry().get$skinIndices()) !== true) {
        geometryGroup.set$__skinVertexAArray($.Float32Array_Float32Array($.mul(nvertices, 4)));
        geometryGroup.set$__skinVertexBArray($.Float32Array_Float32Array($.mul(nvertices, 4)));
        geometryGroup.set$__skinIndexArray($.Float32Array_Float32Array($.mul(nvertices, 4)));
        geometryGroup.set$__skinWeightArray($.Float32Array_Float32Array($.mul(nvertices, 4)));
      }
      geometryGroup.set$__faceArray($.Uint16Array_Uint16Array($.mul(ntris, 3)));
      geometryGroup.set$__lineArray($.Uint16Array_Uint16Array($.mul(nlines, 2)));
    case 2:
      if (state0 === 2 || state0 === 0 && !(geometryGroup.get$numMorphTargets() == null))
        switch (state0) {
          case 0:
            geometryGroup.set$__morphTargetsArrays([]);
            var ml = geometryGroup.get$numMorphTargets();
          case 2:
            state0 = 0;
            for (var m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__morphTargetsArrays(), $.Float32Array_Float32Array($.mul(nvertices, 3)));
        }
    case 3:
      if (state0 === 3 || state0 === 0 && !(geometryGroup.get$numMorphNormals() == null))
        switch (state0) {
          case 0:
            geometryGroup.set$__morphNormalsArrays([]);
            ml = geometryGroup.get$numMorphNormals();
          case 3:
            state0 = 0;
            for (m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__morphNormalsArrays(), $.Float32Array_Float32Array($.mul(nvertices, 3)));
        }
      geometryGroup.set$__webglFaceCount($.mul(ntris, 3));
      geometryGroup.set$__webglLineCount($.mul(nlines, 2));
      if (!(material.get$attributes() == null)) {
        if (geometryGroup.get$__webglCustomAttributesList() == null)
          geometryGroup.set$__webglCustomAttributesList([]);
        $.forEach(material.get$attributes(), new $.WebGLRenderer_initMeshBuffers_anon(this, material, geometryGroup, nvertices));
      }
      geometryGroup.set$__inittedArrays(true);
  }
},
 getBufferMaterial$2: function(object, geometryGroup) {
  if (!(object.get$material() == null)) {
    var t1 = object.get$material();
    var t2 = !(typeof t1 === 'object' && t1 !== null && !!t1.is$MeshFaceMaterial);
    t1 = t2;
  } else
    t1 = false;
  if (t1)
    var material = object.get$material();
  else
    material = $.geB(geometryGroup.get$materialIndex(), 0) ? $.index(object.get$geometry().get$materials(), geometryGroup.get$materialIndex()) : null;
  return $.WebGLMaterial_WebGLMaterial$from(material);
},
 bufferGuessNormalType$1: function(material) {
  if (material.get$needsNormals() !== true)
    return 0;
  if (material.get$needsSmoothNormals() === true)
    return 2;
  else
    return 1;
},
 bufferGuessVertexColorType$1: function(material) {
  if (!(material.get$vertexColors() == null) && !$.eqB(material.get$vertexColors(), 0))
    return material.get$vertexColors();
  return false;
},
 bufferGuessUVType$1: function(material) {
  if (!(material.get$map() == null) || !(material.get$lightMap() == null) || !(material.get$bumpMap() == null) || !(material.get$specularMap() == null) || material.get$isShaderMaterial() === true)
    return true;
  return false;
},
 initDirectBuffers$1: function(geometry) {
  var t1 = {};
  t1.attribute_1 = null;
  t1.type_2 = null;
  $.forEach(geometry.get$attributes(), new $.WebGLRenderer_initDirectBuffers_anon(t1, this));
},
 setParticleBuffers$3: function(geometry, hint, object) {
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setParticleBuffers$3$bailout(1, geometry, hint, object, vertices, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var vl = vertices.length;
  var colors = geometry.get$colors();
  if (typeof colors !== 'string' && (typeof colors !== 'object' || colors === null || colors.constructor !== Array && !colors.is$JavaScriptIndexingBehavior()))
    return this.setParticleBuffers$3$bailout(2, geometry, hint, object, vertices, vl, colors, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var cl = colors.length;
  var vertexArray = geometry.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setParticleBuffers$3$bailout(3, geometry, hint, object, vertices, vl, colors, cl, vertexArray, 0, 0, 0, 0, 0, 0, 0, 0);
  var colorArray = geometry.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setParticleBuffers$3$bailout(4, geometry, hint, object, vertices, vl, colors, cl, vertexArray, colorArray, 0, 0, 0, 0, 0, 0, 0);
  var sortArray = geometry.get$__sortArray();
  if (typeof sortArray !== 'object' || sortArray === null || (sortArray.constructor !== Array || !!sortArray.immutable$list) && !sortArray.is$JavaScriptIndexingBehavior())
    return this.setParticleBuffers$3$bailout(5, geometry, hint, object, vertices, vl, colors, cl, vertexArray, colorArray, sortArray, 0, 0, 0, 0, 0, 0);
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  geometry.get$elementsNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  var customAttributes = geometry.get$__webglCustomAttributesList();
  if (typeof customAttributes !== 'string' && (typeof customAttributes !== 'object' || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.is$JavaScriptIndexingBehavior()))
    return this.setParticleBuffers$3$bailout(6, geometry, hint, object, vertices, vl, colors, cl, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, 0, 0, 0);
  var t1 = object.sortParticles === true;
  if (t1) {
    var t2 = this._projScreenMatrixPS;
    t2.copy$1(this._projScreenMatrix);
    t2.multiplySelf$1(object.matrixWorld);
    for (var t3 = this._vector3, v = 0, vertex = null; v < vl; ++v) {
      if (v >= vertices.length)
        throw $.ioore(v);
      vertex = vertices[v];
      t3.copy$1(vertex);
      t2.multiplyVector3$1(t3);
      var t4 = [t3.z, v];
      if (v >= sortArray.length)
        throw $.ioore(v);
      sortArray[v] = t4;
    }
    $.sort$1(sortArray, new $.WebGLRenderer_setParticleBuffers_function());
    for (var v = 0, offset = null; v < vl; ++v) {
      if (v >= sortArray.length)
        throw $.ioore(v);
      t2 = $.index(sortArray[v], 1);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= vertices.length)
        throw $.ioore(t2);
      vertex = vertices[t2];
      offset = v * 3;
      t2 = vertex.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t2;
      t2 = offset + 1;
      t3 = vertex.get$y();
      if (t2 >= vertexArray.length)
        throw $.ioore(t2);
      vertexArray[t2] = t3;
      t3 = offset + 2;
      t2 = vertex.get$z();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t2;
    }
    for (var c = 0, color = null; c < cl; ++c) {
      offset = c * 3;
      if (c >= sortArray.length)
        throw $.ioore(c);
      t2 = $.index(sortArray[c], 1);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= colors.length)
        throw $.ioore(t2);
      color = colors[t2];
      t2 = color.get$r();
      t3 = colorArray.length;
      if (offset < 0 || offset >= t3)
        throw $.ioore(offset);
      colorArray[offset] = t2;
      t2 = offset + 1;
      t4 = color.get$g();
      if (t2 >= t3)
        throw $.ioore(t2);
      colorArray[t2] = t4;
      t4 = offset + 2;
      t2 = color.get$b();
      if (t4 >= t3)
        throw $.ioore(t4);
      colorArray[t4] = t2;
    }
    var il = customAttributes.length;
    for (var i = 0, ca = null, cal = null, value = null, customAttribute = null, index = null; i < il; ++i) {
      if (i >= customAttributes.length)
        throw $.ioore(i);
      customAttribute = customAttributes[i];
      t2 = customAttribute.get$boundTo();
      if (!(t2 == null || $.eqB(t2, 'vertices')))
        continue;
      cal = $.get$length(customAttribute.get$value());
      if ($.eqB(customAttribute.get$size(), 1)) {
        for (ca = 0; $.ltB(ca, cal); ++ca) {
          if (ca >= sortArray.length)
            throw $.ioore(ca);
          t2 = sortArray[ca];
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this.setParticleBuffers$3$bailout(7, geometry, hint, cal, il, i, customAttribute, vertexArray, sortArray, dirtyVertices, value, dirtyColors, customAttributes, t2, ca, t1, colorArray);
          if (1 >= t2.length)
            throw $.ioore(1);
          index = t2[1];
          $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), index));
        }
        offset = 0;
      } else if ($.eqB(customAttribute.get$size(), 2))
        for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
          if (ca >= sortArray.length)
            throw $.ioore(ca);
          t2 = sortArray[ca];
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this.setParticleBuffers$3$bailout(8, ca, cal, offset, i, customAttribute, sortArray, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (1 >= t2.length)
            throw $.ioore(1);
          index = t2[1];
          value = $.index(customAttribute.get$value(), index);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          offset += 2;
        }
      else if ($.eqB(customAttribute.get$size(), 3))
        if ($.eqB(customAttribute.get$type(), 'c'))
          for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
            if (ca >= sortArray.length)
              throw $.ioore(ca);
            t2 = sortArray[ca];
            if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
              return this.setParticleBuffers$3$bailout(9, cal, offset, i, customAttribute, t2, ca, sortArray, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (1 >= t2.length)
              throw $.ioore(1);
            index = t2[1];
            value = $.index(customAttribute.get$value(), index);
            $.indexSet(customAttribute.get$array(), offset, value.get$r());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
            offset += 3;
          }
        else
          for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
            if (ca >= sortArray.length)
              throw $.ioore(ca);
            t2 = sortArray[ca];
            if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
              return this.setParticleBuffers$3$bailout(10, t2, ca, cal, i, customAttribute, sortArray, offset, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (1 >= t2.length)
              throw $.ioore(1);
            index = t2[1];
            value = $.index(customAttribute.get$value(), index);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            offset += 3;
          }
      else if ($.eqB(customAttribute.get$size(), 4))
        for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
          if (ca >= sortArray.length)
            throw $.ioore(ca);
          t2 = sortArray[ca];
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this.setParticleBuffers$3$bailout(11, sortArray, cal, offset, i, customAttribute, t2, ca, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (1 >= t2.length)
            throw $.ioore(1);
          index = t2[1];
          value = $.index(customAttribute.get$value(), index);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
          $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
          offset += 4;
        }
      else
        offset = 0;
    }
  } else {
    if (dirtyVertices === true)
      for (v = 0, vertex = null, offset = null; v < vl; ++v) {
        if (v >= vertices.length)
          throw $.ioore(v);
        vertex = vertices[v];
        offset = v * 3;
        t2 = vertex.get$x();
        if (offset < 0 || offset >= vertexArray.length)
          throw $.ioore(offset);
        vertexArray[offset] = t2;
        t2 = offset + 1;
        t3 = vertex.get$y();
        if (t2 >= vertexArray.length)
          throw $.ioore(t2);
        vertexArray[t2] = t3;
        t3 = offset + 2;
        t2 = vertex.get$z();
        if (t3 >= vertexArray.length)
          throw $.ioore(t3);
        vertexArray[t3] = t2;
      }
    else
      offset = null;
    if (dirtyColors === true)
      for (c = 0, color = null; c < cl; ++c) {
        if (c >= colors.length)
          throw $.ioore(c);
        color = colors[c];
        offset = c * 3;
        t2 = color.get$r();
        t3 = colorArray.length;
        if (offset < 0 || offset >= t3)
          throw $.ioore(offset);
        colorArray[offset] = t2;
        t2 = offset + 1;
        t4 = color.get$g();
        if (t2 >= t3)
          throw $.ioore(t2);
        colorArray[t2] = t4;
        t4 = offset + 2;
        t2 = color.get$b();
        if (t4 >= t3)
          throw $.ioore(t4);
        colorArray[t4] = t2;
      }
    il = customAttributes.length;
    for (i = 0, ca = null, cal = null, value = null, customAttribute = null; i < il; ++i) {
      if (i >= customAttributes.length)
        throw $.ioore(i);
      customAttribute = customAttributes[i];
      if (customAttribute.get$needsUpdate() === true) {
        t2 = customAttribute.get$boundTo();
        t2 = t2 == null || $.eqB(t2, 'vertices');
      } else
        t2 = false;
      if (t2) {
        cal = $.get$length(customAttribute.get$value());
        if ($.eqB(customAttribute.get$size(), 1)) {
          for (ca = 0; $.ltB(ca, cal); ++ca)
            $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
          offset = 0;
        } else if ($.eqB(customAttribute.get$size(), 2))
          for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            offset += 2;
          }
        else if ($.eqB(customAttribute.get$size(), 3))
          if ($.eqB(customAttribute.get$type(), 'c'))
            for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
              value = $.index(customAttribute.get$value(), ca);
              $.indexSet(customAttribute.get$array(), offset, value.get$r());
              $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
              $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
              offset += 3;
            }
          else
            for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
              value = $.index(customAttribute.get$value(), ca);
              $.indexSet(customAttribute.get$array(), offset, value.get$x());
              $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
              $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
              offset += 3;
            }
        else if ($.eqB(customAttribute.get$size(), 4))
          for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
            offset += 4;
          }
        else
          offset = 0;
      }
    }
  }
  if (dirtyVertices === true || t1) {
    this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  }
  if (dirtyColors === true || t1) {
    this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
    this._gl.bufferData$3(34962, colorArray, hint);
  }
  il = customAttributes.length;
  for (i = 0; i < il; ++i) {
    if (i >= customAttributes.length)
      throw $.ioore(i);
    customAttribute = customAttributes[i];
    if (customAttribute.get$needsUpdate() === true || t1) {
      this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
      this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
    }
  }
},
 setParticleBuffers$3$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15) {
  switch (state0) {
    case 1:
      var geometry = env0;
      var hint = env1;
      var object = env2;
      vertices = env3;
      break;
    case 2:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      break;
    case 3:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      break;
    case 4:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      colorArray = env8;
      break;
    case 5:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      colorArray = env8;
      sortArray = env9;
      break;
    case 6:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      colorArray = env8;
      sortArray = env9;
      dirtyVertices = env10;
      dirtyColors = env11;
      customAttributes = env12;
      break;
    case 7:
      geometry = env0;
      hint = env1;
      cal = env2;
      il = env3;
      i = env4;
      customAttribute = env5;
      vertexArray = env6;
      sortArray = env7;
      dirtyVertices = env8;
      value = env9;
      dirtyColors = env10;
      customAttributes = env11;
      t2 = env12;
      ca = env13;
      t1 = env14;
      colorArray = env15;
      break;
    case 8:
      ca = env0;
      cal = env1;
      offset = env2;
      i = env3;
      customAttribute = env4;
      sortArray = env5;
      t2 = env6;
      break;
    case 9:
      cal = env0;
      offset = env1;
      i = env2;
      customAttribute = env3;
      t2 = env4;
      ca = env5;
      sortArray = env6;
      break;
    case 10:
      t2 = env0;
      ca = env1;
      cal = env2;
      i = env3;
      customAttribute = env4;
      sortArray = env5;
      offset = env6;
      break;
    case 11:
      sortArray = env0;
      cal = env1;
      offset = env2;
      i = env3;
      customAttribute = env4;
      t2 = env5;
      ca = env6;
      break;
  }
  switch (state0) {
    case 0:
      var vertices = geometry.get$vertices();
    case 1:
      state0 = 0;
      var vl = $.get$length(vertices);
      var colors = geometry.get$colors();
    case 2:
      state0 = 0;
      var cl = $.get$length(colors);
      var vertexArray = geometry.get$__vertexArray();
    case 3:
      state0 = 0;
      var colorArray = geometry.get$__colorArray();
    case 4:
      state0 = 0;
      var sortArray = geometry.get$__sortArray();
    case 5:
      state0 = 0;
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      geometry.get$elementsNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      var customAttributes = geometry.get$__webglCustomAttributesList();
    case 6:
      state0 = 0;
      var t1 = object.sortParticles === true;
    default:
      if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && t1)
        switch (state0) {
          case 0:
            var t2 = this._projScreenMatrixPS;
            t2.copy$1(this._projScreenMatrix);
            t2.multiplySelf$1(object.matrixWorld);
            for (var t3 = this._vector3, v = 0, vertex = null; $.ltB(v, vl); ++v) {
              vertex = $.index(vertices, v);
              t3.copy$1(vertex);
              t2.multiplyVector3$1(t3);
              $.indexSet(sortArray, v, [t3.z, v]);
            }
            $.sort$1(sortArray, new $.WebGLRenderer_setParticleBuffers_function());
            for (var v = 0, offset = null; $.ltB(v, vl); ++v) {
              vertex = $.index(vertices, $.index($.index(sortArray, v), 1));
              offset = v * 3;
              $.indexSet(vertexArray, offset, vertex.get$x());
              $.indexSet(vertexArray, offset + 1, vertex.get$y());
              $.indexSet(vertexArray, offset + 2, vertex.get$z());
            }
            for (var c = 0, color = null; $.ltB(c, cl); ++c) {
              offset = c * 3;
              color = $.index(colors, $.index($.index(sortArray, c), 1));
              $.indexSet(colorArray, offset, color.get$r());
              $.indexSet(colorArray, offset + 1, color.get$g());
              $.indexSet(colorArray, offset + 2, color.get$b());
            }
          default:
            if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && !(customAttributes == null))
              switch (state0) {
                case 0:
                  var il = $.get$length(customAttributes);
                  var i = 0;
                  var ca = null;
                  var cal = null;
                  var value = null;
                  var customAttribute = null;
                  var index = null;
                default:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, il))
                            break L0;
                        default:
                          c$0: {
                            switch (state0) {
                              case 0:
                                customAttribute = $.index(customAttributes, i);
                                t2 = customAttribute.get$boundTo();
                                if (!(t2 == null || $.eqB(t2, 'vertices')))
                                  break c$0;
                                cal = $.get$length(customAttribute.get$value());
                              default:
                                if (state0 === 7 || state0 === 0 && $.eqB(customAttribute.get$size(), 1))
                                  switch (state0) {
                                    case 0:
                                      ca = 0;
                                    case 7:
                                      L1:
                                        while (true)
                                          switch (state0) {
                                            case 0:
                                              if (!$.ltB(ca, cal))
                                                break L1;
                                              t2 = $.index(sortArray, ca);
                                            case 7:
                                              state0 = 0;
                                              index = $.index(t2, 1);
                                              $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), index));
                                              ++ca;
                                          }
                                      offset = 0;
                                  }
                                else
                                  switch (state0) {
                                    case 0:
                                    default:
                                      if (state0 === 8 || state0 === 0 && $.eqB(customAttribute.get$size(), 2))
                                        switch (state0) {
                                          case 0:
                                            ca = 0;
                                            offset = 0;
                                          case 8:
                                            L2:
                                              while (true)
                                                switch (state0) {
                                                  case 0:
                                                    if (!$.ltB(ca, cal))
                                                      break L2;
                                                    t2 = $.index(sortArray, ca);
                                                  case 8:
                                                    state0 = 0;
                                                    index = $.index(t2, 1);
                                                    value = $.index(customAttribute.get$value(), index);
                                                    $.indexSet(customAttribute.get$array(), offset, value.get$x());
                                                    $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                    offset += 2;
                                                    ++ca;
                                                }
                                        }
                                      else
                                        switch (state0) {
                                          case 0:
                                          default:
                                            if (state0 === 10 || state0 === 9 || state0 === 0 && $.eqB(customAttribute.get$size(), 3))
                                              switch (state0) {
                                                case 0:
                                                default:
                                                  if (state0 === 9 || state0 === 0 && $.eqB(customAttribute.get$type(), 'c'))
                                                    switch (state0) {
                                                      case 0:
                                                        ca = 0;
                                                        offset = 0;
                                                      case 9:
                                                        L3:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                if (!$.ltB(ca, cal))
                                                                  break L3;
                                                                t2 = $.index(sortArray, ca);
                                                              case 9:
                                                                state0 = 0;
                                                                index = $.index(t2, 1);
                                                                value = $.index(customAttribute.get$value(), index);
                                                                $.indexSet(customAttribute.get$array(), offset, value.get$r());
                                                                $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                                                                $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                                                                offset += 3;
                                                                ++ca;
                                                            }
                                                    }
                                                  else
                                                    switch (state0) {
                                                      case 0:
                                                        ca = 0;
                                                        offset = 0;
                                                      case 10:
                                                        L4:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                if (!$.ltB(ca, cal))
                                                                  break L4;
                                                                t2 = $.index(sortArray, ca);
                                                              case 10:
                                                                state0 = 0;
                                                                index = $.index(t2, 1);
                                                                value = $.index(customAttribute.get$value(), index);
                                                                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                                                                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                                $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                                                                offset += 3;
                                                                ++ca;
                                                            }
                                                    }
                                              }
                                            else
                                              switch (state0) {
                                                case 0:
                                                case 11:
                                                  if (state0 === 11 || state0 === 0 && $.eqB(customAttribute.get$size(), 4))
                                                    switch (state0) {
                                                      case 0:
                                                        ca = 0;
                                                        offset = 0;
                                                      case 11:
                                                        L5:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                if (!$.ltB(ca, cal))
                                                                  break L5;
                                                                t2 = $.index(sortArray, ca);
                                                              case 11:
                                                                state0 = 0;
                                                                index = $.index(t2, 1);
                                                                value = $.index(customAttribute.get$value(), index);
                                                                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                                                                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                                $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                                                                $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                                                                offset += 4;
                                                                ++ca;
                                                            }
                                                    }
                                                  else
                                                    offset = 0;
                                              }
                                        }
                                  }
                            }
                          }
                          ++i;
                      }
              }
            else
              customAttribute = null;
        }
      else {
        if (dirtyVertices === true)
          for (v = 0, vertex = null, offset = null; $.ltB(v, vl); ++v) {
            vertex = $.index(vertices, v);
            offset = v * 3;
            $.indexSet(vertexArray, offset, vertex.get$x());
            $.indexSet(vertexArray, offset + 1, vertex.get$y());
            $.indexSet(vertexArray, offset + 2, vertex.get$z());
          }
        else
          offset = null;
        if (dirtyColors === true)
          for (c = 0, color = null; $.ltB(c, cl); ++c) {
            color = $.index(colors, c);
            offset = c * 3;
            $.indexSet(colorArray, offset, color.get$r());
            $.indexSet(colorArray, offset + 1, color.get$g());
            $.indexSet(colorArray, offset + 2, color.get$b());
          }
        if (!(customAttributes == null)) {
          il = $.get$length(customAttributes);
          for (i = 0, ca = null, cal = null, value = null, customAttribute = null; $.ltB(i, il); ++i) {
            customAttribute = $.index(customAttributes, i);
            if (customAttribute.get$needsUpdate() === true) {
              t2 = customAttribute.get$boundTo();
              t2 = t2 == null || $.eqB(t2, 'vertices');
            } else
              t2 = false;
            if (t2) {
              cal = $.get$length(customAttribute.get$value());
              if ($.eqB(customAttribute.get$size(), 1)) {
                for (ca = 0; $.ltB(ca, cal); ++ca)
                  $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
                offset = 0;
              } else if ($.eqB(customAttribute.get$size(), 2))
                for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$x());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                  offset += 2;
                }
              else if ($.eqB(customAttribute.get$size(), 3))
                if ($.eqB(customAttribute.get$type(), 'c'))
                  for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
                    value = $.index(customAttribute.get$value(), ca);
                    $.indexSet(customAttribute.get$array(), offset, value.get$r());
                    $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                    $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                    offset += 3;
                  }
                else
                  for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
                    value = $.index(customAttribute.get$value(), ca);
                    $.indexSet(customAttribute.get$array(), offset, value.get$x());
                    $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                    $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                    offset += 3;
                  }
              else if ($.eqB(customAttribute.get$size(), 4))
                for (ca = 0, offset = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$x());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                  $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                  $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                  offset += 4;
                }
              else
                offset = 0;
            }
          }
        } else
          customAttribute = null;
      }
      if (dirtyVertices === true || t1) {
        this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      }
      if (dirtyColors === true || t1) {
        this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
        this._gl.bufferData$3(34962, colorArray, hint);
      }
      if (!(customAttributes == null)) {
        il = $.get$length(customAttributes);
        for (i = 0; $.ltB(i, il); ++i) {
          customAttribute = $.index(customAttributes, i);
          if (customAttribute.get$needsUpdate() === true || t1) {
            this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
            this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
          }
        }
      }
  }
},
 setLineBuffers$2: function(geometry, hint) {
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setLineBuffers$2$bailout(1, geometry, hint, vertices, 0, 0, 0, 0, 0, 0, 0, 0);
  var colors = geometry.get$colors();
  if (typeof colors !== 'string' && (typeof colors !== 'object' || colors === null || colors.constructor !== Array && !colors.is$JavaScriptIndexingBehavior()))
    return this.setLineBuffers$2$bailout(2, geometry, hint, vertices, colors, 0, 0, 0, 0, 0, 0, 0);
  var vl = vertices.length;
  var cl = colors.length;
  var vertexArray = geometry.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setLineBuffers$2$bailout(3, geometry, hint, vertices, colors, vl, cl, vertexArray, 0, 0, 0, 0);
  var colorArray = geometry.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setLineBuffers$2$bailout(4, geometry, hint, vertices, colors, vl, cl, vertexArray, colorArray, 0, 0, 0);
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  var customAttributes = geometry.get$__webglCustomAttributesList();
  if (typeof customAttributes !== 'string' && (typeof customAttributes !== 'object' || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.is$JavaScriptIndexingBehavior()))
    return this.setLineBuffers$2$bailout(5, geometry, hint, vertices, colors, vl, cl, vertexArray, colorArray, dirtyVertices, dirtyColors, customAttributes);
  if (dirtyVertices === true) {
    for (var v = 0, vertex = null, offset = null; v < vl; ++v) {
      if (v >= vertices.length)
        throw $.ioore(v);
      vertex = vertices[v];
      offset = v * 3;
      var t1 = vertex.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      var t2 = vertex.get$y();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t2;
      t2 = offset + 2;
      t1 = vertex.get$z();
      if (t2 >= vertexArray.length)
        throw $.ioore(t2);
      vertexArray[t2] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  } else
    offset = null;
  if (dirtyColors === true) {
    for (var c = 0, color = null; c < cl; ++c) {
      if (c >= colors.length)
        throw $.ioore(c);
      color = colors[c];
      offset = c * 3;
      t1 = color.get$r();
      t2 = colorArray.length;
      if (offset < 0 || offset >= t2)
        throw $.ioore(offset);
      colorArray[offset] = t1;
      t1 = offset + 1;
      var t3 = color.get$g();
      if (t1 >= t2)
        throw $.ioore(t1);
      colorArray[t1] = t3;
      t3 = offset + 2;
      t1 = color.get$b();
      if (t3 >= t2)
        throw $.ioore(t3);
      colorArray[t3] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
    this._gl.bufferData$3(34962, colorArray, hint);
  }
  var il = customAttributes.length;
  for (var i = 0, ca = null, cal = null, value = null, customAttribute = null; i < il; ++i) {
    if (i >= customAttributes.length)
      throw $.ioore(i);
    customAttribute = customAttributes[i];
    if (customAttribute.get$needsUpdate() === true) {
      t1 = customAttribute.get$boundTo();
      t1 = t1 == null || $.eqB(t1, 'vertices');
    } else
      t1 = false;
    if (t1) {
      cal = $.get$length(customAttribute.get$value());
      if ($.eqB(customAttribute.get$size(), 1)) {
        for (ca = 0; $.ltB(ca, cal); ++ca)
          $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
        offset = 0;
      } else if ($.eqB(customAttribute.get$size(), 2))
        for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
          value = $.index(customAttribute.get$value(), ca);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          offset += 2;
        }
      else if ($.eqB(customAttribute.get$size(), 3))
        if ($.eqB(customAttribute.get$type(), 'c'))
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$r());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
            offset += 3;
          }
        else
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            offset += 3;
          }
      else if ($.eqB(customAttribute.get$size(), 4))
        for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
          value = $.index(customAttribute.get$value(), ca);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
          $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
          offset += 4;
        }
      else
        offset = 0;
      this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
      this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
    }
  }
},
 setLineBuffers$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10) {
  switch (state0) {
    case 1:
      var geometry = env0;
      var hint = env1;
      vertices = env2;
      break;
    case 2:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      break;
    case 3:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      break;
    case 4:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      colorArray = env7;
      break;
    case 5:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      colorArray = env7;
      dirtyVertices = env8;
      dirtyColors = env9;
      customAttributes = env10;
      break;
  }
  switch (state0) {
    case 0:
      var vertices = geometry.get$vertices();
    case 1:
      state0 = 0;
      var colors = geometry.get$colors();
    case 2:
      state0 = 0;
      var vl = $.get$length(vertices);
      var cl = $.get$length(colors);
      var vertexArray = geometry.get$__vertexArray();
    case 3:
      state0 = 0;
      var colorArray = geometry.get$__colorArray();
    case 4:
      state0 = 0;
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      var customAttributes = geometry.get$__webglCustomAttributesList();
    case 5:
      state0 = 0;
      if (dirtyVertices === true) {
        for (var v = 0, vertex = null, offset = null; $.ltB(v, vl); ++v) {
          vertex = $.index(vertices, v);
          offset = v * 3;
          $.indexSet(vertexArray, offset, vertex.get$x());
          $.indexSet(vertexArray, offset + 1, vertex.get$y());
          $.indexSet(vertexArray, offset + 2, vertex.get$z());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      } else
        offset = null;
      if (dirtyColors === true) {
        for (var c = 0, color = null; $.ltB(c, cl); ++c) {
          color = $.index(colors, c);
          offset = c * 3;
          $.indexSet(colorArray, offset, color.get$r());
          $.indexSet(colorArray, offset + 1, color.get$g());
          $.indexSet(colorArray, offset + 2, color.get$b());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
        this._gl.bufferData$3(34962, colorArray, hint);
      }
      if (!(customAttributes == null)) {
        var il = $.get$length(customAttributes);
        for (var i = 0, ca = null, cal = null, value = null, customAttribute = null; $.ltB(i, il); ++i) {
          customAttribute = $.index(customAttributes, i);
          if (customAttribute.get$needsUpdate() === true) {
            var t1 = customAttribute.get$boundTo();
            t1 = t1 == null || $.eqB(t1, 'vertices');
          } else
            t1 = false;
          if (t1) {
            cal = $.get$length(customAttribute.get$value());
            if ($.eqB(customAttribute.get$size(), 1)) {
              for (ca = 0; $.ltB(ca, cal); ++ca)
                $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
              offset = 0;
            } else if ($.eqB(customAttribute.get$size(), 2))
              for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                value = $.index(customAttribute.get$value(), ca);
                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                offset += 2;
              }
            else if ($.eqB(customAttribute.get$size(), 3))
              if ($.eqB(customAttribute.get$type(), 'c'))
                for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$r());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                  $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                  offset += 3;
                }
              else
                for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$x());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                  $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                  offset += 3;
                }
            else if ($.eqB(customAttribute.get$size(), 4))
              for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                value = $.index(customAttribute.get$value(), ca);
                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                offset += 4;
              }
            else
              offset = 0;
            this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
            this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
          }
        }
      }
  }
},
 setRibbonBuffers$2: function(geometry, hint) {
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setRibbonBuffers$2$bailout(1, geometry, hint, vertices, 0, 0, 0, 0, 0);
  var colors = geometry.get$colors();
  if (typeof colors !== 'string' && (typeof colors !== 'object' || colors === null || colors.constructor !== Array && !colors.is$JavaScriptIndexingBehavior()))
    return this.setRibbonBuffers$2$bailout(2, geometry, hint, vertices, colors, 0, 0, 0, 0);
  var vl = vertices.length;
  var cl = colors.length;
  var vertexArray = geometry.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setRibbonBuffers$2$bailout(3, geometry, hint, vertices, colors, vl, cl, vertexArray, 0);
  var colorArray = geometry.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setRibbonBuffers$2$bailout(4, geometry, hint, vertices, colors, vl, cl, vertexArray, colorArray);
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  if (dirtyVertices === true) {
    for (var v = 0, vertex = null, offset = null; v < vl; ++v) {
      if (v >= vertices.length)
        throw $.ioore(v);
      vertex = vertices[v];
      offset = v * 3;
      var t1 = vertex.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      var t2 = vertex.get$y();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t2;
      t2 = offset + 2;
      t1 = vertex.get$z();
      if (t2 >= vertexArray.length)
        throw $.ioore(t2);
      vertexArray[t2] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  } else
    offset = null;
  if (dirtyColors === true) {
    for (var c = 0, color = null; c < cl; ++c) {
      if (c >= colors.length)
        throw $.ioore(c);
      color = colors[c];
      offset = c * 3;
      t1 = color.get$r();
      t2 = colorArray.length;
      if (offset < 0 || offset >= t2)
        throw $.ioore(offset);
      colorArray[offset] = t1;
      t1 = offset + 1;
      var t3 = color.get$g();
      if (t1 >= t2)
        throw $.ioore(t1);
      colorArray[t1] = t3;
      t3 = offset + 2;
      t1 = color.get$b();
      if (t3 >= t2)
        throw $.ioore(t3);
      colorArray[t3] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
    this._gl.bufferData$3(34962, colorArray, hint);
  }
},
 setRibbonBuffers$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      var geometry = env0;
      var hint = env1;
      vertices = env2;
      break;
    case 2:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      break;
    case 3:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      break;
    case 4:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      colorArray = env7;
      break;
  }
  switch (state0) {
    case 0:
      var vertices = geometry.get$vertices();
    case 1:
      state0 = 0;
      var colors = geometry.get$colors();
    case 2:
      state0 = 0;
      var vl = $.get$length(vertices);
      var cl = $.get$length(colors);
      var vertexArray = geometry.get$__vertexArray();
    case 3:
      state0 = 0;
      var colorArray = geometry.get$__colorArray();
    case 4:
      state0 = 0;
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      if (dirtyVertices === true) {
        for (var v = 0, vertex = null, offset = null; $.ltB(v, vl); ++v) {
          vertex = $.index(vertices, v);
          offset = v * 3;
          $.indexSet(vertexArray, offset, vertex.get$x());
          $.indexSet(vertexArray, offset + 1, vertex.get$y());
          $.indexSet(vertexArray, offset + 2, vertex.get$z());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      } else
        offset = null;
      if (dirtyColors === true) {
        for (var c = 0, color = null; $.ltB(c, cl); ++c) {
          color = $.index(colors, c);
          offset = c * 3;
          $.indexSet(colorArray, offset, color.get$r());
          $.indexSet(colorArray, offset + 1, color.get$g());
          $.indexSet(colorArray, offset + 2, color.get$b());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
        this._gl.bufferData$3(34962, colorArray, hint);
      }
  }
},
 setMeshBuffers$5: function(geometryGroup, object, hint, dispose, material) {
  if (geometryGroup.get$__inittedArrays() !== true)
    return;
  var normalType = this.bufferGuessNormalType$1(material);
  if (typeof normalType !== 'number')
    return this.setMeshBuffers$5$bailout(1, geometryGroup, object, hint, dispose, material, normalType, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var vertexColorType = this.bufferGuessVertexColorType$1(material);
  if (typeof vertexColorType !== 'number')
    return this.setMeshBuffers$5$bailout(2, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var uvType = this.bufferGuessUVType$1(material);
  var needsSmoothNormals = normalType === 2;
  var vertexArray = geometryGroup.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(3, geometryGroup, object, hint, dispose, material, uvType, normalType, vertexColorType, needsSmoothNormals, vertexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var uvArray = geometryGroup.get$__uvArray();
  if (typeof uvArray !== 'object' || uvArray === null || (uvArray.constructor !== Array || !!uvArray.immutable$list) && !uvArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(4, geometryGroup, object, hint, dispose, material, uvType, normalType, vertexColorType, needsSmoothNormals, uvArray, vertexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var uv2Array = geometryGroup.get$__uv2Array();
  if (typeof uv2Array !== 'object' || uv2Array === null || (uv2Array.constructor !== Array || !!uv2Array.immutable$list) && !uv2Array.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(5, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var normalArray = geometryGroup.get$__normalArray();
  if (typeof normalArray !== 'object' || normalArray === null || (normalArray.constructor !== Array || !!normalArray.immutable$list) && !normalArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(6, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var tangentArray = geometryGroup.get$__tangentArray();
  if (typeof tangentArray !== 'object' || tangentArray === null || (tangentArray.constructor !== Array || !!tangentArray.immutable$list) && !tangentArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(7, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var colorArray = geometryGroup.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(8, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinVertexAArray = geometryGroup.get$__skinVertexAArray();
  if (typeof skinVertexAArray !== 'object' || skinVertexAArray === null || (skinVertexAArray.constructor !== Array || !!skinVertexAArray.immutable$list) && !skinVertexAArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(9, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinVertexBArray = geometryGroup.get$__skinVertexBArray();
  if (typeof skinVertexBArray !== 'object' || skinVertexBArray === null || (skinVertexBArray.constructor !== Array || !!skinVertexBArray.immutable$list) && !skinVertexBArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(10, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinIndexArray = geometryGroup.get$__skinIndexArray();
  if (typeof skinIndexArray !== 'object' || skinIndexArray === null || (skinIndexArray.constructor !== Array || !!skinIndexArray.immutable$list) && !skinIndexArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(11, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinWeightArray = geometryGroup.get$__skinWeightArray();
  if (typeof skinWeightArray !== 'object' || skinWeightArray === null || (skinWeightArray.constructor !== Array || !!skinWeightArray.immutable$list) && !skinWeightArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(12, geometryGroup, object, hint, dispose, material, skinWeightArray, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphTargetsArrays = geometryGroup.get$__morphTargetsArrays();
  if (typeof morphTargetsArrays !== 'string' && (typeof morphTargetsArrays !== 'object' || morphTargetsArrays === null || morphTargetsArrays.constructor !== Array && !morphTargetsArrays.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(13, geometryGroup, object, hint, dispose, material, skinWeightArray, morphTargetsArrays, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphNormalsArrays = geometryGroup.get$__morphNormalsArrays();
  if (typeof morphNormalsArrays !== 'string' && (typeof morphNormalsArrays !== 'object' || morphNormalsArrays === null || morphNormalsArrays.constructor !== Array && !morphNormalsArrays.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(14, geometryGroup, object, hint, dispose, material, morphNormalsArrays, skinWeightArray, morphTargetsArrays, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var customAttributes = geometryGroup.get$__webglCustomAttributesList();
  if (typeof customAttributes !== 'string' && (typeof customAttributes !== 'object' || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(15, geometryGroup, object, hint, dispose, material, morphNormalsArrays, skinWeightArray, morphTargetsArrays, customAttributes, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var faceArray = geometryGroup.get$__faceArray();
  if (typeof faceArray !== 'object' || faceArray === null || (faceArray.constructor !== Array || !!faceArray.immutable$list) && !faceArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(16, geometryGroup, object, hint, dispose, material, morphNormalsArrays, skinWeightArray, morphTargetsArrays, customAttributes, faceArray, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var lineArray = geometryGroup.get$__lineArray();
  if (typeof lineArray !== 'object' || lineArray === null || (lineArray.constructor !== Array || !!lineArray.immutable$list) && !lineArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(17, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var geometry = object.get$webglgeometry();
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  var dirtyElements = geometry.get$elementsNeedUpdate();
  var dirtyUvs = geometry.get$uvsNeedUpdate();
  var dirtyNormals = geometry.get$normalsNeedUpdate();
  var dirtyTangents = geometry.get$tangentsNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  var dirtyMorphTargets = geometry.get$morphTargetsNeedUpdate();
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(18, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var chunk_faces3 = geometryGroup.get$faces3();
  if (typeof chunk_faces3 !== 'string' && (typeof chunk_faces3 !== 'object' || chunk_faces3 === null || chunk_faces3.constructor !== Array && !chunk_faces3.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(19, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var chunk_faces4 = geometryGroup.get$faces4();
  if (typeof chunk_faces4 !== 'string' && (typeof chunk_faces4 !== 'object' || chunk_faces4 === null || chunk_faces4.constructor !== Array && !chunk_faces4.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(20, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_faces = geometry.get$faces();
  if (typeof obj_faces !== 'string' && (typeof obj_faces !== 'object' || obj_faces === null || obj_faces.constructor !== Array && !obj_faces.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(21, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var t22 = geometry.get$faceVertexUvs();
  if (typeof t22 !== 'string' && (typeof t22 !== 'object' || t22 === null || t22.constructor !== Array && !t22.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(22, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (0 >= t22.length)
    throw $.ioore(0);
  var obj_uvs = t22[0];
  var t1 = $.get$length(geometry.get$faceVertexUvs());
  if (typeof t1 !== 'number')
    return this.setMeshBuffers$5$bailout(23, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (t1 > 1) {
    t1 = geometry.get$faceVertexUvs();
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(24, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (1 >= t1.length)
      throw $.ioore(1);
    var obj_uvs2 = t1[1];
  } else
    obj_uvs2 = null;
  geometry.get$colors();
  var obj_skinVerticesA = geometry.get$skinVerticesA();
  if (typeof obj_skinVerticesA !== 'string' && (typeof obj_skinVerticesA !== 'object' || obj_skinVerticesA === null || obj_skinVerticesA.constructor !== Array && !obj_skinVerticesA.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(25, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_skinVerticesB = geometry.get$skinVerticesB();
  if (typeof obj_skinVerticesB !== 'string' && (typeof obj_skinVerticesB !== 'object' || obj_skinVerticesB === null || obj_skinVerticesB.constructor !== Array && !obj_skinVerticesB.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(26, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_skinIndices = geometry.get$skinIndices();
  if (typeof obj_skinIndices !== 'string' && (typeof obj_skinIndices !== 'object' || obj_skinIndices === null || obj_skinIndices.constructor !== Array && !obj_skinIndices.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(27, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_skinWeights = geometry.get$skinWeights();
  if (typeof obj_skinWeights !== 'string' && (typeof obj_skinWeights !== 'object' || obj_skinWeights === null || obj_skinWeights.constructor !== Array && !obj_skinWeights.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(28, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphTargets = geometry.get$morphTargets();
  if (typeof morphTargets !== 'string' && (typeof morphTargets !== 'object' || morphTargets === null || morphTargets.constructor !== Array && !morphTargets.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(29, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphNormals = geometry.get$morphNormals();
  if (typeof morphNormals !== 'string' && (typeof morphNormals !== 'object' || morphNormals === null || morphNormals.constructor !== Array && !morphNormals.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(30, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (dirtyVertices === true) {
    var fl = chunk_faces3.length;
    for (var offset = 0, f = 0, face = null, v1 = null, v2 = null, v3 = null; f < fl; ++f) {
      if (f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      var t2 = vertices.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v1 = vertices[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v2 = vertices[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v3 = vertices[t1];
      t1 = v1.get$x();
      if (offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      var t3 = v1.get$y();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 2;
      t1 = v1.get$z();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 3;
      t3 = v2.get$x();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 4;
      t1 = v2.get$y();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 5;
      t3 = v2.get$z();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 6;
      t1 = v3.get$x();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 7;
      t3 = v3.get$y();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 8;
      t1 = v3.get$z();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      offset += 9;
    }
    fl = chunk_faces4.length;
    for (var f = 0, v4 = null; f < fl; ++f) {
      if (f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      t2 = vertices.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v1 = vertices[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v2 = vertices[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v3 = vertices[t1];
      t1 = face.get$d();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v4 = vertices[t1];
      t1 = v1.get$x();
      if (offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      t3 = v1.get$y();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 2;
      t1 = v1.get$z();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 3;
      t3 = v2.get$x();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 4;
      t1 = v2.get$y();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 5;
      t3 = v2.get$z();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 6;
      t1 = v3.get$x();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 7;
      t3 = v3.get$y();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 8;
      t1 = v3.get$z();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 9;
      t3 = v4.get$x();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 10;
      t1 = v4.get$y();
      if (t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 11;
      t3 = v4.get$z();
      if (t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      offset += 12;
    }
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  } else {
    f = null;
    fl = null;
    face = null;
    v1 = null;
    v2 = null;
    v3 = null;
    v4 = null;
  }
  if (dirtyMorphTargets === true) {
    var vkl = morphTargets.length;
    for (var vk = 0, vka = null, nka = null, chf = null, faceVertexNormals = null, offset_morphTarget = 0, n1 = null, n2 = null, n3 = null, n4 = null; vk < vkl; ++vk) {
      fl = chunk_faces3.length;
      for (offset_morphTarget = 0, f = 0; f < fl; ++f) {
        if (f >= chunk_faces3.length)
          throw $.ioore(f);
        chf = chunk_faces3[f];
        if (chf !== (chf | 0))
          throw $.iae(chf);
        if (chf < 0 || chf >= obj_faces.length)
          throw $.ioore(chf);
        face = obj_faces[chf];
        if (vk >= morphTargets.length)
          throw $.ioore(vk);
        t1 = morphTargets[vk].get$vertices();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(31, geometryGroup, t1, hint, material, dispose, vk, nka, normalType, faceVertexNormals, uvType, vertexColorType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, offset_morphTarget, skinVertexBArray, skinIndexArray, skinVertexAArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, skinWeightArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, v4, n1, n2, n3, n4, vkl, fl, chf, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t3 = face.get$a();
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t1.length)
          throw $.ioore(t3);
        v1 = t1[t3];
        if (vk >= morphTargets.length)
          throw $.ioore(vk);
        t3 = morphTargets[vk].get$vertices();
        if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(32, geometryGroup, hint, dispose, v1, material, t3, vk, nka, normalType, faceVertexNormals, uvType, vertexColorType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, offset_morphTarget, skinVertexBArray, skinIndexArray, skinVertexAArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, skinWeightArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, v4, n1, n2, n3, n4, vkl, fl, chf, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var t4 = face.get$b();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t3.length)
          throw $.ioore(t4);
        v2 = t3[t4];
        if (vk >= morphTargets.length)
          throw $.ioore(vk);
        t4 = morphTargets[vk].get$vertices();
        if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(33, geometryGroup, hint, dispose, v1, material, v2, vk, t4, nka, normalType, faceVertexNormals, uvType, vertexColorType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, offset_morphTarget, skinVertexBArray, skinIndexArray, skinVertexAArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, skinWeightArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, v4, n1, n2, n3, n4, vkl, fl, chf, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var t5 = face.get$c();
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t4.length)
          throw $.ioore(t5);
        v3 = t4[t5];
        if (vk >= morphTargetsArrays.length)
          throw $.ioore(vk);
        vka = morphTargetsArrays[vk];
        if (typeof vka !== 'object' || vka === null || (vka.constructor !== Array || !!vka.immutable$list) && !vka.is$JavaScriptIndexingBehavior())
          return this.setMeshBuffers$5$bailout(34, geometryGroup, hint, dispose, v1, material, v2, vk, nka, v3, faceVertexNormals, vka, normalType, vertexColorType, needsSmoothNormals, uvType, uv2Array, normalArray, uvArray, tangentArray, offset_morphTarget, skinVertexBArray, colorArray, skinVertexAArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, skinWeightArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, skinIndexArray, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, v4, n1, n2, n3, n4, vkl, fl, chf, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t4 = v1.get$x();
        if (offset_morphTarget >= vka.length)
          throw $.ioore(offset_morphTarget);
        vka[offset_morphTarget] = t4;
        t4 = offset_morphTarget + 1;
        var t6 = v1.get$y();
        if (t4 >= vka.length)
          throw $.ioore(t4);
        vka[t4] = t6;
        t6 = offset_morphTarget + 2;
        var t7 = v1.get$z();
        if (t6 >= vka.length)
          throw $.ioore(t6);
        vka[t6] = t7;
        t7 = offset_morphTarget + 3;
        var t8 = v2.get$x();
        if (t7 >= vka.length)
          throw $.ioore(t7);
        vka[t7] = t8;
        t8 = offset_morphTarget + 4;
        var t9 = v2.get$y();
        if (t8 >= vka.length)
          throw $.ioore(t8);
        vka[t8] = t9;
        t9 = offset_morphTarget + 5;
        var t10 = v2.get$z();
        if (t9 >= vka.length)
          throw $.ioore(t9);
        vka[t9] = t10;
        t10 = offset_morphTarget + 6;
        var t11 = v3.get$x();
        if (t10 >= vka.length)
          throw $.ioore(t10);
        vka[t10] = t11;
        t11 = offset_morphTarget + 7;
        var t12 = v3.get$y();
        if (t11 >= vka.length)
          throw $.ioore(t11);
        vka[t11] = t12;
        t12 = offset_morphTarget + 8;
        var t13 = v3.get$z();
        if (t12 >= vka.length)
          throw $.ioore(t12);
        vka[t12] = t13;
        if (material.get$morphNormals() === true) {
          t1 = morphNormals.length;
          if (needsSmoothNormals) {
            if (vk >= t1)
              throw $.ioore(vk);
            faceVertexNormals = $.index(morphNormals[vk].get$vertexNormals(), chf);
            n1 = faceVertexNormals.get$a();
            n2 = faceVertexNormals.get$b();
            n3 = faceVertexNormals.get$c();
          } else {
            if (vk >= t1)
              throw $.ioore(vk);
            n1 = $.index(morphNormals[vk].get$faceNormals(), chf);
            n3 = n1;
            n2 = n3;
          }
          if (vk >= morphNormalsArrays.length)
            throw $.ioore(vk);
          nka = morphNormalsArrays[vk];
          if (typeof nka !== 'object' || nka === null || (nka.constructor !== Array || !!nka.immutable$list) && !nka.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(35, geometryGroup, hint, dispose, v1, material, v2, vk, v3, normalType, vka, uvType, vertexColorType, needsSmoothNormals, t4, uv2Array, normalArray, tangentArray, colorArray, t6, offset_morphTarget, skinVertexBArray, skinVertexAArray, morphTargetsArrays, t7, morphNormalsArrays, customAttributes, faceArray, skinWeightArray, t8, lineArray, skinIndexArray, dirtyUvs, dirtyElements, t9, uvArray, dirtyTangents, chunk_faces3, chunk_faces4, t10, obj_faces, dirtyNormals, geometry, t11, obj_uvs, t12, dirtyColors, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, faceVertexNormals, n1, n2, n3, nka, v4, n4, vkl, fl, chf, face, 0, 0, 0);
          t2 = n1.get$x();
          if (offset_morphTarget >= nka.length)
            throw $.ioore(offset_morphTarget);
          nka[offset_morphTarget] = t2;
          t2 = n1.get$y();
          if (t4 >= nka.length)
            throw $.ioore(t4);
          nka[t4] = t2;
          t2 = n1.get$z();
          if (t6 >= nka.length)
            throw $.ioore(t6);
          nka[t6] = t2;
          t2 = n2.get$x();
          if (t7 >= nka.length)
            throw $.ioore(t7);
          nka[t7] = t2;
          t2 = n2.get$y();
          if (t8 >= nka.length)
            throw $.ioore(t8);
          nka[t8] = t2;
          t2 = n2.get$z();
          if (t9 >= nka.length)
            throw $.ioore(t9);
          nka[t9] = t2;
          t2 = n3.get$x();
          if (t10 >= nka.length)
            throw $.ioore(t10);
          nka[t10] = t2;
          t2 = n3.get$y();
          if (t11 >= nka.length)
            throw $.ioore(t11);
          nka[t11] = t2;
          t2 = n3.get$z();
          if (t12 >= nka.length)
            throw $.ioore(t12);
          nka[t12] = t2;
        }
        offset_morphTarget += 9;
      }
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        if (f >= chunk_faces4.length)
          throw $.ioore(f);
        chf = chunk_faces4[f];
        if (chf !== (chf | 0))
          throw $.iae(chf);
        if (chf < 0 || chf >= obj_faces.length)
          throw $.ioore(chf);
        face = obj_faces[chf];
        if (vk >= morphTargets.length)
          throw $.ioore(vk);
        t1 = morphTargets[vk].get$vertices();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(36, geometryGroup, hint, dispose, material, n1, n2, n3, vk, n4, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, faceArray, customAttributes, fl, t1, geometry, dirtyUvs, lineArray, dirtyTangents, dirtyNormals, dirtyElements, dirtyColors, chunk_faces4, obj_faces, chunk_faces3, obj_uvs, nka, faceVertexNormals, offset_morphTarget, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t3 = face.get$a();
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t1.length)
          throw $.ioore(t3);
        v1 = t1[t3];
        if (vk >= morphTargets.length)
          throw $.ioore(vk);
        t3 = morphTargets[vk].get$vertices();
        if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(37, geometryGroup, hint, dispose, material, n1, n2, n3, vk, n4, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, faceArray, customAttributes, fl, lineArray, geometry, v1, dirtyElements, dirtyUvs, dirtyNormals, t3, dirtyColors, chunk_faces4, obj_faces, chunk_faces3, obj_uvs, nka, faceVertexNormals, dirtyTangents, offset_morphTarget, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t4 = face.get$b();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t3.length)
          throw $.ioore(t4);
        v2 = t3[t4];
        if (vk >= morphTargets.length)
          throw $.ioore(vk);
        t4 = morphTargets[vk].get$vertices();
        if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(38, geometryGroup, hint, dispose, material, n1, n2, n3, vk, n4, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, faceArray, customAttributes, fl, lineArray, geometry, v1, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, v2, chunk_faces4, obj_faces, t4, nka, faceVertexNormals, chunk_faces3, obj_uvs, offset_morphTarget, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t5 = face.get$c();
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t4.length)
          throw $.ioore(t5);
        v3 = t4[t5];
        if (vk >= morphTargets.length)
          throw $.ioore(vk);
        t5 = morphTargets[vk].get$vertices();
        if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(39, geometryGroup, hint, dispose, material, n1, n2, n3, vk, n4, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, faceArray, customAttributes, fl, lineArray, geometry, v1, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, v2, chunk_faces4, obj_faces, obj_uvs, nka, v3, faceVertexNormals, chunk_faces3, t5, offset_morphTarget, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t6 = face.get$d();
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t5.length)
          throw $.ioore(t6);
        v4 = t5[t6];
        if (vk >= morphTargetsArrays.length)
          throw $.ioore(vk);
        vka = morphTargetsArrays[vk];
        if (typeof vka !== 'object' || vka === null || (vka.constructor !== Array || !!vka.immutable$list) && !vka.is$JavaScriptIndexingBehavior())
          return this.setMeshBuffers$5$bailout(40, geometryGroup, hint, dispose, material, n1, n2, n3, vk, n4, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, faceArray, customAttributes, fl, lineArray, geometry, v1, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, v2, chunk_faces4, obj_faces, obj_uvs, nka, v3, faceVertexNormals, chunk_faces3, v4, vka, offset_morphTarget, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t5 = v1.get$x();
        if (offset_morphTarget >= vka.length)
          throw $.ioore(offset_morphTarget);
        vka[offset_morphTarget] = t5;
        t5 = offset_morphTarget + 1;
        t7 = v1.get$y();
        if (t5 >= vka.length)
          throw $.ioore(t5);
        vka[t5] = t7;
        t7 = offset_morphTarget + 2;
        t8 = v1.get$z();
        if (t7 >= vka.length)
          throw $.ioore(t7);
        vka[t7] = t8;
        t8 = offset_morphTarget + 3;
        t9 = v2.get$x();
        if (t8 >= vka.length)
          throw $.ioore(t8);
        vka[t8] = t9;
        t9 = offset_morphTarget + 4;
        t10 = v2.get$y();
        if (t9 >= vka.length)
          throw $.ioore(t9);
        vka[t9] = t10;
        t10 = offset_morphTarget + 5;
        t11 = v2.get$z();
        if (t10 >= vka.length)
          throw $.ioore(t10);
        vka[t10] = t11;
        t11 = offset_morphTarget + 6;
        t12 = v3.get$x();
        if (t11 >= vka.length)
          throw $.ioore(t11);
        vka[t11] = t12;
        t12 = offset_morphTarget + 7;
        t13 = v3.get$y();
        if (t12 >= vka.length)
          throw $.ioore(t12);
        vka[t12] = t13;
        t13 = offset_morphTarget + 8;
        var t14 = v3.get$z();
        if (t13 >= vka.length)
          throw $.ioore(t13);
        vka[t13] = t14;
        t14 = offset_morphTarget + 9;
        var t15 = v4.get$x();
        if (t14 >= vka.length)
          throw $.ioore(t14);
        vka[t14] = t15;
        t15 = offset_morphTarget + 10;
        var t16 = v4.get$y();
        if (t15 >= vka.length)
          throw $.ioore(t15);
        vka[t15] = t16;
        t16 = offset_morphTarget + 11;
        var t17 = v4.get$z();
        if (t16 >= vka.length)
          throw $.ioore(t16);
        vka[t16] = t17;
        if (material.get$morphNormals() === true) {
          t1 = morphNormals.length;
          if (needsSmoothNormals) {
            if (vk >= t1)
              throw $.ioore(vk);
            faceVertexNormals = $.index(morphNormals[vk].get$vertexNormals(), chf);
            n1 = faceVertexNormals.get$a();
            n2 = faceVertexNormals.get$b();
            n3 = faceVertexNormals.get$c();
            n4 = faceVertexNormals.get$d();
          } else {
            if (vk >= t1)
              throw $.ioore(vk);
            n1 = $.index(morphNormals[vk].get$faceNormals(), chf);
            n4 = n1;
            n3 = n4;
            n2 = n3;
          }
          if (vk >= morphNormalsArrays.length)
            throw $.ioore(vk);
          nka = morphNormalsArrays[vk];
          if (typeof nka !== 'object' || nka === null || (nka.constructor !== Array || !!nka.immutable$list) && !nka.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(41, geometryGroup, hint, dispose, material, vk, faceVertexNormals, n1, n2, n3, n4, needsSmoothNormals, nka, vertexColorType, uvArray, uv2Array, normalType, tangentArray, uvType, normalArray, skinVertexAArray, skinVertexBArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, faceArray, colorArray, fl, lineArray, customAttributes, v1, dirtyElements, geometry, dirtyNormals, skinIndexArray, dirtyUvs, v2, obj_faces, dirtyColors, chunk_faces4, obj_uvs, dirtyTangents, v3, chunk_faces3, v4, vka, offset_morphTarget, t5, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, t7, morphTargets, morphNormals, t8, obj_skinWeights, t9, t10, t11, t12, t13, t14, t15, f, t16, vkl);
          t2 = n1.get$x();
          if (offset_morphTarget >= nka.length)
            throw $.ioore(offset_morphTarget);
          nka[offset_morphTarget] = t2;
          t2 = n1.get$y();
          if (t5 >= nka.length)
            throw $.ioore(t5);
          nka[t5] = t2;
          t2 = n1.get$z();
          if (t7 >= nka.length)
            throw $.ioore(t7);
          nka[t7] = t2;
          t2 = n2.get$x();
          if (t8 >= nka.length)
            throw $.ioore(t8);
          nka[t8] = t2;
          t2 = n2.get$y();
          if (t9 >= nka.length)
            throw $.ioore(t9);
          nka[t9] = t2;
          t2 = n2.get$z();
          if (t10 >= nka.length)
            throw $.ioore(t10);
          nka[t10] = t2;
          t2 = n3.get$x();
          if (t11 >= nka.length)
            throw $.ioore(t11);
          nka[t11] = t2;
          t2 = n3.get$y();
          if (t12 >= nka.length)
            throw $.ioore(t12);
          nka[t12] = t2;
          t2 = n3.get$z();
          if (t13 >= nka.length)
            throw $.ioore(t13);
          nka[t13] = t2;
          t2 = n4.get$x();
          if (t14 >= nka.length)
            throw $.ioore(t14);
          nka[t14] = t2;
          t2 = n4.get$y();
          if (t15 >= nka.length)
            throw $.ioore(t15);
          nka[t15] = t2;
          t2 = n4.get$z();
          if (t16 >= nka.length)
            throw $.ioore(t16);
          nka[t16] = t2;
        }
        offset_morphTarget += 12;
      }
      t1 = this._gl;
      t2 = geometryGroup.get$__webglMorphTargetsBuffers();
      if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(42, geometryGroup, v1, v2, v3, v4, material, dispose, hint, n1, n2, vk, n3, n4, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, fl, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, vka, nka, chf, faceVertexNormals, obj_uvs, t1, offset_morphTarget, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, t2, f, face, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (vk >= t2.length)
        throw $.ioore(vk);
      t1.bindBuffer$2(34962, t2[vk]);
      t1 = this._gl;
      if (vk >= morphTargetsArrays.length)
        throw $.ioore(vk);
      t1.bufferData$3(34962, morphTargetsArrays[vk], hint);
      if (material.get$morphNormals() === true) {
        t1 = this._gl;
        t2 = geometryGroup.get$__webglMorphNormalsBuffers();
        if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(43, geometryGroup, v1, v2, v3, v4, hint, dispose, material, n1, n2, vk, n3, n4, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, fl, morphNormalsArrays, customAttributes, morphTargetsArrays, faceArray, lineArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, vka, nka, chf, faceVertexNormals, obj_uvs, offset_morphTarget, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, f, face, vkl, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (vk >= t2.length)
          throw $.ioore(vk);
        t1.bindBuffer$2(34962, t2[vk]);
        t1 = this._gl;
        if (vk >= morphNormalsArrays.length)
          throw $.ioore(vk);
        t1.bufferData$3(34962, morphNormalsArrays[vk], hint);
      }
    }
  }
  if ($.get$isEmpty(obj_skinWeights) !== true) {
    fl = chunk_faces3.length;
    for (var sa2 = null, sa3 = null, sb1 = null, sb2 = null, sb3 = null, offset_skin = 0, f = 0, sw1 = null, sw2 = null, sw3 = null, si1 = null, si2 = null, si3 = null, sa1 = null; f < fl; ++f) {
      if (f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      t2 = obj_skinWeights.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw1 = obj_skinWeights[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw2 = obj_skinWeights[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw3 = obj_skinWeights[t1];
      t1 = sw1.get$x();
      if (offset_skin >= skinWeightArray.length)
        throw $.ioore(offset_skin);
      skinWeightArray[offset_skin] = t1;
      t1 = offset_skin + 1;
      t3 = sw1.get$y();
      if (t1 >= skinWeightArray.length)
        throw $.ioore(t1);
      skinWeightArray[t1] = t3;
      t3 = offset_skin + 2;
      t4 = sw1.get$z();
      t5 = skinWeightArray.length;
      if (t3 >= t5)
        throw $.ioore(t3);
      skinWeightArray[t3] = t4;
      t4 = offset_skin + 3;
      t6 = sw1.get$w();
      if (t4 >= t5)
        throw $.ioore(t4);
      skinWeightArray[t4] = t6;
      t6 = offset_skin + 4;
      t7 = sw2.get$x();
      if (t6 >= skinWeightArray.length)
        throw $.ioore(t6);
      skinWeightArray[t6] = t7;
      t7 = offset_skin + 5;
      t8 = sw2.get$y();
      if (t7 >= skinWeightArray.length)
        throw $.ioore(t7);
      skinWeightArray[t7] = t8;
      t8 = offset_skin + 6;
      t9 = sw2.get$z();
      t10 = skinWeightArray.length;
      if (t8 >= t10)
        throw $.ioore(t8);
      skinWeightArray[t8] = t9;
      t9 = offset_skin + 7;
      t11 = sw2.get$w();
      if (t9 >= t10)
        throw $.ioore(t9);
      skinWeightArray[t9] = t11;
      t11 = offset_skin + 8;
      t12 = sw3.get$x();
      if (t11 >= skinWeightArray.length)
        throw $.ioore(t11);
      skinWeightArray[t11] = t12;
      t12 = offset_skin + 9;
      t13 = sw3.get$y();
      if (t12 >= skinWeightArray.length)
        throw $.ioore(t12);
      skinWeightArray[t12] = t13;
      t13 = offset_skin + 10;
      t14 = sw3.get$z();
      t15 = skinWeightArray.length;
      if (t13 >= t15)
        throw $.ioore(t13);
      skinWeightArray[t13] = t14;
      t14 = offset_skin + 11;
      t16 = sw3.get$w();
      if (t14 >= t15)
        throw $.ioore(t14);
      skinWeightArray[t14] = t16;
      t16 = face.get$a();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      t17 = obj_skinIndices.length;
      if (t16 < 0 || t16 >= t17)
        throw $.ioore(t16);
      si1 = obj_skinIndices[t16];
      t16 = face.get$b();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      if (t16 < 0 || t16 >= t17)
        throw $.ioore(t16);
      si2 = obj_skinIndices[t16];
      t16 = face.get$c();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      if (t16 < 0 || t16 >= t17)
        throw $.ioore(t16);
      si3 = obj_skinIndices[t16];
      t16 = si1.get$x();
      if (offset_skin >= skinIndexArray.length)
        throw $.ioore(offset_skin);
      skinIndexArray[offset_skin] = t16;
      t16 = si1.get$y();
      if (t1 >= skinIndexArray.length)
        throw $.ioore(t1);
      skinIndexArray[t1] = t16;
      t16 = si1.get$z();
      var t18 = skinIndexArray.length;
      if (t3 >= t18)
        throw $.ioore(t3);
      skinIndexArray[t3] = t16;
      t16 = si1.get$w();
      if (t4 >= t18)
        throw $.ioore(t4);
      skinIndexArray[t4] = t16;
      t16 = si2.get$x();
      if (t6 >= skinIndexArray.length)
        throw $.ioore(t6);
      skinIndexArray[t6] = t16;
      t16 = si2.get$y();
      if (t7 >= skinIndexArray.length)
        throw $.ioore(t7);
      skinIndexArray[t7] = t16;
      t16 = si2.get$z();
      var t19 = skinIndexArray.length;
      if (t8 >= t19)
        throw $.ioore(t8);
      skinIndexArray[t8] = t16;
      t16 = si2.get$w();
      if (t9 >= t19)
        throw $.ioore(t9);
      skinIndexArray[t9] = t16;
      t16 = si3.get$x();
      if (t11 >= skinIndexArray.length)
        throw $.ioore(t11);
      skinIndexArray[t11] = t16;
      t16 = si3.get$y();
      if (t12 >= skinIndexArray.length)
        throw $.ioore(t12);
      skinIndexArray[t12] = t16;
      t16 = si3.get$z();
      var t20 = skinIndexArray.length;
      if (t13 >= t20)
        throw $.ioore(t13);
      skinIndexArray[t13] = t16;
      t16 = si3.get$w();
      if (t14 >= t20)
        throw $.ioore(t14);
      skinIndexArray[t14] = t16;
      t16 = face.get$a();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      var t21 = obj_skinVerticesA.length;
      if (t16 < 0 || t16 >= t21)
        throw $.ioore(t16);
      sa1 = obj_skinVerticesA[t16];
      t16 = face.get$b();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      if (t16 < 0 || t16 >= t21)
        throw $.ioore(t16);
      sa2 = obj_skinVerticesA[t16];
      t16 = face.get$c();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      if (t16 < 0 || t16 >= t21)
        throw $.ioore(t16);
      sa3 = obj_skinVerticesA[t16];
      t16 = sa1.get$x();
      if (offset_skin >= skinVertexAArray.length)
        throw $.ioore(offset_skin);
      skinVertexAArray[offset_skin] = t16;
      t16 = sa1.get$y();
      if (t1 >= skinVertexAArray.length)
        throw $.ioore(t1);
      skinVertexAArray[t1] = t16;
      t16 = sa1.get$z();
      t22 = skinVertexAArray.length;
      if (t3 >= t22)
        throw $.ioore(t3);
      skinVertexAArray[t3] = t16;
      if (t4 >= t22)
        throw $.ioore(t4);
      skinVertexAArray[t4] = 1;
      t16 = sa2.get$x();
      if (t6 >= skinVertexAArray.length)
        throw $.ioore(t6);
      skinVertexAArray[t6] = t16;
      t16 = sa2.get$y();
      if (t7 >= skinVertexAArray.length)
        throw $.ioore(t7);
      skinVertexAArray[t7] = t16;
      t16 = sa2.get$z();
      var t23 = skinVertexAArray.length;
      if (t8 >= t23)
        throw $.ioore(t8);
      skinVertexAArray[t8] = t16;
      if (t9 >= t23)
        throw $.ioore(t9);
      skinVertexAArray[t9] = 1;
      t16 = sa3.get$x();
      if (t11 >= skinVertexAArray.length)
        throw $.ioore(t11);
      skinVertexAArray[t11] = t16;
      t16 = sa3.get$y();
      if (t12 >= skinVertexAArray.length)
        throw $.ioore(t12);
      skinVertexAArray[t12] = t16;
      t16 = sa3.get$z();
      var t24 = skinVertexAArray.length;
      if (t13 >= t24)
        throw $.ioore(t13);
      skinVertexAArray[t13] = t16;
      if (t14 >= t24)
        throw $.ioore(t14);
      skinVertexAArray[t14] = 1;
      t16 = face.get$a();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      var t25 = obj_skinVerticesB.length;
      if (t16 < 0 || t16 >= t25)
        throw $.ioore(t16);
      sb1 = obj_skinVerticesB[t16];
      t16 = face.get$b();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      if (t16 < 0 || t16 >= t25)
        throw $.ioore(t16);
      sb2 = obj_skinVerticesB[t16];
      t16 = face.get$c();
      if (t16 !== (t16 | 0))
        throw $.iae(t16);
      if (t16 < 0 || t16 >= t25)
        throw $.ioore(t16);
      sb3 = obj_skinVerticesB[t16];
      t16 = sb1.get$x();
      if (offset_skin >= skinVertexBArray.length)
        throw $.ioore(offset_skin);
      skinVertexBArray[offset_skin] = t16;
      t16 = sb1.get$y();
      if (t1 >= skinVertexBArray.length)
        throw $.ioore(t1);
      skinVertexBArray[t1] = t16;
      t16 = sb1.get$z();
      t1 = skinVertexBArray.length;
      if (t3 >= t1)
        throw $.ioore(t3);
      skinVertexBArray[t3] = t16;
      if (t4 >= t1)
        throw $.ioore(t4);
      skinVertexBArray[t4] = 1;
      t4 = sb2.get$x();
      if (t6 >= skinVertexBArray.length)
        throw $.ioore(t6);
      skinVertexBArray[t6] = t4;
      t4 = sb2.get$y();
      if (t7 >= skinVertexBArray.length)
        throw $.ioore(t7);
      skinVertexBArray[t7] = t4;
      t4 = sb2.get$z();
      t7 = skinVertexBArray.length;
      if (t8 >= t7)
        throw $.ioore(t8);
      skinVertexBArray[t8] = t4;
      if (t9 >= t7)
        throw $.ioore(t9);
      skinVertexBArray[t9] = 1;
      t9 = sb3.get$x();
      if (t11 >= skinVertexBArray.length)
        throw $.ioore(t11);
      skinVertexBArray[t11] = t9;
      t9 = sb3.get$y();
      if (t12 >= skinVertexBArray.length)
        throw $.ioore(t12);
      skinVertexBArray[t12] = t9;
      t9 = sb3.get$z();
      t12 = skinVertexBArray.length;
      if (t13 >= t12)
        throw $.ioore(t13);
      skinVertexBArray[t13] = t9;
      if (t14 >= t12)
        throw $.ioore(t14);
      skinVertexBArray[t14] = 1;
      offset_skin += 12;
    }
    fl = chunk_faces4.length;
    for (var sa4 = null, sb4 = null, f = 0, sw4 = null, si4 = null; f < fl; ++f) {
      if (f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      t2 = obj_skinWeights.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw1 = obj_skinWeights[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw2 = obj_skinWeights[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw3 = obj_skinWeights[t1];
      t1 = face.get$d();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw4 = obj_skinWeights[t1];
      t1 = sw1.get$x();
      if (offset_skin >= skinWeightArray.length)
        throw $.ioore(offset_skin);
      skinWeightArray[offset_skin] = t1;
      t1 = offset_skin + 1;
      t3 = sw1.get$y();
      if (t1 >= skinWeightArray.length)
        throw $.ioore(t1);
      skinWeightArray[t1] = t3;
      t3 = offset_skin + 2;
      t4 = sw1.get$z();
      t5 = skinWeightArray.length;
      if (t3 >= t5)
        throw $.ioore(t3);
      skinWeightArray[t3] = t4;
      t4 = offset_skin + 3;
      t6 = sw1.get$w();
      if (t4 >= t5)
        throw $.ioore(t4);
      skinWeightArray[t4] = t6;
      t6 = offset_skin + 4;
      t7 = sw2.get$x();
      if (t6 >= skinWeightArray.length)
        throw $.ioore(t6);
      skinWeightArray[t6] = t7;
      t7 = offset_skin + 5;
      t8 = sw2.get$y();
      if (t7 >= skinWeightArray.length)
        throw $.ioore(t7);
      skinWeightArray[t7] = t8;
      t8 = offset_skin + 6;
      t9 = sw2.get$z();
      t10 = skinWeightArray.length;
      if (t8 >= t10)
        throw $.ioore(t8);
      skinWeightArray[t8] = t9;
      t9 = offset_skin + 7;
      t11 = sw2.get$w();
      if (t9 >= t10)
        throw $.ioore(t9);
      skinWeightArray[t9] = t11;
      t11 = offset_skin + 8;
      t12 = sw3.get$x();
      if (t11 >= skinWeightArray.length)
        throw $.ioore(t11);
      skinWeightArray[t11] = t12;
      t12 = offset_skin + 9;
      t13 = sw3.get$y();
      if (t12 >= skinWeightArray.length)
        throw $.ioore(t12);
      skinWeightArray[t12] = t13;
      t13 = offset_skin + 10;
      t14 = sw3.get$z();
      t15 = skinWeightArray.length;
      if (t13 >= t15)
        throw $.ioore(t13);
      skinWeightArray[t13] = t14;
      t14 = offset_skin + 11;
      t16 = sw3.get$w();
      if (t14 >= t15)
        throw $.ioore(t14);
      skinWeightArray[t14] = t16;
      t16 = offset_skin + 12;
      t17 = sw4.get$x();
      if (t16 >= skinWeightArray.length)
        throw $.ioore(t16);
      skinWeightArray[t16] = t17;
      t17 = offset_skin + 13;
      t18 = sw4.get$y();
      if (t17 >= skinWeightArray.length)
        throw $.ioore(t17);
      skinWeightArray[t17] = t18;
      t18 = offset_skin + 14;
      t19 = sw4.get$z();
      t20 = skinWeightArray.length;
      if (t18 >= t20)
        throw $.ioore(t18);
      skinWeightArray[t18] = t19;
      t19 = offset_skin + 15;
      t21 = sw4.get$w();
      if (t19 >= t20)
        throw $.ioore(t19);
      skinWeightArray[t19] = t21;
      t21 = face.get$a();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      t22 = obj_skinIndices.length;
      if (t21 < 0 || t21 >= t22)
        throw $.ioore(t21);
      si1 = obj_skinIndices[t21];
      t21 = face.get$b();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t22)
        throw $.ioore(t21);
      si2 = obj_skinIndices[t21];
      t21 = face.get$c();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t22)
        throw $.ioore(t21);
      si3 = obj_skinIndices[t21];
      t21 = face.get$d();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t22)
        throw $.ioore(t21);
      si4 = obj_skinIndices[t21];
      t21 = si1.get$x();
      if (offset_skin >= skinIndexArray.length)
        throw $.ioore(offset_skin);
      skinIndexArray[offset_skin] = t21;
      t21 = si1.get$y();
      if (t1 >= skinIndexArray.length)
        throw $.ioore(t1);
      skinIndexArray[t1] = t21;
      t21 = si1.get$z();
      t23 = skinIndexArray.length;
      if (t3 >= t23)
        throw $.ioore(t3);
      skinIndexArray[t3] = t21;
      t21 = si1.get$w();
      if (t4 >= t23)
        throw $.ioore(t4);
      skinIndexArray[t4] = t21;
      t21 = si2.get$x();
      if (t6 >= skinIndexArray.length)
        throw $.ioore(t6);
      skinIndexArray[t6] = t21;
      t21 = si2.get$y();
      if (t7 >= skinIndexArray.length)
        throw $.ioore(t7);
      skinIndexArray[t7] = t21;
      t21 = si2.get$z();
      t24 = skinIndexArray.length;
      if (t8 >= t24)
        throw $.ioore(t8);
      skinIndexArray[t8] = t21;
      t21 = si2.get$w();
      if (t9 >= t24)
        throw $.ioore(t9);
      skinIndexArray[t9] = t21;
      t21 = si3.get$x();
      if (t11 >= skinIndexArray.length)
        throw $.ioore(t11);
      skinIndexArray[t11] = t21;
      t21 = si3.get$y();
      if (t12 >= skinIndexArray.length)
        throw $.ioore(t12);
      skinIndexArray[t12] = t21;
      t21 = si3.get$z();
      t25 = skinIndexArray.length;
      if (t13 >= t25)
        throw $.ioore(t13);
      skinIndexArray[t13] = t21;
      t21 = si3.get$w();
      if (t14 >= t25)
        throw $.ioore(t14);
      skinIndexArray[t14] = t21;
      t21 = si4.get$x();
      if (t16 >= skinIndexArray.length)
        throw $.ioore(t16);
      skinIndexArray[t16] = t21;
      t21 = si4.get$y();
      if (t17 >= skinIndexArray.length)
        throw $.ioore(t17);
      skinIndexArray[t17] = t21;
      t21 = si4.get$z();
      var t26 = skinIndexArray.length;
      if (t18 >= t26)
        throw $.ioore(t18);
      skinIndexArray[t18] = t21;
      t21 = si4.get$w();
      if (t19 >= t26)
        throw $.ioore(t19);
      skinIndexArray[t19] = t21;
      t21 = face.get$a();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      var t27 = obj_skinVerticesA.length;
      if (t21 < 0 || t21 >= t27)
        throw $.ioore(t21);
      sa1 = obj_skinVerticesA[t21];
      t21 = face.get$b();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t27)
        throw $.ioore(t21);
      sa2 = obj_skinVerticesA[t21];
      t21 = face.get$c();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t27)
        throw $.ioore(t21);
      sa3 = obj_skinVerticesA[t21];
      t21 = face.get$d();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t27)
        throw $.ioore(t21);
      sa4 = obj_skinVerticesA[t21];
      t21 = sa1.get$x();
      if (offset_skin >= skinVertexAArray.length)
        throw $.ioore(offset_skin);
      skinVertexAArray[offset_skin] = t21;
      t21 = sa1.get$y();
      if (t1 >= skinVertexAArray.length)
        throw $.ioore(t1);
      skinVertexAArray[t1] = t21;
      t21 = sa1.get$z();
      var t28 = skinVertexAArray.length;
      if (t3 >= t28)
        throw $.ioore(t3);
      skinVertexAArray[t3] = t21;
      if (t4 >= t28)
        throw $.ioore(t4);
      skinVertexAArray[t4] = 1;
      t21 = sa2.get$x();
      if (t6 >= skinVertexAArray.length)
        throw $.ioore(t6);
      skinVertexAArray[t6] = t21;
      t21 = sa2.get$y();
      if (t7 >= skinVertexAArray.length)
        throw $.ioore(t7);
      skinVertexAArray[t7] = t21;
      t21 = sa2.get$z();
      var t29 = skinVertexAArray.length;
      if (t8 >= t29)
        throw $.ioore(t8);
      skinVertexAArray[t8] = t21;
      if (t9 >= t29)
        throw $.ioore(t9);
      skinVertexAArray[t9] = 1;
      t21 = sa3.get$x();
      if (t11 >= skinVertexAArray.length)
        throw $.ioore(t11);
      skinVertexAArray[t11] = t21;
      t21 = sa3.get$y();
      if (t12 >= skinVertexAArray.length)
        throw $.ioore(t12);
      skinVertexAArray[t12] = t21;
      t21 = sa3.get$z();
      var t30 = skinVertexAArray.length;
      if (t13 >= t30)
        throw $.ioore(t13);
      skinVertexAArray[t13] = t21;
      if (t14 >= t30)
        throw $.ioore(t14);
      skinVertexAArray[t14] = 1;
      t21 = sa4.get$x();
      if (t16 >= skinVertexAArray.length)
        throw $.ioore(t16);
      skinVertexAArray[t16] = t21;
      t21 = sa4.get$y();
      if (t17 >= skinVertexAArray.length)
        throw $.ioore(t17);
      skinVertexAArray[t17] = t21;
      t21 = sa4.get$z();
      var t31 = skinVertexAArray.length;
      if (t18 >= t31)
        throw $.ioore(t18);
      skinVertexAArray[t18] = t21;
      if (t19 >= t31)
        throw $.ioore(t19);
      skinVertexAArray[t19] = 1;
      t21 = face.get$a();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      var t32 = obj_skinVerticesB.length;
      if (t21 < 0 || t21 >= t32)
        throw $.ioore(t21);
      sb1 = obj_skinVerticesB[t21];
      t21 = face.get$b();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t32)
        throw $.ioore(t21);
      sb2 = obj_skinVerticesB[t21];
      t21 = face.get$c();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t32)
        throw $.ioore(t21);
      sb3 = obj_skinVerticesB[t21];
      t21 = face.get$d();
      if (t21 !== (t21 | 0))
        throw $.iae(t21);
      if (t21 < 0 || t21 >= t32)
        throw $.ioore(t21);
      sb4 = obj_skinVerticesB[t21];
      t21 = sb1.get$x();
      if (offset_skin >= skinVertexBArray.length)
        throw $.ioore(offset_skin);
      skinVertexBArray[offset_skin] = t21;
      t21 = sb1.get$y();
      if (t1 >= skinVertexBArray.length)
        throw $.ioore(t1);
      skinVertexBArray[t1] = t21;
      t21 = sb1.get$z();
      t1 = skinVertexBArray.length;
      if (t3 >= t1)
        throw $.ioore(t3);
      skinVertexBArray[t3] = t21;
      if (t4 >= t1)
        throw $.ioore(t4);
      skinVertexBArray[t4] = 1;
      t4 = sb2.get$x();
      if (t6 >= skinVertexBArray.length)
        throw $.ioore(t6);
      skinVertexBArray[t6] = t4;
      t4 = sb2.get$y();
      if (t7 >= skinVertexBArray.length)
        throw $.ioore(t7);
      skinVertexBArray[t7] = t4;
      t4 = sb2.get$z();
      t7 = skinVertexBArray.length;
      if (t8 >= t7)
        throw $.ioore(t8);
      skinVertexBArray[t8] = t4;
      if (t9 >= t7)
        throw $.ioore(t9);
      skinVertexBArray[t9] = 1;
      t9 = sb3.get$x();
      if (t11 >= skinVertexBArray.length)
        throw $.ioore(t11);
      skinVertexBArray[t11] = t9;
      t9 = sb3.get$y();
      if (t12 >= skinVertexBArray.length)
        throw $.ioore(t12);
      skinVertexBArray[t12] = t9;
      t9 = sb3.get$z();
      t12 = skinVertexBArray.length;
      if (t13 >= t12)
        throw $.ioore(t13);
      skinVertexBArray[t13] = t9;
      if (t14 >= t12)
        throw $.ioore(t14);
      skinVertexBArray[t14] = 1;
      t14 = sb4.get$x();
      if (t16 >= skinVertexBArray.length)
        throw $.ioore(t16);
      skinVertexBArray[t16] = t14;
      t14 = sb4.get$y();
      if (t17 >= skinVertexBArray.length)
        throw $.ioore(t17);
      skinVertexBArray[t17] = t14;
      t14 = sb4.get$z();
      t17 = skinVertexBArray.length;
      if (t18 >= t17)
        throw $.ioore(t18);
      skinVertexBArray[t18] = t14;
      if (t19 >= t17)
        throw $.ioore(t19);
      skinVertexBArray[t19] = 1;
      offset_skin += 16;
    }
    if (offset_skin > 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
      this._gl.bufferData$3(34962, skinVertexAArray, hint);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
      this._gl.bufferData$3(34962, skinVertexBArray, hint);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
      this._gl.bufferData$3(34962, skinIndexArray, hint);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
      this._gl.bufferData$3(34962, skinWeightArray, hint);
    }
  }
  if (dirtyColors === true)
    ;
  if (dirtyTangents === true && geometry.get$hasTangents() === true) {
    fl = chunk_faces3.length;
    for (var offset_tangent = 0, f = 0, vertexTangents = null, t1 = null, t2 = null, t3 = null; f < fl; ++f) {
      if (f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexTangents = face.get$vertexTangents();
      if (typeof vertexTangents !== 'string' && (typeof vertexTangents !== 'object' || vertexTangents === null || vertexTangents.constructor !== Array && !vertexTangents.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(46, geometryGroup, offset_tangent, hint, obj_uvs2, dispose, normalType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, v1, customAttributes, v3, v4, face, vertexTangents, lineArray, v2, faceArray, dirtyElements, dirtyUvs, dirtyNormals, chunk_faces3, chunk_faces4, obj_faces, fl, obj_uvs, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t2 = vertexTangents.length;
      if (0 >= t2)
        throw $.ioore(0);
      t10 = vertexTangents[0];
      if (1 >= t2)
        throw $.ioore(1);
      t20 = vertexTangents[1];
      if (2 >= t2)
        throw $.ioore(2);
      t3 = vertexTangents[2];
      t4 = t10.get$x();
      if (offset_tangent >= tangentArray.length)
        throw $.ioore(offset_tangent);
      tangentArray[offset_tangent] = t4;
      t4 = offset_tangent + 1;
      t5 = t10.get$y();
      if (t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 2;
      t4 = t10.get$z();
      t6 = tangentArray.length;
      if (t5 >= t6)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 3;
      t5 = t10.get$w();
      if (t4 >= t6)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 4;
      t4 = t20.get$x();
      if (t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 5;
      t5 = t20.get$y();
      if (t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 6;
      t4 = t20.get$z();
      t7 = tangentArray.length;
      if (t5 >= t7)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 7;
      t5 = t20.get$w();
      if (t4 >= t7)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 8;
      t4 = t3.get$x();
      if (t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 9;
      t5 = t3.get$y();
      if (t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 10;
      t4 = t3.get$z();
      t8 = tangentArray.length;
      if (t5 >= t8)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 11;
      t5 = t3.get$w();
      if (t4 >= t8)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      offset_tangent += 12;
      t2 = t20;
      t1 = t10;
    }
    fl = chunk_faces4.length;
    for (f = 0, t4 = null; f < fl; ++f) {
      if (f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexTangents = face.get$vertexTangents();
      if (typeof vertexTangents !== 'string' && (typeof vertexTangents !== 'object' || vertexTangents === null || vertexTangents.constructor !== Array && !vertexTangents.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(47, geometryGroup, hint, obj_uvs2, dispose, f, normalType, uvType, offset_tangent, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, v1, customAttributes, v3, v4, v2, faceArray, lineArray, dirtyUvs, dirtyNormals, dirtyElements, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, fl, face, vertexTangents, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t2 = vertexTangents.length;
      if (0 >= t2)
        throw $.ioore(0);
      t10 = vertexTangents[0];
      if (1 >= t2)
        throw $.ioore(1);
      t20 = vertexTangents[1];
      if (2 >= t2)
        throw $.ioore(2);
      t3 = vertexTangents[2];
      if (3 >= t2)
        throw $.ioore(3);
      t4 = vertexTangents[3];
      t5 = t10.get$x();
      if (offset_tangent >= tangentArray.length)
        throw $.ioore(offset_tangent);
      tangentArray[offset_tangent] = t5;
      t5 = offset_tangent + 1;
      t6 = t10.get$y();
      if (t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 2;
      t5 = t10.get$z();
      t7 = tangentArray.length;
      if (t6 >= t7)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 3;
      t6 = t10.get$w();
      if (t5 >= t7)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 4;
      t5 = t20.get$x();
      if (t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 5;
      t6 = t20.get$y();
      if (t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 6;
      t5 = t20.get$z();
      t8 = tangentArray.length;
      if (t6 >= t8)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 7;
      t6 = t20.get$w();
      if (t5 >= t8)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 8;
      t5 = t3.get$x();
      if (t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 9;
      t6 = t3.get$y();
      if (t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 10;
      t5 = t3.get$z();
      t9 = tangentArray.length;
      if (t6 >= t9)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 11;
      t6 = t3.get$w();
      if (t5 >= t9)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 12;
      t5 = t4.get$x();
      if (t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 13;
      t6 = t4.get$y();
      if (t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 14;
      t5 = t4.get$z();
      t11 = tangentArray.length;
      if (t6 >= t11)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 15;
      t6 = t4.get$w();
      if (t5 >= t11)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      offset_tangent += 16;
      t2 = t20;
      t1 = t10;
    }
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
    this._gl.bufferData$3(34962, tangentArray, hint);
  }
  if (dirtyNormals === true && !(normalType === 0)) {
    fl = chunk_faces3.length;
    for (var i = null, vn = null, offset_normal = 0, f = 0, vertexNormals = null, faceNormal = null; f < fl; ++f) {
      if (f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexNormals = face.get$vertexNormals();
      faceNormal = face.get$normal();
      t1 = $.get$length(vertexNormals);
      if (typeof t1 !== 'number')
        return this.setMeshBuffers$5$bailout(48, geometryGroup, f, hint, obj_uvs2, dispose, offset_normal, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, v1, customAttributes, v3, v4, v2, faceArray, lineArray, dirtyUvs, dirtyElements, fl, chunk_faces3, chunk_faces4, face, vertexNormals, faceNormal, obj_faces, obj_uvs, t1, vn, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t1 === 3 && needsSmoothNormals)
        for (i = 0; i < 3; ++i) {
          vn = $.index(vertexNormals, i);
          t1 = vn.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = vn.get$y();
          if (t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = vn.get$z();
          if (t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
      else
        for (i = 0; i < 3; ++i) {
          t1 = faceNormal.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = faceNormal.get$y();
          if (t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = faceNormal.get$z();
          if (t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      if (f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexNormals = face.get$vertexNormals();
      faceNormal = face.get$normal();
      t1 = $.get$length(vertexNormals);
      if (typeof t1 !== 'number')
        return this.setMeshBuffers$5$bailout(49, geometryGroup, hint, offset_normal, obj_uvs2, dispose, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, v1, customAttributes, v3, fl, lineArray, faceArray, face, vertexNormals, faceNormal, dirtyElements, dirtyUvs, v2, t1, v4, chunk_faces4, obj_faces, chunk_faces3, vn, obj_uvs, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t1 === 4 && needsSmoothNormals)
        for (i = 0; i < 4; ++i) {
          vn = $.index(vertexNormals, i);
          t1 = vn.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = vn.get$y();
          if (t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = vn.get$z();
          if (t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
      else
        for (i = 0; i < 4; ++i) {
          t1 = faceNormal.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = faceNormal.get$y();
          if (t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = faceNormal.get$z();
          if (t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
    }
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
    this._gl.bufferData$3(34962, normalArray, hint);
  } else
    i = null;
  t1 = dirtyUvs === true;
  if (t1 && $.get$isEmpty(obj_uvs) !== true && uvType === true) {
    fl = chunk_faces3.length;
    for (var uvi = null, offset_uv = 0, f = 0, fi = null, uv = null; f < fl; ++f) {
      if (f >= chunk_faces3.length)
        throw $.ioore(f);
      fi = chunk_faces3[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv = $.index(obj_uvs, fi);
      if (uv == null)
        continue;
      for (i = 0; i < 3; ++i) {
        uvi = $.index(uv, i);
        t2 = uvi.get$u();
        t3 = uvArray.length;
        if (offset_uv < 0 || offset_uv >= t3)
          throw $.ioore(offset_uv);
        uvArray[offset_uv] = t2;
        t2 = offset_uv + 1;
        t4 = uvi.get$v();
        if (t2 >= t3)
          throw $.ioore(t2);
        uvArray[t2] = t4;
        offset_uv += 2;
      }
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      if (f >= chunk_faces4.length)
        throw $.ioore(f);
      fi = chunk_faces4[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv = $.index(obj_uvs, fi);
      if (uv == null)
        continue;
      for (i = 0; i < 4; ++i) {
        uvi = $.index(uv, i);
        t2 = uvi.get$u();
        t3 = uvArray.length;
        if (offset_uv < 0 || offset_uv >= t3)
          throw $.ioore(offset_uv);
        uvArray[offset_uv] = t2;
        t2 = offset_uv + 1;
        t4 = uvi.get$v();
        if (t2 >= t3)
          throw $.ioore(t2);
        uvArray[t2] = t4;
        offset_uv += 2;
      }
    }
    if (offset_uv > 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUVBuffer());
      this._gl.bufferData$3(34962, uvArray, hint);
    }
  } else
    fi = null;
  if (t1 && !(obj_uvs2 == null) && uvType === true) {
    fl = chunk_faces3.length;
    for (var uv2i = null, offset_uv2 = 0, f = 0, uv2 = null; f < fl; ++f) {
      if (f >= chunk_faces3.length)
        throw $.ioore(f);
      fi = chunk_faces3[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv2 = $.index(obj_uvs2, fi);
      if (uv2 == null)
        continue;
      for (i = 0; i < 3; ++i) {
        uv2i = $.index(uv2, i);
        t1 = uv2i.get$u();
        t2 = uv2Array.length;
        if (offset_uv2 < 0 || offset_uv2 >= t2)
          throw $.ioore(offset_uv2);
        uv2Array[offset_uv2] = t1;
        t1 = offset_uv2 + 1;
        t3 = uv2i.get$v();
        if (t1 >= t2)
          throw $.ioore(t1);
        uv2Array[t1] = t3;
        offset_uv2 += 2;
      }
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      if (f >= chunk_faces4.length)
        throw $.ioore(f);
      fi = chunk_faces4[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv2 = $.index(obj_uvs2, fi);
      if (uv2 == null)
        continue;
      for (i = 0; i < 4; ++i) {
        uv2i = $.index(uv2, i);
        t1 = uv2i.get$u();
        t2 = uv2Array.length;
        if (offset_uv2 < 0 || offset_uv2 >= t2)
          throw $.ioore(offset_uv2);
        uv2Array[offset_uv2] = t1;
        t1 = offset_uv2 + 1;
        t3 = uv2i.get$v();
        if (t1 >= t2)
          throw $.ioore(t1);
        uv2Array[t1] = t3;
        offset_uv2 += 2;
      }
    }
    if (offset_uv2 > 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUV2Buffer());
      this._gl.bufferData$3(34962, uv2Array, hint);
    }
  }
  if (dirtyElements === true) {
    fl = chunk_faces3.length;
    for (var t1 = obj_faces.length, t2 = faceArray.length, t3 = lineArray.length, vertexIndex = 0, offset_face = 0, offset_line = 0, f = 0; f < fl; ++f) {
      t4 = chunk_faces3[f];
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t1)
        throw $.ioore(t4);
      face = obj_faces[t4];
      if (offset_face >= t2)
        throw $.ioore(offset_face);
      faceArray[offset_face] = vertexIndex;
      t4 = offset_face + 1;
      t5 = vertexIndex + 1;
      if (t4 >= t2)
        throw $.ioore(t4);
      faceArray[t4] = t5;
      t4 = offset_face + 2;
      t6 = vertexIndex + 2;
      if (t4 >= t2)
        throw $.ioore(t4);
      faceArray[t4] = t6;
      offset_face += 3;
      if (offset_line >= t3)
        throw $.ioore(offset_line);
      lineArray[offset_line] = vertexIndex;
      t4 = offset_line + 1;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = t5;
      t4 = offset_line + 2;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = vertexIndex;
      t4 = offset_line + 3;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = t6;
      t4 = offset_line + 4;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = t5;
      t5 = offset_line + 5;
      if (t5 >= t3)
        throw $.ioore(t5);
      lineArray[t5] = t6;
      offset_line += 6;
      vertexIndex += 3;
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      t4 = chunk_faces4[f];
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t1)
        throw $.ioore(t4);
      face = obj_faces[t4];
      if (offset_face >= t2)
        throw $.ioore(offset_face);
      faceArray[offset_face] = vertexIndex;
      t4 = offset_face + 1;
      t5 = vertexIndex + 1;
      if (t4 >= t2)
        throw $.ioore(t4);
      faceArray[t4] = t5;
      t4 = offset_face + 2;
      t6 = vertexIndex + 3;
      if (t4 >= t2)
        throw $.ioore(t4);
      faceArray[t4] = t6;
      t4 = offset_face + 3;
      if (t4 >= t2)
        throw $.ioore(t4);
      faceArray[t4] = t5;
      t4 = offset_face + 4;
      t7 = vertexIndex + 2;
      if (t4 >= t2)
        throw $.ioore(t4);
      faceArray[t4] = t7;
      t4 = offset_face + 5;
      if (t4 >= t2)
        throw $.ioore(t4);
      faceArray[t4] = t6;
      offset_face += 6;
      if (offset_line >= t3)
        throw $.ioore(offset_line);
      lineArray[offset_line] = vertexIndex;
      t4 = offset_line + 1;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = t5;
      t4 = offset_line + 2;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = vertexIndex;
      t4 = offset_line + 3;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = t6;
      t4 = offset_line + 4;
      if (t4 >= t3)
        throw $.ioore(t4);
      lineArray[t4] = t5;
      t5 = offset_line + 5;
      if (t5 >= t3)
        throw $.ioore(t5);
      lineArray[t5] = t7;
      t5 = offset_line + 6;
      if (t5 >= t3)
        throw $.ioore(t5);
      lineArray[t5] = t7;
      t7 = offset_line + 7;
      if (t7 >= t3)
        throw $.ioore(t7);
      lineArray[t7] = t6;
      offset_line += 8;
      vertexIndex += 4;
    }
    this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
    this._gl.bufferData$3(34963, faceArray, hint);
    this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
    this._gl.bufferData$3(34963, lineArray, hint);
  }
  var il = customAttributes.length;
  for (var i = 0, offset_custom = 0, offset_customSrc = 0, value = null, customAttribute = null; i < il; ++i) {
    if (i >= customAttributes.length)
      throw $.ioore(i);
    customAttribute = customAttributes[i];
    if (customAttribute.get$__original().get$needsUpdate() !== true)
      continue;
    t1 = customAttribute.get$size();
    if (typeof t1 !== 'number')
      return this.setMeshBuffers$5$bailout(50, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, value, il, chunk_faces3, chunk_faces4, obj_faces, i, t1, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (t1 === 1) {
      t1 = customAttribute.get$boundTo();
      if (typeof t1 !== 'string')
        return this.setMeshBuffers$5$bailout(51, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, value, il, chunk_faces3, chunk_faces4, obj_faces, i, t1, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t1 === 'vertices') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            throw $.ioore(f);
          t1 = chunk_faces3[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(52, f, hint, v1, customAttribute, v3, v4, v2, value, fl, chunk_faces3, face, offset_custom, t1, chunk_faces4, obj_faces, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(53, f, hint, v1, customAttribute, v3, v4, v2, value, fl, chunk_faces3, face, offset_custom, t1, chunk_faces4, t3, i, obj_faces, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$a();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t3.length)
            throw $.ioore(t5);
          t5 = t3[t5];
          if (offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t5;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(54, f, hint, v1, customAttribute, v3, v4, v2, value, fl, chunk_faces3, face, offset_custom, obj_faces, chunk_faces4, i, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = offset_custom + 1;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(55, f, hint, v1, customAttribute, v3, v4, v2, value, fl, chunk_faces3, face, offset_custom, obj_faces, chunk_faces4, i, t5, t3, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = face.get$b();
          if (t8 !== (t8 | 0))
            throw $.iae(t8);
          if (t8 < 0 || t8 >= t6.length)
            throw $.ioore(t8);
          t8 = t6[t8];
          if (t3 >= t5.length)
            throw $.ioore(t3);
          t5[t3] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(56, f, t8, hint, v1, customAttribute, v3, v4, v2, value, fl, chunk_faces3, face, offset_custom, obj_faces, chunk_faces4, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 2;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(57, f, t8, hint, t5, t6, v1, customAttribute, v3, v4, v2, value, fl, chunk_faces3, face, offset_custom, obj_faces, chunk_faces4, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = face.get$c();
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= t6.length)
            throw $.ioore(t10);
          t10 = t6[t10];
          if (t5 >= t8.length)
            throw $.ioore(t5);
          t8[t5] = t10;
          offset_custom += 3;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            throw $.ioore(f);
          t1 = chunk_faces4[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(58, hint, v1, f, v3, v4, customAttribute, value, v2, chunk_faces4, obj_faces, i, fl, face, offset_custom, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(59, hint, v1, f, v3, v4, customAttribute, value, v2, chunk_faces4, obj_faces, i, fl, face, offset_custom, t1, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$a();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t3.length)
            throw $.ioore(t5);
          t5 = t3[t5];
          if (offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t5;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(60, t5, hint, v1, f, customAttribute, v4, v2, value, v3, chunk_faces4, obj_faces, i, fl, face, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = offset_custom + 1;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(61, t5, hint, t3, t6, v1, f, customAttribute, v3, v4, value, v2, chunk_faces4, obj_faces, i, fl, face, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = face.get$b();
          if (t8 !== (t8 | 0))
            throw $.iae(t8);
          if (t8 < 0 || t8 >= t6.length)
            throw $.ioore(t8);
          t8 = t6[t8];
          if (t3 >= t5.length)
            throw $.ioore(t3);
          t5[t3] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(62, hint, v1, f, v3, v4, customAttribute, value, v2, t8, chunk_faces4, obj_faces, i, fl, face, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 2;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(63, hint, v1, f, v3, t8, customAttribute, value, t6, t5, chunk_faces4, v4, obj_faces, v2, i, fl, face, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = face.get$c();
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= t6.length)
            throw $.ioore(t10);
          t10 = t6[t10];
          if (t5 >= t8.length)
            throw $.ioore(t5);
          t8[t5] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(64, hint, v1, f, customAttribute, v4, v2, value, v3, chunk_faces4, obj_faces, t10, i, fl, face, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 3;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(65, hint, v1, f, customAttribute, v3, v4, value, v2, chunk_faces4, obj_faces, t10, i, t8, fl, t6, face, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = face.get$d();
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= t6.length)
            throw $.ioore(t12);
          t12 = t6[t12];
          if (t8 >= t10.length)
            throw $.ioore(t8);
          t10[t8] = t12;
          offset_custom += 4;
        }
      } else if (t1 === 'faces') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(67, geometryGroup, f, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, fl, chunk_faces3, t1, offset_custom, obj_faces, chunk_faces4, i, il, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f >= chunk_faces3.length)
            throw $.ioore(f);
          t3 = chunk_faces3[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(68, geometryGroup, f, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, fl, chunk_faces3, chunk_faces4, offset_custom, value, t3, i, obj_faces, il, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = value;
          t4 = offset_custom + 1;
          if (t4 >= t3.length)
            throw $.ioore(t4);
          t3[t4] = value;
          t4 = offset_custom + 2;
          if (t4 >= t3.length)
            throw $.ioore(t4);
          t3[t4] = value;
          offset_custom += 3;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(71, face, geometryGroup, hint, customAttributes, dispose, v1, v2, customAttribute, v3, v4, t1, offset_custom, chunk_faces3, chunk_faces4, fl, obj_faces, i, il, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f >= chunk_faces4.length)
            throw $.ioore(f);
          t3 = chunk_faces4[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(72, face, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, offset_custom, value, chunk_faces4, t3, chunk_faces3, i, fl, obj_faces, il, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = value;
          t4 = offset_custom + 1;
          if (t4 >= t3.length)
            throw $.ioore(t4);
          t3[t4] = value;
          t4 = offset_custom + 2;
          if (t4 >= t3.length)
            throw $.ioore(t4);
          t3[t4] = value;
          t4 = offset_custom + 3;
          if (t4 >= t3.length)
            throw $.ioore(t4);
          t3[t4] = value;
          offset_custom += 4;
        }
      } else
        offset_custom = 0;
    } else {
      t1 = customAttribute.get$size();
      if (typeof t1 !== 'number')
        return this.setMeshBuffers$5$bailout(76, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, value, il, chunk_faces3, chunk_faces4, obj_faces, i, f, fl, t1, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t1 === 2) {
        t1 = customAttribute.get$boundTo();
        if (typeof t1 !== 'string')
          return this.setMeshBuffers$5$bailout(77, geometryGroup, hint, customAttributes, t1, dispose, v1, customAttribute, v3, v4, v2, value, il, chunk_faces3, chunk_faces4, obj_faces, i, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (t1 === 'vertices') {
          fl = chunk_faces3.length;
          for (offset_custom = 0, f = 0; f < fl; ++f) {
            if (f >= chunk_faces3.length)
              throw $.ioore(f);
            t1 = chunk_faces3[f];
            if (t1 !== (t1 | 0))
              throw $.iae(t1);
            if (t1 < 0 || t1 >= obj_faces.length)
              throw $.ioore(t1);
            face = obj_faces[t1];
            t1 = customAttribute.get$value();
            if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(78, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, v4, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t3 = face.get$a();
            if (t3 !== (t3 | 0))
              throw $.iae(t3);
            if (t3 < 0 || t3 >= t1.length)
              throw $.ioore(t3);
            v1 = t1[t3];
            t3 = customAttribute.get$value();
            if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(79, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, v4, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t4 = face.get$b();
            if (t4 !== (t4 | 0))
              throw $.iae(t4);
            if (t4 < 0 || t4 >= t3.length)
              throw $.ioore(t4);
            v2 = t3[t4];
            t4 = customAttribute.get$value();
            if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(80, v2, geometryGroup, t4, hint, customAttributes, dispose, il, f, customAttribute, v4, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t5 = face.get$c();
            if (t5 !== (t5 | 0))
              throw $.iae(t5);
            if (t5 < 0 || t5 >= t4.length)
              throw $.ioore(t5);
            v3 = t4[t5];
            t5 = customAttribute.get$array();
            if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(81, v2, geometryGroup, hint, customAttributes, v3, t5, il, f, customAttribute, v4, value, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t6 = v1.get$x();
            if (offset_custom >= t5.length)
              throw $.ioore(offset_custom);
            t5[offset_custom] = t6;
            t6 = customAttribute.get$array();
            if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(82, v2, geometryGroup, hint, customAttributes, v3, dispose, il, f, customAttribute, t6, v4, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t7 = offset_custom + 1;
            t8 = v1.get$y();
            if (t7 >= t6.length)
              throw $.ioore(t7);
            t6[t7] = t8;
            t8 = customAttribute.get$array();
            if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(83, v2, geometryGroup, hint, customAttributes, v3, dispose, il, f, customAttribute, v4, value, chunk_faces3, t8, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t6 = offset_custom + 2;
            t9 = v2.get$x();
            if (t6 >= t8.length)
              throw $.ioore(t6);
            t8[t6] = t9;
            t9 = customAttribute.get$array();
            if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(84, v2, geometryGroup, hint, customAttributes, v3, dispose, il, f, customAttribute, v4, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, t9, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t8 = offset_custom + 3;
            t10 = v2.get$y();
            if (t8 >= t9.length)
              throw $.ioore(t8);
            t9[t8] = t10;
            t10 = customAttribute.get$array();
            if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(85, v2, geometryGroup, hint, customAttributes, v3, dispose, il, f, customAttribute, v4, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t9 = offset_custom + 4;
            t11 = v3.get$x();
            if (t9 >= t10.length)
              throw $.ioore(t9);
            t10[t9] = t11;
            t11 = customAttribute.get$array();
            if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(86, v2, geometryGroup, t11, hint, v3, customAttributes, il, f, customAttribute, v4, value, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t10 = offset_custom + 5;
            t12 = v3.get$y();
            if (t10 >= t11.length)
              throw $.ioore(t10);
            t11[t10] = t12;
            offset_custom += 6;
          }
          fl = chunk_faces4.length;
          for (f = 0; f < fl; ++f) {
            if (f >= chunk_faces4.length)
              throw $.ioore(f);
            t1 = chunk_faces4[f];
            if (t1 !== (t1 | 0))
              throw $.iae(t1);
            if (t1 < 0 || t1 >= obj_faces.length)
              throw $.ioore(t1);
            face = obj_faces[t1];
            t1 = customAttribute.get$value();
            if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(87, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t3 = face.get$a();
            if (t3 !== (t3 | 0))
              throw $.iae(t3);
            if (t3 < 0 || t3 >= t1.length)
              throw $.ioore(t3);
            v1 = t1[t3];
            t3 = customAttribute.get$value();
            if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(88, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t4 = face.get$b();
            if (t4 !== (t4 | 0))
              throw $.iae(t4);
            if (t4 < 0 || t4 >= t3.length)
              throw $.ioore(t4);
            v2 = t3[t4];
            t4 = customAttribute.get$value();
            if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(89, v2, geometryGroup, t4, hint, customAttributes, dispose, il, f, customAttribute, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t5 = face.get$c();
            if (t5 !== (t5 | 0))
              throw $.iae(t5);
            if (t5 < 0 || t5 >= t4.length)
              throw $.ioore(t5);
            v3 = t4[t5];
            t5 = customAttribute.get$value();
            if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(90, v2, geometryGroup, hint, customAttributes, v3, t5, il, f, customAttribute, value, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t6 = face.get$d();
            if (t6 !== (t6 | 0))
              throw $.iae(t6);
            if (t6 < 0 || t6 >= t5.length)
              throw $.ioore(t6);
            v4 = t5[t6];
            t6 = customAttribute.get$array();
            if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(91, v2, geometryGroup, hint, customAttributes, v3, dispose, v4, f, customAttribute, t6, value, il, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t7 = v1.get$x();
            if (offset_custom >= t6.length)
              throw $.ioore(offset_custom);
            t6[offset_custom] = t7;
            t7 = customAttribute.get$array();
            if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(92, v2, geometryGroup, hint, customAttributes, v3, dispose, v4, f, customAttribute, il, value, t7, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t8 = offset_custom + 1;
            t9 = v1.get$y();
            if (t8 >= t7.length)
              throw $.ioore(t8);
            t7[t8] = t9;
            t9 = customAttribute.get$array();
            if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(93, v2, geometryGroup, hint, customAttributes, v3, dispose, v4, f, customAttribute, il, value, chunk_faces3, chunk_faces4, obj_faces, t9, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t7 = offset_custom + 2;
            t10 = v2.get$x();
            if (t7 >= t9.length)
              throw $.ioore(t7);
            t9[t7] = t10;
            t10 = customAttribute.get$array();
            if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(94, v2, geometryGroup, hint, customAttributes, v3, dispose, v4, f, customAttribute, il, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, t10, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t9 = offset_custom + 3;
            t11 = v2.get$y();
            if (t9 >= t10.length)
              throw $.ioore(t9);
            t10[t9] = t11;
            t11 = customAttribute.get$array();
            if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(95, v2, t11, hint, geometryGroup, v3, customAttributes, v4, f, customAttribute, il, value, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t10 = offset_custom + 4;
            t12 = v3.get$x();
            if (t10 >= t11.length)
              throw $.ioore(t10);
            t11[t10] = t12;
            t12 = customAttribute.get$array();
            if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(96, v2, geometryGroup, hint, customAttributes, v3, t12, v4, f, customAttribute, il, value, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t11 = offset_custom + 5;
            t13 = v3.get$y();
            if (t11 >= t12.length)
              throw $.ioore(t11);
            t12[t11] = t13;
            t13 = customAttribute.get$array();
            if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(97, v2, geometryGroup, hint, customAttributes, v3, dispose, v4, f, customAttribute, il, t13, value, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t12 = offset_custom + 6;
            t14 = v4.get$x();
            if (t12 >= t13.length)
              throw $.ioore(t12);
            t13[t12] = t14;
            t14 = customAttribute.get$array();
            if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(98, v2, geometryGroup, hint, customAttributes, v3, dispose, v4, f, customAttribute, il, value, chunk_faces3, chunk_faces4, obj_faces, t14, i, fl, offset_custom, face, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t13 = offset_custom + 7;
            t15 = v4.get$y();
            if (t13 >= t14.length)
              throw $.ioore(t13);
            t14[t13] = t15;
            offset_custom += 8;
          }
        } else if (t1 === 'faces') {
          fl = chunk_faces3.length;
          for (offset_custom = 0, f = 0; f < fl; ++f) {
            t1 = customAttribute.get$value();
            if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(100, offset_custom, f, hint, chunk_faces4, i, face, customAttribute, v4, fl, t1, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (f >= chunk_faces3.length)
              throw $.ioore(f);
            t3 = chunk_faces3[f];
            if (t3 !== (t3 | 0))
              throw $.iae(t3);
            if (t3 < 0 || t3 >= t1.length)
              throw $.ioore(t3);
            value = t1[t3];
            t3 = customAttribute.get$array();
            if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(101, f, hint, customAttribute, v4, fl, chunk_faces3, offset_custom, value, t3, i, chunk_faces4, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t4 = value.get$x();
            if (offset_custom >= t3.length)
              throw $.ioore(offset_custom);
            t3[offset_custom] = t4;
            t4 = customAttribute.get$array();
            if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(102, f, hint, customAttribute, v4, fl, chunk_faces3, offset_custom, value, chunk_faces4, i, t4, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t5 = offset_custom + 1;
            t6 = value.get$y();
            if (t5 >= t4.length)
              throw $.ioore(t5);
            t4[t5] = t6;
            t6 = customAttribute.get$array();
            if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(103, f, hint, customAttribute, v4, fl, chunk_faces3, offset_custom, value, chunk_faces4, i, t6, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t4 = offset_custom + 2;
            t7 = value.get$x();
            if (t4 >= t6.length)
              throw $.ioore(t4);
            t6[t4] = t7;
            t7 = customAttribute.get$array();
            if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(104, f, hint, t7, customAttribute, v4, fl, chunk_faces3, offset_custom, value, chunk_faces4, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t6 = offset_custom + 3;
            t8 = value.get$y();
            if (t6 >= t7.length)
              throw $.ioore(t6);
            t7[t6] = t8;
            t8 = customAttribute.get$array();
            if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(105, f, hint, customAttribute, t8, v4, fl, chunk_faces3, offset_custom, value, chunk_faces4, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t7 = offset_custom + 4;
            t9 = value.get$x();
            if (t7 >= t8.length)
              throw $.ioore(t7);
            t8[t7] = t9;
            t9 = customAttribute.get$array();
            if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(106, f, hint, customAttribute, v4, fl, chunk_faces3, offset_custom, value, t9, chunk_faces4, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t8 = offset_custom + 5;
            t10 = value.get$y();
            if (t8 >= t9.length)
              throw $.ioore(t8);
            t9[t8] = t10;
            offset_custom += 6;
            v3 = value;
            v2 = v3;
            v1 = v2;
          }
          fl = chunk_faces4.length;
          for (f = 0; f < fl; ++f) {
            t1 = customAttribute.get$value();
            if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(107, chunk_faces4, fl, t1, i, offset_custom, f, hint, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (f >= chunk_faces4.length)
              throw $.ioore(f);
            t3 = chunk_faces4[f];
            if (t3 !== (t3 | 0))
              throw $.iae(t3);
            if (t3 < 0 || t3 >= t1.length)
              throw $.ioore(t3);
            value = t1[t3];
            t3 = customAttribute.get$array();
            if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(108, chunk_faces4, fl, hint, i, offset_custom, value, f, t3, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t4 = value.get$x();
            if (offset_custom >= t3.length)
              throw $.ioore(offset_custom);
            t3[offset_custom] = t4;
            t4 = customAttribute.get$array();
            if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(109, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, t4, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t5 = offset_custom + 1;
            t6 = value.get$y();
            if (t5 >= t4.length)
              throw $.ioore(t5);
            t4[t5] = t6;
            t6 = customAttribute.get$array();
            if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(110, chunk_faces4, t6, fl, i, offset_custom, value, f, hint, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t4 = offset_custom + 2;
            t7 = value.get$x();
            if (t4 >= t6.length)
              throw $.ioore(t4);
            t6[t4] = t7;
            t7 = customAttribute.get$array();
            if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(111, chunk_faces4, fl, hint, i, offset_custom, value, f, t7, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t6 = offset_custom + 3;
            t8 = value.get$y();
            if (t6 >= t7.length)
              throw $.ioore(t6);
            t7[t6] = t8;
            t8 = customAttribute.get$array();
            if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(112, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, t8, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t7 = offset_custom + 4;
            t9 = value.get$x();
            if (t7 >= t8.length)
              throw $.ioore(t7);
            t8[t7] = t9;
            t9 = customAttribute.get$array();
            if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(113, chunk_faces4, fl, hint, t9, offset_custom, value, f, customAttribute, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t8 = offset_custom + 5;
            t10 = value.get$y();
            if (t8 >= t9.length)
              throw $.ioore(t8);
            t9[t8] = t10;
            t10 = customAttribute.get$array();
            if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(114, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, t10, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t9 = offset_custom + 6;
            t11 = value.get$x();
            if (t9 >= t10.length)
              throw $.ioore(t9);
            t10[t9] = t11;
            t11 = customAttribute.get$array();
            if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(115, t11, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            t10 = offset_custom + 7;
            t12 = value.get$y();
            if (t10 >= t11.length)
              throw $.ioore(t10);
            t11[t10] = t12;
            offset_custom += 8;
            v4 = value;
            v3 = v4;
            v2 = v3;
            v1 = v2;
          }
        } else
          offset_custom = 0;
      } else {
        t1 = customAttribute.get$size();
        if (typeof t1 !== 'number')
          return this.setMeshBuffers$5$bailout(116, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, value, il, chunk_faces3, chunk_faces4, obj_faces, i, t1, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (t1 === 3) {
          t1 = customAttribute.get$type();
          if (typeof t1 !== 'string')
            return this.setMeshBuffers$5$bailout(117, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, v3, v4, v2, value, il, chunk_faces3, chunk_faces4, obj_faces, i, t1, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          var pp = t1 === 'c' ? ['r', 'g', 'b'] : ['x', 'y', 'z'];
          t1 = customAttribute.get$boundTo();
          if (typeof t1 !== 'string')
            return this.setMeshBuffers$5$bailout(118, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, pp, v4, v2, value, t1, chunk_faces3, chunk_faces4, obj_faces, il, i, v3, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (t1 === 'vertices') {
            fl = chunk_faces3.length;
            for (offset_custom = 0, f = 0; f < fl; ++f) {
              if (f >= chunk_faces3.length)
                throw $.ioore(f);
              t1 = chunk_faces3[f];
              if (t1 !== (t1 | 0))
                throw $.iae(t1);
              if (t1 < 0 || t1 >= obj_faces.length)
                throw $.ioore(t1);
              face = obj_faces[t1];
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(119, offset_custom, face, hint, t1, customAttribute, pp, v4, value, chunk_faces3, chunk_faces4, obj_faces, f, i, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t3 = face.get$a();
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t1.length)
                throw $.ioore(t3);
              v1 = t1[t3];
              if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(120, offset_custom, face, hint, v1, customAttribute, pp, v4, value, chunk_faces3, chunk_faces4, obj_faces, f, i, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(121, offset_custom, face, hint, v1, t1, customAttribute, pp, v4, value, chunk_faces3, chunk_faces4, obj_faces, f, i, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t5 = face.get$b();
              if (t5 !== (t5 | 0))
                throw $.iae(t5);
              if (t5 < 0 || t5 >= t1.length)
                throw $.ioore(t5);
              v2 = t1[t5];
              if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(122, offset_custom, face, hint, v1, customAttribute, v2, pp, v4, value, chunk_faces3, chunk_faces4, obj_faces, f, i, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(123, offset_custom, face, hint, v1, customAttribute, v2, pp, t1, value, v4, chunk_faces3, chunk_faces4, obj_faces, f, i, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t7 = face.get$c();
              if (t7 !== (t7 | 0))
                throw $.iae(t7);
              if (t7 < 0 || t7 >= t1.length)
                throw $.ioore(t7);
              v3 = t1[t7];
              if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(124, offset_custom, face, hint, v1, customAttribute, v2, pp, v4, value, v3, chunk_faces3, chunk_faces4, obj_faces, f, i, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$array();
              if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(125, offset_custom, face, hint, v1, customAttribute, v2, pp, v4, value, v3, chunk_faces3, t1, chunk_faces4, obj_faces, f, i, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t9 = pp.length;
              if (0 >= t9)
                throw $.ioore(0);
              t10 = pp[0];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              t11 = v1.length;
              if (t10 < 0 || t10 >= t11)
                throw $.ioore(t10);
              t10 = v1[t10];
              if (offset_custom >= t1.length)
                throw $.ioore(offset_custom);
              t1[offset_custom] = t10;
              t10 = offset_custom + 1;
              if (1 >= t9)
                throw $.ioore(1);
              t12 = pp[1];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t11)
                throw $.ioore(t12);
              t12 = v1[t12];
              if (t10 >= t1.length)
                throw $.ioore(t10);
              t1[t10] = t12;
              t12 = offset_custom + 2;
              if (2 >= t9)
                throw $.ioore(2);
              t10 = pp[2];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              if (t10 < 0 || t10 >= t11)
                throw $.ioore(t10);
              t10 = v1[t10];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t10;
              t10 = offset_custom + 3;
              t12 = pp[0];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              t13 = v2.length;
              if (t12 < 0 || t12 >= t13)
                throw $.ioore(t12);
              t12 = v2[t12];
              if (t10 >= t1.length)
                throw $.ioore(t10);
              t1[t10] = t12;
              t12 = offset_custom + 4;
              t10 = pp[1];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              if (t10 < 0 || t10 >= t13)
                throw $.ioore(t10);
              t10 = v2[t10];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t10;
              t10 = offset_custom + 5;
              t12 = pp[2];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t13)
                throw $.ioore(t12);
              t12 = v2[t12];
              if (t10 >= t1.length)
                throw $.ioore(t10);
              t1[t10] = t12;
              t12 = offset_custom + 6;
              t10 = pp[0];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              t14 = v3.length;
              if (t10 < 0 || t10 >= t14)
                throw $.ioore(t10);
              t10 = v3[t10];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t10;
              t10 = offset_custom + 7;
              t12 = pp[1];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t14)
                throw $.ioore(t12);
              t12 = v3[t12];
              if (t10 >= t1.length)
                throw $.ioore(t10);
              t1[t10] = t12;
              t12 = offset_custom + 8;
              t10 = pp[2];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              if (t10 < 0 || t10 >= t14)
                throw $.ioore(t10);
              t10 = v3[t10];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t10;
              offset_custom += 9;
            }
            fl = chunk_faces4.length;
            for (f = 0; f < fl; ++f) {
              if (f >= chunk_faces4.length)
                throw $.ioore(f);
              t1 = chunk_faces4[f];
              if (t1 !== (t1 | 0))
                throw $.iae(t1);
              if (t1 < 0 || t1 >= obj_faces.length)
                throw $.ioore(t1);
              face = obj_faces[t1];
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(134, geometryGroup, f, hint, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, obj_faces, t1, chunk_faces4, i, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t3 = face.get$a();
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t1.length)
                throw $.ioore(t3);
              v1 = t1[t3];
              if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(135, geometryGroup, f, hint, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(136, geometryGroup, f, hint, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, t1, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t5 = face.get$b();
              if (t5 !== (t5 | 0))
                throw $.iae(t5);
              if (t5 < 0 || t5 >= t1.length)
                throw $.ioore(t5);
              v2 = t1[t5];
              if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(137, geometryGroup, f, hint, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, v2, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(138, geometryGroup, f, hint, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, v2, chunk_faces3, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t7 = face.get$c();
              if (t7 !== (t7 | 0))
                throw $.iae(t7);
              if (t7 < 0 || t7 >= t1.length)
                throw $.ioore(t7);
              v3 = t1[t7];
              if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(139, geometryGroup, f, hint, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, v2, chunk_faces3, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(140, geometryGroup, f, hint, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, v2, chunk_faces3, v3, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t9 = face.get$d();
              if (t9 !== (t9 | 0))
                throw $.iae(t9);
              if (t9 < 0 || t9 >= t1.length)
                throw $.ioore(t9);
              v4 = t1[t9];
              if (typeof v4 !== 'string' && (typeof v4 !== 'object' || v4 === null || v4.constructor !== Array && !v4.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(141, v4, f, hint, geometryGroup, customAttributes, dispose, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, v2, chunk_faces3, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$array();
              if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(142, v4, f, t1, hint, customAttributes, geometryGroup, il, customAttribute, pp, fl, value, offset_custom, face, chunk_faces4, obj_faces, v1, i, v2, chunk_faces3, v3, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t11 = pp.length;
              if (0 >= t11)
                throw $.ioore(0);
              t12 = pp[0];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              t13 = v1.length;
              if (t12 < 0 || t12 >= t13)
                throw $.ioore(t12);
              t12 = v1[t12];
              if (offset_custom >= t1.length)
                throw $.ioore(offset_custom);
              t1[offset_custom] = t12;
              t12 = offset_custom + 1;
              if (1 >= t11)
                throw $.ioore(1);
              t14 = pp[1];
              if (t14 !== (t14 | 0))
                throw $.iae(t14);
              if (t14 < 0 || t14 >= t13)
                throw $.ioore(t14);
              t14 = v1[t14];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t14;
              t14 = offset_custom + 2;
              if (2 >= t11)
                throw $.ioore(2);
              t12 = pp[2];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t13)
                throw $.ioore(t12);
              t12 = v1[t12];
              if (t14 >= t1.length)
                throw $.ioore(t14);
              t1[t14] = t12;
              t12 = offset_custom + 3;
              t14 = pp[0];
              if (t14 !== (t14 | 0))
                throw $.iae(t14);
              t15 = v2.length;
              if (t14 < 0 || t14 >= t15)
                throw $.ioore(t14);
              t14 = v2[t14];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t14;
              t14 = offset_custom + 4;
              t12 = pp[1];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t15)
                throw $.ioore(t12);
              t12 = v2[t12];
              if (t14 >= t1.length)
                throw $.ioore(t14);
              t1[t14] = t12;
              t12 = offset_custom + 5;
              t14 = pp[2];
              if (t14 !== (t14 | 0))
                throw $.iae(t14);
              if (t14 < 0 || t14 >= t15)
                throw $.ioore(t14);
              t14 = v2[t14];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t14;
              t14 = offset_custom + 6;
              t12 = pp[0];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              t16 = v3.length;
              if (t12 < 0 || t12 >= t16)
                throw $.ioore(t12);
              t12 = v3[t12];
              if (t14 >= t1.length)
                throw $.ioore(t14);
              t1[t14] = t12;
              t12 = offset_custom + 7;
              t14 = pp[1];
              if (t14 !== (t14 | 0))
                throw $.iae(t14);
              if (t14 < 0 || t14 >= t16)
                throw $.ioore(t14);
              t14 = v3[t14];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t14;
              t14 = offset_custom + 8;
              t12 = pp[2];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t16)
                throw $.ioore(t12);
              t12 = v3[t12];
              if (t14 >= t1.length)
                throw $.ioore(t14);
              t1[t14] = t12;
              t12 = offset_custom + 9;
              t14 = pp[0];
              if (t14 !== (t14 | 0))
                throw $.iae(t14);
              t17 = v4.length;
              if (t14 < 0 || t14 >= t17)
                throw $.ioore(t14);
              t14 = v4[t14];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t14;
              t14 = offset_custom + 10;
              t12 = pp[1];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t17)
                throw $.ioore(t12);
              t12 = v4[t12];
              if (t14 >= t1.length)
                throw $.ioore(t14);
              t1[t14] = t12;
              t12 = offset_custom + 11;
              t14 = pp[2];
              if (t14 !== (t14 | 0))
                throw $.iae(t14);
              if (t14 < 0 || t14 >= t17)
                throw $.ioore(t14);
              t14 = v4[t14];
              if (t12 >= t1.length)
                throw $.ioore(t12);
              t1[t12] = t14;
              offset_custom += 12;
            }
          } else if (t1 === 'faces') {
            fl = chunk_faces3.length;
            for (offset_custom = 0, f = 0; f < fl; ++f) {
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(155, fl, hint, t1, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (f >= chunk_faces3.length)
                throw $.ioore(f);
              t3 = chunk_faces3[f];
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t1.length)
                throw $.ioore(t3);
              value = t1[t3];
              if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(156, fl, hint, offset_custom, value, customAttribute, pp, v4, chunk_faces3, chunk_faces4, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$array();
              if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(157, fl, hint, offset_custom, value, t1, customAttribute, pp, v4, chunk_faces3, chunk_faces4, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t5 = pp.length;
              if (0 >= t5)
                throw $.ioore(0);
              t6 = pp[0];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              t7 = value.length;
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (offset_custom >= t1.length)
                throw $.ioore(offset_custom);
              t1[offset_custom] = t6;
              t6 = offset_custom + 1;
              if (1 >= t5)
                throw $.ioore(1);
              t8 = pp[1];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 2;
              if (2 >= t5)
                throw $.ioore(2);
              t6 = pp[2];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 3;
              t8 = pp[0];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 4;
              t6 = pp[1];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 5;
              t8 = pp[2];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 6;
              t6 = pp[0];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 7;
              t8 = pp[1];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 8;
              t6 = pp[2];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              offset_custom += 9;
              v3 = value;
              v2 = v3;
              v1 = v2;
            }
            fl = chunk_faces4.length;
            for (f = 0; f < fl; ++f) {
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(166, chunk_faces4, hint, fl, i, t1, offset_custom, f, pp, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (f >= chunk_faces4.length)
                throw $.ioore(f);
              t3 = chunk_faces4[f];
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t1.length)
                throw $.ioore(t3);
              value = t1[t3];
              if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(167, chunk_faces4, hint, fl, i, offset_custom, f, value, pp, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = customAttribute.get$array();
              if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(168, chunk_faces4, hint, fl, i, offset_custom, f, value, pp, customAttribute, t1, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t5 = pp.length;
              if (0 >= t5)
                throw $.ioore(0);
              t6 = pp[0];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              t7 = value.length;
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (offset_custom >= t1.length)
                throw $.ioore(offset_custom);
              t1[offset_custom] = t6;
              t6 = offset_custom + 1;
              if (1 >= t5)
                throw $.ioore(1);
              t8 = pp[1];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 2;
              if (2 >= t5)
                throw $.ioore(2);
              t6 = pp[2];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 3;
              t8 = pp[0];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 4;
              t6 = pp[1];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 5;
              t8 = pp[2];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 6;
              t6 = pp[0];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 7;
              t8 = pp[1];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 8;
              t6 = pp[2];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 9;
              t8 = pp[0];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              t8 = offset_custom + 10;
              t6 = pp[1];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t7)
                throw $.ioore(t6);
              t6 = value[t6];
              if (t8 >= t1.length)
                throw $.ioore(t8);
              t1[t8] = t6;
              t6 = offset_custom + 11;
              t8 = pp[2];
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t7)
                throw $.ioore(t8);
              t8 = value[t8];
              if (t6 >= t1.length)
                throw $.ioore(t6);
              t1[t6] = t8;
              offset_custom += 12;
              v4 = value;
              v3 = v4;
              v2 = v3;
              v1 = v2;
            }
          } else if (t1 === 'faceVertices') {
            fl = chunk_faces3.length;
            for (offset_custom = 0, f = 0; f < fl; ++f) {
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(181, f, geometryGroup, hint, customAttributes, dispose, il, customAttribute, pp, v4, fl, t1, offset_custom, chunk_faces3, chunk_faces4, obj_faces, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (f >= chunk_faces3.length)
                throw $.ioore(f);
              t3 = chunk_faces3[f];
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t1.length)
                throw $.ioore(t3);
              value = t1[t3];
              if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(182, f, geometryGroup, hint, customAttributes, dispose, il, customAttribute, pp, v4, fl, offset_custom, chunk_faces3, value, chunk_faces4, obj_faces, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = value.length;
              if (0 >= t1)
                throw $.ioore(0);
              v1 = value[0];
              if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(183, f, geometryGroup, hint, customAttributes, dispose, il, customAttribute, pp, v4, fl, offset_custom, chunk_faces3, value, chunk_faces4, v1, i, obj_faces, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (1 >= t1)
                throw $.ioore(1);
              v2 = value[1];
              if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(184, f, geometryGroup, hint, customAttributes, dispose, il, customAttribute, pp, v4, fl, offset_custom, chunk_faces3, value, chunk_faces4, v1, v2, i, obj_faces, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (2 >= t1)
                throw $.ioore(2);
              v3 = value[2];
              if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(185, f, geometryGroup, hint, customAttributes, dispose, il, customAttribute, pp, v4, fl, offset_custom, chunk_faces3, value, chunk_faces4, v1, v2, i, v3, obj_faces, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t7 = customAttribute.get$array();
              if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(186, f, geometryGroup, hint, customAttributes, dispose, il, customAttribute, pp, v4, fl, offset_custom, chunk_faces3, value, chunk_faces4, v1, v2, i, v3, obj_faces, t7, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t9 = pp.length;
              if (0 >= t9)
                throw $.ioore(0);
              t10 = pp[0];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              t11 = v1.length;
              if (t10 < 0 || t10 >= t11)
                throw $.ioore(t10);
              t10 = v1[t10];
              if (offset_custom >= t7.length)
                throw $.ioore(offset_custom);
              t7[offset_custom] = t10;
              t10 = offset_custom + 1;
              if (1 >= t9)
                throw $.ioore(1);
              t12 = pp[1];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t11)
                throw $.ioore(t12);
              t12 = v1[t12];
              if (t10 >= t7.length)
                throw $.ioore(t10);
              t7[t10] = t12;
              t12 = offset_custom + 2;
              if (2 >= t9)
                throw $.ioore(2);
              t10 = pp[2];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              if (t10 < 0 || t10 >= t11)
                throw $.ioore(t10);
              t10 = v1[t10];
              if (t12 >= t7.length)
                throw $.ioore(t12);
              t7[t12] = t10;
              t10 = offset_custom + 3;
              t12 = pp[0];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              t13 = v2.length;
              if (t12 < 0 || t12 >= t13)
                throw $.ioore(t12);
              t12 = v2[t12];
              if (t10 >= t7.length)
                throw $.ioore(t10);
              t7[t10] = t12;
              t12 = offset_custom + 4;
              t10 = pp[1];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              if (t10 < 0 || t10 >= t13)
                throw $.ioore(t10);
              t10 = v2[t10];
              if (t12 >= t7.length)
                throw $.ioore(t12);
              t7[t12] = t10;
              t10 = offset_custom + 5;
              t12 = pp[2];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t13)
                throw $.ioore(t12);
              t12 = v2[t12];
              if (t10 >= t7.length)
                throw $.ioore(t10);
              t7[t10] = t12;
              t12 = offset_custom + 6;
              t10 = pp[0];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              t14 = v3.length;
              if (t10 < 0 || t10 >= t14)
                throw $.ioore(t10);
              t10 = v3[t10];
              if (t12 >= t7.length)
                throw $.ioore(t12);
              t7[t12] = t10;
              t10 = offset_custom + 7;
              t12 = pp[1];
              if (t12 !== (t12 | 0))
                throw $.iae(t12);
              if (t12 < 0 || t12 >= t14)
                throw $.ioore(t12);
              t12 = v3[t12];
              if (t10 >= t7.length)
                throw $.ioore(t10);
              t7[t10] = t12;
              t12 = offset_custom + 8;
              t10 = pp[2];
              if (t10 !== (t10 | 0))
                throw $.iae(t10);
              if (t10 < 0 || t10 >= t14)
                throw $.ioore(t10);
              t10 = v3[t10];
              if (t12 >= t7.length)
                throw $.ioore(t12);
              t7[t12] = t10;
              offset_custom += 9;
            }
            fl = chunk_faces4.length;
            for (f = 0; f < fl; ++f) {
              t1 = customAttribute.get$value();
              if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(195, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, i, fl, t1, offset_custom, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (f >= chunk_faces4.length)
                throw $.ioore(f);
              t3 = chunk_faces4[f];
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t1.length)
                throw $.ioore(t3);
              value = t1[t3];
              if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(196, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t1 = value.length;
              if (0 >= t1)
                throw $.ioore(0);
              v1 = value[0];
              if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(197, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, value, v1, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (1 >= t1)
                throw $.ioore(1);
              v2 = value[1];
              if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(198, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, value, v1, v2, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (2 >= t1)
                throw $.ioore(2);
              v3 = value[2];
              if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(199, face, geometryGroup, hint, customAttributes, dispose, il, f, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, value, v1, v2, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              if (3 >= t1)
                throw $.ioore(3);
              v4 = value[3];
              if (typeof v4 !== 'string' && (typeof v4 !== 'object' || v4 === null || v4.constructor !== Array && !v4.is$JavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(200, face, v4, hint, geometryGroup, customAttributes, dispose, il, f, pp, customAttribute, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, value, v1, v2, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t8 = customAttribute.get$array();
              if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(201, face, v4, hint, t8, customAttributes, geometryGroup, il, f, customAttribute, pp, dispose, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, value, v1, v2, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              t10 = pp.length;
              if (0 >= t10)
                throw $.ioore(0);
              t11 = pp[0];
              if (t11 !== (t11 | 0))
                throw $.iae(t11);
              t12 = v1.length;
              if (t11 < 0 || t11 >= t12)
                throw $.ioore(t11);
              t11 = v1[t11];
              if (offset_custom >= t8.length)
                throw $.ioore(offset_custom);
              t8[offset_custom] = t11;
              t11 = offset_custom + 1;
              if (1 >= t10)
                throw $.ioore(1);
              t13 = pp[1];
              if (t13 !== (t13 | 0))
                throw $.iae(t13);
              if (t13 < 0 || t13 >= t12)
                throw $.ioore(t13);
              t13 = v1[t13];
              if (t11 >= t8.length)
                throw $.ioore(t11);
              t8[t11] = t13;
              t13 = offset_custom + 2;
              if (2 >= t10)
                throw $.ioore(2);
              t11 = pp[2];
              if (t11 !== (t11 | 0))
                throw $.iae(t11);
              if (t11 < 0 || t11 >= t12)
                throw $.ioore(t11);
              t11 = v1[t11];
              if (t13 >= t8.length)
                throw $.ioore(t13);
              t8[t13] = t11;
              t11 = offset_custom + 3;
              t13 = pp[0];
              if (t13 !== (t13 | 0))
                throw $.iae(t13);
              t14 = v2.length;
              if (t13 < 0 || t13 >= t14)
                throw $.ioore(t13);
              t13 = v2[t13];
              if (t11 >= t8.length)
                throw $.ioore(t11);
              t8[t11] = t13;
              t13 = offset_custom + 4;
              t11 = pp[1];
              if (t11 !== (t11 | 0))
                throw $.iae(t11);
              if (t11 < 0 || t11 >= t14)
                throw $.ioore(t11);
              t11 = v2[t11];
              if (t13 >= t8.length)
                throw $.ioore(t13);
              t8[t13] = t11;
              t11 = offset_custom + 5;
              t13 = pp[2];
              if (t13 !== (t13 | 0))
                throw $.iae(t13);
              if (t13 < 0 || t13 >= t14)
                throw $.ioore(t13);
              t13 = v2[t13];
              if (t11 >= t8.length)
                throw $.ioore(t11);
              t8[t11] = t13;
              t13 = offset_custom + 6;
              t11 = pp[0];
              if (t11 !== (t11 | 0))
                throw $.iae(t11);
              t15 = v3.length;
              if (t11 < 0 || t11 >= t15)
                throw $.ioore(t11);
              t11 = v3[t11];
              if (t13 >= t8.length)
                throw $.ioore(t13);
              t8[t13] = t11;
              t11 = offset_custom + 7;
              t13 = pp[1];
              if (t13 !== (t13 | 0))
                throw $.iae(t13);
              if (t13 < 0 || t13 >= t15)
                throw $.ioore(t13);
              t13 = v3[t13];
              if (t11 >= t8.length)
                throw $.ioore(t11);
              t8[t11] = t13;
              t13 = offset_custom + 8;
              t11 = pp[2];
              if (t11 !== (t11 | 0))
                throw $.iae(t11);
              if (t11 < 0 || t11 >= t15)
                throw $.ioore(t11);
              t11 = v3[t11];
              if (t13 >= t8.length)
                throw $.ioore(t13);
              t8[t13] = t11;
              t11 = offset_custom + 9;
              t13 = pp[0];
              if (t13 !== (t13 | 0))
                throw $.iae(t13);
              t16 = v4.length;
              if (t13 < 0 || t13 >= t16)
                throw $.ioore(t13);
              t13 = v4[t13];
              if (t11 >= t8.length)
                throw $.ioore(t11);
              t8[t11] = t13;
              t13 = offset_custom + 10;
              t11 = pp[1];
              if (t11 !== (t11 | 0))
                throw $.iae(t11);
              if (t11 < 0 || t11 >= t16)
                throw $.ioore(t11);
              t11 = v4[t11];
              if (t13 >= t8.length)
                throw $.ioore(t13);
              t8[t13] = t11;
              t11 = offset_custom + 11;
              t13 = pp[2];
              if (t13 !== (t13 | 0))
                throw $.iae(t13);
              if (t13 < 0 || t13 >= t16)
                throw $.ioore(t13);
              t13 = v4[t13];
              if (t11 >= t8.length)
                throw $.ioore(t11);
              t8[t11] = t13;
              offset_custom += 12;
            }
          } else
            offset_custom = 0;
        } else {
          t1 = customAttribute.get$size();
          if (typeof t1 !== 'number')
            return this.setMeshBuffers$5$bailout(213, geometryGroup, hint, customAttributes, dispose, t1, v1, customAttribute, v3, v4, v2, value, il, chunk_faces3, chunk_faces4, obj_faces, i, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (t1 === 4) {
            t1 = customAttribute.get$boundTo();
            if (typeof t1 !== 'string')
              return this.setMeshBuffers$5$bailout(214, geometryGroup, hint, customAttributes, dispose, v1, customAttribute, v3, v4, t1, value, il, chunk_faces3, chunk_faces4, obj_faces, v2, i, f, fl, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (t1 === 'vertices') {
              fl = chunk_faces3.length;
              for (offset_custom = 0, f = 0; f < fl; ++f) {
                if (f >= chunk_faces3.length)
                  throw $.ioore(f);
                t1 = chunk_faces3[f];
                if (t1 !== (t1 | 0))
                  throw $.iae(t1);
                if (t1 < 0 || t1 >= obj_faces.length)
                  throw $.ioore(t1);
                face = obj_faces[t1];
                t1 = customAttribute.get$value();
                if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(215, face, offset_custom, t1, hint, customAttributes, geometryGroup, il, customAttribute, v4, value, chunk_faces3, chunk_faces4, f, obj_faces, i, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t3 = face.get$a();
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= t1.length)
                  throw $.ioore(t3);
                v1 = t1[t3];
                t3 = customAttribute.get$value();
                if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(216, face, offset_custom, hint, geometryGroup, v1, t3, il, customAttribute, v4, value, chunk_faces3, chunk_faces4, f, obj_faces, i, customAttributes, fl, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t4 = face.get$b();
                if (t4 !== (t4 | 0))
                  throw $.iae(t4);
                if (t4 < 0 || t4 >= t3.length)
                  throw $.ioore(t4);
                v2 = t3[t4];
                t4 = customAttribute.get$value();
                if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(217, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, t4, v4, value, il, chunk_faces3, chunk_faces4, f, obj_faces, i, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t5 = face.get$c();
                if (t5 !== (t5 | 0))
                  throw $.iae(t5);
                if (t5 < 0 || t5 >= t4.length)
                  throw $.ioore(t5);
                v3 = t4[t5];
                t5 = customAttribute.get$array();
                if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(218, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, v4, v3, value, t5, chunk_faces3, chunk_faces4, f, obj_faces, i, il, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = v1.get$x();
                if (offset_custom >= t5.length)
                  throw $.ioore(offset_custom);
                t5[offset_custom] = t6;
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(219, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, v4, v3, value, il, chunk_faces3, chunk_faces4, f, t6, obj_faces, i, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t7 = offset_custom + 1;
                t8 = v1.get$y();
                if (t7 >= t6.length)
                  throw $.ioore(t7);
                t6[t7] = t8;
                t8 = customAttribute.get$array();
                if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(220, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, v4, v3, value, il, chunk_faces3, chunk_faces4, f, obj_faces, i, t8, fl, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = offset_custom + 2;
                t9 = v1.get$z();
                if (t6 >= t8.length)
                  throw $.ioore(t6);
                t8[t6] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(221, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, v4, v3, value, il, chunk_faces3, chunk_faces4, f, obj_faces, i, dispose, fl, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t8 = offset_custom + 3;
                t10 = v1.get$w();
                if (t8 >= t9.length)
                  throw $.ioore(t8);
                t9[t8] = t10;
                t10 = offset_custom + 4;
                t8 = v2.get$x();
                if (t10 >= t9.length)
                  throw $.ioore(t10);
                t9[t10] = t8;
                t8 = customAttribute.get$array();
                if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(223, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, t8, v4, v3, value, il, chunk_faces3, chunk_faces4, f, obj_faces, i, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 5;
                t11 = v2.get$y();
                if (t9 >= t8.length)
                  throw $.ioore(t9);
                t8[t9] = t11;
                t11 = customAttribute.get$array();
                if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(224, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, v4, v3, value, il, chunk_faces3, t11, f, obj_faces, chunk_faces4, i, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t8 = offset_custom + 6;
                t12 = v2.get$z();
                if (t8 >= t11.length)
                  throw $.ioore(t8);
                t11[t8] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(225, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, v4, v3, value, il, chunk_faces3, chunk_faces4, f, obj_faces, i, t12, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t11 = offset_custom + 7;
                t13 = v2.get$w();
                if (t11 >= t12.length)
                  throw $.ioore(t11);
                t12[t11] = t13;
                t13 = offset_custom + 8;
                t11 = v3.get$x();
                if (t13 >= t12.length)
                  throw $.ioore(t13);
                t12[t13] = t11;
                t11 = customAttribute.get$array();
                if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(227, face, offset_custom, t11, hint, v1, geometryGroup, v2, customAttribute, v4, v3, value, il, chunk_faces3, chunk_faces4, f, obj_faces, i, customAttributes, fl, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 9;
                t14 = v3.get$y();
                if (t12 >= t11.length)
                  throw $.ioore(t12);
                t11[t12] = t14;
                t14 = customAttribute.get$array();
                if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(228, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, t14, v3, value, v4, chunk_faces3, chunk_faces4, f, obj_faces, i, il, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t11 = offset_custom + 10;
                t15 = v3.get$z();
                if (t11 >= t14.length)
                  throw $.ioore(t11);
                t14[t11] = t15;
                t15 = customAttribute.get$array();
                if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(229, face, offset_custom, hint, geometryGroup, v1, customAttributes, v2, customAttribute, v4, v3, value, t15, chunk_faces3, chunk_faces4, f, obj_faces, i, il, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t14 = offset_custom + 11;
                t16 = v3.get$w();
                if (t14 >= t15.length)
                  throw $.ioore(t14);
                t15[t14] = t16;
                offset_custom += 12;
              }
              fl = chunk_faces4.length;
              for (f = 0; f < fl; ++f) {
                if (f >= chunk_faces4.length)
                  throw $.ioore(f);
                t1 = chunk_faces4[f];
                if (t1 !== (t1 | 0))
                  throw $.iae(t1);
                if (t1 < 0 || t1 >= obj_faces.length)
                  throw $.ioore(t1);
                face = obj_faces[t1];
                t1 = customAttribute.get$value();
                if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(230, geometryGroup, fl, hint, customAttributes, offset_custom, face, t1, il, customAttribute, value, chunk_faces3, chunk_faces4, obj_faces, dispose, i, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t3 = face.get$a();
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= t1.length)
                  throw $.ioore(t3);
                v1 = t1[t3];
                t3 = customAttribute.get$value();
                if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(231, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, t3, il, value, chunk_faces3, chunk_faces4, obj_faces, i, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t4 = face.get$b();
                if (t4 !== (t4 | 0))
                  throw $.iae(t4);
                if (t4 < 0 || t4 >= t3.length)
                  throw $.ioore(t4);
                v2 = t3[t4];
                t4 = customAttribute.get$value();
                if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(232, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, t4, chunk_faces3, chunk_faces4, obj_faces, i, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t5 = face.get$c();
                if (t5 !== (t5 | 0))
                  throw $.iae(t5);
                if (t5 < 0 || t5 >= t4.length)
                  throw $.ioore(t5);
                v3 = t4[t5];
                t5 = customAttribute.get$value();
                if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(233, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, t5, obj_faces, f, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = face.get$d();
                if (t6 !== (t6 | 0))
                  throw $.iae(t6);
                if (t6 < 0 || t6 >= t5.length)
                  throw $.ioore(t6);
                v4 = t5[t6];
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(234, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, t6, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t7 = v1.get$x();
                if (offset_custom >= t6.length)
                  throw $.ioore(offset_custom);
                t6[offset_custom] = t7;
                t7 = customAttribute.get$array();
                if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(235, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t8 = offset_custom + 1;
                t9 = v1.get$y();
                if (t8 >= t7.length)
                  throw $.ioore(t8);
                t7[t8] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(236, t9, fl, hint, geometryGroup, offset_custom, face, customAttributes, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t7 = offset_custom + 2;
                t10 = v1.get$z();
                if (t7 >= t9.length)
                  throw $.ioore(t7);
                t9[t7] = t10;
                t10 = customAttribute.get$array();
                if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(237, geometryGroup, fl, hint, customAttributes, offset_custom, face, t10, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 3;
                t11 = v1.get$w();
                if (t9 >= t10.length)
                  throw $.ioore(t9);
                t10[t9] = t11;
                t11 = offset_custom + 4;
                t9 = v2.get$x();
                if (t11 >= t10.length)
                  throw $.ioore(t11);
                t10[t11] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(239, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, t9, v4, f, obj_faces, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t10 = offset_custom + 5;
                t12 = v2.get$y();
                if (t10 >= t9.length)
                  throw $.ioore(t10);
                t9[t10] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(240, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 6;
                t13 = v2.get$z();
                if (t9 >= t12.length)
                  throw $.ioore(t9);
                t12[t9] = t13;
                t13 = customAttribute.get$array();
                if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(241, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 7;
                t14 = v2.get$w();
                if (t12 >= t13.length)
                  throw $.ioore(t12);
                t13[t12] = t14;
                t14 = offset_custom + 8;
                t12 = v3.get$x();
                if (t14 >= t13.length)
                  throw $.ioore(t14);
                t13[t14] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(243, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, t12, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t13 = offset_custom + 9;
                t15 = v3.get$y();
                if (t13 >= t12.length)
                  throw $.ioore(t13);
                t12[t13] = t15;
                t15 = customAttribute.get$array();
                if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(244, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, t15, obj_faces, chunk_faces4, v4, f, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 10;
                t16 = v3.get$z();
                if (t12 >= t15.length)
                  throw $.ioore(t12);
                t15[t12] = t16;
                t16 = customAttribute.get$array();
                if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(245, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, t16, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t15 = offset_custom + 11;
                t17 = v3.get$w();
                if (t15 >= t16.length)
                  throw $.ioore(t15);
                t16[t15] = t17;
                t17 = offset_custom + 12;
                t15 = v4.get$x();
                if (t17 >= t16.length)
                  throw $.ioore(t17);
                t16[t17] = t15;
                t15 = customAttribute.get$array();
                if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(247, geometryGroup, fl, t15, hint, offset_custom, face, customAttributes, v1, customAttribute, il, v2, value, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t16 = offset_custom + 13;
                t18 = v4.get$y();
                if (t16 >= t15.length)
                  throw $.ioore(t16);
                t15[t16] = t18;
                t18 = customAttribute.get$array();
                if (typeof t18 !== 'object' || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(248, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, t18, v2, value, il, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t15 = offset_custom + 14;
                t19 = v4.get$z();
                if (t15 >= t18.length)
                  throw $.ioore(t15);
                t18[t15] = t19;
                t19 = customAttribute.get$array();
                if (typeof t19 !== 'object' || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(249, geometryGroup, fl, hint, customAttributes, offset_custom, face, dispose, v1, customAttribute, il, v2, value, t19, chunk_faces3, v3, chunk_faces4, obj_faces, v4, f, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t18 = offset_custom + 15;
                t20 = v4.get$w();
                if (t18 >= t19.length)
                  throw $.ioore(t18);
                t19[t18] = t20;
                offset_custom += 16;
              }
            } else if (t1 === 'faces') {
              fl = chunk_faces3.length;
              for (offset_custom = 0, f = 0; f < fl; ++f) {
                t1 = customAttribute.get$value();
                if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(251, chunk_faces4, hint, fl, i, face, customAttribute, t1, v4, offset_custom, f, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (f >= chunk_faces3.length)
                  throw $.ioore(f);
                t3 = chunk_faces3[f];
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= t1.length)
                  throw $.ioore(t3);
                value = t1[t3];
                t3 = customAttribute.get$array();
                if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(252, hint, customAttribute, fl, v4, offset_custom, value, chunk_faces3, chunk_faces4, t3, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t4 = value.get$x();
                if (offset_custom >= t3.length)
                  throw $.ioore(offset_custom);
                t3[offset_custom] = t4;
                t4 = customAttribute.get$array();
                if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(253, hint, customAttribute, fl, v4, offset_custom, value, chunk_faces3, chunk_faces4, t4, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t5 = offset_custom + 1;
                t6 = value.get$y();
                if (t5 >= t4.length)
                  throw $.ioore(t5);
                t4[t5] = t6;
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(254, hint, fl, customAttribute, v4, offset_custom, value, chunk_faces3, chunk_faces4, i, t6, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t4 = offset_custom + 2;
                t7 = value.get$z();
                if (t4 >= t6.length)
                  throw $.ioore(t4);
                t6[t4] = t7;
                t7 = customAttribute.get$array();
                if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(255, face, hint, customAttribute, fl, v4, offset_custom, value, chunk_faces3, chunk_faces4, i, f, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = offset_custom + 3;
                t8 = value.get$w();
                if (t6 >= t7.length)
                  throw $.ioore(t6);
                t7[t6] = t8;
                t8 = offset_custom + 4;
                t6 = value.get$x();
                if (t8 >= t7.length)
                  throw $.ioore(t8);
                t7[t8] = t6;
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(257, hint, customAttribute, fl, v4, t6, offset_custom, value, chunk_faces3, chunk_faces4, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t7 = offset_custom + 5;
                t9 = value.get$y();
                if (t7 >= t6.length)
                  throw $.ioore(t7);
                t6[t7] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(258, hint, customAttribute, fl, v4, offset_custom, value, chunk_faces3, chunk_faces4, t9, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = offset_custom + 6;
                t10 = value.get$z();
                if (t6 >= t9.length)
                  throw $.ioore(t6);
                t9[t6] = t10;
                t10 = customAttribute.get$array();
                if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(259, hint, customAttribute, fl, v4, offset_custom, value, chunk_faces3, chunk_faces4, i, t10, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 7;
                t11 = value.get$w();
                if (t9 >= t10.length)
                  throw $.ioore(t9);
                t10[t9] = t11;
                t11 = offset_custom + 8;
                t9 = value.get$x();
                if (t11 >= t10.length)
                  throw $.ioore(t11);
                t10[t11] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(261, hint, t9, customAttribute, fl, v4, offset_custom, value, chunk_faces3, chunk_faces4, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t10 = offset_custom + 9;
                t12 = value.get$y();
                if (t10 >= t9.length)
                  throw $.ioore(t10);
                t9[t10] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(262, hint, fl, customAttribute, v4, t12, offset_custom, value, chunk_faces3, chunk_faces4, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 10;
                t13 = value.get$z();
                if (t9 >= t12.length)
                  throw $.ioore(t9);
                t12[t9] = t13;
                t13 = customAttribute.get$array();
                if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(263, hint, customAttribute, fl, v4, offset_custom, value, chunk_faces3, chunk_faces4, t13, i, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 11;
                t14 = value.get$w();
                if (t12 >= t13.length)
                  throw $.ioore(t12);
                t13[t12] = t14;
                offset_custom += 12;
                v3 = value;
                v2 = v3;
                v1 = v2;
              }
              fl = chunk_faces4.length;
              for (f = 0; f < fl; ++f) {
                t1 = customAttribute.get$value();
                if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(264, chunk_faces4, fl, t1, i, offset_custom, f, hint, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (f >= chunk_faces4.length)
                  throw $.ioore(f);
                t3 = chunk_faces4[f];
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= t1.length)
                  throw $.ioore(t3);
                value = t1[t3];
                t3 = customAttribute.get$array();
                if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(265, chunk_faces4, fl, hint, i, offset_custom, value, f, t3, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t4 = value.get$x();
                if (offset_custom >= t3.length)
                  throw $.ioore(offset_custom);
                t3[offset_custom] = t4;
                t4 = customAttribute.get$array();
                if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(266, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, t4, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t5 = offset_custom + 1;
                t6 = value.get$y();
                if (t5 >= t4.length)
                  throw $.ioore(t5);
                t4[t5] = t6;
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(267, chunk_faces4, t6, fl, i, offset_custom, value, f, hint, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t4 = offset_custom + 2;
                t7 = value.get$z();
                if (t4 >= t6.length)
                  throw $.ioore(t4);
                t6[t4] = t7;
                t7 = customAttribute.get$array();
                if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(268, chunk_faces4, fl, hint, i, offset_custom, value, f, t7, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = offset_custom + 3;
                t8 = value.get$w();
                if (t6 >= t7.length)
                  throw $.ioore(t6);
                t7[t6] = t8;
                t8 = offset_custom + 4;
                t6 = value.get$x();
                if (t8 >= t7.length)
                  throw $.ioore(t8);
                t7[t8] = t6;
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(270, chunk_faces4, fl, hint, t6, offset_custom, value, f, customAttribute, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t7 = offset_custom + 5;
                t9 = value.get$y();
                if (t7 >= t6.length)
                  throw $.ioore(t7);
                t6[t7] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(271, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, t9, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = offset_custom + 6;
                t10 = value.get$z();
                if (t6 >= t9.length)
                  throw $.ioore(t6);
                t9[t6] = t10;
                t10 = customAttribute.get$array();
                if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(272, t10, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 7;
                t11 = value.get$w();
                if (t9 >= t10.length)
                  throw $.ioore(t9);
                t10[t9] = t11;
                t11 = offset_custom + 8;
                t9 = value.get$x();
                if (t11 >= t10.length)
                  throw $.ioore(t11);
                t10[t11] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(274, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, t9, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t10 = offset_custom + 9;
                t12 = value.get$y();
                if (t10 >= t9.length)
                  throw $.ioore(t10);
                t9[t10] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(275, chunk_faces4, t12, fl, i, offset_custom, value, f, hint, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 10;
                t13 = value.get$z();
                if (t9 >= t12.length)
                  throw $.ioore(t9);
                t12[t9] = t13;
                t13 = customAttribute.get$array();
                if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(276, chunk_faces4, fl, hint, i, offset_custom, value, f, t13, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 11;
                t14 = value.get$w();
                if (t12 >= t13.length)
                  throw $.ioore(t12);
                t13[t12] = t14;
                t14 = offset_custom + 12;
                t12 = value.get$x();
                if (t14 >= t13.length)
                  throw $.ioore(t14);
                t13[t14] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(278, chunk_faces4, fl, hint, t12, offset_custom, value, f, customAttribute, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t13 = offset_custom + 13;
                t15 = value.get$y();
                if (t13 >= t12.length)
                  throw $.ioore(t13);
                t12[t13] = t15;
                t15 = customAttribute.get$array();
                if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(279, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, t15, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 14;
                t16 = value.get$z();
                if (t12 >= t15.length)
                  throw $.ioore(t12);
                t15[t12] = t16;
                t16 = customAttribute.get$array();
                if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(280, t16, chunk_faces4, fl, hint, i, offset_custom, value, f, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t15 = offset_custom + 15;
                t17 = value.get$w();
                if (t15 >= t16.length)
                  throw $.ioore(t15);
                t16[t15] = t17;
                offset_custom += 16;
                v4 = value;
                v3 = v4;
                v2 = v3;
                v1 = v2;
              }
            } else if (t1 === 'faceVertices') {
              fl = chunk_faces3.length;
              for (offset_custom = 0, f = 0; f < fl; ++f) {
                t1 = customAttribute.get$value();
                if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(282, geometryGroup, hint, customAttributes, dispose, il, customAttribute, v4, f, chunk_faces4, obj_faces, chunk_faces3, i, fl, t1, offset_custom, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (f >= chunk_faces3.length)
                  throw $.ioore(f);
                t3 = chunk_faces3[f];
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= t1.length)
                  throw $.ioore(t3);
                value = t1[t3];
                if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(283, value, geometryGroup, hint, customAttributes, dispose, il, customAttribute, v4, f, chunk_faces4, obj_faces, chunk_faces3, i, fl, offset_custom, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t1 = value.length;
                if (0 >= t1)
                  throw $.ioore(0);
                v1 = value[0];
                if (1 >= t1)
                  throw $.ioore(1);
                v2 = value[1];
                if (2 >= t1)
                  throw $.ioore(2);
                v3 = value[2];
                t4 = customAttribute.get$array();
                if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(284, face, v1, hint, v2, customAttributes, v3, geometryGroup, t4, il, customAttribute, v4, dispose, f, chunk_faces4, obj_faces, chunk_faces3, i, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = v1.get$x();
                if (offset_custom >= t4.length)
                  throw $.ioore(offset_custom);
                t4[offset_custom] = t6;
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(285, face, v1, hint, v2, customAttributes, v3, geometryGroup, il, customAttribute, v4, t6, dispose, f, chunk_faces4, obj_faces, chunk_faces3, i, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t7 = offset_custom + 1;
                t8 = v1.get$y();
                if (t7 >= t6.length)
                  throw $.ioore(t7);
                t6[t7] = t8;
                t8 = customAttribute.get$array();
                if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(286, face, v1, hint, v2, customAttributes, v3, geometryGroup, il, customAttribute, v4, dispose, f, chunk_faces4, t8, chunk_faces3, i, obj_faces, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = offset_custom + 2;
                t9 = v1.get$z();
                if (t6 >= t8.length)
                  throw $.ioore(t6);
                t8[t6] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(287, face, v1, hint, v2, customAttributes, v3, geometryGroup, il, customAttribute, v4, dispose, f, chunk_faces4, obj_faces, chunk_faces3, i, t9, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t8 = offset_custom + 3;
                t10 = v1.get$w();
                if (t8 >= t9.length)
                  throw $.ioore(t8);
                t9[t8] = t10;
                t10 = offset_custom + 4;
                t8 = v2.get$x();
                if (t10 >= t9.length)
                  throw $.ioore(t10);
                t9[t10] = t8;
                t8 = customAttribute.get$array();
                if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(289, face, v1, hint, v2, t8, v3, geometryGroup, il, customAttribute, v4, customAttributes, f, chunk_faces4, obj_faces, chunk_faces3, i, dispose, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 5;
                t11 = v2.get$y();
                if (t9 >= t8.length)
                  throw $.ioore(t9);
                t8[t9] = t11;
                t11 = customAttribute.get$array();
                if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(290, face, v1, hint, v2, customAttributes, v3, geometryGroup, il, customAttribute, t11, v4, dispose, f, chunk_faces4, obj_faces, chunk_faces3, i, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t8 = offset_custom + 6;
                t12 = v2.get$z();
                if (t8 >= t11.length)
                  throw $.ioore(t8);
                t11[t8] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(291, face, v1, hint, v2, customAttributes, v3, geometryGroup, il, customAttribute, v4, dispose, t12, f, chunk_faces4, chunk_faces3, i, obj_faces, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t11 = offset_custom + 7;
                t13 = v2.get$w();
                if (t11 >= t12.length)
                  throw $.ioore(t11);
                t12[t11] = t13;
                t13 = offset_custom + 8;
                t11 = v3.get$x();
                if (t13 >= t12.length)
                  throw $.ioore(t13);
                t12[t13] = t11;
                t11 = customAttribute.get$array();
                if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(293, face, v1, hint, v2, customAttributes, v3, geometryGroup, il, customAttribute, v4, dispose, f, chunk_faces4, obj_faces, chunk_faces3, i, t11, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 9;
                t14 = v3.get$y();
                if (t12 >= t11.length)
                  throw $.ioore(t12);
                t11[t12] = t14;
                t14 = customAttribute.get$array();
                if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(294, face, v1, t14, v2, customAttributes, v3, geometryGroup, hint, customAttribute, v4, dispose, il, f, chunk_faces4, obj_faces, chunk_faces3, i, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t11 = offset_custom + 10;
                t15 = v3.get$z();
                if (t11 >= t14.length)
                  throw $.ioore(t11);
                t14[t11] = t15;
                t15 = customAttribute.get$array();
                if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(295, face, v1, hint, v2, customAttributes, v3, geometryGroup, t15, il, customAttribute, v4, dispose, f, chunk_faces4, obj_faces, chunk_faces3, i, fl, offset_custom, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t14 = offset_custom + 11;
                t16 = v3.get$w();
                if (t14 >= t15.length)
                  throw $.ioore(t14);
                t15[t14] = t16;
                offset_custom += 12;
              }
              fl = chunk_faces4.length;
              for (f = 0; f < fl; ++f) {
                t1 = customAttribute.get$value();
                if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(296, geometryGroup, hint, customAttributes, dispose, il, customAttribute, f, chunk_faces3, chunk_faces4, obj_faces, i, fl, t1, offset_custom, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (f >= chunk_faces4.length)
                  throw $.ioore(f);
                t3 = chunk_faces4[f];
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= t1.length)
                  throw $.ioore(t3);
                value = t1[t3];
                if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(297, geometryGroup, hint, customAttributes, dispose, il, customAttribute, f, chunk_faces3, chunk_faces4, obj_faces, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t1 = value.length;
                if (0 >= t1)
                  throw $.ioore(0);
                v1 = value[0];
                if (1 >= t1)
                  throw $.ioore(1);
                v2 = value[1];
                if (2 >= t1)
                  throw $.ioore(2);
                v3 = value[2];
                if (3 >= t1)
                  throw $.ioore(3);
                v4 = value[3];
                t4 = customAttribute.get$array();
                if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(298, v1, geometryGroup, v2, hint, v3, v4, t4, customAttribute, il, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = v1.get$x();
                if (offset_custom >= t4.length)
                  throw $.ioore(offset_custom);
                t4[offset_custom] = t6;
                t6 = customAttribute.get$array();
                if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(299, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, t6, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t7 = offset_custom + 1;
                t8 = v1.get$y();
                if (t7 >= t6.length)
                  throw $.ioore(t7);
                t6[t7] = t8;
                t8 = customAttribute.get$array();
                if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(300, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, t8, i, dispose, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t6 = offset_custom + 2;
                t9 = v1.get$z();
                if (t6 >= t8.length)
                  throw $.ioore(t6);
                t8[t6] = t9;
                t9 = customAttribute.get$array();
                if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(301, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, t9, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t8 = offset_custom + 3;
                t10 = v1.get$w();
                if (t8 >= t9.length)
                  throw $.ioore(t8);
                t9[t8] = t10;
                t10 = offset_custom + 4;
                t8 = v2.get$x();
                if (t10 >= t9.length)
                  throw $.ioore(t10);
                t9[t10] = t8;
                t8 = customAttribute.get$array();
                if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(303, v1, geometryGroup, v2, hint, v3, t8, v4, il, customAttribute, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t9 = offset_custom + 5;
                t11 = v2.get$y();
                if (t9 >= t8.length)
                  throw $.ioore(t9);
                t8[t9] = t11;
                t11 = customAttribute.get$array();
                if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(304, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, t11, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t8 = offset_custom + 6;
                t12 = v2.get$z();
                if (t8 >= t11.length)
                  throw $.ioore(t8);
                t11[t8] = t12;
                t12 = customAttribute.get$array();
                if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(305, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, customAttributes, f, chunk_faces3, t12, chunk_faces4, dispose, i, obj_faces, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t11 = offset_custom + 7;
                t13 = v2.get$w();
                if (t11 >= t12.length)
                  throw $.ioore(t11);
                t12[t11] = t13;
                t13 = offset_custom + 8;
                t11 = v3.get$x();
                if (t13 >= t12.length)
                  throw $.ioore(t13);
                t12[t13] = t11;
                t11 = customAttribute.get$array();
                if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(307, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, t11, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t12 = offset_custom + 9;
                t14 = v3.get$y();
                if (t12 >= t11.length)
                  throw $.ioore(t12);
                t11[t12] = t14;
                t14 = customAttribute.get$array();
                if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(308, v1, geometryGroup, v2, t14, v3, hint, v4, il, customAttribute, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t11 = offset_custom + 10;
                t15 = v3.get$z();
                if (t11 >= t14.length)
                  throw $.ioore(t11);
                t14[t11] = t15;
                t15 = customAttribute.get$array();
                if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(309, v1, geometryGroup, v2, hint, v3, v4, t15, customAttribute, il, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t14 = offset_custom + 11;
                t16 = v3.get$w();
                if (t14 >= t15.length)
                  throw $.ioore(t14);
                t15[t14] = t16;
                t16 = offset_custom + 12;
                t14 = v4.get$x();
                if (t16 >= t15.length)
                  throw $.ioore(t16);
                t15[t16] = t14;
                t14 = customAttribute.get$array();
                if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(311, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, t14, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t15 = offset_custom + 13;
                t17 = v4.get$y();
                if (t15 >= t14.length)
                  throw $.ioore(t15);
                t14[t15] = t17;
                t17 = customAttribute.get$array();
                if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(312, v1, geometryGroup, v2, hint, v3, v4, il, customAttribute, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, t17, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t14 = offset_custom + 14;
                t18 = v4.get$z();
                if (t14 >= t17.length)
                  throw $.ioore(t14);
                t17[t14] = t18;
                t18 = customAttribute.get$array();
                if (typeof t18 !== 'object' || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.is$JavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(313, v1, t18, v2, hint, v3, v4, il, customAttribute, geometryGroup, customAttributes, f, chunk_faces3, chunk_faces4, obj_faces, dispose, i, fl, offset_custom, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                t17 = offset_custom + 15;
                t19 = v4.get$w();
                if (t17 >= t18.length)
                  throw $.ioore(t17);
                t18[t17] = t19;
                offset_custom += 16;
              }
            } else
              offset_custom = 0;
          } else
            offset_custom = 0;
        }
      }
    }
    this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
    this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
    offset_customSrc = 0;
  }
  if (dispose) {
    geometryGroup.set$__inittedArrays(null);
    geometryGroup.set$__colorArray(null);
    geometryGroup.set$__normalArray(null);
    geometryGroup.set$__tangentArray(null);
    geometryGroup.set$__uvArray(null);
    geometryGroup.set$__uv2Array(null);
    geometryGroup.set$__faceArray(null);
    geometryGroup.set$__vertexArray(null);
    geometryGroup.set$__lineArray(null);
    geometryGroup.set$__skinVertexAArray(null);
    geometryGroup.set$__skinVertexBArray(null);
    geometryGroup.set$__skinIndexArray(null);
    geometryGroup.set$__skinWeightArray(null);
  }
},
 setMeshBuffers$5$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16, env17, env18, env19, env20, env21, env22, env23, env24, env25, env26, env27, env28, env29, env30, env31, env32, env33, env34, env35, env36, env37, env38, env39, env40, env41, env42, env43, env44, env45, env46, env47, env48, env49, env50, env51, env52, env53, env54, env55, env56, env57, env58, env59, env60, env61, env62, env63, env64, env65, env66, env67) {
  switch (state0) {
    case 1:
      var geometryGroup = env0;
      var object = env1;
      var hint = env2;
      var dispose = env3;
      var material = env4;
      normalType = env5;
      break;
    case 2:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      break;
    case 3:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      uvType = env5;
      normalType = env6;
      vertexColorType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      break;
    case 4:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      uvType = env5;
      normalType = env6;
      vertexColorType = env7;
      needsSmoothNormals = env8;
      uvArray = env9;
      vertexArray = env10;
      break;
    case 5:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      break;
    case 6:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      break;
    case 7:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      break;
    case 8:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      break;
    case 9:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      break;
    case 10:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      break;
    case 11:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      break;
    case 12:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      skinWeightArray = env5;
      normalType = env6;
      vertexColorType = env7;
      uvType = env8;
      needsSmoothNormals = env9;
      vertexArray = env10;
      uvArray = env11;
      uv2Array = env12;
      normalArray = env13;
      tangentArray = env14;
      colorArray = env15;
      skinVertexAArray = env16;
      skinVertexBArray = env17;
      skinIndexArray = env18;
      break;
    case 13:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      skinWeightArray = env5;
      morphTargetsArrays = env6;
      normalType = env7;
      vertexColorType = env8;
      uvType = env9;
      needsSmoothNormals = env10;
      vertexArray = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      skinVertexAArray = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      break;
    case 14:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      morphNormalsArrays = env5;
      skinWeightArray = env6;
      morphTargetsArrays = env7;
      normalType = env8;
      vertexColorType = env9;
      uvType = env10;
      needsSmoothNormals = env11;
      vertexArray = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      break;
    case 15:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      morphNormalsArrays = env5;
      skinWeightArray = env6;
      morphTargetsArrays = env7;
      customAttributes = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      vertexArray = env13;
      uvArray = env14;
      uv2Array = env15;
      normalArray = env16;
      tangentArray = env17;
      colorArray = env18;
      skinVertexAArray = env19;
      skinVertexBArray = env20;
      skinIndexArray = env21;
      break;
    case 16:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      morphNormalsArrays = env5;
      skinWeightArray = env6;
      morphTargetsArrays = env7;
      customAttributes = env8;
      faceArray = env9;
      normalType = env10;
      vertexColorType = env11;
      uvType = env12;
      needsSmoothNormals = env13;
      vertexArray = env14;
      uvArray = env15;
      uv2Array = env16;
      normalArray = env17;
      tangentArray = env18;
      colorArray = env19;
      skinVertexAArray = env20;
      skinVertexBArray = env21;
      skinIndexArray = env22;
      break;
    case 17:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      skinWeightArray = env18;
      morphTargetsArrays = env19;
      morphNormalsArrays = env20;
      customAttributes = env21;
      faceArray = env22;
      lineArray = env23;
      break;
    case 18:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      break;
    case 19:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      break;
    case 20:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      break;
    case 21:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      break;
    case 22:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      t22 = env35;
      break;
    case 23:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      obj_uvs = env35;
      t1 = env36;
      break;
    case 24:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      obj_uvs = env35;
      t1 = env36;
      break;
    case 25:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      normalType = env6;
      vertexColorType = env7;
      uvType = env8;
      needsSmoothNormals = env9;
      vertexArray = env10;
      uvArray = env11;
      uv2Array = env12;
      normalArray = env13;
      tangentArray = env14;
      colorArray = env15;
      skinVertexAArray = env16;
      skinVertexBArray = env17;
      skinIndexArray = env18;
      skinWeightArray = env19;
      morphTargetsArrays = env20;
      morphNormalsArrays = env21;
      customAttributes = env22;
      faceArray = env23;
      lineArray = env24;
      geometry = env25;
      dirtyVertices = env26;
      dirtyElements = env27;
      dirtyUvs = env28;
      dirtyNormals = env29;
      dirtyTangents = env30;
      dirtyColors = env31;
      dirtyMorphTargets = env32;
      vertices = env33;
      chunk_faces3 = env34;
      chunk_faces4 = env35;
      obj_faces = env36;
      obj_uvs = env37;
      break;
    case 26:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      normalType = env7;
      vertexColorType = env8;
      uvType = env9;
      needsSmoothNormals = env10;
      vertexArray = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      skinVertexAArray = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      skinWeightArray = env20;
      morphTargetsArrays = env21;
      morphNormalsArrays = env22;
      customAttributes = env23;
      faceArray = env24;
      lineArray = env25;
      geometry = env26;
      dirtyVertices = env27;
      dirtyElements = env28;
      dirtyUvs = env29;
      dirtyNormals = env30;
      dirtyTangents = env31;
      dirtyColors = env32;
      dirtyMorphTargets = env33;
      vertices = env34;
      chunk_faces3 = env35;
      chunk_faces4 = env36;
      obj_faces = env37;
      obj_uvs = env38;
      break;
    case 27:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      normalType = env8;
      vertexColorType = env9;
      uvType = env10;
      needsSmoothNormals = env11;
      vertexArray = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      morphNormalsArrays = env23;
      customAttributes = env24;
      faceArray = env25;
      lineArray = env26;
      geometry = env27;
      dirtyVertices = env28;
      dirtyElements = env29;
      dirtyUvs = env30;
      dirtyNormals = env31;
      dirtyTangents = env32;
      dirtyColors = env33;
      dirtyMorphTargets = env34;
      vertices = env35;
      chunk_faces3 = env36;
      chunk_faces4 = env37;
      obj_faces = env38;
      obj_uvs = env39;
      break;
    case 28:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      obj_skinWeights = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      vertexArray = env13;
      uvArray = env14;
      uv2Array = env15;
      normalArray = env16;
      tangentArray = env17;
      colorArray = env18;
      skinVertexAArray = env19;
      skinVertexBArray = env20;
      skinIndexArray = env21;
      skinWeightArray = env22;
      morphTargetsArrays = env23;
      morphNormalsArrays = env24;
      customAttributes = env25;
      faceArray = env26;
      lineArray = env27;
      geometry = env28;
      dirtyVertices = env29;
      dirtyElements = env30;
      dirtyUvs = env31;
      dirtyNormals = env32;
      dirtyTangents = env33;
      dirtyColors = env34;
      dirtyMorphTargets = env35;
      vertices = env36;
      chunk_faces3 = env37;
      chunk_faces4 = env38;
      obj_faces = env39;
      obj_uvs = env40;
      break;
    case 29:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      obj_skinWeights = env8;
      morphTargets = env9;
      normalType = env10;
      vertexColorType = env11;
      uvType = env12;
      needsSmoothNormals = env13;
      vertexArray = env14;
      uvArray = env15;
      uv2Array = env16;
      normalArray = env17;
      tangentArray = env18;
      colorArray = env19;
      skinVertexAArray = env20;
      skinVertexBArray = env21;
      skinIndexArray = env22;
      skinWeightArray = env23;
      morphTargetsArrays = env24;
      morphNormalsArrays = env25;
      customAttributes = env26;
      faceArray = env27;
      lineArray = env28;
      geometry = env29;
      dirtyVertices = env30;
      dirtyElements = env31;
      dirtyUvs = env32;
      dirtyNormals = env33;
      dirtyTangents = env34;
      dirtyColors = env35;
      dirtyMorphTargets = env36;
      vertices = env37;
      chunk_faces3 = env38;
      chunk_faces4 = env39;
      obj_faces = env40;
      obj_uvs = env41;
      break;
    case 30:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      obj_skinWeights = env8;
      morphTargets = env9;
      morphNormals = env10;
      normalType = env11;
      vertexColorType = env12;
      uvType = env13;
      needsSmoothNormals = env14;
      vertexArray = env15;
      uvArray = env16;
      uv2Array = env17;
      normalArray = env18;
      tangentArray = env19;
      colorArray = env20;
      skinVertexAArray = env21;
      skinVertexBArray = env22;
      skinIndexArray = env23;
      skinWeightArray = env24;
      morphTargetsArrays = env25;
      morphNormalsArrays = env26;
      customAttributes = env27;
      faceArray = env28;
      lineArray = env29;
      geometry = env30;
      dirtyVertices = env31;
      dirtyElements = env32;
      dirtyUvs = env33;
      dirtyNormals = env34;
      dirtyTangents = env35;
      dirtyColors = env36;
      dirtyMorphTargets = env37;
      vertices = env38;
      chunk_faces3 = env39;
      chunk_faces4 = env40;
      obj_faces = env41;
      obj_uvs = env42;
      break;
    case 31:
      geometryGroup = env0;
      t1 = env1;
      hint = env2;
      material = env3;
      dispose = env4;
      vk = env5;
      nka = env6;
      normalType = env7;
      faceVertexNormals = env8;
      uvType = env9;
      vertexColorType = env10;
      needsSmoothNormals = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      offset_morphTarget = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      skinVertexAArray = env20;
      morphTargetsArrays = env21;
      morphNormalsArrays = env22;
      customAttributes = env23;
      faceArray = env24;
      lineArray = env25;
      skinWeightArray = env26;
      geometry = env27;
      dirtyElements = env28;
      dirtyUvs = env29;
      dirtyNormals = env30;
      dirtyTangents = env31;
      dirtyColors = env32;
      chunk_faces3 = env33;
      chunk_faces4 = env34;
      obj_faces = env35;
      obj_uvs = env36;
      obj_uvs2 = env37;
      obj_skinVerticesA = env38;
      obj_skinVerticesB = env39;
      obj_skinIndices = env40;
      obj_skinWeights = env41;
      morphTargets = env42;
      morphNormals = env43;
      f = env44;
      v4 = env45;
      n1 = env46;
      n2 = env47;
      n3 = env48;
      n4 = env49;
      vkl = env50;
      fl = env51;
      chf = env52;
      face = env53;
      break;
    case 32:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      v1 = env3;
      material = env4;
      t1 = env5;
      vk = env6;
      nka = env7;
      normalType = env8;
      faceVertexNormals = env9;
      uvType = env10;
      vertexColorType = env11;
      needsSmoothNormals = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      offset_morphTarget = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinVertexAArray = env21;
      morphTargetsArrays = env22;
      morphNormalsArrays = env23;
      customAttributes = env24;
      faceArray = env25;
      lineArray = env26;
      skinWeightArray = env27;
      geometry = env28;
      dirtyElements = env29;
      dirtyUvs = env30;
      dirtyNormals = env31;
      dirtyTangents = env32;
      dirtyColors = env33;
      chunk_faces3 = env34;
      chunk_faces4 = env35;
      obj_faces = env36;
      obj_uvs = env37;
      obj_uvs2 = env38;
      obj_skinVerticesA = env39;
      obj_skinVerticesB = env40;
      obj_skinIndices = env41;
      obj_skinWeights = env42;
      morphTargets = env43;
      morphNormals = env44;
      f = env45;
      v4 = env46;
      n1 = env47;
      n2 = env48;
      n3 = env49;
      n4 = env50;
      vkl = env51;
      fl = env52;
      chf = env53;
      face = env54;
      break;
    case 33:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      v1 = env3;
      material = env4;
      v2 = env5;
      vk = env6;
      t1 = env7;
      nka = env8;
      normalType = env9;
      faceVertexNormals = env10;
      uvType = env11;
      vertexColorType = env12;
      needsSmoothNormals = env13;
      uvArray = env14;
      uv2Array = env15;
      normalArray = env16;
      tangentArray = env17;
      colorArray = env18;
      offset_morphTarget = env19;
      skinVertexBArray = env20;
      skinIndexArray = env21;
      skinVertexAArray = env22;
      morphTargetsArrays = env23;
      morphNormalsArrays = env24;
      customAttributes = env25;
      faceArray = env26;
      lineArray = env27;
      skinWeightArray = env28;
      geometry = env29;
      dirtyElements = env30;
      dirtyUvs = env31;
      dirtyNormals = env32;
      dirtyTangents = env33;
      dirtyColors = env34;
      chunk_faces3 = env35;
      chunk_faces4 = env36;
      obj_faces = env37;
      obj_uvs = env38;
      obj_uvs2 = env39;
      obj_skinVerticesA = env40;
      obj_skinVerticesB = env41;
      obj_skinIndices = env42;
      obj_skinWeights = env43;
      morphTargets = env44;
      morphNormals = env45;
      f = env46;
      v4 = env47;
      n1 = env48;
      n2 = env49;
      n3 = env50;
      n4 = env51;
      vkl = env52;
      fl = env53;
      chf = env54;
      face = env55;
      break;
    case 34:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      v1 = env3;
      material = env4;
      v2 = env5;
      vk = env6;
      nka = env7;
      v3 = env8;
      faceVertexNormals = env9;
      vka = env10;
      normalType = env11;
      vertexColorType = env12;
      needsSmoothNormals = env13;
      uvType = env14;
      uv2Array = env15;
      normalArray = env16;
      uvArray = env17;
      tangentArray = env18;
      offset_morphTarget = env19;
      skinVertexBArray = env20;
      colorArray = env21;
      skinVertexAArray = env22;
      morphTargetsArrays = env23;
      morphNormalsArrays = env24;
      customAttributes = env25;
      faceArray = env26;
      lineArray = env27;
      skinWeightArray = env28;
      geometry = env29;
      dirtyElements = env30;
      dirtyUvs = env31;
      dirtyNormals = env32;
      dirtyTangents = env33;
      dirtyColors = env34;
      skinIndexArray = env35;
      chunk_faces3 = env36;
      chunk_faces4 = env37;
      obj_faces = env38;
      obj_uvs = env39;
      obj_uvs2 = env40;
      obj_skinVerticesA = env41;
      obj_skinVerticesB = env42;
      obj_skinIndices = env43;
      obj_skinWeights = env44;
      morphTargets = env45;
      morphNormals = env46;
      f = env47;
      v4 = env48;
      n1 = env49;
      n2 = env50;
      n3 = env51;
      n4 = env52;
      vkl = env53;
      fl = env54;
      chf = env55;
      face = env56;
      break;
    case 35:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      v1 = env3;
      material = env4;
      v2 = env5;
      vk = env6;
      v3 = env7;
      normalType = env8;
      vka = env9;
      uvType = env10;
      vertexColorType = env11;
      needsSmoothNormals = env12;
      t5 = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      t6 = env18;
      offset_morphTarget = env19;
      skinVertexBArray = env20;
      skinVertexAArray = env21;
      morphTargetsArrays = env22;
      t7 = env23;
      morphNormalsArrays = env24;
      customAttributes = env25;
      faceArray = env26;
      skinWeightArray = env27;
      t8 = env28;
      lineArray = env29;
      skinIndexArray = env30;
      dirtyUvs = env31;
      dirtyElements = env32;
      t9 = env33;
      uvArray = env34;
      dirtyTangents = env35;
      chunk_faces3 = env36;
      chunk_faces4 = env37;
      t10 = env38;
      obj_faces = env39;
      dirtyNormals = env40;
      geometry = env41;
      t11 = env42;
      obj_uvs = env43;
      t12 = env44;
      dirtyColors = env45;
      obj_uvs2 = env46;
      obj_skinVerticesA = env47;
      obj_skinVerticesB = env48;
      obj_skinIndices = env49;
      obj_skinWeights = env50;
      morphTargets = env51;
      morphNormals = env52;
      f = env53;
      faceVertexNormals = env54;
      n1 = env55;
      n2 = env56;
      n3 = env57;
      nka = env58;
      v4 = env59;
      n4 = env60;
      vkl = env61;
      fl = env62;
      chf = env63;
      face = env64;
      break;
    case 36:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      n1 = env4;
      n2 = env5;
      n3 = env6;
      vk = env7;
      n4 = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      chf = env23;
      morphNormalsArrays = env24;
      face = env25;
      faceArray = env26;
      customAttributes = env27;
      fl = env28;
      t1 = env29;
      geometry = env30;
      dirtyUvs = env31;
      lineArray = env32;
      dirtyTangents = env33;
      dirtyNormals = env34;
      dirtyElements = env35;
      dirtyColors = env36;
      chunk_faces4 = env37;
      obj_faces = env38;
      chunk_faces3 = env39;
      obj_uvs = env40;
      nka = env41;
      faceVertexNormals = env42;
      offset_morphTarget = env43;
      obj_uvs2 = env44;
      obj_skinVerticesA = env45;
      obj_skinVerticesB = env46;
      obj_skinIndices = env47;
      obj_skinWeights = env48;
      morphTargets = env49;
      morphNormals = env50;
      f = env51;
      vkl = env52;
      break;
    case 37:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      n1 = env4;
      n2 = env5;
      n3 = env6;
      vk = env7;
      n4 = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      chf = env23;
      morphNormalsArrays = env24;
      face = env25;
      faceArray = env26;
      customAttributes = env27;
      fl = env28;
      lineArray = env29;
      geometry = env30;
      v1 = env31;
      dirtyElements = env32;
      dirtyUvs = env33;
      dirtyNormals = env34;
      t1 = env35;
      dirtyColors = env36;
      chunk_faces4 = env37;
      obj_faces = env38;
      chunk_faces3 = env39;
      obj_uvs = env40;
      nka = env41;
      faceVertexNormals = env42;
      dirtyTangents = env43;
      offset_morphTarget = env44;
      obj_uvs2 = env45;
      obj_skinVerticesA = env46;
      obj_skinVerticesB = env47;
      obj_skinIndices = env48;
      obj_skinWeights = env49;
      morphTargets = env50;
      morphNormals = env51;
      f = env52;
      vkl = env53;
      break;
    case 38:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      n1 = env4;
      n2 = env5;
      n3 = env6;
      vk = env7;
      n4 = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      chf = env23;
      morphNormalsArrays = env24;
      face = env25;
      faceArray = env26;
      customAttributes = env27;
      fl = env28;
      lineArray = env29;
      geometry = env30;
      v1 = env31;
      dirtyElements = env32;
      dirtyUvs = env33;
      dirtyNormals = env34;
      dirtyTangents = env35;
      dirtyColors = env36;
      v2 = env37;
      chunk_faces4 = env38;
      obj_faces = env39;
      t1 = env40;
      nka = env41;
      faceVertexNormals = env42;
      chunk_faces3 = env43;
      obj_uvs = env44;
      offset_morphTarget = env45;
      obj_uvs2 = env46;
      obj_skinVerticesA = env47;
      obj_skinVerticesB = env48;
      obj_skinIndices = env49;
      obj_skinWeights = env50;
      morphTargets = env51;
      morphNormals = env52;
      f = env53;
      vkl = env54;
      break;
    case 39:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      n1 = env4;
      n2 = env5;
      n3 = env6;
      vk = env7;
      n4 = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      chf = env23;
      morphNormalsArrays = env24;
      face = env25;
      faceArray = env26;
      customAttributes = env27;
      fl = env28;
      lineArray = env29;
      geometry = env30;
      v1 = env31;
      dirtyElements = env32;
      dirtyUvs = env33;
      dirtyNormals = env34;
      dirtyTangents = env35;
      dirtyColors = env36;
      v2 = env37;
      chunk_faces4 = env38;
      obj_faces = env39;
      obj_uvs = env40;
      nka = env41;
      v3 = env42;
      faceVertexNormals = env43;
      chunk_faces3 = env44;
      t1 = env45;
      offset_morphTarget = env46;
      obj_uvs2 = env47;
      obj_skinVerticesA = env48;
      obj_skinVerticesB = env49;
      obj_skinIndices = env50;
      obj_skinWeights = env51;
      morphTargets = env52;
      morphNormals = env53;
      f = env54;
      vkl = env55;
      break;
    case 40:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      n1 = env4;
      n2 = env5;
      n3 = env6;
      vk = env7;
      n4 = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      chf = env23;
      morphNormalsArrays = env24;
      face = env25;
      faceArray = env26;
      customAttributes = env27;
      fl = env28;
      lineArray = env29;
      geometry = env30;
      v1 = env31;
      dirtyElements = env32;
      dirtyUvs = env33;
      dirtyNormals = env34;
      dirtyTangents = env35;
      dirtyColors = env36;
      v2 = env37;
      chunk_faces4 = env38;
      obj_faces = env39;
      obj_uvs = env40;
      nka = env41;
      v3 = env42;
      faceVertexNormals = env43;
      chunk_faces3 = env44;
      v4 = env45;
      vka = env46;
      offset_morphTarget = env47;
      obj_uvs2 = env48;
      obj_skinVerticesA = env49;
      obj_skinVerticesB = env50;
      obj_skinIndices = env51;
      obj_skinWeights = env52;
      morphTargets = env53;
      morphNormals = env54;
      f = env55;
      vkl = env56;
      break;
    case 41:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      vk = env4;
      faceVertexNormals = env5;
      n1 = env6;
      n2 = env7;
      n3 = env8;
      n4 = env9;
      needsSmoothNormals = env10;
      nka = env11;
      vertexColorType = env12;
      uvArray = env13;
      uv2Array = env14;
      normalType = env15;
      tangentArray = env16;
      uvType = env17;
      normalArray = env18;
      skinVertexAArray = env19;
      skinVertexBArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      chf = env23;
      morphNormalsArrays = env24;
      face = env25;
      faceArray = env26;
      colorArray = env27;
      fl = env28;
      lineArray = env29;
      customAttributes = env30;
      v1 = env31;
      dirtyElements = env32;
      geometry = env33;
      dirtyNormals = env34;
      skinIndexArray = env35;
      dirtyUvs = env36;
      v2 = env37;
      obj_faces = env38;
      dirtyColors = env39;
      chunk_faces4 = env40;
      obj_uvs = env41;
      dirtyTangents = env42;
      v3 = env43;
      chunk_faces3 = env44;
      v4 = env45;
      vka = env46;
      offset_morphTarget = env47;
      t6 = env48;
      obj_skinVerticesA = env49;
      obj_uvs2 = env50;
      obj_skinVerticesB = env51;
      obj_skinIndices = env52;
      t7 = env53;
      morphTargets = env54;
      morphNormals = env55;
      t8 = env56;
      obj_skinWeights = env57;
      t9 = env58;
      t10 = env59;
      t11 = env60;
      t12 = env61;
      t13 = env62;
      t14 = env63;
      t15 = env64;
      f = env65;
      t16 = env66;
      vkl = env67;
      break;
    case 42:
      geometryGroup = env0;
      v1 = env1;
      v2 = env2;
      v3 = env3;
      v4 = env4;
      material = env5;
      dispose = env6;
      hint = env7;
      n1 = env8;
      n2 = env9;
      vk = env10;
      n3 = env11;
      n4 = env12;
      normalType = env13;
      vertexColorType = env14;
      uvType = env15;
      needsSmoothNormals = env16;
      uvArray = env17;
      uv2Array = env18;
      normalArray = env19;
      tangentArray = env20;
      colorArray = env21;
      skinVertexAArray = env22;
      skinVertexBArray = env23;
      skinIndexArray = env24;
      skinWeightArray = env25;
      fl = env26;
      morphTargetsArrays = env27;
      morphNormalsArrays = env28;
      customAttributes = env29;
      faceArray = env30;
      lineArray = env31;
      geometry = env32;
      dirtyElements = env33;
      dirtyUvs = env34;
      dirtyNormals = env35;
      dirtyTangents = env36;
      dirtyColors = env37;
      chunk_faces3 = env38;
      chunk_faces4 = env39;
      obj_faces = env40;
      vka = env41;
      nka = env42;
      chf = env43;
      faceVertexNormals = env44;
      obj_uvs = env45;
      t1 = env46;
      offset_morphTarget = env47;
      obj_uvs2 = env48;
      obj_skinVerticesA = env49;
      obj_skinVerticesB = env50;
      obj_skinIndices = env51;
      obj_skinWeights = env52;
      morphTargets = env53;
      morphNormals = env54;
      t2 = env55;
      f = env56;
      face = env57;
      vkl = env58;
      break;
    case 43:
      geometryGroup = env0;
      v1 = env1;
      v2 = env2;
      v3 = env3;
      v4 = env4;
      hint = env5;
      dispose = env6;
      material = env7;
      n1 = env8;
      n2 = env9;
      vk = env10;
      n3 = env11;
      n4 = env12;
      normalType = env13;
      vertexColorType = env14;
      uvType = env15;
      needsSmoothNormals = env16;
      uvArray = env17;
      uv2Array = env18;
      normalArray = env19;
      tangentArray = env20;
      colorArray = env21;
      skinVertexAArray = env22;
      skinVertexBArray = env23;
      skinIndexArray = env24;
      skinWeightArray = env25;
      fl = env26;
      morphNormalsArrays = env27;
      customAttributes = env28;
      morphTargetsArrays = env29;
      faceArray = env30;
      lineArray = env31;
      geometry = env32;
      dirtyElements = env33;
      dirtyUvs = env34;
      dirtyNormals = env35;
      dirtyTangents = env36;
      dirtyColors = env37;
      chunk_faces3 = env38;
      chunk_faces4 = env39;
      obj_faces = env40;
      vka = env41;
      nka = env42;
      chf = env43;
      faceVertexNormals = env44;
      obj_uvs = env45;
      offset_morphTarget = env46;
      t1 = env47;
      obj_skinVerticesA = env48;
      obj_uvs2 = env49;
      obj_skinVerticesB = env50;
      obj_skinIndices = env51;
      obj_skinWeights = env52;
      morphTargets = env53;
      morphNormals = env54;
      f = env55;
      face = env56;
      vkl = env57;
      t2 = env58;
      break;
    case 44:
      geometryGroup = env0;
      hint = env1;
      obj_uvs2 = env2;
      dispose = env3;
      fl = env4;
      face = env5;
      vertexColors = env6;
      normalType = env7;
      vertexColorType = env8;
      uvType = env9;
      needsSmoothNormals = env10;
      uvArray = env11;
      uv2Array = env12;
      f = env13;
      normalArray = env14;
      colorArray = env15;
      tangentArray = env16;
      v1 = env17;
      customAttributes = env18;
      v3 = env19;
      v4 = env20;
      offset_color = env21;
      faceArray = env22;
      dirtyElements = env23;
      dirtyUvs = env24;
      dirtyNormals = env25;
      lineArray = env26;
      dirtyTangents = env27;
      v2 = env28;
      chunk_faces3 = env29;
      geometry = env30;
      obj_faces = env31;
      chunk_faces4 = env32;
      obj_uvs = env33;
      break;
    case 45:
      geometryGroup = env0;
      hint = env1;
      offset_color = env2;
      obj_uvs2 = env3;
      dispose = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      v1 = env14;
      customAttributes = env15;
      v3 = env16;
      v4 = env17;
      face = env18;
      vertexColors = env19;
      lineArray = env20;
      dirtyElements = env21;
      faceArray = env22;
      dirtyNormals = env23;
      dirtyUvs = env24;
      v2 = env25;
      dirtyTangents = env26;
      chunk_faces3 = env27;
      geometry = env28;
      chunk_faces4 = env29;
      obj_faces = env30;
      obj_uvs = env31;
      f = env32;
      fl = env33;
      break;
    case 46:
      geometryGroup = env0;
      offset_tangent = env1;
      hint = env2;
      obj_uvs2 = env3;
      dispose = env4;
      normalType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      uvArray = env8;
      uv2Array = env9;
      normalArray = env10;
      tangentArray = env11;
      v1 = env12;
      customAttributes = env13;
      v3 = env14;
      v4 = env15;
      face = env16;
      vertexTangents = env17;
      lineArray = env18;
      v2 = env19;
      faceArray = env20;
      dirtyElements = env21;
      dirtyUvs = env22;
      dirtyNormals = env23;
      chunk_faces3 = env24;
      chunk_faces4 = env25;
      obj_faces = env26;
      fl = env27;
      obj_uvs = env28;
      f = env29;
      break;
    case 47:
      geometryGroup = env0;
      hint = env1;
      obj_uvs2 = env2;
      dispose = env3;
      f = env4;
      normalType = env5;
      uvType = env6;
      offset_tangent = env7;
      needsSmoothNormals = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      v1 = env13;
      customAttributes = env14;
      v3 = env15;
      v4 = env16;
      v2 = env17;
      faceArray = env18;
      lineArray = env19;
      dirtyUvs = env20;
      dirtyNormals = env21;
      dirtyElements = env22;
      chunk_faces3 = env23;
      chunk_faces4 = env24;
      obj_faces = env25;
      obj_uvs = env26;
      fl = env27;
      face = env28;
      vertexTangents = env29;
      break;
    case 48:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      obj_uvs2 = env3;
      dispose = env4;
      offset_normal = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      uvArray = env8;
      uv2Array = env9;
      normalArray = env10;
      v1 = env11;
      customAttributes = env12;
      v3 = env13;
      v4 = env14;
      v2 = env15;
      faceArray = env16;
      lineArray = env17;
      dirtyUvs = env18;
      dirtyElements = env19;
      fl = env20;
      chunk_faces3 = env21;
      chunk_faces4 = env22;
      face = env23;
      vertexNormals = env24;
      faceNormal = env25;
      obj_faces = env26;
      obj_uvs = env27;
      t1 = env28;
      vn = env29;
      break;
    case 49:
      geometryGroup = env0;
      hint = env1;
      offset_normal = env2;
      obj_uvs2 = env3;
      dispose = env4;
      uvType = env5;
      needsSmoothNormals = env6;
      uvArray = env7;
      uv2Array = env8;
      normalArray = env9;
      v1 = env10;
      customAttributes = env11;
      v3 = env12;
      fl = env13;
      lineArray = env14;
      faceArray = env15;
      face = env16;
      vertexNormals = env17;
      faceNormal = env18;
      dirtyElements = env19;
      dirtyUvs = env20;
      v2 = env21;
      t1 = env22;
      v4 = env23;
      chunk_faces4 = env24;
      obj_faces = env25;
      chunk_faces3 = env26;
      vn = env27;
      obj_uvs = env28;
      f = env29;
      break;
    case 50:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      v4 = env7;
      v2 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      t1 = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 51:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      v4 = env7;
      v2 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      t1 = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 52:
      f = env0;
      hint = env1;
      v1 = env2;
      customAttribute = env3;
      v3 = env4;
      v4 = env5;
      v2 = env6;
      value = env7;
      fl = env8;
      chunk_faces3 = env9;
      face = env10;
      offset_custom = env11;
      t1 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      break;
    case 53:
      f = env0;
      hint = env1;
      v1 = env2;
      customAttribute = env3;
      v3 = env4;
      v4 = env5;
      v2 = env6;
      value = env7;
      fl = env8;
      chunk_faces3 = env9;
      face = env10;
      offset_custom = env11;
      t1 = env12;
      chunk_faces4 = env13;
      t3 = env14;
      i = env15;
      obj_faces = env16;
      break;
    case 54:
      f = env0;
      hint = env1;
      v1 = env2;
      customAttribute = env3;
      v3 = env4;
      v4 = env5;
      v2 = env6;
      value = env7;
      fl = env8;
      chunk_faces3 = env9;
      face = env10;
      offset_custom = env11;
      obj_faces = env12;
      chunk_faces4 = env13;
      i = env14;
      t1 = env15;
      break;
    case 55:
      f = env0;
      hint = env1;
      v1 = env2;
      customAttribute = env3;
      v3 = env4;
      v4 = env5;
      v2 = env6;
      value = env7;
      fl = env8;
      chunk_faces3 = env9;
      face = env10;
      offset_custom = env11;
      obj_faces = env12;
      chunk_faces4 = env13;
      i = env14;
      t1 = env15;
      t6 = env16;
      t7 = env17;
      break;
    case 56:
      f = env0;
      t6 = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v3 = env5;
      v4 = env6;
      v2 = env7;
      value = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      offset_custom = env12;
      obj_faces = env13;
      chunk_faces4 = env14;
      i = env15;
      break;
    case 57:
      f = env0;
      t6 = env1;
      hint = env2;
      t9 = env3;
      t10 = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      value = env10;
      fl = env11;
      chunk_faces3 = env12;
      face = env13;
      offset_custom = env14;
      obj_faces = env15;
      chunk_faces4 = env16;
      i = env17;
      break;
    case 58:
      hint = env0;
      v1 = env1;
      f = env2;
      v3 = env3;
      v4 = env4;
      customAttribute = env5;
      value = env6;
      v2 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      i = env10;
      fl = env11;
      face = env12;
      offset_custom = env13;
      t1 = env14;
      break;
    case 59:
      hint = env0;
      v1 = env1;
      f = env2;
      v3 = env3;
      v4 = env4;
      customAttribute = env5;
      value = env6;
      v2 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      i = env10;
      fl = env11;
      face = env12;
      offset_custom = env13;
      t1 = env14;
      t3 = env15;
      break;
    case 60:
      t1 = env0;
      hint = env1;
      v1 = env2;
      f = env3;
      customAttribute = env4;
      v4 = env5;
      v2 = env6;
      value = env7;
      v3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      face = env13;
      offset_custom = env14;
      break;
    case 61:
      t1 = env0;
      hint = env1;
      t6 = env2;
      t7 = env3;
      v1 = env4;
      f = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      value = env9;
      v2 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      i = env13;
      fl = env14;
      face = env15;
      offset_custom = env16;
      break;
    case 62:
      hint = env0;
      v1 = env1;
      f = env2;
      v3 = env3;
      v4 = env4;
      customAttribute = env5;
      value = env6;
      v2 = env7;
      t6 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      face = env13;
      offset_custom = env14;
      break;
    case 63:
      hint = env0;
      v1 = env1;
      f = env2;
      v3 = env3;
      t6 = env4;
      customAttribute = env5;
      value = env6;
      t10 = env7;
      t9 = env8;
      chunk_faces4 = env9;
      v4 = env10;
      obj_faces = env11;
      v2 = env12;
      i = env13;
      fl = env14;
      face = env15;
      offset_custom = env16;
      break;
    case 64:
      hint = env0;
      v1 = env1;
      f = env2;
      customAttribute = env3;
      v4 = env4;
      v2 = env5;
      value = env6;
      v3 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      t9 = env10;
      i = env11;
      fl = env12;
      face = env13;
      offset_custom = env14;
      break;
    case 65:
      hint = env0;
      v1 = env1;
      f = env2;
      customAttribute = env3;
      v3 = env4;
      v4 = env5;
      value = env6;
      v2 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      t9 = env10;
      i = env11;
      t12 = env12;
      fl = env13;
      t13 = env14;
      face = env15;
      offset_custom = env16;
      break;
    case 66:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      t1 = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 67:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      fl = env10;
      chunk_faces3 = env11;
      t1 = env12;
      offset_custom = env13;
      obj_faces = env14;
      chunk_faces4 = env15;
      i = env16;
      il = env17;
      face = env18;
      break;
    case 68:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      fl = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      value = env14;
      t1 = env15;
      i = env16;
      obj_faces = env17;
      il = env18;
      face = env19;
      break;
    case 69:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      fl = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      value = env14;
      i = env15;
      t1 = env16;
      obj_faces = env17;
      il = env18;
      face = env19;
      break;
    case 70:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      fl = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      value = env14;
      i = env15;
      obj_faces = env16;
      t1 = env17;
      il = env18;
      face = env19;
      break;
    case 71:
      face = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      v2 = env6;
      customAttribute = env7;
      v3 = env8;
      v4 = env9;
      t1 = env10;
      offset_custom = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      fl = env14;
      obj_faces = env15;
      i = env16;
      il = env17;
      f = env18;
      break;
    case 72:
      face = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      offset_custom = env10;
      value = env11;
      chunk_faces4 = env12;
      t1 = env13;
      chunk_faces3 = env14;
      i = env15;
      fl = env16;
      obj_faces = env17;
      il = env18;
      f = env19;
      break;
    case 73:
      face = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      offset_custom = env10;
      value = env11;
      chunk_faces4 = env12;
      fl = env13;
      chunk_faces3 = env14;
      t1 = env15;
      i = env16;
      obj_faces = env17;
      il = env18;
      f = env19;
      break;
    case 74:
      face = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      v2 = env6;
      customAttribute = env7;
      v3 = env8;
      v4 = env9;
      offset_custom = env10;
      value = env11;
      chunk_faces4 = env12;
      fl = env13;
      chunk_faces3 = env14;
      i = env15;
      obj_faces = env16;
      t1 = env17;
      il = env18;
      f = env19;
      break;
    case 75:
      face = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      offset_custom = env10;
      value = env11;
      chunk_faces4 = env12;
      fl = env13;
      chunk_faces3 = env14;
      i = env15;
      obj_faces = env16;
      il = env17;
      t1 = env18;
      f = env19;
      break;
    case 76:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      v4 = env7;
      v2 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      f = env15;
      fl = env16;
      t1 = env17;
      face = env18;
      break;
    case 77:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      t1 = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 78:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      v4 = env7;
      value = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      i = env12;
      fl = env13;
      offset_custom = env14;
      face = env15;
      t1 = env16;
      break;
    case 79:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      v4 = env7;
      value = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      i = env12;
      fl = env13;
      offset_custom = env14;
      face = env15;
      v1 = env16;
      t1 = env17;
      break;
    case 80:
      v2 = env0;
      geometryGroup = env1;
      t1 = env2;
      hint = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      v4 = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      face = env17;
      v1 = env18;
      break;
    case 81:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      t1 = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      v4 = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 82:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      t1 = env9;
      v4 = env10;
      value = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 83:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      v4 = env9;
      value = env10;
      chunk_faces3 = env11;
      t1 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 84:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      v4 = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      t1 = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 85:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      v4 = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      face = env17;
      v1 = env18;
      t1 = env19;
      break;
    case 86:
      v2 = env0;
      geometryGroup = env1;
      t1 = env2;
      hint = env3;
      v3 = env4;
      customAttributes = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      v4 = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 87:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      value = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      offset_custom = env13;
      face = env14;
      t1 = env15;
      break;
    case 88:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      value = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      offset_custom = env13;
      face = env14;
      v1 = env15;
      t1 = env16;
      break;
    case 89:
      v2 = env0;
      geometryGroup = env1;
      t1 = env2;
      hint = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      value = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      i = env13;
      fl = env14;
      offset_custom = env15;
      face = env16;
      v1 = env17;
      break;
    case 90:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      t1 = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      value = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      face = env17;
      v1 = env18;
      break;
    case 91:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      t1 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 92:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      value = env10;
      t1 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 93:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      t1 = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 94:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      face = env17;
      t1 = env18;
      v1 = env19;
      break;
    case 95:
      v2 = env0;
      t1 = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      customAttributes = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 96:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      t1 = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 97:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      t1 = env10;
      value = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 98:
      v2 = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      v3 = env4;
      dispose = env5;
      v4 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      value = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      t1 = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      face = env18;
      v1 = env19;
      break;
    case 99:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      t1 = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 100:
      offset_custom = env0;
      f = env1;
      hint = env2;
      chunk_faces4 = env3;
      i = env4;
      face = env5;
      customAttribute = env6;
      v4 = env7;
      fl = env8;
      t1 = env9;
      chunk_faces3 = env10;
      break;
    case 101:
      f = env0;
      hint = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      offset_custom = env6;
      value = env7;
      t1 = env8;
      i = env9;
      chunk_faces4 = env10;
      face = env11;
      break;
    case 102:
      f = env0;
      hint = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      offset_custom = env6;
      value = env7;
      chunk_faces4 = env8;
      i = env9;
      t1 = env10;
      face = env11;
      break;
    case 103:
      f = env0;
      hint = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      offset_custom = env6;
      value = env7;
      chunk_faces4 = env8;
      i = env9;
      t1 = env10;
      face = env11;
      break;
    case 104:
      f = env0;
      hint = env1;
      t1 = env2;
      customAttribute = env3;
      v4 = env4;
      fl = env5;
      chunk_faces3 = env6;
      offset_custom = env7;
      value = env8;
      chunk_faces4 = env9;
      i = env10;
      face = env11;
      break;
    case 105:
      f = env0;
      hint = env1;
      customAttribute = env2;
      t1 = env3;
      v4 = env4;
      fl = env5;
      chunk_faces3 = env6;
      offset_custom = env7;
      value = env8;
      chunk_faces4 = env9;
      i = env10;
      face = env11;
      break;
    case 106:
      f = env0;
      hint = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      offset_custom = env6;
      value = env7;
      t1 = env8;
      chunk_faces4 = env9;
      i = env10;
      face = env11;
      break;
    case 107:
      chunk_faces4 = env0;
      fl = env1;
      t1 = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      hint = env6;
      customAttribute = env7;
      face = env8;
      break;
    case 108:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      t1 = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 109:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 110:
      chunk_faces4 = env0;
      t1 = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      hint = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 111:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      t1 = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 112:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 113:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      t1 = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      i = env8;
      face = env9;
      break;
    case 114:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 115:
      t1 = env0;
      chunk_faces4 = env1;
      fl = env2;
      hint = env3;
      i = env4;
      offset_custom = env5;
      value = env6;
      f = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 116:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      v4 = env7;
      v2 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      t1 = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 117:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      v4 = env7;
      v2 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      t1 = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 118:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      v2 = env8;
      value = env9;
      t1 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      il = env14;
      i = env15;
      v3 = env16;
      f = env17;
      fl = env18;
      face = env19;
      break;
    case 119:
      offset_custom = env0;
      face = env1;
      hint = env2;
      t1 = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      value = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      f = env11;
      i = env12;
      fl = env13;
      break;
    case 120:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      value = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      f = env11;
      i = env12;
      fl = env13;
      break;
    case 121:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      t3 = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      value = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      f = env12;
      i = env13;
      fl = env14;
      break;
    case 122:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      v4 = env7;
      value = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      f = env12;
      i = env13;
      fl = env14;
      break;
    case 123:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      t5 = env7;
      value = env8;
      v4 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      f = env13;
      i = env14;
      fl = env15;
      break;
    case 124:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      v4 = env7;
      value = env8;
      v3 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      f = env13;
      i = env14;
      fl = env15;
      break;
    case 125:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      v4 = env7;
      value = env8;
      v3 = env9;
      chunk_faces3 = env10;
      t7 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      f = env14;
      i = env15;
      fl = env16;
      break;
    case 126:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      v4 = env7;
      value = env8;
      v3 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      f = env13;
      i = env14;
      t7 = env15;
      fl = env16;
      break;
    case 127:
      t10 = env0;
      offset_custom = env1;
      face = env2;
      hint = env3;
      v1 = env4;
      customAttribute = env5;
      v2 = env6;
      pp = env7;
      v4 = env8;
      value = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      f = env14;
      i = env15;
      fl = env16;
      break;
    case 128:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      v4 = env6;
      t11 = env7;
      pp = env8;
      v3 = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      f = env14;
      i = env15;
      fl = env16;
      break;
    case 129:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      v4 = env7;
      value = env8;
      v3 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      t12 = env13;
      f = env14;
      i = env15;
      fl = env16;
      break;
    case 130:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      v4 = env6;
      pp = env7;
      v3 = env8;
      chunk_faces3 = env9;
      value = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      f = env13;
      i = env14;
      t13 = env15;
      fl = env16;
      break;
    case 131:
      offset_custom = env0;
      face = env1;
      hint = env2;
      t14 = env3;
      v1 = env4;
      customAttribute = env5;
      v2 = env6;
      pp = env7;
      v4 = env8;
      value = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      f = env14;
      i = env15;
      fl = env16;
      break;
    case 132:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      v4 = env7;
      t15 = env8;
      v3 = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      f = env14;
      i = env15;
      fl = env16;
      break;
    case 133:
      offset_custom = env0;
      face = env1;
      hint = env2;
      v1 = env3;
      customAttribute = env4;
      v2 = env5;
      pp = env6;
      v4 = env7;
      value = env8;
      v3 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      f = env13;
      i = env14;
      t16 = env15;
      fl = env16;
      break;
    case 134:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      fl = env8;
      value = env9;
      offset_custom = env10;
      face = env11;
      obj_faces = env12;
      t1 = env13;
      chunk_faces4 = env14;
      i = env15;
      chunk_faces3 = env16;
      break;
    case 135:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      fl = env8;
      value = env9;
      offset_custom = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v1 = env14;
      i = env15;
      chunk_faces3 = env16;
      break;
    case 136:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      fl = env8;
      value = env9;
      offset_custom = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v1 = env14;
      i = env15;
      t3 = env16;
      chunk_faces3 = env17;
      break;
    case 137:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      fl = env8;
      value = env9;
      offset_custom = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v1 = env14;
      i = env15;
      v2 = env16;
      chunk_faces3 = env17;
      break;
    case 138:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      fl = env8;
      value = env9;
      offset_custom = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v1 = env14;
      i = env15;
      v2 = env16;
      chunk_faces3 = env17;
      t5 = env18;
      break;
    case 139:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      fl = env8;
      value = env9;
      offset_custom = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v1 = env14;
      i = env15;
      v2 = env16;
      chunk_faces3 = env17;
      v3 = env18;
      break;
    case 140:
      geometryGroup = env0;
      f = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      fl = env8;
      value = env9;
      offset_custom = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v1 = env14;
      i = env15;
      v2 = env16;
      chunk_faces3 = env17;
      v3 = env18;
      t7 = env19;
      break;
    case 141:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      v2 = env17;
      chunk_faces3 = env18;
      v3 = env19;
      break;
    case 142:
      v4 = env0;
      f = env1;
      t9 = env2;
      hint = env3;
      customAttributes = env4;
      geometryGroup = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      v2 = env17;
      chunk_faces3 = env18;
      v3 = env19;
      dispose = env20;
      break;
    case 143:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      t9 = env9;
      fl = env10;
      value = env11;
      offset_custom = env12;
      face = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v1 = env16;
      i = env17;
      v2 = env18;
      chunk_faces3 = env19;
      v3 = env20;
      break;
    case 144:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      t12 = env14;
      v1 = env15;
      i = env16;
      obj_faces = env17;
      v2 = env18;
      chunk_faces3 = env19;
      v3 = env20;
      break;
    case 145:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      v2 = env17;
      chunk_faces3 = env18;
      t13 = env19;
      v3 = env20;
      break;
    case 146:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      t14 = env4;
      customAttributes = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      v2 = env17;
      chunk_faces3 = env18;
      v3 = env19;
      dispose = env20;
      break;
    case 147:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      t15 = env10;
      value = env11;
      offset_custom = env12;
      face = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v1 = env16;
      i = env17;
      v2 = env18;
      chunk_faces3 = env19;
      v3 = env20;
      break;
    case 148:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      t16 = env17;
      v2 = env18;
      chunk_faces3 = env19;
      v3 = env20;
      break;
    case 149:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      v2 = env17;
      chunk_faces3 = env18;
      v3 = env19;
      t17 = env20;
      break;
    case 150:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      t18 = env6;
      customAttribute = env7;
      pp = env8;
      il = env9;
      fl = env10;
      value = env11;
      offset_custom = env12;
      face = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v1 = env16;
      i = env17;
      v2 = env18;
      chunk_faces3 = env19;
      v3 = env20;
      break;
    case 151:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      t19 = env13;
      obj_faces = env14;
      chunk_faces4 = env15;
      v1 = env16;
      i = env17;
      v2 = env18;
      chunk_faces3 = env19;
      v3 = env20;
      break;
    case 152:
      v4 = env0;
      f = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      v2 = env17;
      chunk_faces3 = env18;
      t20 = env19;
      v3 = env20;
      break;
    case 153:
      v4 = env0;
      f = env1;
      hint = env2;
      t21 = env3;
      customAttributes = env4;
      geometryGroup = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      value = env10;
      offset_custom = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      v1 = env15;
      i = env16;
      v2 = env17;
      chunk_faces3 = env18;
      v3 = env19;
      dispose = env20;
      break;
    case 154:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      pp = env7;
      v4 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v2 = env14;
      i = env15;
      t1 = env16;
      f = env17;
      fl = env18;
      face = env19;
      break;
    case 155:
      fl = env0;
      hint = env1;
      t1 = env2;
      offset_custom = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 156:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 157:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      t3 = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      i = env10;
      f = env11;
      face = env12;
      break;
    case 158:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      t3 = env9;
      i = env10;
      f = env11;
      face = env12;
      break;
    case 159:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      t6 = env11;
      face = env12;
      break;
    case 160:
      t7 = env0;
      fl = env1;
      hint = env2;
      offset_custom = env3;
      value = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      i = env10;
      f = env11;
      face = env12;
      break;
    case 161:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      customAttribute = env4;
      pp = env5;
      t8 = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      i = env10;
      f = env11;
      face = env12;
      break;
    case 162:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      t9 = env9;
      i = env10;
      f = env11;
      face = env12;
      break;
    case 163:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      t10 = env11;
      face = env12;
      break;
    case 164:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      t11 = env3;
      value = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      i = env10;
      f = env11;
      face = env12;
      break;
    case 165:
      fl = env0;
      hint = env1;
      offset_custom = env2;
      value = env3;
      customAttribute = env4;
      pp = env5;
      v4 = env6;
      t12 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      i = env10;
      f = env11;
      face = env12;
      break;
    case 166:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      t1 = env4;
      offset_custom = env5;
      f = env6;
      pp = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 167:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 168:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      customAttribute = env8;
      t3 = env9;
      face = env10;
      break;
    case 169:
      chunk_faces4 = env0;
      t3 = env1;
      hint = env2;
      fl = env3;
      i = env4;
      offset_custom = env5;
      f = env6;
      pp = env7;
      value = env8;
      face = env9;
      customAttribute = env10;
      break;
    case 170:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      customAttribute = env8;
      t6 = env9;
      face = env10;
      break;
    case 171:
      chunk_faces4 = env0;
      hint = env1;
      t7 = env2;
      fl = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      customAttribute = env8;
      i = env9;
      face = env10;
      break;
    case 172:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      customAttribute = env8;
      t8 = env9;
      face = env10;
      break;
    case 173:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      t9 = env4;
      offset_custom = env5;
      f = env6;
      value = env7;
      pp = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 174:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      customAttribute = env8;
      face = env9;
      t10 = env10;
      break;
    case 175:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      t11 = env5;
      f = env6;
      value = env7;
      pp = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 176:
      chunk_faces4 = env0;
      t12 = env1;
      hint = env2;
      fl = env3;
      i = env4;
      offset_custom = env5;
      f = env6;
      pp = env7;
      value = env8;
      face = env9;
      customAttribute = env10;
      break;
    case 177:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      customAttribute = env8;
      t13 = env9;
      face = env10;
      break;
    case 178:
      chunk_faces4 = env0;
      hint = env1;
      t14 = env2;
      fl = env3;
      i = env4;
      offset_custom = env5;
      f = env6;
      value = env7;
      pp = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 179:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      value = env6;
      pp = env7;
      t15 = env8;
      face = env9;
      customAttribute = env10;
      break;
    case 180:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      t1 = env3;
      dispose = env4;
      v1 = env5;
      v2 = env6;
      v3 = env7;
      pp = env8;
      v4 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      customAttribute = env15;
      i = env16;
      f = env17;
      fl = env18;
      face = env19;
      break;
    case 181:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      t1 = env10;
      offset_custom = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      face = env16;
      break;
    case 182:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      face = env16;
      break;
    case 183:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      i = env15;
      obj_faces = env16;
      face = env17;
      break;
    case 184:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      i = env16;
      obj_faces = env17;
      face = env18;
      break;
    case 185:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      i = env16;
      v3 = env17;
      obj_faces = env18;
      face = env19;
      break;
    case 186:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      i = env16;
      v3 = env17;
      obj_faces = env18;
      t6 = env19;
      face = env20;
      break;
    case 187:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      face = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      v4 = env9;
      fl = env10;
      offset_custom = env11;
      chunk_faces3 = env12;
      value = env13;
      chunk_faces4 = env14;
      v1 = env15;
      v2 = env16;
      i = env17;
      v3 = env18;
      obj_faces = env19;
      t6 = env20;
      break;
    case 188:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      t9 = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      i = env16;
      v3 = env17;
      obj_faces = env18;
      il = env19;
      face = env20;
      break;
    case 189:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      t10 = env13;
      v1 = env14;
      chunk_faces4 = env15;
      v2 = env16;
      i = env17;
      v3 = env18;
      obj_faces = env19;
      face = env20;
      break;
    case 190:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      i = env16;
      v3 = env17;
      obj_faces = env18;
      t11 = env19;
      face = env20;
      break;
    case 191:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      t12 = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      v4 = env9;
      fl = env10;
      offset_custom = env11;
      chunk_faces3 = env12;
      value = env13;
      chunk_faces4 = env14;
      v1 = env15;
      v2 = env16;
      i = env17;
      v3 = env18;
      obj_faces = env19;
      face = env20;
      break;
    case 192:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      t13 = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      i = env16;
      v3 = env17;
      obj_faces = env18;
      fl = env19;
      face = env20;
      break;
    case 193:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      t14 = env16;
      v3 = env17;
      i = env18;
      obj_faces = env19;
      face = env20;
      break;
    case 194:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      offset_custom = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      v2 = env15;
      i = env16;
      v3 = env17;
      obj_faces = env18;
      t15 = env19;
      face = env20;
      break;
    case 195:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      pp = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      t1 = env13;
      offset_custom = env14;
      face = env15;
      break;
    case 196:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      pp = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      offset_custom = env13;
      value = env14;
      face = env15;
      break;
    case 197:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      pp = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      offset_custom = env13;
      value = env14;
      v1 = env15;
      face = env16;
      break;
    case 198:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      f = env5;
      customAttribute = env6;
      pp = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      i = env11;
      fl = env12;
      offset_custom = env13;
      value = env14;
      v1 = env15;
      v2 = env16;
      face = env17;
      break;
    case 199:
      face = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      f = env6;
      customAttribute = env7;
      pp = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      i = env12;
      fl = env13;
      offset_custom = env14;
      value = env15;
      v1 = env16;
      v2 = env17;
      v3 = env18;
      break;
    case 200:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      i = env13;
      fl = env14;
      offset_custom = env15;
      value = env16;
      v1 = env17;
      v2 = env18;
      v3 = env19;
      break;
    case 201:
      face = env0;
      v4 = env1;
      hint = env2;
      t7 = env3;
      customAttributes = env4;
      geometryGroup = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      pp = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 202:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      t7 = env9;
      customAttribute = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 203:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      t10 = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 204:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      i = env13;
      fl = env14;
      offset_custom = env15;
      value = env16;
      v1 = env17;
      t11 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 205:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      t12 = env5;
      dispose = env6;
      il = env7;
      f = env8;
      pp = env9;
      customAttribute = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 206:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      t13 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 207:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      i = env13;
      fl = env14;
      offset_custom = env15;
      t14 = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 208:
      t15 = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      face = env5;
      dispose = env6;
      il = env7;
      f = env8;
      pp = env9;
      customAttribute = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 209:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      t16 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      chunk_faces3 = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 210:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      t17 = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 211:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      dispose = env5;
      il = env6;
      f = env7;
      pp = env8;
      customAttribute = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      i = env13;
      fl = env14;
      offset_custom = env15;
      value = env16;
      t18 = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 212:
      face = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      t19 = env4;
      customAttributes = env5;
      il = env6;
      f = env7;
      customAttribute = env8;
      pp = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      fl = env15;
      offset_custom = env16;
      value = env17;
      v1 = env18;
      v2 = env19;
      v3 = env20;
      break;
    case 213:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      t1 = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 214:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      v4 = env7;
      t1 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      v2 = env14;
      i = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 215:
      face = env0;
      offset_custom = env1;
      t1 = env2;
      hint = env3;
      customAttributes = env4;
      geometryGroup = env5;
      il = env6;
      customAttribute = env7;
      v4 = env8;
      value = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      f = env12;
      obj_faces = env13;
      i = env14;
      dispose = env15;
      fl = env16;
      break;
    case 216:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      t1 = env5;
      il = env6;
      customAttribute = env7;
      v4 = env8;
      value = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      f = env12;
      obj_faces = env13;
      i = env14;
      customAttributes = env15;
      fl = env16;
      dispose = env17;
      break;
    case 217:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      t1 = env8;
      v4 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      dispose = env17;
      fl = env18;
      break;
    case 218:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      t1 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      il = env17;
      dispose = env18;
      fl = env19;
      break;
    case 219:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      t1 = env15;
      obj_faces = env16;
      i = env17;
      dispose = env18;
      fl = env19;
      break;
    case 220:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      t1 = env17;
      fl = env18;
      dispose = env19;
      break;
    case 221:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      dispose = env17;
      fl = env18;
      t1 = env19;
      break;
    case 222:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      t1 = env5;
      customAttributes = env6;
      v2 = env7;
      customAttribute = env8;
      v4 = env9;
      v3 = env10;
      value = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      f = env15;
      obj_faces = env16;
      i = env17;
      dispose = env18;
      fl = env19;
      break;
    case 223:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      t1 = env8;
      v4 = env9;
      v3 = env10;
      value = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      f = env15;
      obj_faces = env16;
      i = env17;
      dispose = env18;
      fl = env19;
      break;
    case 224:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      t1 = env13;
      f = env14;
      obj_faces = env15;
      chunk_faces4 = env16;
      i = env17;
      dispose = env18;
      fl = env19;
      break;
    case 225:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      t1 = env17;
      dispose = env18;
      fl = env19;
      break;
    case 226:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      dispose = env17;
      t1 = env18;
      fl = env19;
      break;
    case 227:
      face = env0;
      offset_custom = env1;
      t1 = env2;
      hint = env3;
      v1 = env4;
      geometryGroup = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      customAttributes = env17;
      fl = env18;
      dispose = env19;
      break;
    case 228:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      t1 = env8;
      v3 = env9;
      value = env10;
      v4 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      il = env17;
      dispose = env18;
      fl = env19;
      break;
    case 229:
      face = env0;
      offset_custom = env1;
      hint = env2;
      geometryGroup = env3;
      v1 = env4;
      customAttributes = env5;
      v2 = env6;
      customAttribute = env7;
      v4 = env8;
      v3 = env9;
      value = env10;
      t1 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      i = env16;
      il = env17;
      dispose = env18;
      fl = env19;
      break;
    case 230:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      t1 = env6;
      il = env7;
      customAttribute = env8;
      value = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      i = env14;
      f = env15;
      break;
    case 231:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      t1 = env9;
      il = env10;
      value = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      f = env16;
      break;
    case 232:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      t1 = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      i = env16;
      f = env17;
      break;
    case 233:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      t1 = env15;
      obj_faces = env16;
      f = env17;
      i = env18;
      break;
    case 234:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      t1 = env18;
      i = env19;
      break;
    case 235:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      i = env18;
      t1 = env19;
      break;
    case 236:
      t1 = env0;
      fl = env1;
      hint = env2;
      geometryGroup = env3;
      offset_custom = env4;
      face = env5;
      customAttributes = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      i = env18;
      dispose = env19;
      break;
    case 237:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      t1 = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      i = env18;
      dispose = env19;
      break;
    case 238:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      t1 = env11;
      value = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      v4 = env17;
      f = env18;
      i = env19;
      break;
    case 239:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      t1 = env15;
      v4 = env16;
      f = env17;
      obj_faces = env18;
      i = env19;
      break;
    case 240:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      i = env18;
      t1 = env19;
      break;
    case 241:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      i = env18;
      t1 = env19;
      break;
    case 242:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      t1 = env7;
      v1 = env8;
      customAttribute = env9;
      il = env10;
      v2 = env11;
      value = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      v4 = env17;
      f = env18;
      i = env19;
      break;
    case 243:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      t1 = env9;
      il = env10;
      v2 = env11;
      value = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      v4 = env17;
      f = env18;
      i = env19;
      break;
    case 244:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      t1 = env14;
      obj_faces = env15;
      chunk_faces4 = env16;
      v4 = env17;
      f = env18;
      i = env19;
      break;
    case 245:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      t1 = env18;
      i = env19;
      break;
    case 246:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      i = env18;
      t1 = env19;
      break;
    case 247:
      geometryGroup = env0;
      fl = env1;
      t1 = env2;
      hint = env3;
      offset_custom = env4;
      face = env5;
      customAttributes = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      chunk_faces3 = env12;
      v3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v4 = env16;
      f = env17;
      i = env18;
      dispose = env19;
      break;
    case 248:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      t1 = env9;
      v2 = env10;
      value = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      v4 = env17;
      f = env18;
      i = env19;
      break;
    case 249:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      offset_custom = env4;
      face = env5;
      dispose = env6;
      v1 = env7;
      customAttribute = env8;
      il = env9;
      v2 = env10;
      value = env11;
      t1 = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      v4 = env17;
      f = env18;
      i = env19;
      break;
    case 250:
      geometryGroup = env0;
      hint = env1;
      t1 = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      customAttribute = env6;
      v3 = env7;
      v4 = env8;
      v2 = env9;
      value = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      i = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 251:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      face = env4;
      customAttribute = env5;
      t1 = env6;
      v4 = env7;
      offset_custom = env8;
      f = env9;
      chunk_faces3 = env10;
      break;
    case 252:
      hint = env0;
      customAttribute = env1;
      fl = env2;
      v4 = env3;
      offset_custom = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      t1 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 253:
      hint = env0;
      customAttribute = env1;
      fl = env2;
      v4 = env3;
      offset_custom = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      t1 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 254:
      hint = env0;
      fl = env1;
      customAttribute = env2;
      v4 = env3;
      offset_custom = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      i = env8;
      t1 = env9;
      f = env10;
      face = env11;
      break;
    case 255:
      face = env0;
      hint = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      offset_custom = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      t1 = env11;
      break;
    case 256:
      hint = env0;
      t1 = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      offset_custom = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 257:
      hint = env0;
      customAttribute = env1;
      fl = env2;
      v4 = env3;
      t1 = env4;
      offset_custom = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 258:
      hint = env0;
      customAttribute = env1;
      fl = env2;
      v4 = env3;
      offset_custom = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      t1 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 259:
      hint = env0;
      customAttribute = env1;
      fl = env2;
      v4 = env3;
      offset_custom = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      i = env8;
      t1 = env9;
      f = env10;
      face = env11;
      break;
    case 260:
      hint = env0;
      customAttribute = env1;
      fl = env2;
      v4 = env3;
      offset_custom = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      i = env8;
      f = env9;
      t1 = env10;
      face = env11;
      break;
    case 261:
      hint = env0;
      t1 = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      offset_custom = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 262:
      hint = env0;
      fl = env1;
      customAttribute = env2;
      v4 = env3;
      t1 = env4;
      offset_custom = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 263:
      hint = env0;
      customAttribute = env1;
      fl = env2;
      v4 = env3;
      offset_custom = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      t1 = env8;
      i = env9;
      f = env10;
      face = env11;
      break;
    case 264:
      chunk_faces4 = env0;
      fl = env1;
      t1 = env2;
      i = env3;
      offset_custom = env4;
      f = env5;
      hint = env6;
      customAttribute = env7;
      face = env8;
      break;
    case 265:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      t1 = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 266:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 267:
      chunk_faces4 = env0;
      t1 = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      hint = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 268:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      t1 = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 269:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 270:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      t1 = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      i = env8;
      face = env9;
      break;
    case 271:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 272:
      t1 = env0;
      chunk_faces4 = env1;
      fl = env2;
      hint = env3;
      i = env4;
      offset_custom = env5;
      value = env6;
      f = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 273:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      t1 = env5;
      value = env6;
      customAttribute = env7;
      f = env8;
      face = env9;
      break;
    case 274:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 275:
      chunk_faces4 = env0;
      t1 = env1;
      fl = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      hint = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 276:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      t1 = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 277:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 278:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      t1 = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      i = env8;
      face = env9;
      break;
    case 279:
      chunk_faces4 = env0;
      fl = env1;
      hint = env2;
      i = env3;
      offset_custom = env4;
      value = env5;
      f = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 280:
      t1 = env0;
      chunk_faces4 = env1;
      fl = env2;
      hint = env3;
      i = env4;
      offset_custom = env5;
      value = env6;
      f = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 281:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      customAttribute = env5;
      v3 = env6;
      v4 = env7;
      v2 = env8;
      value = env9;
      il = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      i = env14;
      t1 = env15;
      f = env16;
      fl = env17;
      face = env18;
      break;
    case 282:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      customAttribute = env5;
      v4 = env6;
      f = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      chunk_faces3 = env10;
      i = env11;
      fl = env12;
      t1 = env13;
      offset_custom = env14;
      face = env15;
      break;
    case 283:
      value = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      il = env5;
      customAttribute = env6;
      v4 = env7;
      f = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      chunk_faces3 = env11;
      i = env12;
      fl = env13;
      offset_custom = env14;
      face = env15;
      break;
    case 284:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      t3 = env7;
      il = env8;
      customAttribute = env9;
      v4 = env10;
      dispose = env11;
      f = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      chunk_faces3 = env15;
      i = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 285:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      t3 = env10;
      dispose = env11;
      f = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      chunk_faces3 = env15;
      i = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 286:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      dispose = env10;
      f = env11;
      chunk_faces4 = env12;
      t3 = env13;
      chunk_faces3 = env14;
      i = env15;
      obj_faces = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 287:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      dispose = env10;
      f = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      chunk_faces3 = env14;
      i = env15;
      t3 = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 288:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      dispose = env10;
      f = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      chunk_faces3 = env14;
      i = env15;
      fl = env16;
      t3 = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 289:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      t3 = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      customAttributes = env10;
      f = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      chunk_faces3 = env14;
      i = env15;
      dispose = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 290:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      t3 = env9;
      v4 = env10;
      dispose = env11;
      f = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      chunk_faces3 = env15;
      i = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 291:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      dispose = env10;
      t3 = env11;
      f = env12;
      chunk_faces4 = env13;
      chunk_faces3 = env14;
      i = env15;
      obj_faces = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 292:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      dispose = env10;
      f = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      chunk_faces3 = env14;
      i = env15;
      t3 = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 293:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      dispose = env10;
      f = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      chunk_faces3 = env14;
      i = env15;
      t3 = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 294:
      face = env0;
      v1 = env1;
      t3 = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      dispose = env10;
      il = env11;
      f = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      chunk_faces3 = env15;
      i = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 295:
      face = env0;
      v1 = env1;
      hint = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      geometryGroup = env6;
      t3 = env7;
      il = env8;
      customAttribute = env9;
      v4 = env10;
      dispose = env11;
      f = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      chunk_faces3 = env15;
      i = env16;
      fl = env17;
      offset_custom = env18;
      value = env19;
      break;
    case 296:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      customAttribute = env5;
      f = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      i = env10;
      fl = env11;
      t1 = env12;
      offset_custom = env13;
      face = env14;
      break;
    case 297:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      il = env4;
      customAttribute = env5;
      f = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      i = env10;
      fl = env11;
      offset_custom = env12;
      value = env13;
      face = env14;
      break;
    case 298:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      t3 = env6;
      customAttribute = env7;
      il = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 299:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      t3 = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 300:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      t3 = env13;
      i = env14;
      dispose = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 301:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      i = env14;
      t3 = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 302:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      face = env5;
      v4 = env6;
      il = env7;
      customAttribute = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      t3 = env18;
      value = env19;
      break;
    case 303:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      t3 = env5;
      v4 = env6;
      il = env7;
      customAttribute = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 304:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      t3 = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 305:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      chunk_faces3 = env10;
      t3 = env11;
      chunk_faces4 = env12;
      dispose = env13;
      i = env14;
      obj_faces = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 306:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      i = env14;
      t3 = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 307:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      i = env14;
      fl = env15;
      t3 = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 308:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      t3 = env3;
      v3 = env4;
      hint = env5;
      v4 = env6;
      il = env7;
      customAttribute = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 309:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      t3 = env6;
      customAttribute = env7;
      il = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 310:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      t3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      i = env14;
      chunk_faces3 = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 311:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      t3 = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 312:
      v1 = env0;
      geometryGroup = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      customAttributes = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      dispose = env13;
      i = env14;
      t3 = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
    case 313:
      v1 = env0;
      t3 = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      il = env6;
      customAttribute = env7;
      geometryGroup = env8;
      customAttributes = env9;
      f = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      i = env15;
      fl = env16;
      offset_custom = env17;
      value = env18;
      face = env19;
      break;
  }
  switch (state0) {
    case 0:
      if (geometryGroup.get$__inittedArrays() !== true)
        return;
      var normalType = this.bufferGuessNormalType$1(material);
    case 1:
      state0 = 0;
      var vertexColorType = this.bufferGuessVertexColorType$1(material);
    case 2:
      state0 = 0;
      var uvType = this.bufferGuessUVType$1(material);
      var needsSmoothNormals = $.eqB(normalType, 2);
      var vertexArray = geometryGroup.get$__vertexArray();
    case 3:
      state0 = 0;
      var uvArray = geometryGroup.get$__uvArray();
    case 4:
      state0 = 0;
      var uv2Array = geometryGroup.get$__uv2Array();
    case 5:
      state0 = 0;
      var normalArray = geometryGroup.get$__normalArray();
    case 6:
      state0 = 0;
      var tangentArray = geometryGroup.get$__tangentArray();
    case 7:
      state0 = 0;
      var colorArray = geometryGroup.get$__colorArray();
    case 8:
      state0 = 0;
      var skinVertexAArray = geometryGroup.get$__skinVertexAArray();
    case 9:
      state0 = 0;
      var skinVertexBArray = geometryGroup.get$__skinVertexBArray();
    case 10:
      state0 = 0;
      var skinIndexArray = geometryGroup.get$__skinIndexArray();
    case 11:
      state0 = 0;
      var skinWeightArray = geometryGroup.get$__skinWeightArray();
    case 12:
      state0 = 0;
      var morphTargetsArrays = geometryGroup.get$__morphTargetsArrays();
    case 13:
      state0 = 0;
      var morphNormalsArrays = geometryGroup.get$__morphNormalsArrays();
    case 14:
      state0 = 0;
      var customAttributes = geometryGroup.get$__webglCustomAttributesList();
    case 15:
      state0 = 0;
      var faceArray = geometryGroup.get$__faceArray();
    case 16:
      state0 = 0;
      var lineArray = geometryGroup.get$__lineArray();
    case 17:
      state0 = 0;
      var geometry = object.get$webglgeometry();
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      var dirtyElements = geometry.get$elementsNeedUpdate();
      var dirtyUvs = geometry.get$uvsNeedUpdate();
      var dirtyNormals = geometry.get$normalsNeedUpdate();
      var dirtyTangents = geometry.get$tangentsNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      var dirtyMorphTargets = geometry.get$morphTargetsNeedUpdate();
      var vertices = geometry.get$vertices();
    case 18:
      state0 = 0;
      var chunk_faces3 = geometryGroup.get$faces3();
    case 19:
      state0 = 0;
      var chunk_faces4 = geometryGroup.get$faces4();
    case 20:
      state0 = 0;
      var obj_faces = geometry.get$faces();
    case 21:
      state0 = 0;
      var t22 = geometry.get$faceVertexUvs();
    case 22:
      state0 = 0;
      var obj_uvs = $.index(t22, 0);
      var t1 = $.get$length(geometry.get$faceVertexUvs());
    case 23:
      state0 = 0;
    case 24:
      if (state0 === 24 || state0 === 0 && $.gtB(t1, 1))
        switch (state0) {
          case 0:
            t1 = geometry.get$faceVertexUvs();
          case 24:
            state0 = 0;
            var obj_uvs2 = $.index(t1, 1);
        }
      else
        obj_uvs2 = null;
      geometry.get$colors();
      var obj_skinVerticesA = geometry.get$skinVerticesA();
    case 25:
      state0 = 0;
      var obj_skinVerticesB = geometry.get$skinVerticesB();
    case 26:
      state0 = 0;
      var obj_skinIndices = geometry.get$skinIndices();
    case 27:
      state0 = 0;
      var obj_skinWeights = geometry.get$skinWeights();
    case 28:
      state0 = 0;
      var morphTargets = geometry.get$morphTargets();
    case 29:
      state0 = 0;
      var morphNormals = geometry.get$morphNormals();
    case 30:
      state0 = 0;
      if (dirtyVertices === true) {
        var fl = $.get$length(chunk_faces3);
        for (var offset = 0, f = 0, face = null, v1 = null, v2 = null, v3 = null; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces3, f));
          v1 = $.index(vertices, face.get$a());
          v2 = $.index(vertices, face.get$b());
          v3 = $.index(vertices, face.get$c());
          $.indexSet(vertexArray, offset, v1.get$x());
          $.indexSet(vertexArray, offset + 1, v1.get$y());
          $.indexSet(vertexArray, offset + 2, v1.get$z());
          $.indexSet(vertexArray, offset + 3, v2.get$x());
          $.indexSet(vertexArray, offset + 4, v2.get$y());
          $.indexSet(vertexArray, offset + 5, v2.get$z());
          $.indexSet(vertexArray, offset + 6, v3.get$x());
          $.indexSet(vertexArray, offset + 7, v3.get$y());
          $.indexSet(vertexArray, offset + 8, v3.get$z());
          offset += 9;
        }
        fl = $.get$length(chunk_faces4);
        for (var f = 0, v4 = null; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces4, f));
          v1 = $.index(vertices, face.get$a());
          v2 = $.index(vertices, face.get$b());
          v3 = $.index(vertices, face.get$c());
          v4 = $.index(vertices, face.get$d());
          $.indexSet(vertexArray, offset, v1.get$x());
          $.indexSet(vertexArray, offset + 1, v1.get$y());
          $.indexSet(vertexArray, offset + 2, v1.get$z());
          $.indexSet(vertexArray, offset + 3, v2.get$x());
          $.indexSet(vertexArray, offset + 4, v2.get$y());
          $.indexSet(vertexArray, offset + 5, v2.get$z());
          $.indexSet(vertexArray, offset + 6, v3.get$x());
          $.indexSet(vertexArray, offset + 7, v3.get$y());
          $.indexSet(vertexArray, offset + 8, v3.get$z());
          $.indexSet(vertexArray, offset + 9, v4.get$x());
          $.indexSet(vertexArray, offset + 10, v4.get$y());
          $.indexSet(vertexArray, offset + 11, v4.get$z());
          offset += 12;
        }
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      } else {
        f = null;
        fl = null;
        face = null;
        v1 = null;
        v2 = null;
        v3 = null;
        v4 = null;
      }
    default:
      if (state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 33 || state0 === 32 || state0 === 31 || state0 === 0 && dirtyMorphTargets === true)
        switch (state0) {
          case 0:
            var vkl = $.get$length(morphTargets);
            var vk = 0;
            var vka = null;
            var nka = null;
            var chf = null;
            var faceVertexNormals = null;
            var offset_morphTarget = 0;
            var n1 = null;
            var n2 = null;
            var n3 = null;
            var n4 = null;
          default:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(vk, vkl))
                      break L0;
                    fl = $.get$length(chunk_faces3);
                    offset_morphTarget = 0;
                    f = 0;
                  default:
                    L1:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.ltB(f, fl))
                              break L1;
                            chf = $.index(chunk_faces3, f);
                            face = $.index(obj_faces, chf);
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 31:
                            state0 = 0;
                            v1 = $.index(t1, face.get$a());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 32:
                            state0 = 0;
                            v2 = $.index(t1, face.get$b());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 33:
                            state0 = 0;
                            v3 = $.index(t1, face.get$c());
                            vka = $.index(morphTargetsArrays, vk);
                          case 34:
                            state0 = 0;
                            $.indexSet(vka, offset_morphTarget, v1.get$x());
                            var t5 = offset_morphTarget + 1;
                            $.indexSet(vka, t5, v1.get$y());
                            var t6 = offset_morphTarget + 2;
                            $.indexSet(vka, t6, v1.get$z());
                            var t7 = offset_morphTarget + 3;
                            $.indexSet(vka, t7, v2.get$x());
                            var t8 = offset_morphTarget + 4;
                            $.indexSet(vka, t8, v2.get$y());
                            var t9 = offset_morphTarget + 5;
                            $.indexSet(vka, t9, v2.get$z());
                            var t10 = offset_morphTarget + 6;
                            $.indexSet(vka, t10, v3.get$x());
                            var t11 = offset_morphTarget + 7;
                            $.indexSet(vka, t11, v3.get$y());
                            var t12 = offset_morphTarget + 8;
                            $.indexSet(vka, t12, v3.get$z());
                          case 35:
                            if (state0 === 35 || state0 === 0 && material.get$morphNormals() === true)
                              switch (state0) {
                                case 0:
                                  if (needsSmoothNormals) {
                                    faceVertexNormals = $.index($.index(morphNormals, vk).get$vertexNormals(), chf);
                                    n1 = faceVertexNormals.get$a();
                                    n2 = faceVertexNormals.get$b();
                                    n3 = faceVertexNormals.get$c();
                                  } else {
                                    n1 = $.index($.index(morphNormals, vk).get$faceNormals(), chf);
                                    n3 = n1;
                                    n2 = n3;
                                  }
                                  nka = $.index(morphNormalsArrays, vk);
                                case 35:
                                  state0 = 0;
                                  $.indexSet(nka, offset_morphTarget, n1.get$x());
                                  $.indexSet(nka, t5, n1.get$y());
                                  $.indexSet(nka, t6, n1.get$z());
                                  $.indexSet(nka, t7, n2.get$x());
                                  $.indexSet(nka, t8, n2.get$y());
                                  $.indexSet(nka, t9, n2.get$z());
                                  $.indexSet(nka, t10, n3.get$x());
                                  $.indexSet(nka, t11, n3.get$y());
                                  $.indexSet(nka, t12, n3.get$z());
                              }
                            offset_morphTarget += 9;
                            ++f;
                        }
                    fl = $.get$length(chunk_faces4);
                    f = 0;
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                  case 41:
                    L2:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.ltB(f, fl))
                              break L2;
                            chf = $.index(chunk_faces4, f);
                            face = $.index(obj_faces, chf);
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 36:
                            state0 = 0;
                            v1 = $.index(t1, face.get$a());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 37:
                            state0 = 0;
                            v2 = $.index(t1, face.get$b());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 38:
                            state0 = 0;
                            v3 = $.index(t1, face.get$c());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 39:
                            state0 = 0;
                            v4 = $.index(t1, face.get$d());
                            vka = $.index(morphTargetsArrays, vk);
                          case 40:
                            state0 = 0;
                            $.indexSet(vka, offset_morphTarget, v1.get$x());
                            t6 = offset_morphTarget + 1;
                            $.indexSet(vka, t6, v1.get$y());
                            t7 = offset_morphTarget + 2;
                            $.indexSet(vka, t7, v1.get$z());
                            t8 = offset_morphTarget + 3;
                            $.indexSet(vka, t8, v2.get$x());
                            t9 = offset_morphTarget + 4;
                            $.indexSet(vka, t9, v2.get$y());
                            t10 = offset_morphTarget + 5;
                            $.indexSet(vka, t10, v2.get$z());
                            t11 = offset_morphTarget + 6;
                            $.indexSet(vka, t11, v3.get$x());
                            t12 = offset_morphTarget + 7;
                            $.indexSet(vka, t12, v3.get$y());
                            var t13 = offset_morphTarget + 8;
                            $.indexSet(vka, t13, v3.get$z());
                            var t14 = offset_morphTarget + 9;
                            $.indexSet(vka, t14, v4.get$x());
                            var t15 = offset_morphTarget + 10;
                            $.indexSet(vka, t15, v4.get$y());
                            var t16 = offset_morphTarget + 11;
                            $.indexSet(vka, t16, v4.get$z());
                          case 41:
                            if (state0 === 41 || state0 === 0 && material.get$morphNormals() === true)
                              switch (state0) {
                                case 0:
                                  if (needsSmoothNormals) {
                                    faceVertexNormals = $.index($.index(morphNormals, vk).get$vertexNormals(), chf);
                                    n1 = faceVertexNormals.get$a();
                                    n2 = faceVertexNormals.get$b();
                                    n3 = faceVertexNormals.get$c();
                                    n4 = faceVertexNormals.get$d();
                                  } else {
                                    n1 = $.index($.index(morphNormals, vk).get$faceNormals(), chf);
                                    n4 = n1;
                                    n3 = n4;
                                    n2 = n3;
                                  }
                                  nka = $.index(morphNormalsArrays, vk);
                                case 41:
                                  state0 = 0;
                                  $.indexSet(nka, offset_morphTarget, n1.get$x());
                                  $.indexSet(nka, t6, n1.get$y());
                                  $.indexSet(nka, t7, n1.get$z());
                                  $.indexSet(nka, t8, n2.get$x());
                                  $.indexSet(nka, t9, n2.get$y());
                                  $.indexSet(nka, t10, n2.get$z());
                                  $.indexSet(nka, t11, n3.get$x());
                                  $.indexSet(nka, t12, n3.get$y());
                                  $.indexSet(nka, t13, n3.get$z());
                                  $.indexSet(nka, t14, n4.get$x());
                                  $.indexSet(nka, t15, n4.get$y());
                                  $.indexSet(nka, t16, n4.get$z());
                              }
                            offset_morphTarget += 12;
                            ++f;
                        }
                    t1 = this._gl;
                    var t2 = geometryGroup.get$__webglMorphTargetsBuffers();
                  case 42:
                    state0 = 0;
                    t1.bindBuffer$2(34962, $.index(t2, vk));
                    this._gl.bufferData$3(34962, $.index(morphTargetsArrays, vk), hint);
                  case 43:
                    if (state0 === 43 || state0 === 0 && material.get$morphNormals() === true)
                      switch (state0) {
                        case 0:
                          t1 = this._gl;
                          t2 = geometryGroup.get$__webglMorphNormalsBuffers();
                        case 43:
                          state0 = 0;
                          t1.bindBuffer$2(34962, $.index(t2, vk));
                          this._gl.bufferData$3(34962, $.index(morphNormalsArrays, vk), hint);
                      }
                    ++vk;
                }
        }
      if ($.get$isEmpty(obj_skinWeights) !== true) {
        fl = $.get$length(chunk_faces3);
        for (var sa2 = null, sa3 = null, sb1 = null, sb2 = null, sb3 = null, offset_skin = 0, f = 0, sw1 = null, sw2 = null, sw3 = null, si1 = null, si2 = null, si3 = null, sa1 = null; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces3, f));
          sw1 = $.index(obj_skinWeights, face.get$a());
          sw2 = $.index(obj_skinWeights, face.get$b());
          sw3 = $.index(obj_skinWeights, face.get$c());
          $.indexSet(skinWeightArray, offset_skin, sw1.get$x());
          t1 = offset_skin + 1;
          $.indexSet(skinWeightArray, t1, sw1.get$y());
          t2 = offset_skin + 2;
          $.indexSet(skinWeightArray, t2, sw1.get$z());
          var t3 = offset_skin + 3;
          $.indexSet(skinWeightArray, t3, sw1.get$w());
          var t4 = offset_skin + 4;
          $.indexSet(skinWeightArray, t4, sw2.get$x());
          t5 = offset_skin + 5;
          $.indexSet(skinWeightArray, t5, sw2.get$y());
          t6 = offset_skin + 6;
          $.indexSet(skinWeightArray, t6, sw2.get$z());
          t7 = offset_skin + 7;
          $.indexSet(skinWeightArray, t7, sw2.get$w());
          t8 = offset_skin + 8;
          $.indexSet(skinWeightArray, t8, sw3.get$x());
          t9 = offset_skin + 9;
          $.indexSet(skinWeightArray, t9, sw3.get$y());
          t10 = offset_skin + 10;
          $.indexSet(skinWeightArray, t10, sw3.get$z());
          t11 = offset_skin + 11;
          $.indexSet(skinWeightArray, t11, sw3.get$w());
          si1 = $.index(obj_skinIndices, face.get$a());
          si2 = $.index(obj_skinIndices, face.get$b());
          si3 = $.index(obj_skinIndices, face.get$c());
          $.indexSet(skinIndexArray, offset_skin, si1.get$x());
          $.indexSet(skinIndexArray, t1, si1.get$y());
          $.indexSet(skinIndexArray, t2, si1.get$z());
          $.indexSet(skinIndexArray, t3, si1.get$w());
          $.indexSet(skinIndexArray, t4, si2.get$x());
          $.indexSet(skinIndexArray, t5, si2.get$y());
          $.indexSet(skinIndexArray, t6, si2.get$z());
          $.indexSet(skinIndexArray, t7, si2.get$w());
          $.indexSet(skinIndexArray, t8, si3.get$x());
          $.indexSet(skinIndexArray, t9, si3.get$y());
          $.indexSet(skinIndexArray, t10, si3.get$z());
          $.indexSet(skinIndexArray, t11, si3.get$w());
          sa1 = $.index(obj_skinVerticesA, face.get$a());
          sa2 = $.index(obj_skinVerticesA, face.get$b());
          sa3 = $.index(obj_skinVerticesA, face.get$c());
          $.indexSet(skinVertexAArray, offset_skin, sa1.get$x());
          $.indexSet(skinVertexAArray, t1, sa1.get$y());
          $.indexSet(skinVertexAArray, t2, sa1.get$z());
          $.indexSet(skinVertexAArray, t3, 1);
          $.indexSet(skinVertexAArray, t4, sa2.get$x());
          $.indexSet(skinVertexAArray, t5, sa2.get$y());
          $.indexSet(skinVertexAArray, t6, sa2.get$z());
          $.indexSet(skinVertexAArray, t7, 1);
          $.indexSet(skinVertexAArray, t8, sa3.get$x());
          $.indexSet(skinVertexAArray, t9, sa3.get$y());
          $.indexSet(skinVertexAArray, t10, sa3.get$z());
          $.indexSet(skinVertexAArray, t11, 1);
          sb1 = $.index(obj_skinVerticesB, face.get$a());
          sb2 = $.index(obj_skinVerticesB, face.get$b());
          sb3 = $.index(obj_skinVerticesB, face.get$c());
          $.indexSet(skinVertexBArray, offset_skin, sb1.get$x());
          $.indexSet(skinVertexBArray, t1, sb1.get$y());
          $.indexSet(skinVertexBArray, t2, sb1.get$z());
          $.indexSet(skinVertexBArray, t3, 1);
          $.indexSet(skinVertexBArray, t4, sb2.get$x());
          $.indexSet(skinVertexBArray, t5, sb2.get$y());
          $.indexSet(skinVertexBArray, t6, sb2.get$z());
          $.indexSet(skinVertexBArray, t7, 1);
          $.indexSet(skinVertexBArray, t8, sb3.get$x());
          $.indexSet(skinVertexBArray, t9, sb3.get$y());
          $.indexSet(skinVertexBArray, t10, sb3.get$z());
          $.indexSet(skinVertexBArray, t11, 1);
          offset_skin += 12;
        }
        fl = $.get$length(chunk_faces4);
        for (var sa4 = null, sb4 = null, f = 0, sw4 = null, si4 = null; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces4, f));
          sw1 = $.index(obj_skinWeights, face.get$a());
          sw2 = $.index(obj_skinWeights, face.get$b());
          sw3 = $.index(obj_skinWeights, face.get$c());
          sw4 = $.index(obj_skinWeights, face.get$d());
          $.indexSet(skinWeightArray, offset_skin, sw1.get$x());
          t1 = offset_skin + 1;
          $.indexSet(skinWeightArray, t1, sw1.get$y());
          t2 = offset_skin + 2;
          $.indexSet(skinWeightArray, t2, sw1.get$z());
          t3 = offset_skin + 3;
          $.indexSet(skinWeightArray, t3, sw1.get$w());
          t4 = offset_skin + 4;
          $.indexSet(skinWeightArray, t4, sw2.get$x());
          t5 = offset_skin + 5;
          $.indexSet(skinWeightArray, t5, sw2.get$y());
          t6 = offset_skin + 6;
          $.indexSet(skinWeightArray, t6, sw2.get$z());
          t7 = offset_skin + 7;
          $.indexSet(skinWeightArray, t7, sw2.get$w());
          t8 = offset_skin + 8;
          $.indexSet(skinWeightArray, t8, sw3.get$x());
          t9 = offset_skin + 9;
          $.indexSet(skinWeightArray, t9, sw3.get$y());
          t10 = offset_skin + 10;
          $.indexSet(skinWeightArray, t10, sw3.get$z());
          t11 = offset_skin + 11;
          $.indexSet(skinWeightArray, t11, sw3.get$w());
          t12 = offset_skin + 12;
          $.indexSet(skinWeightArray, t12, sw4.get$x());
          t13 = offset_skin + 13;
          $.indexSet(skinWeightArray, t13, sw4.get$y());
          t14 = offset_skin + 14;
          $.indexSet(skinWeightArray, t14, sw4.get$z());
          t15 = offset_skin + 15;
          $.indexSet(skinWeightArray, t15, sw4.get$w());
          si1 = $.index(obj_skinIndices, face.get$a());
          si2 = $.index(obj_skinIndices, face.get$b());
          si3 = $.index(obj_skinIndices, face.get$c());
          si4 = $.index(obj_skinIndices, face.get$d());
          $.indexSet(skinIndexArray, offset_skin, si1.get$x());
          $.indexSet(skinIndexArray, t1, si1.get$y());
          $.indexSet(skinIndexArray, t2, si1.get$z());
          $.indexSet(skinIndexArray, t3, si1.get$w());
          $.indexSet(skinIndexArray, t4, si2.get$x());
          $.indexSet(skinIndexArray, t5, si2.get$y());
          $.indexSet(skinIndexArray, t6, si2.get$z());
          $.indexSet(skinIndexArray, t7, si2.get$w());
          $.indexSet(skinIndexArray, t8, si3.get$x());
          $.indexSet(skinIndexArray, t9, si3.get$y());
          $.indexSet(skinIndexArray, t10, si3.get$z());
          $.indexSet(skinIndexArray, t11, si3.get$w());
          $.indexSet(skinIndexArray, t12, si4.get$x());
          $.indexSet(skinIndexArray, t13, si4.get$y());
          $.indexSet(skinIndexArray, t14, si4.get$z());
          $.indexSet(skinIndexArray, t15, si4.get$w());
          sa1 = $.index(obj_skinVerticesA, face.get$a());
          sa2 = $.index(obj_skinVerticesA, face.get$b());
          sa3 = $.index(obj_skinVerticesA, face.get$c());
          sa4 = $.index(obj_skinVerticesA, face.get$d());
          $.indexSet(skinVertexAArray, offset_skin, sa1.get$x());
          $.indexSet(skinVertexAArray, t1, sa1.get$y());
          $.indexSet(skinVertexAArray, t2, sa1.get$z());
          $.indexSet(skinVertexAArray, t3, 1);
          $.indexSet(skinVertexAArray, t4, sa2.get$x());
          $.indexSet(skinVertexAArray, t5, sa2.get$y());
          $.indexSet(skinVertexAArray, t6, sa2.get$z());
          $.indexSet(skinVertexAArray, t7, 1);
          $.indexSet(skinVertexAArray, t8, sa3.get$x());
          $.indexSet(skinVertexAArray, t9, sa3.get$y());
          $.indexSet(skinVertexAArray, t10, sa3.get$z());
          $.indexSet(skinVertexAArray, t11, 1);
          $.indexSet(skinVertexAArray, t12, sa4.get$x());
          $.indexSet(skinVertexAArray, t13, sa4.get$y());
          $.indexSet(skinVertexAArray, t14, sa4.get$z());
          $.indexSet(skinVertexAArray, t15, 1);
          sb1 = $.index(obj_skinVerticesB, face.get$a());
          sb2 = $.index(obj_skinVerticesB, face.get$b());
          sb3 = $.index(obj_skinVerticesB, face.get$c());
          sb4 = $.index(obj_skinVerticesB, face.get$d());
          $.indexSet(skinVertexBArray, offset_skin, sb1.get$x());
          $.indexSet(skinVertexBArray, t1, sb1.get$y());
          $.indexSet(skinVertexBArray, t2, sb1.get$z());
          $.indexSet(skinVertexBArray, t3, 1);
          $.indexSet(skinVertexBArray, t4, sb2.get$x());
          $.indexSet(skinVertexBArray, t5, sb2.get$y());
          $.indexSet(skinVertexBArray, t6, sb2.get$z());
          $.indexSet(skinVertexBArray, t7, 1);
          $.indexSet(skinVertexBArray, t8, sb3.get$x());
          $.indexSet(skinVertexBArray, t9, sb3.get$y());
          $.indexSet(skinVertexBArray, t10, sb3.get$z());
          $.indexSet(skinVertexBArray, t11, 1);
          $.indexSet(skinVertexBArray, t12, sb4.get$x());
          $.indexSet(skinVertexBArray, t13, sb4.get$y());
          $.indexSet(skinVertexBArray, t14, sb4.get$z());
          $.indexSet(skinVertexBArray, t15, 1);
          offset_skin += 16;
        }
        if (offset_skin > 0) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
          this._gl.bufferData$3(34962, skinVertexAArray, hint);
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
          this._gl.bufferData$3(34962, skinVertexBArray, hint);
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
          this._gl.bufferData$3(34962, skinIndexArray, hint);
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
          this._gl.bufferData$3(34962, skinWeightArray, hint);
        }
      }
    case 44:
    case 45:
      if (state0 === 45 || state0 === 44 || state0 === 0 && dirtyColors === true && vertexColorType === true)
        switch (state0) {
          case 0:
            fl = $.get$length(chunk_faces3);
            var offset_color = 0;
            f = 0;
            var vertexColors = null;
            var faceColor = null;
            var c1 = null;
            var c2 = null;
            var c3 = null;
          case 44:
            L3:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L3;
                    face = $.index(obj_faces, $.index(chunk_faces3, f));
                    vertexColors = face.get$vertexColors();
                  case 44:
                    state0 = 0;
                    faceColor = face.get$color();
                    if ($.eqB($.get$length(vertexColors), 3) && $.eqB(vertexColorType, 2)) {
                      c1 = $.index(vertexColors, 0);
                      c2 = $.index(vertexColors, 1);
                      c3 = $.index(vertexColors, 2);
                    } else {
                      c3 = faceColor;
                      c2 = c3;
                      c1 = c2;
                    }
                    $.indexSet(colorArray, offset_color, c1.get$r());
                    $.indexSet(colorArray, offset_color + 1, c1.get$g());
                    $.indexSet(colorArray, offset_color + 2, c1.get$b());
                    $.indexSet(colorArray, offset_color + 3, c2.get$r());
                    $.indexSet(colorArray, offset_color + 4, c2.get$g());
                    $.indexSet(colorArray, offset_color + 5, c2.get$b());
                    $.indexSet(colorArray, offset_color + 6, c3.get$r());
                    $.indexSet(colorArray, offset_color + 7, c3.get$g());
                    $.indexSet(colorArray, offset_color + 8, c3.get$b());
                    offset_color += 9;
                    ++f;
                }
            fl = $.get$length(chunk_faces4);
            f = 0;
            var c4 = null;
          case 45:
            L4:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L4;
                    face = $.index(obj_faces, $.index(chunk_faces4, f));
                    vertexColors = face.get$vertexColors();
                  case 45:
                    state0 = 0;
                    faceColor = face.get$color();
                    if ($.eqB($.get$length(vertexColors), 4) && $.eqB(vertexColorType, 2)) {
                      c1 = $.index(vertexColors, 0);
                      c2 = $.index(vertexColors, 1);
                      c3 = $.index(vertexColors, 2);
                      c4 = $.index(vertexColors, 3);
                    } else {
                      c4 = faceColor;
                      c3 = c4;
                      c2 = c3;
                      c1 = c2;
                    }
                    $.indexSet(colorArray, offset_color, c1.get$r());
                    $.indexSet(colorArray, offset_color + 1, c1.get$g());
                    $.indexSet(colorArray, offset_color + 2, c1.get$b());
                    $.indexSet(colorArray, offset_color + 3, c2.get$r());
                    $.indexSet(colorArray, offset_color + 4, c2.get$g());
                    $.indexSet(colorArray, offset_color + 5, c2.get$b());
                    $.indexSet(colorArray, offset_color + 6, c3.get$r());
                    $.indexSet(colorArray, offset_color + 7, c3.get$g());
                    $.indexSet(colorArray, offset_color + 8, c3.get$b());
                    $.indexSet(colorArray, offset_color + 9, c4.get$r());
                    $.indexSet(colorArray, offset_color + 10, c4.get$g());
                    $.indexSet(colorArray, offset_color + 11, c4.get$b());
                    offset_color += 12;
                    ++f;
                }
            if (offset_color > 0) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
              this._gl.bufferData$3(34962, colorArray, hint);
            }
        }
    case 46:
    case 47:
      if (state0 === 47 || state0 === 46 || state0 === 0 && dirtyTangents === true && geometry.get$hasTangents() === true)
        switch (state0) {
          case 0:
            fl = $.get$length(chunk_faces3);
            var offset_tangent = 0;
            f = 0;
            var vertexTangents = null;
            t1 = null;
            t2 = null;
            t3 = null;
          case 46:
            L5:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L5;
                    face = $.index(obj_faces, $.index(chunk_faces3, f));
                    vertexTangents = face.get$vertexTangents();
                  case 46:
                    state0 = 0;
                    t10 = $.index(vertexTangents, 0);
                    t2 = $.index(vertexTangents, 1);
                    t3 = $.index(vertexTangents, 2);
                    $.indexSet(tangentArray, offset_tangent, t10.get$x());
                    $.indexSet(tangentArray, offset_tangent + 1, t10.get$y());
                    $.indexSet(tangentArray, offset_tangent + 2, t10.get$z());
                    $.indexSet(tangentArray, offset_tangent + 3, t10.get$w());
                    $.indexSet(tangentArray, offset_tangent + 4, t2.get$x());
                    $.indexSet(tangentArray, offset_tangent + 5, t2.get$y());
                    $.indexSet(tangentArray, offset_tangent + 6, t2.get$z());
                    $.indexSet(tangentArray, offset_tangent + 7, t2.get$w());
                    $.indexSet(tangentArray, offset_tangent + 8, t3.get$x());
                    $.indexSet(tangentArray, offset_tangent + 9, t3.get$y());
                    $.indexSet(tangentArray, offset_tangent + 10, t3.get$z());
                    $.indexSet(tangentArray, offset_tangent + 11, t3.get$w());
                    offset_tangent += 12;
                    t1 = t10;
                    ++f;
                }
            fl = $.get$length(chunk_faces4);
            f = 0;
            t4 = null;
          case 47:
            L6:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L6;
                    face = $.index(obj_faces, $.index(chunk_faces4, f));
                    vertexTangents = face.get$vertexTangents();
                  case 47:
                    state0 = 0;
                    t10 = $.index(vertexTangents, 0);
                    t2 = $.index(vertexTangents, 1);
                    t3 = $.index(vertexTangents, 2);
                    t4 = $.index(vertexTangents, 3);
                    $.indexSet(tangentArray, offset_tangent, t10.get$x());
                    $.indexSet(tangentArray, offset_tangent + 1, t10.get$y());
                    $.indexSet(tangentArray, offset_tangent + 2, t10.get$z());
                    $.indexSet(tangentArray, offset_tangent + 3, t10.get$w());
                    $.indexSet(tangentArray, offset_tangent + 4, t2.get$x());
                    $.indexSet(tangentArray, offset_tangent + 5, t2.get$y());
                    $.indexSet(tangentArray, offset_tangent + 6, t2.get$z());
                    $.indexSet(tangentArray, offset_tangent + 7, t2.get$w());
                    $.indexSet(tangentArray, offset_tangent + 8, t3.get$x());
                    $.indexSet(tangentArray, offset_tangent + 9, t3.get$y());
                    $.indexSet(tangentArray, offset_tangent + 10, t3.get$z());
                    $.indexSet(tangentArray, offset_tangent + 11, t3.get$w());
                    $.indexSet(tangentArray, offset_tangent + 12, t4.get$x());
                    $.indexSet(tangentArray, offset_tangent + 13, t4.get$y());
                    $.indexSet(tangentArray, offset_tangent + 14, t4.get$z());
                    $.indexSet(tangentArray, offset_tangent + 15, t4.get$w());
                    offset_tangent += 16;
                    t1 = t10;
                    ++f;
                }
            this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
            this._gl.bufferData$3(34962, tangentArray, hint);
        }
    case 48:
    case 49:
      if (state0 === 49 || state0 === 48 || state0 === 0 && dirtyNormals === true && !$.eqB(normalType, 0))
        switch (state0) {
          case 0:
            fl = $.get$length(chunk_faces3);
            var i = null;
            var vn = null;
            var offset_normal = 0;
            f = 0;
            var vertexNormals = null;
            var faceNormal = null;
          case 48:
            L7:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L7;
                    face = $.index(obj_faces, $.index(chunk_faces3, f));
                    vertexNormals = face.get$vertexNormals();
                    faceNormal = face.get$normal();
                    t1 = $.get$length(vertexNormals);
                  case 48:
                    state0 = 0;
                    if ($.eqB(t1, 3) && needsSmoothNormals)
                      for (i = 0; i < 3; ++i) {
                        vn = $.index(vertexNormals, i);
                        $.indexSet(normalArray, offset_normal, vn.get$x());
                        $.indexSet(normalArray, offset_normal + 1, vn.get$y());
                        $.indexSet(normalArray, offset_normal + 2, vn.get$z());
                        offset_normal += 3;
                      }
                    else
                      for (i = 0; i < 3; ++i) {
                        $.indexSet(normalArray, offset_normal, faceNormal.get$x());
                        $.indexSet(normalArray, offset_normal + 1, faceNormal.get$y());
                        $.indexSet(normalArray, offset_normal + 2, faceNormal.get$z());
                        offset_normal += 3;
                      }
                    ++f;
                }
            fl = $.get$length(chunk_faces4);
            f = 0;
          case 49:
            L8:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L8;
                    face = $.index(obj_faces, $.index(chunk_faces4, f));
                    vertexNormals = face.get$vertexNormals();
                    faceNormal = face.get$normal();
                    t1 = $.get$length(vertexNormals);
                  case 49:
                    state0 = 0;
                    if ($.eqB(t1, 4) && needsSmoothNormals)
                      for (i = 0; i < 4; ++i) {
                        vn = $.index(vertexNormals, i);
                        $.indexSet(normalArray, offset_normal, vn.get$x());
                        $.indexSet(normalArray, offset_normal + 1, vn.get$y());
                        $.indexSet(normalArray, offset_normal + 2, vn.get$z());
                        offset_normal += 3;
                      }
                    else
                      for (i = 0; i < 4; ++i) {
                        $.indexSet(normalArray, offset_normal, faceNormal.get$x());
                        $.indexSet(normalArray, offset_normal + 1, faceNormal.get$y());
                        $.indexSet(normalArray, offset_normal + 2, faceNormal.get$z());
                        offset_normal += 3;
                      }
                    ++f;
                }
            this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
            this._gl.bufferData$3(34962, normalArray, hint);
        }
      else
        i = null;
      t1 = dirtyUvs === true;
      if (t1 && $.get$isEmpty(obj_uvs) !== true && uvType === true) {
        fl = $.get$length(chunk_faces3);
        for (var uvi = null, offset_uv = 0, f = 0, fi = null, uv = null; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces3, f);
          face = $.index(obj_faces, fi);
          uv = $.index(obj_uvs, fi);
          if (uv == null)
            continue;
          for (i = 0; i < 3; ++i) {
            uvi = $.index(uv, i);
            $.indexSet(uvArray, offset_uv, uvi.get$u());
            $.indexSet(uvArray, offset_uv + 1, uvi.get$v());
            offset_uv += 2;
          }
        }
        fl = $.get$length(chunk_faces4);
        for (f = 0; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces4, f);
          face = $.index(obj_faces, fi);
          uv = $.index(obj_uvs, fi);
          if (uv == null)
            continue;
          for (i = 0; i < 4; ++i) {
            uvi = $.index(uv, i);
            $.indexSet(uvArray, offset_uv, uvi.get$u());
            $.indexSet(uvArray, offset_uv + 1, uvi.get$v());
            offset_uv += 2;
          }
        }
        if (offset_uv > 0) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUVBuffer());
          this._gl.bufferData$3(34962, uvArray, hint);
        }
      } else
        fi = null;
      if (t1 && !(obj_uvs2 == null) && uvType === true) {
        fl = $.get$length(chunk_faces3);
        for (var uv2i = null, offset_uv2 = 0, f = 0, uv2 = null; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces3, f);
          face = $.index(obj_faces, fi);
          uv2 = $.index(obj_uvs2, fi);
          if (uv2 == null)
            continue;
          for (i = 0; i < 3; ++i) {
            uv2i = $.index(uv2, i);
            $.indexSet(uv2Array, offset_uv2, uv2i.get$u());
            $.indexSet(uv2Array, offset_uv2 + 1, uv2i.get$v());
            offset_uv2 += 2;
          }
        }
        fl = $.get$length(chunk_faces4);
        for (f = 0; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces4, f);
          face = $.index(obj_faces, fi);
          uv2 = $.index(obj_uvs2, fi);
          if (uv2 == null)
            continue;
          for (i = 0; i < 4; ++i) {
            uv2i = $.index(uv2, i);
            $.indexSet(uv2Array, offset_uv2, uv2i.get$u());
            $.indexSet(uv2Array, offset_uv2 + 1, uv2i.get$v());
            offset_uv2 += 2;
          }
        }
        if (offset_uv2 > 0) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUV2Buffer());
          this._gl.bufferData$3(34962, uv2Array, hint);
        }
      }
      if (dirtyElements === true) {
        fl = $.get$length(chunk_faces3);
        for (var vertexIndex = 0, offset_face = 0, offset_line = 0, f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces3, f));
          $.indexSet(faceArray, offset_face, vertexIndex);
          t1 = offset_face + 1;
          t2 = vertexIndex + 1;
          $.indexSet(faceArray, t1, t2);
          t1 = offset_face + 2;
          t3 = vertexIndex + 2;
          $.indexSet(faceArray, t1, t3);
          offset_face += 3;
          $.indexSet(lineArray, offset_line, vertexIndex);
          $.indexSet(lineArray, offset_line + 1, t2);
          $.indexSet(lineArray, offset_line + 2, vertexIndex);
          $.indexSet(lineArray, offset_line + 3, t3);
          $.indexSet(lineArray, offset_line + 4, t2);
          $.indexSet(lineArray, offset_line + 5, t3);
          offset_line += 6;
          vertexIndex += 3;
        }
        fl = $.get$length(chunk_faces4);
        for (f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces4, f));
          $.indexSet(faceArray, offset_face, vertexIndex);
          t1 = offset_face + 1;
          t2 = vertexIndex + 1;
          $.indexSet(faceArray, t1, t2);
          t1 = offset_face + 2;
          t3 = vertexIndex + 3;
          $.indexSet(faceArray, t1, t3);
          $.indexSet(faceArray, offset_face + 3, t2);
          t1 = offset_face + 4;
          t4 = vertexIndex + 2;
          $.indexSet(faceArray, t1, t4);
          $.indexSet(faceArray, offset_face + 5, t3);
          offset_face += 6;
          $.indexSet(lineArray, offset_line, vertexIndex);
          $.indexSet(lineArray, offset_line + 1, t2);
          $.indexSet(lineArray, offset_line + 2, vertexIndex);
          $.indexSet(lineArray, offset_line + 3, t3);
          $.indexSet(lineArray, offset_line + 4, t2);
          $.indexSet(lineArray, offset_line + 5, t4);
          $.indexSet(lineArray, offset_line + 6, t4);
          $.indexSet(lineArray, offset_line + 7, t3);
          offset_line += 8;
          vertexIndex += 4;
        }
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
        this._gl.bufferData$3(34963, faceArray, hint);
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
        this._gl.bufferData$3(34963, lineArray, hint);
      }
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
      if (state0 === 313 || state0 === 312 || state0 === 311 || state0 === 310 || state0 === 309 || state0 === 308 || state0 === 307 || state0 === 306 || state0 === 305 || state0 === 304 || state0 === 303 || state0 === 302 || state0 === 301 || state0 === 300 || state0 === 299 || state0 === 298 || state0 === 297 || state0 === 296 || state0 === 295 || state0 === 294 || state0 === 293 || state0 === 292 || state0 === 291 || state0 === 290 || state0 === 289 || state0 === 288 || state0 === 287 || state0 === 286 || state0 === 285 || state0 === 284 || state0 === 283 || state0 === 282 || state0 === 281 || state0 === 280 || state0 === 279 || state0 === 278 || state0 === 277 || state0 === 276 || state0 === 275 || state0 === 274 || state0 === 273 || state0 === 272 || state0 === 271 || state0 === 270 || state0 === 269 || state0 === 268 || state0 === 267 || state0 === 266 || state0 === 265 || state0 === 264 || state0 === 263 || state0 === 262 || state0 === 261 || state0 === 260 || state0 === 259 || state0 === 258 || state0 === 257 || state0 === 256 || state0 === 255 || state0 === 254 || state0 === 253 || state0 === 252 || state0 === 251 || state0 === 250 || state0 === 249 || state0 === 248 || state0 === 247 || state0 === 246 || state0 === 245 || state0 === 244 || state0 === 243 || state0 === 242 || state0 === 241 || state0 === 240 || state0 === 239 || state0 === 238 || state0 === 237 || state0 === 236 || state0 === 235 || state0 === 234 || state0 === 233 || state0 === 232 || state0 === 231 || state0 === 230 || state0 === 229 || state0 === 228 || state0 === 227 || state0 === 226 || state0 === 225 || state0 === 224 || state0 === 223 || state0 === 222 || state0 === 221 || state0 === 220 || state0 === 219 || state0 === 218 || state0 === 217 || state0 === 216 || state0 === 215 || state0 === 214 || state0 === 213 || state0 === 212 || state0 === 211 || state0 === 210 || state0 === 209 || state0 === 208 || state0 === 207 || state0 === 206 || state0 === 205 || state0 === 204 || state0 === 203 || state0 === 202 || state0 === 201 || state0 === 200 || state0 === 199 || state0 === 198 || state0 === 197 || state0 === 196 || state0 === 195 || state0 === 194 || state0 === 193 || state0 === 192 || state0 === 191 || state0 === 190 || state0 === 189 || state0 === 188 || state0 === 187 || state0 === 186 || state0 === 185 || state0 === 184 || state0 === 183 || state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 166 || state0 === 165 || state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 154 || state0 === 153 || state0 === 152 || state0 === 151 || state0 === 150 || state0 === 149 || state0 === 148 || state0 === 147 || state0 === 146 || state0 === 145 || state0 === 144 || state0 === 143 || state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 122 || state0 === 121 || state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 116 || state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 99 || state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 94 || state0 === 93 || state0 === 92 || state0 === 91 || state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 77 || state0 === 76 || state0 === 75 || state0 === 74 || state0 === 73 || state0 === 72 || state0 === 71 || state0 === 70 || state0 === 69 || state0 === 68 || state0 === 67 || state0 === 66 || state0 === 65 || state0 === 64 || state0 === 63 || state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 51 || state0 === 50 || state0 === 0 && !(customAttributes == null))
        switch (state0) {
          case 0:
            var il = $.get$length(customAttributes);
            i = 0;
            var offset_custom = 0;
            var offset_customSrc = 0;
            var value = null;
            var customAttribute = null;
          default:
            L9:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(i, il))
                      break L9;
                  default:
                    c$0: {
                      switch (state0) {
                        case 0:
                          customAttribute = $.index(customAttributes, i);
                          if (customAttribute.get$__original().get$needsUpdate() !== true)
                            break c$0;
                          t1 = customAttribute.get$size();
                        case 50:
                          state0 = 0;
                        default:
                          if (state0 === 75 || state0 === 74 || state0 === 73 || state0 === 72 || state0 === 71 || state0 === 70 || state0 === 69 || state0 === 68 || state0 === 67 || state0 === 66 || state0 === 65 || state0 === 64 || state0 === 63 || state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 51 || state0 === 0 && $.eqB(t1, 1))
                            switch (state0) {
                              case 0:
                                t1 = customAttribute.get$boundTo();
                              case 51:
                                state0 = 0;
                              default:
                                if (state0 === 65 || state0 === 64 || state0 === 63 || state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 0 && (t1 == null || $.eqB(t1, 'vertices')))
                                  switch (state0) {
                                    case 0:
                                      fl = $.get$length(chunk_faces3);
                                      offset_custom = 0;
                                      f = 0;
                                    default:
                                      L10:
                                        while (true)
                                          switch (state0) {
                                            case 0:
                                              if (!$.ltB(f, fl))
                                                break L10;
                                              face = $.index(obj_faces, $.index(chunk_faces3, f));
                                              t1 = customAttribute.get$array();
                                            case 52:
                                              state0 = 0;
                                              t3 = customAttribute.get$value();
                                            case 53:
                                              state0 = 0;
                                              $.indexSet(t1, offset_custom, $.index(t3, face.get$a()));
                                              t1 = customAttribute.get$array();
                                            case 54:
                                              state0 = 0;
                                              t6 = offset_custom + 1;
                                              t7 = customAttribute.get$value();
                                            case 55:
                                              state0 = 0;
                                              $.indexSet(t1, t6, $.index(t7, face.get$b()));
                                              t6 = customAttribute.get$array();
                                            case 56:
                                              state0 = 0;
                                              t9 = offset_custom + 2;
                                              t10 = customAttribute.get$value();
                                            case 57:
                                              state0 = 0;
                                              $.indexSet(t6, t9, $.index(t10, face.get$c()));
                                              offset_custom += 3;
                                              ++f;
                                          }
                                      fl = $.get$length(chunk_faces4);
                                      f = 0;
                                    case 58:
                                    case 59:
                                    case 60:
                                    case 61:
                                    case 62:
                                    case 63:
                                    case 64:
                                    case 65:
                                      L11:
                                        while (true)
                                          switch (state0) {
                                            case 0:
                                              if (!$.ltB(f, fl))
                                                break L11;
                                              face = $.index(obj_faces, $.index(chunk_faces4, f));
                                              t1 = customAttribute.get$array();
                                            case 58:
                                              state0 = 0;
                                              t3 = customAttribute.get$value();
                                            case 59:
                                              state0 = 0;
                                              $.indexSet(t1, offset_custom, $.index(t3, face.get$a()));
                                              t1 = customAttribute.get$array();
                                            case 60:
                                              state0 = 0;
                                              t6 = offset_custom + 1;
                                              t7 = customAttribute.get$value();
                                            case 61:
                                              state0 = 0;
                                              $.indexSet(t1, t6, $.index(t7, face.get$b()));
                                              t6 = customAttribute.get$array();
                                            case 62:
                                              state0 = 0;
                                              t9 = offset_custom + 2;
                                              t10 = customAttribute.get$value();
                                            case 63:
                                              state0 = 0;
                                              $.indexSet(t6, t9, $.index(t10, face.get$c()));
                                              t9 = customAttribute.get$array();
                                            case 64:
                                              state0 = 0;
                                              t12 = offset_custom + 3;
                                              t13 = customAttribute.get$value();
                                            case 65:
                                              state0 = 0;
                                              $.indexSet(t9, t12, $.index(t13, face.get$d()));
                                              offset_custom += 4;
                                              ++f;
                                          }
                                  }
                                else
                                  switch (state0) {
                                    case 0:
                                      t1 = customAttribute.get$boundTo();
                                    case 66:
                                      state0 = 0;
                                    default:
                                      if (state0 === 75 || state0 === 74 || state0 === 73 || state0 === 72 || state0 === 71 || state0 === 70 || state0 === 69 || state0 === 68 || state0 === 67 || state0 === 0 && $.eqB(t1, 'faces'))
                                        switch (state0) {
                                          case 0:
                                            fl = $.get$length(chunk_faces3);
                                            offset_custom = 0;
                                            f = 0;
                                          default:
                                            L12:
                                              while (true)
                                                switch (state0) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L12;
                                                    t1 = customAttribute.get$value();
                                                  case 67:
                                                    state0 = 0;
                                                    value = $.index(t1, $.index(chunk_faces3, f));
                                                    t1 = customAttribute.get$array();
                                                  case 68:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom, value);
                                                    t1 = customAttribute.get$array();
                                                  case 69:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 1, value);
                                                    t1 = customAttribute.get$array();
                                                  case 70:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 2, value);
                                                    offset_custom += 3;
                                                    ++f;
                                                }
                                            fl = $.get$length(chunk_faces4);
                                            f = 0;
                                          case 71:
                                          case 72:
                                          case 73:
                                          case 74:
                                          case 75:
                                            L13:
                                              while (true)
                                                switch (state0) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L13;
                                                    t1 = customAttribute.get$value();
                                                  case 71:
                                                    state0 = 0;
                                                    value = $.index(t1, $.index(chunk_faces4, f));
                                                    t1 = customAttribute.get$array();
                                                  case 72:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom, value);
                                                    t1 = customAttribute.get$array();
                                                  case 73:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 1, value);
                                                    t1 = customAttribute.get$array();
                                                  case 74:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 2, value);
                                                    t1 = customAttribute.get$array();
                                                  case 75:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 3, value);
                                                    offset_custom += 4;
                                                    ++f;
                                                }
                                        }
                                      else
                                        offset_custom = 0;
                                  }
                            }
                          else
                            switch (state0) {
                              case 0:
                                t1 = customAttribute.get$size();
                              case 76:
                                state0 = 0;
                              default:
                                if (state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 99 || state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 94 || state0 === 93 || state0 === 92 || state0 === 91 || state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 77 || state0 === 0 && $.eqB(t1, 2))
                                  switch (state0) {
                                    case 0:
                                      t1 = customAttribute.get$boundTo();
                                    case 77:
                                      state0 = 0;
                                    default:
                                      if (state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 94 || state0 === 93 || state0 === 92 || state0 === 91 || state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 0 && (t1 == null || $.eqB(t1, 'vertices')))
                                        switch (state0) {
                                          case 0:
                                            fl = $.get$length(chunk_faces3);
                                            offset_custom = 0;
                                            f = 0;
                                          default:
                                            L14:
                                              while (true)
                                                switch (state0) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L14;
                                                    face = $.index(obj_faces, $.index(chunk_faces3, f));
                                                    t1 = customAttribute.get$value();
                                                  case 78:
                                                    state0 = 0;
                                                    v1 = $.index(t1, face.get$a());
                                                    t1 = customAttribute.get$value();
                                                  case 79:
                                                    state0 = 0;
                                                    v2 = $.index(t1, face.get$b());
                                                    t1 = customAttribute.get$value();
                                                  case 80:
                                                    state0 = 0;
                                                    v3 = $.index(t1, face.get$c());
                                                    t1 = customAttribute.get$array();
                                                  case 81:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom, v1.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 82:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 83:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 2, v2.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 84:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 3, v2.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 85:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 4, v3.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 86:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 5, v3.get$y());
                                                    offset_custom += 6;
                                                    ++f;
                                                }
                                            fl = $.get$length(chunk_faces4);
                                            f = 0;
                                          case 87:
                                          case 88:
                                          case 89:
                                          case 90:
                                          case 91:
                                          case 92:
                                          case 93:
                                          case 94:
                                          case 95:
                                          case 96:
                                          case 97:
                                          case 98:
                                            L15:
                                              while (true)
                                                switch (state0) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L15;
                                                    face = $.index(obj_faces, $.index(chunk_faces4, f));
                                                    t1 = customAttribute.get$value();
                                                  case 87:
                                                    state0 = 0;
                                                    v1 = $.index(t1, face.get$a());
                                                    t1 = customAttribute.get$value();
                                                  case 88:
                                                    state0 = 0;
                                                    v2 = $.index(t1, face.get$b());
                                                    t1 = customAttribute.get$value();
                                                  case 89:
                                                    state0 = 0;
                                                    v3 = $.index(t1, face.get$c());
                                                    t1 = customAttribute.get$value();
                                                  case 90:
                                                    state0 = 0;
                                                    v4 = $.index(t1, face.get$d());
                                                    t1 = customAttribute.get$array();
                                                  case 91:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom, v1.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 92:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 93:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 2, v2.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 94:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 3, v2.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 95:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 4, v3.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 96:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 5, v3.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 97:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 6, v4.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 98:
                                                    state0 = 0;
                                                    $.indexSet(t1, offset_custom + 7, v4.get$y());
                                                    offset_custom += 8;
                                                    ++f;
                                                }
                                        }
                                      else
                                        switch (state0) {
                                          case 0:
                                            t1 = customAttribute.get$boundTo();
                                          case 99:
                                            state0 = 0;
                                          default:
                                            if (state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 0 && $.eqB(t1, 'faces'))
                                              switch (state0) {
                                                case 0:
                                                  fl = $.get$length(chunk_faces3);
                                                  offset_custom = 0;
                                                  f = 0;
                                                default:
                                                  L16:
                                                    while (true)
                                                      switch (state0) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L16;
                                                          t1 = customAttribute.get$value();
                                                        case 100:
                                                          state0 = 0;
                                                          value = $.index(t1, $.index(chunk_faces3, f));
                                                          t1 = customAttribute.get$array();
                                                        case 101:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 102:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 1, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 103:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 2, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 104:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 3, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 105:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 4, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 106:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 5, value.get$y());
                                                          offset_custom += 6;
                                                          v3 = value;
                                                          v2 = v3;
                                                          v1 = v2;
                                                          ++f;
                                                      }
                                                  fl = $.get$length(chunk_faces4);
                                                  f = 0;
                                                case 107:
                                                case 108:
                                                case 109:
                                                case 110:
                                                case 111:
                                                case 112:
                                                case 113:
                                                case 114:
                                                case 115:
                                                  L17:
                                                    while (true)
                                                      switch (state0) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L17;
                                                          t1 = customAttribute.get$value();
                                                        case 107:
                                                          state0 = 0;
                                                          value = $.index(t1, $.index(chunk_faces4, f));
                                                          t1 = customAttribute.get$array();
                                                        case 108:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 109:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 1, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 110:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 2, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 111:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 3, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 112:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 4, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 113:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 5, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 114:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 6, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 115:
                                                          state0 = 0;
                                                          $.indexSet(t1, offset_custom + 7, value.get$y());
                                                          offset_custom += 8;
                                                          v4 = value;
                                                          v3 = v4;
                                                          v2 = v3;
                                                          v1 = v2;
                                                          ++f;
                                                      }
                                              }
                                            else
                                              offset_custom = 0;
                                        }
                                  }
                                else
                                  switch (state0) {
                                    case 0:
                                      t1 = customAttribute.get$size();
                                    case 116:
                                      state0 = 0;
                                    default:
                                      if (state0 === 212 || state0 === 211 || state0 === 210 || state0 === 209 || state0 === 208 || state0 === 207 || state0 === 206 || state0 === 205 || state0 === 204 || state0 === 203 || state0 === 202 || state0 === 201 || state0 === 200 || state0 === 199 || state0 === 198 || state0 === 197 || state0 === 196 || state0 === 195 || state0 === 194 || state0 === 193 || state0 === 192 || state0 === 191 || state0 === 190 || state0 === 189 || state0 === 188 || state0 === 187 || state0 === 186 || state0 === 185 || state0 === 184 || state0 === 183 || state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 166 || state0 === 165 || state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 154 || state0 === 153 || state0 === 152 || state0 === 151 || state0 === 150 || state0 === 149 || state0 === 148 || state0 === 147 || state0 === 146 || state0 === 145 || state0 === 144 || state0 === 143 || state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 122 || state0 === 121 || state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 0 && $.eqB(t1, 3))
                                        switch (state0) {
                                          case 0:
                                            t1 = customAttribute.get$type();
                                          case 117:
                                            state0 = 0;
                                            var pp = $.eqB(t1, 'c') ? ['r', 'g', 'b'] : ['x', 'y', 'z'];
                                            t1 = customAttribute.get$boundTo();
                                          case 118:
                                            state0 = 0;
                                          default:
                                            if (state0 === 153 || state0 === 152 || state0 === 151 || state0 === 150 || state0 === 149 || state0 === 148 || state0 === 147 || state0 === 146 || state0 === 145 || state0 === 144 || state0 === 143 || state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 122 || state0 === 121 || state0 === 120 || state0 === 119 || state0 === 0 && (t1 == null || $.eqB(t1, 'vertices')))
                                              switch (state0) {
                                                case 0:
                                                  fl = $.get$length(chunk_faces3);
                                                  offset_custom = 0;
                                                  f = 0;
                                                default:
                                                  L18:
                                                    while (true)
                                                      switch (state0) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L18;
                                                          face = $.index(obj_faces, $.index(chunk_faces3, f));
                                                          t1 = customAttribute.get$value();
                                                        case 119:
                                                          state0 = 0;
                                                          v1 = $.index(t1, face.get$a());
                                                        case 120:
                                                          state0 = 0;
                                                          t3 = customAttribute.get$value();
                                                        case 121:
                                                          state0 = 0;
                                                          v2 = $.index(t3, face.get$b());
                                                        case 122:
                                                          state0 = 0;
                                                          t5 = customAttribute.get$value();
                                                        case 123:
                                                          state0 = 0;
                                                          v3 = $.index(t5, face.get$c());
                                                        case 124:
                                                          state0 = 0;
                                                          t7 = customAttribute.get$array();
                                                        case 125:
                                                          state0 = 0;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t7, offset_custom, $.index(v1, pp[0]));
                                                          t7 = customAttribute.get$array();
                                                        case 126:
                                                          state0 = 0;
                                                          t10 = offset_custom + 1;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t7, t10, $.index(v1, pp[1]));
                                                          t10 = customAttribute.get$array();
                                                        case 127:
                                                          state0 = 0;
                                                          t11 = offset_custom + 2;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t10, t11, $.index(v1, pp[2]));
                                                          t11 = customAttribute.get$array();
                                                        case 128:
                                                          state0 = 0;
                                                          t12 = offset_custom + 3;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t11, t12, $.index(v2, pp[0]));
                                                          t12 = customAttribute.get$array();
                                                        case 129:
                                                          state0 = 0;
                                                          t13 = offset_custom + 4;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t12, t13, $.index(v2, pp[1]));
                                                          t13 = customAttribute.get$array();
                                                        case 130:
                                                          state0 = 0;
                                                          t14 = offset_custom + 5;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t13, t14, $.index(v2, pp[2]));
                                                          t14 = customAttribute.get$array();
                                                        case 131:
                                                          state0 = 0;
                                                          t15 = offset_custom + 6;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t14, t15, $.index(v3, pp[0]));
                                                          t15 = customAttribute.get$array();
                                                        case 132:
                                                          state0 = 0;
                                                          t16 = offset_custom + 7;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t15, t16, $.index(v3, pp[1]));
                                                          t16 = customAttribute.get$array();
                                                        case 133:
                                                          state0 = 0;
                                                          var t17 = offset_custom + 8;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t16, t17, $.index(v3, pp[2]));
                                                          offset_custom += 9;
                                                          ++f;
                                                      }
                                                  fl = $.get$length(chunk_faces4);
                                                  f = 0;
                                                case 134:
                                                case 135:
                                                case 136:
                                                case 137:
                                                case 138:
                                                case 139:
                                                case 140:
                                                case 141:
                                                case 142:
                                                case 143:
                                                case 144:
                                                case 145:
                                                case 146:
                                                case 147:
                                                case 148:
                                                case 149:
                                                case 150:
                                                case 151:
                                                case 152:
                                                case 153:
                                                  L19:
                                                    while (true)
                                                      switch (state0) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L19;
                                                          face = $.index(obj_faces, $.index(chunk_faces4, f));
                                                          t1 = customAttribute.get$value();
                                                        case 134:
                                                          state0 = 0;
                                                          v1 = $.index(t1, face.get$a());
                                                        case 135:
                                                          state0 = 0;
                                                          t3 = customAttribute.get$value();
                                                        case 136:
                                                          state0 = 0;
                                                          v2 = $.index(t3, face.get$b());
                                                        case 137:
                                                          state0 = 0;
                                                          t5 = customAttribute.get$value();
                                                        case 138:
                                                          state0 = 0;
                                                          v3 = $.index(t5, face.get$c());
                                                        case 139:
                                                          state0 = 0;
                                                          t7 = customAttribute.get$value();
                                                        case 140:
                                                          state0 = 0;
                                                          v4 = $.index(t7, face.get$d());
                                                        case 141:
                                                          state0 = 0;
                                                          t9 = customAttribute.get$array();
                                                        case 142:
                                                          state0 = 0;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t9, offset_custom, $.index(v1, pp[0]));
                                                          t9 = customAttribute.get$array();
                                                        case 143:
                                                          state0 = 0;
                                                          t12 = offset_custom + 1;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t9, t12, $.index(v1, pp[1]));
                                                          t12 = customAttribute.get$array();
                                                        case 144:
                                                          state0 = 0;
                                                          t13 = offset_custom + 2;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t12, t13, $.index(v1, pp[2]));
                                                          t13 = customAttribute.get$array();
                                                        case 145:
                                                          state0 = 0;
                                                          t14 = offset_custom + 3;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t13, t14, $.index(v2, pp[0]));
                                                          t14 = customAttribute.get$array();
                                                        case 146:
                                                          state0 = 0;
                                                          t15 = offset_custom + 4;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t14, t15, $.index(v2, pp[1]));
                                                          t15 = customAttribute.get$array();
                                                        case 147:
                                                          state0 = 0;
                                                          t16 = offset_custom + 5;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t15, t16, $.index(v2, pp[2]));
                                                          t16 = customAttribute.get$array();
                                                        case 148:
                                                          state0 = 0;
                                                          t17 = offset_custom + 6;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t16, t17, $.index(v3, pp[0]));
                                                          t17 = customAttribute.get$array();
                                                        case 149:
                                                          state0 = 0;
                                                          var t18 = offset_custom + 7;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t17, t18, $.index(v3, pp[1]));
                                                          t18 = customAttribute.get$array();
                                                        case 150:
                                                          state0 = 0;
                                                          var t19 = offset_custom + 8;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t18, t19, $.index(v3, pp[2]));
                                                          t19 = customAttribute.get$array();
                                                        case 151:
                                                          state0 = 0;
                                                          var t20 = offset_custom + 9;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t19, t20, $.index(v4, pp[0]));
                                                          t20 = customAttribute.get$array();
                                                        case 152:
                                                          state0 = 0;
                                                          var t21 = offset_custom + 10;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t20, t21, $.index(v4, pp[1]));
                                                          t21 = customAttribute.get$array();
                                                        case 153:
                                                          state0 = 0;
                                                          t22 = offset_custom + 11;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t21, t22, $.index(v4, pp[2]));
                                                          offset_custom += 12;
                                                          ++f;
                                                      }
                                              }
                                            else
                                              switch (state0) {
                                                case 0:
                                                  t1 = customAttribute.get$boundTo();
                                                case 154:
                                                  state0 = 0;
                                                default:
                                                  if (state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 166 || state0 === 165 || state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 0 && $.eqB(t1, 'faces'))
                                                    switch (state0) {
                                                      case 0:
                                                        fl = $.get$length(chunk_faces3);
                                                        offset_custom = 0;
                                                        f = 0;
                                                      default:
                                                        L20:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L20;
                                                                t1 = customAttribute.get$value();
                                                              case 155:
                                                                state0 = 0;
                                                                value = $.index(t1, $.index(chunk_faces3, f));
                                                              case 156:
                                                                state0 = 0;
                                                                t3 = customAttribute.get$array();
                                                              case 157:
                                                                state0 = 0;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t3, offset_custom, $.index(value, pp[0]));
                                                                t3 = customAttribute.get$array();
                                                              case 158:
                                                                state0 = 0;
                                                                t6 = offset_custom + 1;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t3, t6, $.index(value, pp[1]));
                                                                t6 = customAttribute.get$array();
                                                              case 159:
                                                                state0 = 0;
                                                                t7 = offset_custom + 2;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t6, t7, $.index(value, pp[2]));
                                                                t7 = customAttribute.get$array();
                                                              case 160:
                                                                state0 = 0;
                                                                t8 = offset_custom + 3;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t7, t8, $.index(value, pp[0]));
                                                                t8 = customAttribute.get$array();
                                                              case 161:
                                                                state0 = 0;
                                                                t9 = offset_custom + 4;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t8, t9, $.index(value, pp[1]));
                                                                t9 = customAttribute.get$array();
                                                              case 162:
                                                                state0 = 0;
                                                                t10 = offset_custom + 5;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t9, t10, $.index(value, pp[2]));
                                                                t10 = customAttribute.get$array();
                                                              case 163:
                                                                state0 = 0;
                                                                t11 = offset_custom + 6;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t10, t11, $.index(value, pp[0]));
                                                                t11 = customAttribute.get$array();
                                                              case 164:
                                                                state0 = 0;
                                                                t12 = offset_custom + 7;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t11, t12, $.index(value, pp[1]));
                                                                t12 = customAttribute.get$array();
                                                              case 165:
                                                                state0 = 0;
                                                                t13 = offset_custom + 8;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t12, t13, $.index(value, pp[2]));
                                                                offset_custom += 9;
                                                                v3 = value;
                                                                v2 = v3;
                                                                v1 = v2;
                                                                ++f;
                                                            }
                                                        fl = $.get$length(chunk_faces4);
                                                        f = 0;
                                                      case 166:
                                                      case 167:
                                                      case 168:
                                                      case 169:
                                                      case 170:
                                                      case 171:
                                                      case 172:
                                                      case 173:
                                                      case 174:
                                                      case 175:
                                                      case 176:
                                                      case 177:
                                                      case 178:
                                                      case 179:
                                                        L21:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L21;
                                                                t1 = customAttribute.get$value();
                                                              case 166:
                                                                state0 = 0;
                                                                value = $.index(t1, $.index(chunk_faces4, f));
                                                              case 167:
                                                                state0 = 0;
                                                                t3 = customAttribute.get$array();
                                                              case 168:
                                                                state0 = 0;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t3, offset_custom, $.index(value, pp[0]));
                                                                t3 = customAttribute.get$array();
                                                              case 169:
                                                                state0 = 0;
                                                                t6 = offset_custom + 1;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t3, t6, $.index(value, pp[1]));
                                                                t6 = customAttribute.get$array();
                                                              case 170:
                                                                state0 = 0;
                                                                t7 = offset_custom + 2;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t6, t7, $.index(value, pp[2]));
                                                                t7 = customAttribute.get$array();
                                                              case 171:
                                                                state0 = 0;
                                                                t8 = offset_custom + 3;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t7, t8, $.index(value, pp[0]));
                                                                t8 = customAttribute.get$array();
                                                              case 172:
                                                                state0 = 0;
                                                                t9 = offset_custom + 4;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t8, t9, $.index(value, pp[1]));
                                                                t9 = customAttribute.get$array();
                                                              case 173:
                                                                state0 = 0;
                                                                t10 = offset_custom + 5;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t9, t10, $.index(value, pp[2]));
                                                                t10 = customAttribute.get$array();
                                                              case 174:
                                                                state0 = 0;
                                                                t11 = offset_custom + 6;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t10, t11, $.index(value, pp[0]));
                                                                t11 = customAttribute.get$array();
                                                              case 175:
                                                                state0 = 0;
                                                                t12 = offset_custom + 7;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t11, t12, $.index(value, pp[1]));
                                                                t12 = customAttribute.get$array();
                                                              case 176:
                                                                state0 = 0;
                                                                t13 = offset_custom + 8;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t12, t13, $.index(value, pp[2]));
                                                                t13 = customAttribute.get$array();
                                                              case 177:
                                                                state0 = 0;
                                                                t14 = offset_custom + 9;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t13, t14, $.index(value, pp[0]));
                                                                t14 = customAttribute.get$array();
                                                              case 178:
                                                                state0 = 0;
                                                                t15 = offset_custom + 10;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t14, t15, $.index(value, pp[1]));
                                                                t15 = customAttribute.get$array();
                                                              case 179:
                                                                state0 = 0;
                                                                t16 = offset_custom + 11;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t15, t16, $.index(value, pp[2]));
                                                                offset_custom += 12;
                                                                v4 = value;
                                                                v3 = v4;
                                                                v2 = v3;
                                                                v1 = v2;
                                                                ++f;
                                                            }
                                                    }
                                                  else
                                                    switch (state0) {
                                                      case 0:
                                                        t1 = customAttribute.get$boundTo();
                                                      case 180:
                                                        state0 = 0;
                                                      default:
                                                        if (state0 === 212 || state0 === 211 || state0 === 210 || state0 === 209 || state0 === 208 || state0 === 207 || state0 === 206 || state0 === 205 || state0 === 204 || state0 === 203 || state0 === 202 || state0 === 201 || state0 === 200 || state0 === 199 || state0 === 198 || state0 === 197 || state0 === 196 || state0 === 195 || state0 === 194 || state0 === 193 || state0 === 192 || state0 === 191 || state0 === 190 || state0 === 189 || state0 === 188 || state0 === 187 || state0 === 186 || state0 === 185 || state0 === 184 || state0 === 183 || state0 === 182 || state0 === 181 || state0 === 0 && $.eqB(t1, 'faceVertices'))
                                                          switch (state0) {
                                                            case 0:
                                                              fl = $.get$length(chunk_faces3);
                                                              offset_custom = 0;
                                                              f = 0;
                                                            default:
                                                              L22:
                                                                while (true)
                                                                  switch (state0) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L22;
                                                                      t1 = customAttribute.get$value();
                                                                    case 181:
                                                                      state0 = 0;
                                                                      value = $.index(t1, $.index(chunk_faces3, f));
                                                                    case 182:
                                                                      state0 = 0;
                                                                      v1 = $.index(value, 0);
                                                                    case 183:
                                                                      state0 = 0;
                                                                      v2 = $.index(value, 1);
                                                                    case 184:
                                                                      state0 = 0;
                                                                      v3 = $.index(value, 2);
                                                                    case 185:
                                                                      state0 = 0;
                                                                      t6 = customAttribute.get$array();
                                                                    case 186:
                                                                      state0 = 0;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t6, offset_custom, $.index(v1, pp[0]));
                                                                      t6 = customAttribute.get$array();
                                                                    case 187:
                                                                      state0 = 0;
                                                                      t9 = offset_custom + 1;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t6, t9, $.index(v1, pp[1]));
                                                                      t9 = customAttribute.get$array();
                                                                    case 188:
                                                                      state0 = 0;
                                                                      t10 = offset_custom + 2;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t9, t10, $.index(v1, pp[2]));
                                                                      t10 = customAttribute.get$array();
                                                                    case 189:
                                                                      state0 = 0;
                                                                      t11 = offset_custom + 3;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t10, t11, $.index(v2, pp[0]));
                                                                      t11 = customAttribute.get$array();
                                                                    case 190:
                                                                      state0 = 0;
                                                                      t12 = offset_custom + 4;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t11, t12, $.index(v2, pp[1]));
                                                                      t12 = customAttribute.get$array();
                                                                    case 191:
                                                                      state0 = 0;
                                                                      t13 = offset_custom + 5;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t12, t13, $.index(v2, pp[2]));
                                                                      t13 = customAttribute.get$array();
                                                                    case 192:
                                                                      state0 = 0;
                                                                      t14 = offset_custom + 6;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t13, t14, $.index(v3, pp[0]));
                                                                      t14 = customAttribute.get$array();
                                                                    case 193:
                                                                      state0 = 0;
                                                                      t15 = offset_custom + 7;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t14, t15, $.index(v3, pp[1]));
                                                                      t15 = customAttribute.get$array();
                                                                    case 194:
                                                                      state0 = 0;
                                                                      t16 = offset_custom + 8;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t15, t16, $.index(v3, pp[2]));
                                                                      offset_custom += 9;
                                                                      ++f;
                                                                  }
                                                              fl = $.get$length(chunk_faces4);
                                                              f = 0;
                                                            case 195:
                                                            case 196:
                                                            case 197:
                                                            case 198:
                                                            case 199:
                                                            case 200:
                                                            case 201:
                                                            case 202:
                                                            case 203:
                                                            case 204:
                                                            case 205:
                                                            case 206:
                                                            case 207:
                                                            case 208:
                                                            case 209:
                                                            case 210:
                                                            case 211:
                                                            case 212:
                                                              L23:
                                                                while (true)
                                                                  switch (state0) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L23;
                                                                      t1 = customAttribute.get$value();
                                                                    case 195:
                                                                      state0 = 0;
                                                                      value = $.index(t1, $.index(chunk_faces4, f));
                                                                    case 196:
                                                                      state0 = 0;
                                                                      v1 = $.index(value, 0);
                                                                    case 197:
                                                                      state0 = 0;
                                                                      v2 = $.index(value, 1);
                                                                    case 198:
                                                                      state0 = 0;
                                                                      v3 = $.index(value, 2);
                                                                    case 199:
                                                                      state0 = 0;
                                                                      v4 = $.index(value, 3);
                                                                    case 200:
                                                                      state0 = 0;
                                                                      t7 = customAttribute.get$array();
                                                                    case 201:
                                                                      state0 = 0;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t7, offset_custom, $.index(v1, pp[0]));
                                                                      t7 = customAttribute.get$array();
                                                                    case 202:
                                                                      state0 = 0;
                                                                      t10 = offset_custom + 1;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t7, t10, $.index(v1, pp[1]));
                                                                      t10 = customAttribute.get$array();
                                                                    case 203:
                                                                      state0 = 0;
                                                                      t11 = offset_custom + 2;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t10, t11, $.index(v1, pp[2]));
                                                                      t11 = customAttribute.get$array();
                                                                    case 204:
                                                                      state0 = 0;
                                                                      t12 = offset_custom + 3;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t11, t12, $.index(v2, pp[0]));
                                                                      t12 = customAttribute.get$array();
                                                                    case 205:
                                                                      state0 = 0;
                                                                      t13 = offset_custom + 4;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t12, t13, $.index(v2, pp[1]));
                                                                      t13 = customAttribute.get$array();
                                                                    case 206:
                                                                      state0 = 0;
                                                                      t14 = offset_custom + 5;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t13, t14, $.index(v2, pp[2]));
                                                                      t14 = customAttribute.get$array();
                                                                    case 207:
                                                                      state0 = 0;
                                                                      t15 = offset_custom + 6;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t14, t15, $.index(v3, pp[0]));
                                                                      t15 = customAttribute.get$array();
                                                                    case 208:
                                                                      state0 = 0;
                                                                      t16 = offset_custom + 7;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t15, t16, $.index(v3, pp[1]));
                                                                      t16 = customAttribute.get$array();
                                                                    case 209:
                                                                      state0 = 0;
                                                                      t17 = offset_custom + 8;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t16, t17, $.index(v3, pp[2]));
                                                                      t17 = customAttribute.get$array();
                                                                    case 210:
                                                                      state0 = 0;
                                                                      t18 = offset_custom + 9;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t17, t18, $.index(v4, pp[0]));
                                                                      t18 = customAttribute.get$array();
                                                                    case 211:
                                                                      state0 = 0;
                                                                      t19 = offset_custom + 10;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t18, t19, $.index(v4, pp[1]));
                                                                      t19 = customAttribute.get$array();
                                                                    case 212:
                                                                      state0 = 0;
                                                                      t20 = offset_custom + 11;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t19, t20, $.index(v4, pp[2]));
                                                                      offset_custom += 12;
                                                                      ++f;
                                                                  }
                                                          }
                                                        else
                                                          offset_custom = 0;
                                                    }
                                              }
                                        }
                                      else
                                        switch (state0) {
                                          case 0:
                                            t1 = customAttribute.get$size();
                                          case 213:
                                            state0 = 0;
                                          default:
                                            if (state0 === 313 || state0 === 312 || state0 === 311 || state0 === 310 || state0 === 309 || state0 === 308 || state0 === 307 || state0 === 306 || state0 === 305 || state0 === 304 || state0 === 303 || state0 === 302 || state0 === 301 || state0 === 300 || state0 === 299 || state0 === 298 || state0 === 297 || state0 === 296 || state0 === 295 || state0 === 294 || state0 === 293 || state0 === 292 || state0 === 291 || state0 === 290 || state0 === 289 || state0 === 288 || state0 === 287 || state0 === 286 || state0 === 285 || state0 === 284 || state0 === 283 || state0 === 282 || state0 === 281 || state0 === 280 || state0 === 279 || state0 === 278 || state0 === 277 || state0 === 276 || state0 === 275 || state0 === 274 || state0 === 273 || state0 === 272 || state0 === 271 || state0 === 270 || state0 === 269 || state0 === 268 || state0 === 267 || state0 === 266 || state0 === 265 || state0 === 264 || state0 === 263 || state0 === 262 || state0 === 261 || state0 === 260 || state0 === 259 || state0 === 258 || state0 === 257 || state0 === 256 || state0 === 255 || state0 === 254 || state0 === 253 || state0 === 252 || state0 === 251 || state0 === 250 || state0 === 249 || state0 === 248 || state0 === 247 || state0 === 246 || state0 === 245 || state0 === 244 || state0 === 243 || state0 === 242 || state0 === 241 || state0 === 240 || state0 === 239 || state0 === 238 || state0 === 237 || state0 === 236 || state0 === 235 || state0 === 234 || state0 === 233 || state0 === 232 || state0 === 231 || state0 === 230 || state0 === 229 || state0 === 228 || state0 === 227 || state0 === 226 || state0 === 225 || state0 === 224 || state0 === 223 || state0 === 222 || state0 === 221 || state0 === 220 || state0 === 219 || state0 === 218 || state0 === 217 || state0 === 216 || state0 === 215 || state0 === 214 || state0 === 0 && $.eqB(t1, 4))
                                              switch (state0) {
                                                case 0:
                                                  t1 = customAttribute.get$boundTo();
                                                case 214:
                                                  state0 = 0;
                                                default:
                                                  if (state0 === 249 || state0 === 248 || state0 === 247 || state0 === 246 || state0 === 245 || state0 === 244 || state0 === 243 || state0 === 242 || state0 === 241 || state0 === 240 || state0 === 239 || state0 === 238 || state0 === 237 || state0 === 236 || state0 === 235 || state0 === 234 || state0 === 233 || state0 === 232 || state0 === 231 || state0 === 230 || state0 === 229 || state0 === 228 || state0 === 227 || state0 === 226 || state0 === 225 || state0 === 224 || state0 === 223 || state0 === 222 || state0 === 221 || state0 === 220 || state0 === 219 || state0 === 218 || state0 === 217 || state0 === 216 || state0 === 215 || state0 === 0 && (t1 == null || $.eqB(t1, 'vertices')))
                                                    switch (state0) {
                                                      case 0:
                                                        fl = $.get$length(chunk_faces3);
                                                        offset_custom = 0;
                                                        f = 0;
                                                      default:
                                                        L24:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L24;
                                                                face = $.index(obj_faces, $.index(chunk_faces3, f));
                                                                t1 = customAttribute.get$value();
                                                              case 215:
                                                                state0 = 0;
                                                                v1 = $.index(t1, face.get$a());
                                                                t1 = customAttribute.get$value();
                                                              case 216:
                                                                state0 = 0;
                                                                v2 = $.index(t1, face.get$b());
                                                                t1 = customAttribute.get$value();
                                                              case 217:
                                                                state0 = 0;
                                                                v3 = $.index(t1, face.get$c());
                                                                t1 = customAttribute.get$array();
                                                              case 218:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom, v1.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 219:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 220:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 2, v1.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 221:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 3, v1.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 222:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 4, v2.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 223:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 5, v2.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 224:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 6, v2.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 225:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 7, v2.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 226:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 8, v3.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 227:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 9, v3.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 228:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 10, v3.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 229:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 11, v3.get$w());
                                                                offset_custom += 12;
                                                                ++f;
                                                            }
                                                        fl = $.get$length(chunk_faces4);
                                                        f = 0;
                                                      case 230:
                                                      case 231:
                                                      case 232:
                                                      case 233:
                                                      case 234:
                                                      case 235:
                                                      case 236:
                                                      case 237:
                                                      case 238:
                                                      case 239:
                                                      case 240:
                                                      case 241:
                                                      case 242:
                                                      case 243:
                                                      case 244:
                                                      case 245:
                                                      case 246:
                                                      case 247:
                                                      case 248:
                                                      case 249:
                                                        L25:
                                                          while (true)
                                                            switch (state0) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L25;
                                                                face = $.index(obj_faces, $.index(chunk_faces4, f));
                                                                t1 = customAttribute.get$value();
                                                              case 230:
                                                                state0 = 0;
                                                                v1 = $.index(t1, face.get$a());
                                                                t1 = customAttribute.get$value();
                                                              case 231:
                                                                state0 = 0;
                                                                v2 = $.index(t1, face.get$b());
                                                                t1 = customAttribute.get$value();
                                                              case 232:
                                                                state0 = 0;
                                                                v3 = $.index(t1, face.get$c());
                                                                t1 = customAttribute.get$value();
                                                              case 233:
                                                                state0 = 0;
                                                                v4 = $.index(t1, face.get$d());
                                                                t1 = customAttribute.get$array();
                                                              case 234:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom, v1.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 235:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 236:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 2, v1.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 237:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 3, v1.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 238:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 4, v2.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 239:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 5, v2.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 240:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 6, v2.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 241:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 7, v2.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 242:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 8, v3.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 243:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 9, v3.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 244:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 10, v3.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 245:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 11, v3.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 246:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 12, v4.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 247:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 13, v4.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 248:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 14, v4.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 249:
                                                                state0 = 0;
                                                                $.indexSet(t1, offset_custom + 15, v4.get$w());
                                                                offset_custom += 16;
                                                                ++f;
                                                            }
                                                    }
                                                  else
                                                    switch (state0) {
                                                      case 0:
                                                        t1 = customAttribute.get$boundTo();
                                                      case 250:
                                                        state0 = 0;
                                                      default:
                                                        if (state0 === 280 || state0 === 279 || state0 === 278 || state0 === 277 || state0 === 276 || state0 === 275 || state0 === 274 || state0 === 273 || state0 === 272 || state0 === 271 || state0 === 270 || state0 === 269 || state0 === 268 || state0 === 267 || state0 === 266 || state0 === 265 || state0 === 264 || state0 === 263 || state0 === 262 || state0 === 261 || state0 === 260 || state0 === 259 || state0 === 258 || state0 === 257 || state0 === 256 || state0 === 255 || state0 === 254 || state0 === 253 || state0 === 252 || state0 === 251 || state0 === 0 && $.eqB(t1, 'faces'))
                                                          switch (state0) {
                                                            case 0:
                                                              fl = $.get$length(chunk_faces3);
                                                              offset_custom = 0;
                                                              f = 0;
                                                            default:
                                                              L26:
                                                                while (true)
                                                                  switch (state0) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L26;
                                                                      t1 = customAttribute.get$value();
                                                                    case 251:
                                                                      state0 = 0;
                                                                      value = $.index(t1, $.index(chunk_faces3, f));
                                                                      t1 = customAttribute.get$array();
                                                                    case 252:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 253:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 1, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 254:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 2, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 255:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 3, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 256:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 4, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 257:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 5, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 258:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 6, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 259:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 7, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 260:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 8, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 261:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 9, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 262:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 10, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 263:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 11, value.get$w());
                                                                      offset_custom += 12;
                                                                      v3 = value;
                                                                      v2 = v3;
                                                                      v1 = v2;
                                                                      ++f;
                                                                  }
                                                              fl = $.get$length(chunk_faces4);
                                                              f = 0;
                                                            case 264:
                                                            case 265:
                                                            case 266:
                                                            case 267:
                                                            case 268:
                                                            case 269:
                                                            case 270:
                                                            case 271:
                                                            case 272:
                                                            case 273:
                                                            case 274:
                                                            case 275:
                                                            case 276:
                                                            case 277:
                                                            case 278:
                                                            case 279:
                                                            case 280:
                                                              L27:
                                                                while (true)
                                                                  switch (state0) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L27;
                                                                      t1 = customAttribute.get$value();
                                                                    case 264:
                                                                      state0 = 0;
                                                                      value = $.index(t1, $.index(chunk_faces4, f));
                                                                      t1 = customAttribute.get$array();
                                                                    case 265:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 266:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 1, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 267:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 2, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 268:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 3, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 269:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 4, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 270:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 5, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 271:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 6, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 272:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 7, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 273:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 8, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 274:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 9, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 275:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 10, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 276:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 11, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 277:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 12, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 278:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 13, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 279:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 14, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 280:
                                                                      state0 = 0;
                                                                      $.indexSet(t1, offset_custom + 15, value.get$w());
                                                                      offset_custom += 16;
                                                                      v4 = value;
                                                                      v3 = v4;
                                                                      v2 = v3;
                                                                      v1 = v2;
                                                                      ++f;
                                                                  }
                                                          }
                                                        else
                                                          switch (state0) {
                                                            case 0:
                                                              t1 = customAttribute.get$boundTo();
                                                            case 281:
                                                              state0 = 0;
                                                            default:
                                                              if (state0 === 313 || state0 === 312 || state0 === 311 || state0 === 310 || state0 === 309 || state0 === 308 || state0 === 307 || state0 === 306 || state0 === 305 || state0 === 304 || state0 === 303 || state0 === 302 || state0 === 301 || state0 === 300 || state0 === 299 || state0 === 298 || state0 === 297 || state0 === 296 || state0 === 295 || state0 === 294 || state0 === 293 || state0 === 292 || state0 === 291 || state0 === 290 || state0 === 289 || state0 === 288 || state0 === 287 || state0 === 286 || state0 === 285 || state0 === 284 || state0 === 283 || state0 === 282 || state0 === 0 && $.eqB(t1, 'faceVertices'))
                                                                switch (state0) {
                                                                  case 0:
                                                                    fl = $.get$length(chunk_faces3);
                                                                    offset_custom = 0;
                                                                    f = 0;
                                                                  default:
                                                                    L28:
                                                                      while (true)
                                                                        switch (state0) {
                                                                          case 0:
                                                                            if (!$.ltB(f, fl))
                                                                              break L28;
                                                                            t1 = customAttribute.get$value();
                                                                          case 282:
                                                                            state0 = 0;
                                                                            value = $.index(t1, $.index(chunk_faces3, f));
                                                                          case 283:
                                                                            state0 = 0;
                                                                            v1 = $.index(value, 0);
                                                                            v2 = $.index(value, 1);
                                                                            v3 = $.index(value, 2);
                                                                            t3 = customAttribute.get$array();
                                                                          case 284:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom, v1.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 285:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 1, v1.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 286:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 2, v1.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 287:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 3, v1.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 288:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 4, v2.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 289:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 5, v2.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 290:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 6, v2.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 291:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 7, v2.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 292:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 8, v3.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 293:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 9, v3.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 294:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 10, v3.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 295:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 11, v3.get$w());
                                                                            offset_custom += 12;
                                                                            ++f;
                                                                        }
                                                                    fl = $.get$length(chunk_faces4);
                                                                    f = 0;
                                                                  case 296:
                                                                  case 297:
                                                                  case 298:
                                                                  case 299:
                                                                  case 300:
                                                                  case 301:
                                                                  case 302:
                                                                  case 303:
                                                                  case 304:
                                                                  case 305:
                                                                  case 306:
                                                                  case 307:
                                                                  case 308:
                                                                  case 309:
                                                                  case 310:
                                                                  case 311:
                                                                  case 312:
                                                                  case 313:
                                                                    L29:
                                                                      while (true)
                                                                        switch (state0) {
                                                                          case 0:
                                                                            if (!$.ltB(f, fl))
                                                                              break L29;
                                                                            t1 = customAttribute.get$value();
                                                                          case 296:
                                                                            state0 = 0;
                                                                            value = $.index(t1, $.index(chunk_faces4, f));
                                                                          case 297:
                                                                            state0 = 0;
                                                                            v1 = $.index(value, 0);
                                                                            v2 = $.index(value, 1);
                                                                            v3 = $.index(value, 2);
                                                                            v4 = $.index(value, 3);
                                                                            t3 = customAttribute.get$array();
                                                                          case 298:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom, v1.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 299:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 1, v1.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 300:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 2, v1.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 301:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 3, v1.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 302:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 4, v2.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 303:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 5, v2.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 304:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 6, v2.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 305:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 7, v2.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 306:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 8, v3.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 307:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 9, v3.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 308:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 10, v3.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 309:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 11, v3.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 310:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 12, v4.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 311:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 13, v4.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 312:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 14, v4.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 313:
                                                                            state0 = 0;
                                                                            $.indexSet(t3, offset_custom + 15, v4.get$w());
                                                                            offset_custom += 16;
                                                                            ++f;
                                                                        }
                                                                }
                                                              else
                                                                offset_custom = 0;
                                                          }
                                                    }
                                              }
                                            else
                                              offset_custom = 0;
                                        }
                                  }
                            }
                          this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
                          this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
                          offset_customSrc = 0;
                      }
                    }
                    ++i;
                }
        }
      if (dispose) {
        geometryGroup.set$__inittedArrays(null);
        geometryGroup.set$__colorArray(null);
        geometryGroup.set$__normalArray(null);
        geometryGroup.set$__tangentArray(null);
        geometryGroup.set$__uvArray(null);
        geometryGroup.set$__uv2Array(null);
        geometryGroup.set$__faceArray(null);
        geometryGroup.set$__vertexArray(null);
        geometryGroup.set$__lineArray(null);
        geometryGroup.set$__skinVertexAArray(null);
        geometryGroup.set$__skinVertexBArray(null);
        geometryGroup.set$__skinIndexArray(null);
        geometryGroup.set$__skinWeightArray(null);
      }
  }
},
 setDirectBuffers$3: function(geometry, hint, dispose) {
  var attributes = geometry.get$attributes();
  var index = $.index(attributes, 'index');
  var position = $.index(attributes, 'position');
  var normal = $.index(attributes, 'normal');
  var uv = $.index(attributes, 'uv');
  var color = $.index(attributes, 'color');
  var tangent = $.index(attributes, 'tangent');
  if (geometry.get$elementsNeedUpdate() === true && !(index == null)) {
    this._gl.bindBuffer$2(34963, index.get$buffer());
    this._gl.bufferData$3(34963, index.get$array(), hint);
  }
  if (geometry.get$verticesNeedUpdate() === true && !(position == null)) {
    this._gl.bindBuffer$2(34962, position.get$buffer());
    this._gl.bufferData$3(34962, position.get$array(), hint);
  }
  if (geometry.get$normalsNeedUpdate() === true && !(normal == null)) {
    this._gl.bindBuffer$2(34962, normal.get$buffer());
    this._gl.bufferData$3(34962, normal.get$array(), hint);
  }
  if (geometry.get$uvsNeedUpdate() === true && !(uv == null)) {
    this._gl.bindBuffer$2(34962, uv.get$buffer());
    this._gl.bufferData$3(34962, uv.get$array(), hint);
  }
  if (geometry.get$colorsNeedUpdate() === true && !(color == null)) {
    this._gl.bindBuffer$2(34962, color.get$buffer());
    this._gl.bufferData$3(34962, color.get$array(), hint);
  }
  if (geometry.get$tangentsNeedUpdate() === true && !(tangent == null)) {
    this._gl.bindBuffer$2(34962, tangent.get$buffer());
    this._gl.bufferData$3(34962, tangent.get$array(), hint);
  }
  if (dispose)
    for (var t1 = $.iterator(geometry.get$attributes()); t1.get$hasNext() === true;) {
      var t2 = t1.next$0();
      $.index(geometry.get$attributes(), t2).set$array(null);
    }
},
 renderBufferImmediate$3: function(object, program, material) {
  if (object.get$hasPositions() === true && $.index(object, '__webglVertexBuffer') !== true)
    $.indexSet(object, '__webglVertexBuffer', this._gl.createBuffer$0());
  if (object.get$hasNormals() === true && $.index(object, '__webglNormalBuffer') !== true)
    $.indexSet(object, '__webglNormalBuffer', this._gl.createBuffer$0());
  if (object.get$hasUvs() === true && $.index(object, '__webglUVBuffer') !== true)
    $.indexSet(object, '__webglUVBuffer', this._gl.createBuffer$0());
  if (object.get$hasColors() === true && $.index(object, '__webglColorBuffer') !== true)
    $.indexSet(object, '__webglColorBuffer', this._gl.createBuffer$0());
  if (object.get$hasPositions() === true) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglVertexBuffer'));
    this._gl.bufferData$3(34962, object.get$positionArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'position'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'position'), 3, 5126, false, 0, 0);
  }
  if (object.get$hasNormals() === true) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglNormalBuffer'));
    if ($.eqB(material.get$shading(), 1)) {
      var il = $.mul(object.get$count(), 3);
      if (typeof il !== 'number')
        return this.renderBufferImmediate$3$bailout(1, object, program, material, il);
      for (var nx = null, ny = null, nz = null, nax = null, nbx = null, ncx = null, nay = null, nby = null, ncy = null, naz = null, nbz = null, ncz = null, normalArray = null, i = 0; i < il; i += 9) {
        normalArray = object.get$normalArray();
        nax = $.index(normalArray, i);
        var t1 = i + 1;
        nay = $.index(normalArray, t1);
        var t2 = i + 2;
        naz = $.index(normalArray, t2);
        var t3 = i + 3;
        nbx = $.index(normalArray, t3);
        var t4 = i + 4;
        nby = $.index(normalArray, t4);
        var t5 = i + 5;
        nbz = $.index(normalArray, t5);
        var t6 = i + 6;
        ncx = $.index(normalArray, t6);
        var t7 = i + 7;
        ncy = $.index(normalArray, t7);
        var t8 = i + 8;
        ncz = $.index(normalArray, t8);
        nx = $.div($.add($.add(nax, nbx), ncx), 3);
        ny = $.div($.add($.add(nay, nby), ncy), 3);
        nz = $.div($.add($.add(naz, nbz), ncz), 3);
        $.indexSet(normalArray, i, nx);
        $.indexSet(normalArray, t1, ny);
        $.indexSet(normalArray, t2, nz);
        $.indexSet(normalArray, t3, nx);
        $.indexSet(normalArray, t4, ny);
        $.indexSet(normalArray, t5, nz);
        $.indexSet(normalArray, t6, nx);
        $.indexSet(normalArray, t7, ny);
        $.indexSet(normalArray, t8, nz);
      }
    }
    this._gl.bufferData$3(34962, object.get$normalArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'normal'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'normal'), 3, 5126, false, 0, 0);
  }
  if (object.get$hasUvs() === true && material.get$map() === true) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglUVBuffer'));
    this._gl.bufferData$3(34962, object.get$uvArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'uv'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'uv'), 2, 5126, false, 0, 0);
  }
  if (object.get$hasColors() === true && !$.eqB(material.get$vertexColors(), 0)) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglColorBuffer'));
    this._gl.bufferData$3(34962, object.get$colorArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'color'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'color'), 3, 5126, false, 0, 0);
  }
  this._gl.drawArrays$3(4, 0, object.get$count());
  object.set$count(0);
},
 renderBufferImmediate$3$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      var object = env0;
      var program = env1;
      var material = env2;
      il = env3;
      break;
  }
  switch (state0) {
    case 0:
      if (object.get$hasPositions() === true && $.index(object, '__webglVertexBuffer') !== true)
        $.indexSet(object, '__webglVertexBuffer', this._gl.createBuffer$0());
      if (object.get$hasNormals() === true && $.index(object, '__webglNormalBuffer') !== true)
        $.indexSet(object, '__webglNormalBuffer', this._gl.createBuffer$0());
      if (object.get$hasUvs() === true && $.index(object, '__webglUVBuffer') !== true)
        $.indexSet(object, '__webglUVBuffer', this._gl.createBuffer$0());
      if (object.get$hasColors() === true && $.index(object, '__webglColorBuffer') !== true)
        $.indexSet(object, '__webglColorBuffer', this._gl.createBuffer$0());
      if (object.get$hasPositions() === true) {
        this._gl.bindBuffer$2(34962, $.index(object, '__webglVertexBuffer'));
        this._gl.bufferData$3(34962, object.get$positionArray(), 35048);
        this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'position'));
        this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'position'), 3, 5126, false, 0, 0);
      }
    case 1:
      if (state0 === 1 || state0 === 0 && object.get$hasNormals() === true)
        switch (state0) {
          case 0:
            this._gl.bindBuffer$2(34962, $.index(object, '__webglNormalBuffer'));
          case 1:
            if (state0 === 1 || state0 === 0 && $.eqB(material.get$shading(), 1))
              switch (state0) {
                case 0:
                  var il = $.mul(object.get$count(), 3);
                case 1:
                  state0 = 0;
                  for (var nx = null, ny = null, nz = null, nax = null, nbx = null, ncx = null, nay = null, nby = null, ncy = null, naz = null, nbz = null, ncz = null, normalArray = null, i = 0; $.ltB(i, il); i += 9) {
                    normalArray = object.get$normalArray();
                    nax = $.index(normalArray, i);
                    var t1 = i + 1;
                    nay = $.index(normalArray, t1);
                    var t2 = i + 2;
                    naz = $.index(normalArray, t2);
                    var t3 = i + 3;
                    nbx = $.index(normalArray, t3);
                    var t4 = i + 4;
                    nby = $.index(normalArray, t4);
                    var t5 = i + 5;
                    nbz = $.index(normalArray, t5);
                    var t6 = i + 6;
                    ncx = $.index(normalArray, t6);
                    var t7 = i + 7;
                    ncy = $.index(normalArray, t7);
                    var t8 = i + 8;
                    ncz = $.index(normalArray, t8);
                    nx = $.div($.add($.add(nax, nbx), ncx), 3);
                    ny = $.div($.add($.add(nay, nby), ncy), 3);
                    nz = $.div($.add($.add(naz, nbz), ncz), 3);
                    $.indexSet(normalArray, i, nx);
                    $.indexSet(normalArray, t1, ny);
                    $.indexSet(normalArray, t2, nz);
                    $.indexSet(normalArray, t3, nx);
                    $.indexSet(normalArray, t4, ny);
                    $.indexSet(normalArray, t5, nz);
                    $.indexSet(normalArray, t6, nx);
                    $.indexSet(normalArray, t7, ny);
                    $.indexSet(normalArray, t8, nz);
                  }
              }
            this._gl.bufferData$3(34962, object.get$normalArray(), 35048);
            this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'normal'));
            this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'normal'), 3, 5126, false, 0, 0);
        }
      if (object.get$hasUvs() === true && material.get$map() === true) {
        this._gl.bindBuffer$2(34962, $.index(object, '__webglUVBuffer'));
        this._gl.bufferData$3(34962, object.get$uvArray(), 35048);
        this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'uv'));
        this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'uv'), 2, 5126, false, 0, 0);
      }
      if (object.get$hasColors() === true && !$.eqB(material.get$vertexColors(), 0)) {
        this._gl.bindBuffer$2(34962, $.index(object, '__webglColorBuffer'));
        this._gl.bufferData$3(34962, object.get$colorArray(), 35048);
        this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'color'));
        this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'color'), 3, 5126, false, 0, 0);
      }
      this._gl.drawArrays$3(4, 0, object.get$count());
      object.set$count(0);
  }
},
 renderBufferDirect$6: function(camera, lights, fog, material, geometry, object) {
  var t1 = material.get$visible();
  if (typeof t1 !== 'boolean')
    return this.renderBufferDirect$6$bailout(1, camera, lights, fog, material, geometry, object, t1, 0, 0, 0, 0);
  if (!t1)
    return;
  var program = this.setProgram$5(camera, lights, fog, material, object);
  var attributes = program.get$attributes();
  var wireframeBit = material.get$wireframe() === true ? 1 : 0;
  t1 = geometry.id;
  if (typeof t1 !== 'number')
    return this.renderBufferDirect$6$bailout(2, program, attributes, geometry, object, t1, wireframeBit, 0, 0, 0, 0, 0);
  t1 *= 16777215;
  var t3 = program.get$id();
  if (typeof t3 !== 'number')
    return this.renderBufferDirect$6$bailout(3, t1, t3, attributes, geometry, object, wireframeBit, 0, 0, 0, 0, 0);
  var geometryHash = t1 + t3 * 2 + wireframeBit;
  if (!(geometryHash === this._currentGeometryGroupHash)) {
    this._currentGeometryGroupHash = geometryHash;
    var updateBuffers = true;
  } else
    updateBuffers = false;
  if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
    var offsets = geometry.offsets;
    if (typeof offsets !== 'string' && (typeof offsets !== 'object' || offsets === null || offsets.constructor !== Array && !offsets.is$JavaScriptIndexingBehavior()))
      return this.renderBufferDirect$6$bailout(4, offsets, attributes, geometry, updateBuffers, 0, 0, 0, 0, 0, 0, 0);
    t1 = offsets.length;
    if (t1 > 1)
      updateBuffers = true;
    for (var t2 = geometry.attributes, t3 = this.info, i = 0; i < t1; ++i) {
      if (i >= offsets.length)
        throw $.ioore(i);
      var startIndex = offsets[i].get$index();
      if (typeof startIndex !== 'number')
        return this.renderBufferDirect$6$bailout(5, t3, attributes, startIndex, updateBuffers, t1, t2, i, offsets, 0, 0, 0);
      if (updateBuffers) {
        var position = $.index(t2, 'position');
        var positionSize = position.get$itemSize();
        if (typeof positionSize !== 'number')
          return this.renderBufferDirect$6$bailout(6, t3, attributes, startIndex, updateBuffers, t1, t2, i, position, offsets, positionSize, 0);
        this._gl.bindBuffer$2(34962, position.get$buffer());
        this._gl.vertexAttribPointer$6($.index(attributes, 'position'), positionSize, 5126, false, 0, startIndex * positionSize * 4);
        var normal = $.index(t2, 'normal');
        var t4 = $.index(attributes, 'normal');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(7, t3, t4, attributes, startIndex, updateBuffers, t1, t2, i, offsets, normal, 0);
        if (t4 >= 0 && normal === true) {
          var normalSize = normal.get$itemSize();
          if (typeof normalSize !== 'number')
            return this.renderBufferDirect$6$bailout(8, t3, attributes, startIndex, updateBuffers, t1, t2, i, offsets, normalSize, normal, 0);
          this._gl.bindBuffer$2(34962, normal.get$buffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'normal'), normalSize, 5126, false, 0, startIndex * normalSize * 4);
        }
        var uv = $.index(t2, 'uv');
        t4 = $.index(attributes, 'uv');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(9, t3, attributes, startIndex, updateBuffers, t4, t2, t1, i, offsets, uv, 0);
        if (t4 >= 0 && uv === true) {
          t4 = uv.get$buffer() === true;
          var t5 = this._gl;
          if (t4) {
            var uvSize = uv.get$itemSize();
            if (typeof uvSize !== 'number')
              return this.renderBufferDirect$6$bailout(10, startIndex, updateBuffers, t1, t5, t3, attributes, uvSize, t2, i, offsets, uv);
            t5.bindBuffer$2(34962, uv.get$buffer());
            this._gl.vertexAttribPointer$6($.index(attributes, 'uv'), uvSize, 5126, false, 0, startIndex * uvSize * 4);
            this._gl.enableVertexAttribArray$1($.index(attributes, 'uv'));
          } else
            t5.disableVertexAttribArray$1($.index(attributes, 'uv'));
        }
        var color = $.index(t2, 'color');
        t4 = $.index(attributes, 'color');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(11, t3, t4, attributes, startIndex, updateBuffers, t1, t2, i, offsets, color, 0);
        if (t4 >= 0 && color === true) {
          var colorSize = color.get$itemSize();
          if (typeof colorSize !== 'number')
            return this.renderBufferDirect$6$bailout(12, t3, attributes, startIndex, updateBuffers, t1, t2, i, offsets, colorSize, color, 0);
          this._gl.bindBuffer$2(34962, color.get$buffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'color'), colorSize, 5126, false, 0, startIndex * colorSize * 4);
        }
        var tangent = $.index(t2, 'tangent');
        t4 = $.index(attributes, 'tangent');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(13, t3, attributes, startIndex, updateBuffers, t4, t2, t1, i, offsets, tangent, 0);
        if (t4 >= 0 && tangent === true) {
          var tangentSize = tangent.get$itemSize();
          if (typeof tangentSize !== 'number')
            return this.renderBufferDirect$6$bailout(14, t3, tangentSize, attributes, startIndex, updateBuffers, t1, t2, i, offsets, tangent, 0);
          this._gl.bindBuffer$2(34962, tangent.get$buffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'tangent'), tangentSize, 5126, false, 0, startIndex * tangentSize * 4);
        }
        var index = $.index(t2, 'index');
        this._gl.bindBuffer$2(34963, index.get$buffer());
      }
      t4 = this._gl;
      if (i >= offsets.length)
        throw $.ioore(i);
      t5 = offsets[i];
      var t6 = t5.get$count();
      t5 = t5.get$start();
      if (typeof t5 !== 'number')
        return this.renderBufferDirect$6$bailout(15, t3, attributes, updateBuffers, t1, t2, i, offsets, t6, t5, t4, 0);
      t4.drawElements$4(4, t6, 5123, t5 * 2);
      t6 = t3.render;
      t4 = t6.get$calls();
      if (typeof t4 !== 'number')
        return this.renderBufferDirect$6$bailout(16, t3, t6, attributes, t4, updateBuffers, t1, t2, i, offsets, 0, 0);
      t6.set$calls(t4 + 1);
      t6 = t3.render;
      var t9 = t6.get$vertices();
      if (typeof t9 !== 'number')
        return this.renderBufferDirect$6$bailout(17, t3, t6, attributes, updateBuffers, t1, t2, i, offsets, t9, 0, 0);
      if (i >= offsets.length)
        throw $.ioore(i);
      var t11 = offsets[i].get$count();
      if (typeof t11 !== 'number')
        return this.renderBufferDirect$6$bailout(18, t3, t6, attributes, updateBuffers, t1, t2, i, offsets, t9, t11, 0);
      t6.set$vertices(t9 + t11);
      t6 = t3.render;
      var t13 = t6.get$faces();
      if (typeof t13 !== 'number')
        return this.renderBufferDirect$6$bailout(19, t3, t13, attributes, t6, t1, updateBuffers, t2, i, offsets, 0, 0);
      if (i >= offsets.length)
        throw $.ioore(i);
      var t15 = offsets[i].get$count();
      if (typeof t15 !== 'number')
        return this.renderBufferDirect$6$bailout(20, t3, t13, attributes, t6, t15, updateBuffers, t2, t1, i, offsets, 0);
      t6.set$faces(t13 + t15 / 3);
    }
  }
},
 renderBufferDirect$6$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10) {
  switch (state0) {
    case 1:
      var camera = env0;
      var lights = env1;
      var fog = env2;
      var material = env3;
      var geometry = env4;
      var object = env5;
      t1 = env6;
      break;
    case 2:
      program = env0;
      attributes = env1;
      geometry = env2;
      object = env3;
      t1 = env4;
      wireframeBit = env5;
      break;
    case 3:
      t1 = env0;
      t3 = env1;
      attributes = env2;
      geometry = env3;
      object = env4;
      wireframeBit = env5;
      break;
    case 4:
      offsets = env0;
      attributes = env1;
      geometry = env2;
      updateBuffers = env3;
      break;
    case 5:
      t2 = env0;
      attributes = env1;
      startIndex = env2;
      updateBuffers = env3;
      il = env4;
      t1 = env5;
      i = env6;
      offsets = env7;
      break;
    case 6:
      t2 = env0;
      attributes = env1;
      startIndex = env2;
      updateBuffers = env3;
      il = env4;
      t1 = env5;
      i = env6;
      position = env7;
      offsets = env8;
      positionSize = env9;
      break;
    case 7:
      t2 = env0;
      t3 = env1;
      attributes = env2;
      startIndex = env3;
      updateBuffers = env4;
      il = env5;
      t1 = env6;
      i = env7;
      offsets = env8;
      normal = env9;
      break;
    case 8:
      t2 = env0;
      attributes = env1;
      startIndex = env2;
      updateBuffers = env3;
      il = env4;
      t1 = env5;
      i = env6;
      offsets = env7;
      normalSize = env8;
      normal = env9;
      break;
    case 9:
      t2 = env0;
      attributes = env1;
      startIndex = env2;
      updateBuffers = env3;
      t3 = env4;
      t1 = env5;
      il = env6;
      i = env7;
      offsets = env8;
      uv = env9;
      break;
    case 10:
      startIndex = env0;
      updateBuffers = env1;
      il = env2;
      t4 = env3;
      t2 = env4;
      attributes = env5;
      uvSize = env6;
      t1 = env7;
      i = env8;
      offsets = env9;
      uv = env10;
      break;
    case 11:
      t2 = env0;
      t3 = env1;
      attributes = env2;
      startIndex = env3;
      updateBuffers = env4;
      il = env5;
      t1 = env6;
      i = env7;
      offsets = env8;
      color = env9;
      break;
    case 12:
      t2 = env0;
      attributes = env1;
      startIndex = env2;
      updateBuffers = env3;
      il = env4;
      t1 = env5;
      i = env6;
      offsets = env7;
      colorSize = env8;
      color = env9;
      break;
    case 13:
      t2 = env0;
      attributes = env1;
      startIndex = env2;
      updateBuffers = env3;
      t3 = env4;
      t1 = env5;
      il = env6;
      i = env7;
      offsets = env8;
      tangent = env9;
      break;
    case 14:
      t2 = env0;
      tangentSize = env1;
      attributes = env2;
      startIndex = env3;
      updateBuffers = env4;
      il = env5;
      t1 = env6;
      i = env7;
      offsets = env8;
      tangent = env9;
      break;
    case 15:
      t2 = env0;
      attributes = env1;
      updateBuffers = env2;
      il = env3;
      t1 = env4;
      i = env5;
      offsets = env6;
      t4 = env7;
      t5 = env8;
      t3 = env9;
      break;
    case 16:
      t2 = env0;
      t4 = env1;
      attributes = env2;
      t3 = env3;
      updateBuffers = env4;
      il = env5;
      t1 = env6;
      i = env7;
      offsets = env8;
      break;
    case 17:
      t2 = env0;
      t4 = env1;
      attributes = env2;
      updateBuffers = env3;
      il = env4;
      t1 = env5;
      i = env6;
      offsets = env7;
      t8 = env8;
      break;
    case 18:
      t2 = env0;
      t4 = env1;
      attributes = env2;
      updateBuffers = env3;
      il = env4;
      t1 = env5;
      i = env6;
      offsets = env7;
      t8 = env8;
      t10 = env9;
      break;
    case 19:
      t2 = env0;
      t12 = env1;
      attributes = env2;
      t4 = env3;
      il = env4;
      updateBuffers = env5;
      t1 = env6;
      i = env7;
      offsets = env8;
      break;
    case 20:
      t2 = env0;
      t12 = env1;
      attributes = env2;
      t4 = env3;
      t14 = env4;
      updateBuffers = env5;
      t1 = env6;
      il = env7;
      i = env8;
      offsets = env9;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = material.get$visible();
    case 1:
      state0 = 0;
      if ($.eqB(t1, false))
        return;
      var program = this.setProgram$5(camera, lights, fog, material, object);
      var attributes = program.get$attributes();
      var wireframeBit = material.get$wireframe() === true ? 1 : 0;
      t1 = geometry.id;
    case 2:
      state0 = 0;
      t1 = $.mul(t1, 16777215);
      var t3 = program.get$id();
    case 3:
      state0 = 0;
      var geometryHash = $.add($.add(t1, $.mul(t3, 2)), wireframeBit);
      if (!$.eqB(geometryHash, this._currentGeometryGroupHash)) {
        this._currentGeometryGroupHash = geometryHash;
        var updateBuffers = true;
      } else
        updateBuffers = false;
    default:
      if (state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$Mesh)
        switch (state0) {
          case 0:
            var offsets = geometry.offsets;
          case 4:
            state0 = 0;
            if ($.gtB($.get$length(offsets), 1))
              updateBuffers = true;
            var il = $.get$length(offsets);
            t1 = geometry.attributes;
            var t2 = this.info;
            var i = 0;
          default:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.ltB(i, il))
                      break L0;
                    var startIndex = $.index(offsets, i).get$index();
                  case 5:
                    state0 = 0;
                  default:
                    if (state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && updateBuffers)
                      switch (state0) {
                        case 0:
                          var position = $.index(t1, 'position');
                          var positionSize = position.get$itemSize();
                        case 6:
                          state0 = 0;
                          this._gl.bindBuffer$2(34962, position.get$buffer());
                          this._gl.vertexAttribPointer$6($.index(attributes, 'position'), positionSize, 5126, false, 0, $.mul($.mul(startIndex, positionSize), 4));
                          var normal = $.index(t1, 'normal');
                          t3 = $.index(attributes, 'normal');
                        case 7:
                          state0 = 0;
                        case 8:
                          if (state0 === 8 || state0 === 0 && $.geB(t3, 0) && normal === true)
                            switch (state0) {
                              case 0:
                                var normalSize = normal.get$itemSize();
                              case 8:
                                state0 = 0;
                                this._gl.bindBuffer$2(34962, normal.get$buffer());
                                this._gl.vertexAttribPointer$6($.index(attributes, 'normal'), normalSize, 5126, false, 0, $.mul($.mul(startIndex, normalSize), 4));
                            }
                          var uv = $.index(t1, 'uv');
                          t3 = $.index(attributes, 'uv');
                        case 9:
                          state0 = 0;
                        case 10:
                          if (state0 === 10 || state0 === 0 && $.geB(t3, 0) && uv === true)
                            switch (state0) {
                              case 0:
                                t3 = uv.get$buffer() === true;
                                var t4 = this._gl;
                              case 10:
                                if (state0 === 10 || state0 === 0 && t3)
                                  switch (state0) {
                                    case 0:
                                      var uvSize = uv.get$itemSize();
                                    case 10:
                                      state0 = 0;
                                      t4.bindBuffer$2(34962, uv.get$buffer());
                                      this._gl.vertexAttribPointer$6($.index(attributes, 'uv'), uvSize, 5126, false, 0, $.mul($.mul(startIndex, uvSize), 4));
                                      this._gl.enableVertexAttribArray$1($.index(attributes, 'uv'));
                                  }
                                else
                                  t4.disableVertexAttribArray$1($.index(attributes, 'uv'));
                            }
                          var color = $.index(t1, 'color');
                          t3 = $.index(attributes, 'color');
                        case 11:
                          state0 = 0;
                        case 12:
                          if (state0 === 12 || state0 === 0 && $.geB(t3, 0) && color === true)
                            switch (state0) {
                              case 0:
                                var colorSize = color.get$itemSize();
                              case 12:
                                state0 = 0;
                                this._gl.bindBuffer$2(34962, color.get$buffer());
                                this._gl.vertexAttribPointer$6($.index(attributes, 'color'), colorSize, 5126, false, 0, $.mul($.mul(startIndex, colorSize), 4));
                            }
                          var tangent = $.index(t1, 'tangent');
                          t3 = $.index(attributes, 'tangent');
                        case 13:
                          state0 = 0;
                        case 14:
                          if (state0 === 14 || state0 === 0 && $.geB(t3, 0) && tangent === true)
                            switch (state0) {
                              case 0:
                                var tangentSize = tangent.get$itemSize();
                              case 14:
                                state0 = 0;
                                this._gl.bindBuffer$2(34962, tangent.get$buffer());
                                this._gl.vertexAttribPointer$6($.index(attributes, 'tangent'), tangentSize, 5126, false, 0, $.mul($.mul(startIndex, tangentSize), 4));
                            }
                          var index = $.index(t1, 'index');
                          this._gl.bindBuffer$2(34963, index.get$buffer());
                      }
                    t3 = this._gl;
                    t4 = $.index(offsets, i).get$count();
                    var t5 = $.index(offsets, i).get$start();
                  case 15:
                    state0 = 0;
                    t3.drawElements$4(4, t4, 5123, $.mul(t5, 2));
                    t4 = t2.render;
                    t3 = t4.get$calls();
                  case 16:
                    state0 = 0;
                    t4.set$calls($.add(t3, 1));
                    t4 = t2.render;
                    var t8 = t4.get$vertices();
                  case 17:
                    state0 = 0;
                    var t10 = $.index(offsets, i).get$count();
                  case 18:
                    state0 = 0;
                    t4.set$vertices($.add(t8, t10));
                    t4 = t2.render;
                    var t12 = t4.get$faces();
                  case 19:
                    state0 = 0;
                    var t14 = $.index(offsets, i).get$count();
                  case 20:
                    state0 = 0;
                    t4.set$faces($.add(t12, $.div(t14, 3)));
                    ++i;
                }
        }
  }
},
 renderBuffer$6: function(camera, lights, fog, material, geometryGroup, webglobject) {
  var object = webglobject.get$object();
  if (material.get$visible() !== true)
    return;
  var program = this.setProgram$5(camera, lights, fog, material, webglobject);
  var attributes = program.get$attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.renderBuffer$6$bailout(1, program, attributes, geometryGroup, webglobject, material, object, 0, 0, 0);
  var wireframeBit = material.get$wireframe() === true ? 1 : 0;
  var t1 = geometryGroup.get$id();
  if (typeof t1 !== 'number')
    return this.renderBuffer$6$bailout(2, program, attributes, geometryGroup, webglobject, material, object, wireframeBit, t1, 0);
  t1 *= 16777215;
  var t3 = program.get$id();
  if (typeof t3 !== 'number')
    return this.renderBuffer$6$bailout(3, t1, t3, attributes, geometryGroup, webglobject, material, object, wireframeBit, 0);
  var geometryGroupHash = t1 + t3 * 2 + wireframeBit;
  if (!(geometryGroupHash === this._currentGeometryGroupHash)) {
    this._currentGeometryGroupHash = geometryGroupHash;
    var updateBuffers = true;
  } else
    updateBuffers = false;
  if (material.get$morphTargets() !== true) {
    throw $.iae('position');
    if ('position' < 0 || 'position' >= attributes.length)
      throw $.ioore('position');
    t1 = attributes.position;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(4, t1, attributes, geometryGroup, webglobject, material, updateBuffers, object, 0, 0);
    t1 = t1 >= 0;
  } else
    t1 = false;
  if (t1) {
    if (updateBuffers) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
      t1 = this._gl;
      throw $.iae('position');
      if ('position' < 0 || 'position' >= attributes.length)
        throw $.ioore('position');
      t1.vertexAttribPointer$6(attributes.position, 3, 5126, false, 0, 0);
    }
  } else if (webglobject.get$morphTargetBase() === true)
    this.setupMorphTargets$3(material, geometryGroup, webglobject);
  if (updateBuffers) {
    t1 = geometryGroup.get$__webglCustomAttributesList();
    if (!(t1 == null)) {
      var il = $.get$length(t1);
      if (typeof il !== 'number')
        return this.renderBuffer$6$bailout(5, attributes, geometryGroup, material, updateBuffers, object, il, 0, 0, 0);
      for (var attribute = null, i = 0; i < il; ++i) {
        t1 = geometryGroup.get$__webglCustomAttributesList();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.renderBuffer$6$bailout(6, attributes, material, geometryGroup, updateBuffers, object, t1, i, il, 0);
        if (i >= t1.length)
          throw $.ioore(i);
        attribute = t1[i];
        t1 = attribute.get$buffer().get$belongsToAttribute();
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= attributes.length)
          throw $.ioore(t1);
        t1 = attributes[t1];
        if (typeof t1 !== 'number')
          return this.renderBuffer$6$bailout(7, t1, attributes, geometryGroup, material, updateBuffers, object, attribute, i, il);
        if (t1 >= 0) {
          this._gl.bindBuffer$2(34962, attribute.get$buffer());
          t1 = this._gl;
          var t2 = attribute.get$buffer().get$belongsToAttribute();
          if (t2 !== (t2 | 0))
            throw $.iae(t2);
          if (t2 < 0 || t2 >= attributes.length)
            throw $.ioore(t2);
          t1.vertexAttribPointer$6(attributes[t2], attribute.get$size(), 5126, false, 0, 0);
        }
      }
    }
    throw $.iae('color');
    if ('color' < 0 || 'color' >= attributes.length)
      throw $.ioore('color');
    t1 = attributes.color;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(8, t1, attributes, material, geometryGroup, updateBuffers, object, 0, 0, 0);
    if (t1 >= 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
      t1 = this._gl;
      if ('color' >= attributes.length)
        throw $.ioore('color');
      t1.vertexAttribPointer$6(attributes.color, 3, 5126, false, 0, 0);
    }
    throw $.iae('normal');
    if ('normal' < 0 || 'normal' >= attributes.length)
      throw $.ioore('normal');
    t1 = attributes.normal;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(9, t1, attributes, material, geometryGroup, updateBuffers, object, 0, 0, 0);
    if (t1 >= 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
      t1 = this._gl;
      if ('normal' >= attributes.length)
        throw $.ioore('normal');
      t1.vertexAttribPointer$6(attributes.normal, 3, 5126, false, 0, 0);
    }
    throw $.iae('tangent');
    if ('tangent' < 0 || 'tangent' >= attributes.length)
      throw $.ioore('tangent');
    t1 = attributes.tangent;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(10, attributes, material, geometryGroup, updateBuffers, object, t1, 0, 0, 0);
    if (t1 >= 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
      t1 = this._gl;
      if ('tangent' >= attributes.length)
        throw $.ioore('tangent');
      t1.vertexAttribPointer$6(attributes.tangent, 4, 5126, false, 0, 0);
    }
    throw $.iae('uv');
    if ('uv' < 0 || 'uv' >= attributes.length)
      throw $.ioore('uv');
    t1 = attributes.uv;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(11, attributes, material, geometryGroup, updateBuffers, object, t1, 0, 0, 0);
    if (t1 >= 0) {
      t2 = geometryGroup.get$__webglUVBuffer();
      t3 = !(t2 == null);
      var t4 = this._gl;
      if (t3) {
        t4.bindBuffer$2(34962, t2);
        t1 = this._gl;
        if ('uv' >= attributes.length)
          throw $.ioore('uv');
        t1.vertexAttribPointer$6(attributes.uv, 2, 5126, false, 0, 0);
        t1 = this._gl;
        if ('uv' >= attributes.length)
          throw $.ioore('uv');
        t1.enableVertexAttribArray$1(attributes.uv);
      } else
        t4.disableVertexAttribArray$1(t1);
    }
    throw $.iae('uv2');
    if ('uv2' < 0 || 'uv2' >= attributes.length)
      throw $.ioore('uv2');
    t1 = attributes.uv2;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(12, attributes, material, geometryGroup, updateBuffers, object, t1, 0, 0, 0);
    if (t1 >= 0) {
      t2 = geometryGroup.get$__webglUV2Buffer();
      t3 = !(t2 == null);
      t4 = this._gl;
      if (t3) {
        t4.bindBuffer$2(34962, t2);
        t1 = this._gl;
        if ('uv2' >= attributes.length)
          throw $.ioore('uv2');
        t1.vertexAttribPointer$6(attributes.uv2, 2, 5126, false, 0, 0);
        t1 = this._gl;
        if ('uv2' >= attributes.length)
          throw $.ioore('uv2');
        t1.enableVertexAttribArray$1(attributes.uv2);
      } else
        t4.disableVertexAttribArray$1(t1);
    }
    if (material.get$skinning() === true) {
      throw $.iae('skinVertexA');
      t1 = attributes.length;
      if ('skinVertexA' < 0 || 'skinVertexA' >= t1)
        throw $.ioore('skinVertexA');
      t2 = attributes.skinVertexA;
      if (typeof t2 !== 'number')
        return this.renderBuffer$6$bailout(13, t2, attributes, material, geometryGroup, updateBuffers, object, 0, 0, 0);
      if (t2 >= 0) {
        throw $.iae('skinVertexB');
        if ('skinVertexB' < 0 || 'skinVertexB' >= t1)
          throw $.ioore('skinVertexB');
        t2 = attributes.skinVertexB;
        if (typeof t2 !== 'number')
          return this.renderBuffer$6$bailout(14, attributes, material, geometryGroup, updateBuffers, object, t2, 0, 0, 0);
        if (t2 >= 0) {
          throw $.iae('skinIndex');
          if ('skinIndex' < 0 || 'skinIndex' >= t1)
            throw $.ioore('skinIndex');
          t2 = attributes.skinIndex;
          if (typeof t2 !== 'number')
            return this.renderBuffer$6$bailout(15, attributes, material, geometryGroup, updateBuffers, object, t2, 0, 0, 0);
          if (t2 >= 0) {
            throw $.iae('skinWeight');
            if ('skinWeight' < 0 || 'skinWeight' >= t1)
              throw $.ioore('skinWeight');
            t2 = attributes.skinWeight;
            if (typeof t2 !== 'number')
              return this.renderBuffer$6$bailout(16, attributes, material, geometryGroup, updateBuffers, object, t2, 0, 0, 0);
            t2 = t2 >= 0;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
      t1 = this._gl;
      throw $.iae('skinVertexA');
      if ('skinVertexA' < 0 || 'skinVertexA' >= attributes.length)
        throw $.ioore('skinVertexA');
      t1.vertexAttribPointer$6(attributes.skinVertexA, 4, 5126, false, 0, 0);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
      t1 = this._gl;
      throw $.iae('skinVertexB');
      if ('skinVertexB' < 0 || 'skinVertexB' >= attributes.length)
        throw $.ioore('skinVertexB');
      t1.vertexAttribPointer$6(attributes.skinVertexB, 4, 5126, false, 0, 0);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
      t1 = this._gl;
      throw $.iae('skinIndex');
      if ('skinIndex' < 0 || 'skinIndex' >= attributes.length)
        throw $.ioore('skinIndex');
      t1.vertexAttribPointer$6(attributes.skinIndex, 4, 5126, false, 0, 0);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
      t1 = this._gl;
      throw $.iae('skinWeight');
      if ('skinWeight' < 0 || 'skinWeight' >= attributes.length)
        throw $.ioore('skinWeight');
      t1.vertexAttribPointer$6(attributes.skinWeight, 4, 5126, false, 0, 0);
    }
  }
  if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
    if (material.get$wireframe() === true) {
      this.setLineWidth$1(material.get$wireframeLinewidth());
      if (updateBuffers)
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
      this._gl.drawElements$4(1, geometryGroup.get$__webglLineCount(), 5123, 0);
    } else {
      if (updateBuffers)
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
      this._gl.drawElements$4(4, geometryGroup.get$__webglFaceCount(), 5123, 0);
    }
    t1 = this.info;
    t2 = t1.render;
    t3 = t2.get$calls();
    if (typeof t3 !== 'number')
      return this.renderBuffer$6$bailout(17, t3, geometryGroup, t1, t2, 0, 0, 0, 0, 0);
    t2.set$calls(t3 + 1);
    t2 = t1.render;
    var t5 = t2.get$vertices();
    if (typeof t5 !== 'number')
      return this.renderBuffer$6$bailout(18, t2, geometryGroup, t1, t5, 0, 0, 0, 0, 0);
    var t7 = geometryGroup.get$__webglFaceCount();
    if (typeof t7 !== 'number')
      return this.renderBuffer$6$bailout(19, t7, t2, geometryGroup, t1, t5, 0, 0, 0, 0);
    t2.set$vertices(t5 + t7);
    t1 = t1.render;
    t2 = t1.get$faces();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(20, t1, geometryGroup, t2, 0, 0, 0, 0, 0, 0);
    var t10 = geometryGroup.get$__webglFaceCount();
    if (typeof t10 !== 'number')
      return this.renderBuffer$6$bailout(21, t1, t2, t10, 0, 0, 0, 0, 0, 0);
    t1.set$faces(t2 + $.tdiv(t10, 3));
  } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
    t1 = object.type;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(22, t1, material, geometryGroup, 0, 0, 0, 0, 0, 0);
    var primitives = t1 === 0 ? 3 : 1;
    this.setLineWidth$1(material.get$linewidth());
    this._gl.drawArrays$3(primitives, 0, geometryGroup.get$__webglLineCount());
    t1 = this.info.render;
    t2 = t1.get$calls();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(23, t2, t1, 0, 0, 0, 0, 0, 0, 0);
    t1.set$calls(t2 + 1);
  } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
    this._gl.drawArrays$3(0, 0, geometryGroup.get$__webglParticleCount());
    t1 = this.info;
    t2 = t1.render;
    t3 = t2.get$calls();
    if (typeof t3 !== 'number')
      return this.renderBuffer$6$bailout(24, t3, t1, t2, geometryGroup, 0, 0, 0, 0, 0);
    t2.set$calls(t3 + 1);
    t1 = t1.render;
    t2 = t1.get$points();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(25, t1, geometryGroup, t2, 0, 0, 0, 0, 0, 0);
    var t6 = geometryGroup.get$__webglParticleCount();
    if (typeof t6 !== 'number')
      return this.renderBuffer$6$bailout(26, t1, t2, t6, 0, 0, 0, 0, 0, 0);
    t1.set$points(t2 + t6);
  } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
    this._gl.drawArrays$3(5, 0, geometryGroup.get$__webglVertexCount());
    t1 = this.info.render;
    t2 = t1.get$calls();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(27, t2, t1, 0, 0, 0, 0, 0, 0, 0);
    t1.set$calls(t2 + 1);
  }
},
 renderBuffer$6$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      program = env0;
      attributes = env1;
      var geometryGroup = env2;
      var webglobject = env3;
      var material = env4;
      object = env5;
      break;
    case 2:
      program = env0;
      attributes = env1;
      geometryGroup = env2;
      webglobject = env3;
      material = env4;
      object = env5;
      wireframeBit = env6;
      t1 = env7;
      break;
    case 3:
      t1 = env0;
      t3 = env1;
      attributes = env2;
      geometryGroup = env3;
      webglobject = env4;
      material = env5;
      object = env6;
      wireframeBit = env7;
      break;
    case 4:
      t1 = env0;
      attributes = env1;
      geometryGroup = env2;
      webglobject = env3;
      material = env4;
      updateBuffers = env5;
      object = env6;
      break;
    case 5:
      attributes = env0;
      geometryGroup = env1;
      material = env2;
      updateBuffers = env3;
      object = env4;
      il = env5;
      break;
    case 6:
      attributes = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      object = env4;
      t1 = env5;
      i = env6;
      il = env7;
      break;
    case 7:
      t1 = env0;
      attributes = env1;
      geometryGroup = env2;
      material = env3;
      updateBuffers = env4;
      object = env5;
      attribute = env6;
      i = env7;
      il = env8;
      break;
    case 8:
      t1 = env0;
      attributes = env1;
      material = env2;
      geometryGroup = env3;
      updateBuffers = env4;
      object = env5;
      break;
    case 9:
      t1 = env0;
      attributes = env1;
      material = env2;
      geometryGroup = env3;
      updateBuffers = env4;
      object = env5;
      break;
    case 10:
      attributes = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      object = env4;
      t1 = env5;
      break;
    case 11:
      attributes = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      object = env4;
      t1 = env5;
      break;
    case 12:
      attributes = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      object = env4;
      t1 = env5;
      break;
    case 13:
      t1 = env0;
      attributes = env1;
      material = env2;
      geometryGroup = env3;
      updateBuffers = env4;
      object = env5;
      break;
    case 14:
      attributes = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      object = env4;
      t1 = env5;
      break;
    case 15:
      attributes = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      object = env4;
      t1 = env5;
      break;
    case 16:
      attributes = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      object = env4;
      t1 = env5;
      break;
    case 17:
      t3 = env0;
      geometryGroup = env1;
      t1 = env2;
      t2 = env3;
      break;
    case 18:
      t2 = env0;
      geometryGroup = env1;
      t1 = env2;
      t5 = env3;
      break;
    case 19:
      t7 = env0;
      t2 = env1;
      geometryGroup = env2;
      t1 = env3;
      t5 = env4;
      break;
    case 20:
      t1 = env0;
      geometryGroup = env1;
      t2 = env2;
      break;
    case 21:
      t1 = env0;
      t2 = env1;
      t10 = env2;
      break;
    case 22:
      t1 = env0;
      material = env1;
      geometryGroup = env2;
      break;
    case 23:
      t2 = env0;
      t1 = env1;
      break;
    case 24:
      t3 = env0;
      t1 = env1;
      t2 = env2;
      geometryGroup = env3;
      break;
    case 25:
      t1 = env0;
      geometryGroup = env1;
      t2 = env2;
      break;
    case 26:
      t1 = env0;
      t2 = env1;
      t6 = env2;
      break;
    case 27:
      t2 = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
      var object = webglobject.get$object();
      if (material.get$visible() !== true)
        return;
      var program = this.setProgram$5(camera, lights, fog, material, webglobject);
      var attributes = program.get$attributes();
    case 1:
      state0 = 0;
      var wireframeBit = material.get$wireframe() === true ? 1 : 0;
      var t1 = geometryGroup.get$id();
    case 2:
      state0 = 0;
      t1 = $.mul(t1, 16777215);
      var t3 = program.get$id();
    case 3:
      state0 = 0;
      var geometryGroupHash = $.add($.add(t1, $.mul(t3, 2)), wireframeBit);
      if (!$.eqB(geometryGroupHash, this._currentGeometryGroupHash)) {
        this._currentGeometryGroupHash = geometryGroupHash;
        var updateBuffers = true;
      } else
        updateBuffers = false;
    case 4:
      if (state0 === 4 || state0 === 0 && material.get$morphTargets() !== true)
        switch (state0) {
          case 0:
            t1 = $.index(attributes, 'position');
          case 4:
            state0 = 0;
            t1 = $.geB(t1, 0);
        }
      else
        t1 = false;
      if (t1) {
        if (updateBuffers) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
        }
      } else if (webglobject.get$morphTargetBase() === true)
        this.setupMorphTargets$3(material, geometryGroup, webglobject);
    default:
      if (state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && updateBuffers)
        switch (state0) {
          case 0:
            t1 = geometryGroup.get$__webglCustomAttributesList();
          default:
            if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && !(t1 == null))
              switch (state0) {
                case 0:
                  var il = $.get$length(t1);
                case 5:
                  state0 = 0;
                  var attribute = null;
                  var i = 0;
                default:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, il))
                            break L0;
                          t1 = geometryGroup.get$__webglCustomAttributesList();
                        case 6:
                          state0 = 0;
                          attribute = $.index(t1, i);
                          t1 = $.index(attributes, attribute.get$buffer().get$belongsToAttribute());
                        case 7:
                          state0 = 0;
                          if ($.geB(t1, 0)) {
                            this._gl.bindBuffer$2(34962, attribute.get$buffer());
                            this._gl.vertexAttribPointer$6($.index(attributes, attribute.get$buffer().get$belongsToAttribute()), attribute.get$size(), 5126, false, 0, 0);
                          }
                          ++i;
                      }
              }
            t1 = $.index(attributes, 'color');
          case 8:
            state0 = 0;
            if ($.geB(t1, 0)) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'color'), 3, 5126, false, 0, 0);
            }
            t1 = $.index(attributes, 'normal');
          case 9:
            state0 = 0;
            if ($.geB(t1, 0)) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'normal'), 3, 5126, false, 0, 0);
            }
            t1 = $.index(attributes, 'tangent');
          case 10:
            state0 = 0;
            if ($.geB(t1, 0)) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'tangent'), 4, 5126, false, 0, 0);
            }
            t1 = $.index(attributes, 'uv');
          case 11:
            state0 = 0;
            if ($.geB(t1, 0)) {
              t1 = geometryGroup.get$__webglUVBuffer();
              var t2 = !(t1 == null);
              t3 = this._gl;
              if (t2) {
                t3.bindBuffer$2(34962, t1);
                this._gl.vertexAttribPointer$6($.index(attributes, 'uv'), 2, 5126, false, 0, 0);
                this._gl.enableVertexAttribArray$1($.index(attributes, 'uv'));
              } else
                t3.disableVertexAttribArray$1($.index(attributes, 'uv'));
            }
            t1 = $.index(attributes, 'uv2');
          case 12:
            state0 = 0;
            if ($.geB(t1, 0)) {
              t1 = geometryGroup.get$__webglUV2Buffer();
              t2 = !(t1 == null);
              t3 = this._gl;
              if (t2) {
                t3.bindBuffer$2(34962, t1);
                this._gl.vertexAttribPointer$6($.index(attributes, 'uv2'), 2, 5126, false, 0, 0);
                this._gl.enableVertexAttribArray$1($.index(attributes, 'uv2'));
              } else
                t3.disableVertexAttribArray$1($.index(attributes, 'uv2'));
            }
          case 13:
          case 14:
          case 15:
          case 16:
            if (state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 0 && material.get$skinning() === true)
              switch (state0) {
                case 0:
                  t1 = $.index(attributes, 'skinVertexA');
                case 13:
                  state0 = 0;
                default:
                  if (state0 === 16 || state0 === 15 || state0 === 14 || state0 === 0 && $.geB(t1, 0))
                    switch (state0) {
                      case 0:
                        t1 = $.index(attributes, 'skinVertexB');
                      case 14:
                        state0 = 0;
                      default:
                        if (state0 === 16 || state0 === 15 || state0 === 0 && $.geB(t1, 0))
                          switch (state0) {
                            case 0:
                              t1 = $.index(attributes, 'skinIndex');
                            case 15:
                              state0 = 0;
                            case 16:
                              if (state0 === 16 || state0 === 0 && $.geB(t1, 0))
                                switch (state0) {
                                  case 0:
                                    t1 = $.index(attributes, 'skinWeight');
                                  case 16:
                                    state0 = 0;
                                    t1 = $.geB(t1, 0);
                                }
                              else
                                t1 = false;
                          }
                        else
                          t1 = false;
                    }
                  else
                    t1 = false;
              }
            else
              t1 = false;
            if (t1) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinVertexA'), 4, 5126, false, 0, 0);
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinVertexB'), 4, 5126, false, 0, 0);
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinIndex'), 4, 5126, false, 0, 0);
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinWeight'), 4, 5126, false, 0, 0);
            }
        }
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      if (state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$Mesh)
        switch (state0) {
          case 0:
            if (material.get$wireframe() === true) {
              this.setLineWidth$1(material.get$wireframeLinewidth());
              if (updateBuffers)
                this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
              this._gl.drawElements$4(1, geometryGroup.get$__webglLineCount(), 5123, 0);
            } else {
              if (updateBuffers)
                this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
              this._gl.drawElements$4(4, geometryGroup.get$__webglFaceCount(), 5123, 0);
            }
            t1 = this.info;
            t2 = t1.render;
            t3 = t2.get$calls();
          case 17:
            state0 = 0;
            t2.set$calls($.add(t3, 1));
            t2 = t1.render;
            var t5 = t2.get$vertices();
          case 18:
            state0 = 0;
            var t7 = geometryGroup.get$__webglFaceCount();
          case 19:
            state0 = 0;
            t2.set$vertices($.add(t5, t7));
            t1 = t1.render;
            t2 = t1.get$faces();
          case 20:
            state0 = 0;
            var t10 = geometryGroup.get$__webglFaceCount();
          case 21:
            state0 = 0;
            t1.set$faces($.add(t2, $.tdiv(t10, 3)));
        }
      else
        switch (state0) {
          case 0:
          default:
            if (state0 === 23 || state0 === 22 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$Line)
              switch (state0) {
                case 0:
                  t1 = object.type;
                case 22:
                  state0 = 0;
                  var primitives = $.eqB(t1, 0) ? 3 : 1;
                  this.setLineWidth$1(material.get$linewidth());
                  this._gl.drawArrays$3(primitives, 0, geometryGroup.get$__webglLineCount());
                  t1 = this.info.render;
                  t2 = t1.get$calls();
                case 23:
                  state0 = 0;
                  t1.set$calls($.add(t2, 1));
              }
            else
              switch (state0) {
                case 0:
                default:
                  if (state0 === 26 || state0 === 25 || state0 === 24 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$ParticleSystem)
                    switch (state0) {
                      case 0:
                        this._gl.drawArrays$3(0, 0, geometryGroup.get$__webglParticleCount());
                        t1 = this.info;
                        t2 = t1.render;
                        t3 = t2.get$calls();
                      case 24:
                        state0 = 0;
                        t2.set$calls($.add(t3, 1));
                        t1 = t1.render;
                        t2 = t1.get$points();
                      case 25:
                        state0 = 0;
                        var t6 = geometryGroup.get$__webglParticleCount();
                      case 26:
                        state0 = 0;
                        t1.set$points($.add(t2, t6));
                    }
                  else
                    switch (state0) {
                      case 0:
                      case 27:
                        if (state0 === 27 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$Ribbon)
                          switch (state0) {
                            case 0:
                              this._gl.drawArrays$3(5, 0, geometryGroup.get$__webglVertexCount());
                              t1 = this.info.render;
                              t2 = t1.get$calls();
                            case 27:
                              state0 = 0;
                              t1.set$calls($.add(t2, 1));
                          }
                    }
              }
        }
  }
},
 setupMorphTargets$3: function(material, geometryGroup, object) {
  var attributes = material.get$program().get$attributes();
  if (!$.eqB(object.get$morphTargetBase(), -1)) {
    this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), object.get$morphTargetBase()));
    this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
  } else if ($.geB($.index(attributes, 'position'), 0)) {
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
    this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
  }
  if ($.get$length(object.get$morphTargetForcedOrder()) === true) {
    var order = object.get$morphTargetForcedOrder();
    if (typeof order !== 'string' && (typeof order !== 'object' || order === null || order.constructor !== Array && !order.is$JavaScriptIndexingBehavior()))
      return this.setupMorphTargets$3$bailout(1, material, geometryGroup, object, order, attributes, 0);
    var influences = object.get$morphTargetInfluences();
    if (typeof influences !== 'string' && (typeof influences !== 'object' || influences === null || influences.constructor !== Array && !influences.is$JavaScriptIndexingBehavior()))
      return this.setupMorphTargets$3$bailout(2, material, geometryGroup, object, attributes, order, influences);
    var m = 0;
    while (true) {
      if (!($.ltB(m, material.get$numSupportedMorphTargets()) && m < order.length))
        break;
      var t1 = this._gl;
      var t2 = geometryGroup.get$__webglMorphTargetsBuffers();
      if (m >= order.length)
        throw $.ioore(m);
      t1.bindBuffer$2(34962, $.index(t2, order[m]));
      this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
      if (material.get$morphNormals() === true) {
        t1 = this._gl;
        t2 = geometryGroup.get$__webglMorphNormalsBuffers();
        if (m >= order.length)
          throw $.ioore(m);
        t1.bindBuffer$2(34962, $.index(t2, order[m]));
        this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
      }
      t1 = object.get$__webglMorphTargetInfluences();
      if (m >= order.length)
        throw $.ioore(m);
      t2 = order[m];
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= influences.length)
        throw $.ioore(t2);
      $.indexSet(t1, m, influences[t2]);
      ++m;
    }
  } else {
    var activeInfluenceIndices = [];
    influences = object.get$morphTargetInfluences();
    if (typeof influences !== 'string' && (typeof influences !== 'object' || influences === null || influences.constructor !== Array && !influences.is$JavaScriptIndexingBehavior()))
      return this.setupMorphTargets$3$bailout(3, material, geometryGroup, object, attributes, activeInfluenceIndices, influences);
    var il = influences.length;
    for (var influence = null, i = 0; i < il; ++i) {
      if (i >= influences.length)
        throw $.ioore(i);
      influence = influences[i];
      if ($.gtB(influence, 0))
        activeInfluenceIndices.push([i, influence]);
    }
    if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphTargets())) {
      $.sort$1(activeInfluenceIndices, this.get$numericalSort());
      $.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
    } else if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphNormals()))
      $.sort$1(activeInfluenceIndices, this.get$numericalSort());
    else if (activeInfluenceIndices.length === 0)
      activeInfluenceIndices.push([0, 0]);
    for (var influenceIndex = null, m = 0; $.ltB(m, material.get$numSupportedMorphTargets());) {
      if (m >= activeInfluenceIndices.length)
        throw $.ioore(m);
      t1 = activeInfluenceIndices[m];
      if (!(t1 == null) && $.get$isEmpty(t1) !== true) {
        if (m >= activeInfluenceIndices.length)
          throw $.ioore(m);
        influenceIndex = $.index(activeInfluenceIndices[m], 0);
        this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), influenceIndex));
        this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
        if (material.get$morphNormals() === true) {
          this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphNormalsBuffers(), influenceIndex));
          this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
        }
        t1 = object.get$__webglMorphTargetInfluences();
        if (influenceIndex !== (influenceIndex | 0))
          throw $.iae(influenceIndex);
        if (influenceIndex < 0 || influenceIndex >= influences.length)
          throw $.ioore(influenceIndex);
        $.indexSet(t1, m, influences[influenceIndex]);
      } else {
        this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
        if (material.get$morphNormals() === true)
          this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
        $.indexSet(object.get$__webglMorphTargetInfluences(), m, 0);
      }
      ++m;
    }
  }
  if (!($.index(material.get$program().get$uniforms(), 'morphTargetInfluences') == null))
    this._gl.uniform1fv$2($.index(material.get$program().get$uniforms(), 'morphTargetInfluences'), object.get$__webglMorphTargetInfluences());
},
 setupMorphTargets$3$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      var material = env0;
      var geometryGroup = env1;
      var object = env2;
      order = env3;
      attributes = env4;
      break;
    case 2:
      material = env0;
      geometryGroup = env1;
      object = env2;
      attributes = env3;
      order = env4;
      influences = env5;
      break;
    case 3:
      material = env0;
      geometryGroup = env1;
      object = env2;
      attributes = env3;
      activeInfluenceIndices = env4;
      influences = env5;
      break;
  }
  switch (state0) {
    case 0:
      var attributes = material.get$program().get$attributes();
      if (!$.eqB(object.get$morphTargetBase(), -1)) {
        this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), object.get$morphTargetBase()));
        this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
      } else if ($.geB($.index(attributes, 'position'), 0)) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
        this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
      }
    default:
      if (state0 === 2 || state0 === 1 || state0 === 0 && $.get$length(object.get$morphTargetForcedOrder()) === true)
        switch (state0) {
          case 0:
            var order = object.get$morphTargetForcedOrder();
          case 1:
            state0 = 0;
            var influences = object.get$morphTargetInfluences();
          case 2:
            state0 = 0;
            var m = 0;
            while (true) {
              if (!($.ltB(m, material.get$numSupportedMorphTargets()) && $.ltB(m, $.get$length(order))))
                break;
              this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), $.index(order, m)));
              this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
              if (material.get$morphNormals() === true) {
                this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphNormalsBuffers(), $.index(order, m)));
                this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
              }
              $.indexSet(object.get$__webglMorphTargetInfluences(), m, $.index(influences, $.index(order, m)));
              ++m;
            }
        }
      else
        switch (state0) {
          case 0:
            var activeInfluenceIndices = [];
            influences = object.get$morphTargetInfluences();
          case 3:
            state0 = 0;
            var il = $.get$length(influences);
            for (var influence = null, i = 0; $.ltB(i, il); ++i) {
              influence = $.index(influences, i);
              if ($.gtB(influence, 0))
                activeInfluenceIndices.push([i, influence]);
            }
            if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphTargets())) {
              $.sort$1(activeInfluenceIndices, this.get$numericalSort());
              $.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
            } else if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphNormals()))
              $.sort$1(activeInfluenceIndices, this.get$numericalSort());
            else if (activeInfluenceIndices.length === 0)
              activeInfluenceIndices.push([0, 0]);
            for (var influenceIndex = null, m = 0; $.ltB(m, material.get$numSupportedMorphTargets());) {
              if (m >= activeInfluenceIndices.length)
                throw $.ioore(m);
              var t1 = activeInfluenceIndices[m];
              if (!(t1 == null) && $.get$isEmpty(t1) !== true) {
                if (m >= activeInfluenceIndices.length)
                  throw $.ioore(m);
                influenceIndex = $.index(activeInfluenceIndices[m], 0);
                this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), influenceIndex));
                this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
                if (material.get$morphNormals() === true) {
                  this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphNormalsBuffers(), influenceIndex));
                  this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
                }
                $.indexSet(object.get$__webglMorphTargetInfluences(), m, $.index(influences, influenceIndex));
              } else {
                this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
                if (material.get$morphNormals() === true)
                  this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
                $.indexSet(object.get$__webglMorphTargetInfluences(), m, 0);
              }
              ++m;
            }
        }
      if (!($.index(material.get$program().get$uniforms(), 'morphTargetInfluences') == null))
        this._gl.uniform1fv$2($.index(material.get$program().get$uniforms(), 'morphTargetInfluences'), object.get$__webglMorphTargetInfluences());
  }
},
 painterSort$2: function(a, b) {
  return $.toInt($.sub(b.get$z(), a.get$z()));
},
 get$painterSort: function() { return new $.BoundClosure3(this, 'painterSort$2'); },
 numericalSort$2: function(a, b) {
  return $.toInt($.sub($.index(b, 1), $.index(a, 1)));
},
 get$numericalSort: function() { return new $.BoundClosure3(this, 'numericalSort$2'); },
 render$2: function(scene, camera) {
  return this._render$2(scene, camera);
},
 get$render: function() { return new $.BoundClosure3(this, 'render$2'); },
 _render$4: function(scene, c, renderTarget, forceClear) {
  var lights = scene.get$lights();
  var fog = scene.get$fog();
  this._currentMaterialId = -1;
  this._lightsNeedUpdate = true;
  if (this.autoUpdateScene)
    scene.updateMatrixWorld$0();
  var camera = $.WebGLCamera_WebGLCamera(c);
  if (camera.get$parent() == null)
    camera.updateMatrixWorld$0();
  camera.get$matrixWorldInverse().getInverse$1(camera.get$matrixWorld());
  camera.get$matrixWorldInverse().flattenToArray$1(camera.get$_viewMatrixArray());
  camera.get$projectionMatrix().flattenToArray$1(camera.get$_projectionMatrixArray());
  var t1 = this._projScreenMatrix;
  t1.multiply$2(camera.get$projectionMatrix(), camera.get$matrixWorldInverse());
  var t2 = this._frustum;
  t2.setFromMatrix$1(t1);
  if (this.autoUpdateObjects)
    this.initWebGLObjects$1(scene);
  this.renderPlugins$3(this.renderPluginsPre, scene, camera);
  var t3 = this.info;
  t3.render.set$calls(0);
  t3.render.set$vertices(0);
  t3.render.set$faces(0);
  t3.render.set$points(0);
  this.setRenderTarget$1(renderTarget);
  if (this.autoClear || forceClear === true)
    this.clear$3(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
  var renderList = $.index(scene, '__webglObjects');
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this._render$4$bailout(1, scene, t1, renderTarget, t2, lights, fog, camera, renderList);
  var il = renderList.length;
  for (var t3 = this._vector3, webglObject = null, object = null, i = 0; i < il; ++i) {
    if (i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    object = webglObject.get$object();
    webglObject.set$render(false);
    if (object.get$visible() === true)
      if (!(typeof object === 'object' && object !== null && !!object.is$Mesh || typeof object === 'object' && object !== null && !!object.is$ParticleSystem) || object.get$frustumCulled() !== true || t2.contains$1(object) === true) {
        this.setupMatrices$2(webglObject, camera);
        this.unrollBufferMaterial$1(webglObject);
        webglObject.set$render(true);
        if (this.sortObjects === true) {
          var t4 = object.get$renderDepth();
          if (!(t4 == null))
            webglObject.set$z(t4);
          else {
            t3.copy$1(object.get$matrixWorld().getPosition$0());
            t1.multiplyVector3$1(t3);
            webglObject.set$z(t3.z);
          }
        }
      }
  }
  if (this.sortObjects === true)
    $.sort$1(renderList, this.get$painterSort());
  renderList = $.index(scene, '__webglObjectsImmediate');
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this._render$4$bailout(2, scene, renderTarget, webglObject, object, lights, camera, fog, renderList);
  il = renderList.length;
  for (i = 0; i < il; ++i) {
    if (i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    object = webglObject.get$object();
    if (object.get$visible() === true) {
      this.setupMatrices$2(webglObject, camera);
      this.unrollImmediateBufferMaterial$1(webglObject);
    }
  }
  t1 = scene.get$overrideMaterial();
  if (!(t1 == null)) {
    this.setBlending$4(t1.get$blending(), t1.get$blendEquation(), t1.get$blendSrc(), t1.get$blendDst());
    this.setDepthTest$1(t1.get$depthTest());
    this.setDepthWrite$1(t1.get$depthWrite());
    this.setPolygonOffset$3(t1.get$polygonOffset(), t1.get$polygonOffsetFactor(), t1.get$polygonOffsetUnits());
    this.renderObjects$8($.index(scene, '__webglObjects'), false, '', camera, lights, fog, true, t1);
    this.renderObjectsImmediate$7($.index(scene, '__webglObjectsImmediate'), '', camera, lights, fog, false, t1);
  } else {
    this.setBlending$1(1);
    this.renderObjects$7($.index(scene, '__webglObjects'), true, 'opaque', camera, lights, fog, false);
    this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'opaque', camera, lights, fog, false);
    this.renderObjects$7($.index(scene, '__webglObjects'), false, 'transparent', camera, lights, fog, true);
    this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'transparent', camera, lights, fog, true);
  }
  this.renderPlugins$3(this.renderPluginsPost, scene, camera);
  if (!(renderTarget == null) && renderTarget.get$generateMipmaps() === true && !$.eqB(renderTarget.get$minFilter(), 3) && !$.eqB(renderTarget.get$minFilter(), 6))
    this.updateRenderTargetMipmap$1(renderTarget);
  this.setDepthTest$1(true);
  this.setDepthWrite$1(true);
},
 _render$4$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      var scene = env0;
      t1 = env1;
      var renderTarget = env2;
      t2 = env3;
      lights = env4;
      fog = env5;
      camera = env6;
      renderList = env7;
      break;
    case 2:
      scene = env0;
      renderTarget = env1;
      webglObject = env2;
      object = env3;
      lights = env4;
      camera = env5;
      fog = env6;
      renderList = env7;
      break;
  }
  switch (state0) {
    case 0:
      var lights = scene.get$lights();
      var fog = scene.get$fog();
      this._currentMaterialId = -1;
      this._lightsNeedUpdate = true;
      if (this.autoUpdateScene)
        scene.updateMatrixWorld$0();
      var camera = $.WebGLCamera_WebGLCamera(c);
      if (camera.get$parent() == null)
        camera.updateMatrixWorld$0();
      camera.get$matrixWorldInverse().getInverse$1(camera.get$matrixWorld());
      camera.get$matrixWorldInverse().flattenToArray$1(camera.get$_viewMatrixArray());
      camera.get$projectionMatrix().flattenToArray$1(camera.get$_projectionMatrixArray());
      var t1 = this._projScreenMatrix;
      t1.multiply$2(camera.get$projectionMatrix(), camera.get$matrixWorldInverse());
      var t2 = this._frustum;
      t2.setFromMatrix$1(t1);
      if (this.autoUpdateObjects)
        this.initWebGLObjects$1(scene);
      this.renderPlugins$3(this.renderPluginsPre, scene, camera);
      var t3 = this.info;
      t3.render.set$calls(0);
      t3.render.set$vertices(0);
      t3.render.set$faces(0);
      t3.render.set$points(0);
      this.setRenderTarget$1(renderTarget);
      if (this.autoClear || forceClear === true)
        this.clear$3(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
      var renderList = $.index(scene, '__webglObjects');
    case 1:
      state0 = 0;
      var il = $.get$length(renderList);
      for (var t3 = this._vector3, webglObject = null, object = null, i = 0; $.ltB(i, il); ++i) {
        webglObject = $.index(renderList, i);
        object = webglObject.get$object();
        webglObject.set$render(false);
        if (object.get$visible() === true)
          if (!(typeof object === 'object' && object !== null && !!object.is$Mesh || typeof object === 'object' && object !== null && !!object.is$ParticleSystem) || object.get$frustumCulled() !== true || t2.contains$1(object) === true) {
            this.setupMatrices$2(webglObject, camera);
            this.unrollBufferMaterial$1(webglObject);
            webglObject.set$render(true);
            if (this.sortObjects === true) {
              var t4 = object.get$renderDepth();
              if (!(t4 == null))
                webglObject.set$z(t4);
              else {
                t3.copy$1(object.get$matrixWorld().getPosition$0());
                t1.multiplyVector3$1(t3);
                webglObject.set$z(t3.z);
              }
            }
          }
      }
      if (this.sortObjects === true)
        $.sort$1(renderList, this.get$painterSort());
      renderList = $.index(scene, '__webglObjectsImmediate');
    case 2:
      state0 = 0;
      il = $.get$length(renderList);
      for (i = 0; $.ltB(i, il); ++i) {
        webglObject = $.index(renderList, i);
        object = webglObject.get$object();
        if (object.get$visible() === true) {
          this.setupMatrices$2(webglObject, camera);
          this.unrollImmediateBufferMaterial$1(webglObject);
        }
      }
      t1 = scene.get$overrideMaterial();
      if (!(t1 == null)) {
        this.setBlending$4(t1.get$blending(), t1.get$blendEquation(), t1.get$blendSrc(), t1.get$blendDst());
        this.setDepthTest$1(t1.get$depthTest());
        this.setDepthWrite$1(t1.get$depthWrite());
        this.setPolygonOffset$3(t1.get$polygonOffset(), t1.get$polygonOffsetFactor(), t1.get$polygonOffsetUnits());
        this.renderObjects$8($.index(scene, '__webglObjects'), false, '', camera, lights, fog, true, t1);
        this.renderObjectsImmediate$7($.index(scene, '__webglObjectsImmediate'), '', camera, lights, fog, false, t1);
      } else {
        this.setBlending$1(1);
        this.renderObjects$7($.index(scene, '__webglObjects'), true, 'opaque', camera, lights, fog, false);
        this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'opaque', camera, lights, fog, false);
        this.renderObjects$7($.index(scene, '__webglObjects'), false, 'transparent', camera, lights, fog, true);
        this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'transparent', camera, lights, fog, true);
      }
      this.renderPlugins$3(this.renderPluginsPost, scene, camera);
      if (!(renderTarget == null) && renderTarget.get$generateMipmaps() === true && !$.eqB(renderTarget.get$minFilter(), 3) && !$.eqB(renderTarget.get$minFilter(), 6))
        this.updateRenderTargetMipmap$1(renderTarget);
      this.setDepthTest$1(true);
      this.setDepthWrite$1(true);
  }
},
 _render$2: function(scene,c) {
  return this._render$4(scene,c,null,false)
},
 renderPlugins$3: function(plugins, scene, camera) {
  if ($.get$isEmpty(plugins) === true)
    return;
  var il = plugins.length;
  for (var i = 0; i < il; ++i) {
    this._currentProgram = null;
    this._currentCamera = null;
    this._oldBlending = -1;
    this._oldDepthTest = -1;
    this._oldDepthWrite = -1;
    this._oldDoubleSided = -1;
    this._oldFlipSided = -1;
    this._currentGeometryGroupHash = -1;
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
    if (i >= plugins.length)
      throw $.ioore(i);
    plugins[i].render$4(scene, camera, this._currentWidth, this._currentHeight);
    this._currentProgram = null;
    this._currentCamera = null;
    this._oldBlending = -1;
    this._oldDepthTest = -1;
    this._oldDepthWrite = -1;
    this._oldDoubleSided = -1;
    this._oldFlipSided = -1;
    this._currentGeometryGroupHash = -1;
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
  }
},
 renderObjects$8: function(renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this.renderObjects$8$bailout(1, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial);
  if (typeof materialType !== 'string')
    return this.renderObjects$8$bailout(1, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial);
  var t1 = reverse === true;
  var end = renderList.length;
  if (t1) {
    var start = end - 1;
    end = -1;
    var delta = -1;
  } else {
    start = 0;
    delta = 1;
  }
  for (var t1 = !(overrideMaterial == null), t2 = useBlending === true, t3 = materialType === 'opaque', i = start, webglObject = null, object = null, buffer = null, material = null; i !== end; i += delta) {
    if (i < 0 || i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    if (webglObject.get$render() === true) {
      object = webglObject.get$object();
      buffer = webglObject.get$buffer();
      if (t1)
        material = overrideMaterial;
      else {
        material = t3 ? webglObject.get$opaque() : webglObject.get$transparent();
        if (material == null)
          continue;
        if (t2)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.setMaterialFaces$1(material);
      if (typeof buffer === 'object' && buffer !== null && !!buffer.is$BufferGeometry)
        this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
      else
        this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
    }
  }
},
 renderObjects$8$bailout: function(state0, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  if (reverse === true) {
    var start = $.sub($.get$length(renderList), 1);
    var end = -1;
    var delta = -1;
  } else {
    end = $.get$length(renderList);
    start = 0;
    delta = 1;
  }
  for (var t1 = !(overrideMaterial == null), t2 = useBlending === true, i = start, webglObject = null, object = null, buffer = null, material = null; !$.eqB(i, end); i = $.add(i, delta)) {
    webglObject = $.index(renderList, i);
    if (webglObject.get$render() === true) {
      object = webglObject.get$object();
      buffer = webglObject.get$buffer();
      if (t1)
        material = overrideMaterial;
      else {
        material = $.eqB(materialType, 'opaque') ? webglObject.get$opaque() : webglObject.get$transparent();
        if (material == null)
          continue;
        if (t2)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.setMaterialFaces$1(material);
      if (typeof buffer === 'object' && buffer !== null && !!buffer.is$BufferGeometry)
        this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
      else
        this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
    }
  }
},
 renderObjects$7: function(renderList,reverse,materialType,camera,lights,fog,useBlending) {
  return this.renderObjects$8(renderList,reverse,materialType,camera,lights,fog,useBlending,null)
},
 renderObjectsImmediate$7: function(renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this.renderObjectsImmediate$7$bailout(1, renderList, materialType, camera, lights, fog, useBlending, overrideMaterial);
  var il = renderList.length;
  for (var t1 = overrideMaterial === true, t2 = useBlending === true, i = 0, material = null, webglObject = null, object = null; i < il; ++i) {
    if (i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    object = webglObject.get$object();
    if (object.get$visible() === true) {
      if (t1)
        material = overrideMaterial;
      else {
        material = $.index(webglObject, materialType);
        if (material !== true)
          continue;
        if (t2)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.renderImmediateObject$5(camera, lights, fog, material, object);
    }
  }
},
 renderObjectsImmediate$7$bailout: function(state0, renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  var il = $.get$length(renderList);
  for (var t1 = overrideMaterial === true, t2 = useBlending === true, i = 0, material = null, webglObject = null, object = null; $.ltB(i, il); ++i) {
    webglObject = $.index(renderList, i);
    object = webglObject.get$object();
    if (object.get$visible() === true) {
      if (t1)
        material = overrideMaterial;
      else {
        material = $.index(webglObject, materialType);
        if (material !== true)
          continue;
        if (t2)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.renderImmediateObject$5(camera, lights, fog, material, object);
    }
  }
},
 renderObjectsImmediate$6: function(renderList,materialType,camera,lights,fog,useBlending) {
  return this.renderObjectsImmediate$7(renderList,materialType,camera,lights,fog,useBlending,null)
},
 renderImmediateObject$5: function(camera, lights, fog, material, object) {
  var program = this.setProgram$5(camera, lights, fog, material, object);
  this._currentGeometryGroupHash = -1;
  this.setMaterialFaces$1(material);
  if (object.get$immediateRenderCallback() === true)
    object.immediateRenderCallback$3(program, this._gl, this._frustum);
  else
    object.render$1(new $.WebGLRenderer_renderImmediateObject_function(this, material, program));
},
 unrollImmediateBufferMaterial$1: function(webglobject) {
  var material = webglobject.get$webglmaterial();
  if (material.get$transparent() === true) {
    webglobject.set$transparent(material);
    webglobject.set$opaque(null);
  } else {
    webglobject.set$opaque(material);
    webglobject.set$transparent(null);
  }
},
 unrollBufferMaterial$1: function(object) {
  var buffer = object.get$buffer();
  var meshMaterial = object.get$webglmaterial();
  var t1 = object.get$material();
  if (typeof t1 === 'object' && t1 !== null && !!t1.is$MeshFaceMaterial) {
    var materialIndex = buffer.get$materialIndex();
    if (typeof materialIndex !== 'number')
      return this.unrollBufferMaterial$1$bailout(1, object, materialIndex, 0);
    if (materialIndex >= 0) {
      t1 = object.get$geometry().get$materials();
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.unrollBufferMaterial$1$bailout(2, object, materialIndex, t1);
      if (materialIndex !== (materialIndex | 0))
        throw $.iae(materialIndex);
      if (materialIndex < 0 || materialIndex >= t1.length)
        throw $.ioore(materialIndex);
      var material = $.WebGLMaterial_WebGLMaterial$from(t1[materialIndex]);
      if (material.get$transparent() === true) {
        object.set$transparent(material);
        object.set$opaque(null);
      } else {
        object.set$opaque(material);
        object.set$transparent(null);
      }
    }
  } else if (!(meshMaterial == null))
    if (!(meshMaterial.get$transparent() == null)) {
      object.set$transparent(meshMaterial);
      object.set$opaque(null);
    } else {
      object.set$opaque(meshMaterial);
      object.set$transparent(null);
    }
},
 unrollBufferMaterial$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var object = env0;
      materialIndex = env1;
      break;
    case 2:
      object = env0;
      materialIndex = env1;
      t1 = env2;
      break;
  }
  switch (state0) {
    case 0:
      var buffer = object.get$buffer();
      var meshMaterial = object.get$webglmaterial();
      var t1 = object.get$material();
    default:
      if (state0 === 2 || state0 === 1 || state0 === 0 && typeof t1 === 'object' && t1 !== null && !!t1.is$MeshFaceMaterial)
        switch (state0) {
          case 0:
            var materialIndex = buffer.get$materialIndex();
          case 1:
            state0 = 0;
          case 2:
            if (state0 === 2 || state0 === 0 && $.geB(materialIndex, 0))
              switch (state0) {
                case 0:
                  t1 = object.get$geometry().get$materials();
                case 2:
                  state0 = 0;
                  var material = $.WebGLMaterial_WebGLMaterial$from($.index(t1, materialIndex));
                  if (material.get$transparent() === true) {
                    object.set$transparent(material);
                    object.set$opaque(null);
                  } else {
                    object.set$opaque(material);
                    object.set$transparent(null);
                  }
              }
        }
      else if (!(meshMaterial == null))
        if (!(meshMaterial.get$transparent() == null)) {
          object.set$transparent(meshMaterial);
          object.set$opaque(null);
        } else {
          object.set$opaque(meshMaterial);
          object.set$transparent(null);
        }
  }
},
 sortFacesByMaterial$1: function(geometry) {
  var hash_map = $.makeLiteralMap([]);
  var numMorphTargets = $.get$length(geometry.get$morphTargets());
  var numMorphNormals = $.get$length(geometry.get$morphNormals());
  geometry.set$geometryGroups($.makeLiteralMap([]));
  var fl = $.get$length(geometry.get$faces());
  if (typeof fl !== 'number')
    return this.sortFacesByMaterial$1$bailout(1, geometry, numMorphTargets, fl, numMorphNormals, hash_map);
  for (var f = 0, face = null, materialIndex = null, vertices = null, groupHash = null; f < fl; ++f) {
    face = $.index(geometry.get$faces(), f);
    materialIndex = face.get$materialIndex();
    var materialHash = !(materialIndex == null) ? $.toString(materialIndex) : $.toString(-1);
    if ($.index(hash_map, materialHash) == null)
      $.indexSet(hash_map, materialHash, $.makeLiteralMap(['hash', materialHash, 'counter', 0]));
    groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
    if ($.index(geometry.get$geometryGroups(), groupHash) == null)
      $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, numMorphNormals, numMorphTargets, 0));
    vertices = typeof face === 'object' && face !== null && !!face.is$Face3 ? 3 : 4;
    if ($.gtB($.add($.index(geometry.get$geometryGroups(), groupHash).get$vertices(), vertices), 65535)) {
      var t1 = $.index(hash_map, materialHash);
      $.indexSet(t1, 'counter', $.add($.index(t1, 'counter'), 1));
      groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
      if ($.index(geometry.get$geometryGroups(), groupHash) == null)
        $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, numMorphNormals, numMorphTargets, 0));
    }
    t1 = typeof face === 'object' && face !== null && !!face.is$Face3;
    var t2 = geometry.get$geometryGroups();
    if (t1)
      $.add$1($.index(t2, groupHash).get$faces3(), f);
    else
      $.add$1($.index(t2, groupHash).get$faces4(), f);
    t1 = $.index(geometry.get$geometryGroups(), groupHash);
    t1.set$vertices($.add(t1.get$vertices(), vertices));
  }
  geometry.set$geometryGroupsList([]);
  $.forEach(geometry.get$geometryGroups(), new $.WebGLRenderer_sortFacesByMaterial_anon(geometry, this));
  return;
},
 sortFacesByMaterial$1$bailout: function(state0, geometry, numMorphTargets, fl, numMorphNormals, hash_map) {
  for (var f = 0, face = null, materialIndex = null, vertices = null, groupHash = null; $.ltB(f, fl); ++f) {
    face = $.index(geometry.get$faces(), f);
    materialIndex = face.get$materialIndex();
    var materialHash = !(materialIndex == null) ? $.toString(materialIndex) : $.toString(-1);
    if ($.index(hash_map, materialHash) == null)
      $.indexSet(hash_map, materialHash, $.makeLiteralMap(['hash', materialHash, 'counter', 0]));
    groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
    if ($.index(geometry.get$geometryGroups(), groupHash) == null)
      $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, numMorphNormals, numMorphTargets, 0));
    vertices = typeof face === 'object' && face !== null && !!face.is$Face3 ? 3 : 4;
    if ($.gtB($.add($.index(geometry.get$geometryGroups(), groupHash).get$vertices(), vertices), 65535)) {
      var t1 = $.index(hash_map, materialHash);
      $.indexSet(t1, 'counter', $.add($.index(t1, 'counter'), 1));
      groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
      if ($.index(geometry.get$geometryGroups(), groupHash) == null)
        $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, numMorphNormals, numMorphTargets, 0));
    }
    t1 = typeof face === 'object' && face !== null && !!face.is$Face3;
    var t2 = geometry.get$geometryGroups();
    if (t1)
      $.add$1($.index(t2, groupHash).get$faces3(), f);
    else
      $.add$1($.index(t2, groupHash).get$faces4(), f);
    t1 = $.index(geometry.get$geometryGroups(), groupHash);
    t1.set$vertices($.add(t1.get$vertices(), vertices));
  }
  geometry.set$geometryGroupsList([]);
  $.forEach(geometry.get$geometryGroups(), new $.WebGLRenderer_sortFacesByMaterial_anon(geometry, this));
  return;
},
 initWebGLObjects$1: function(scene) {
  if ($.index(scene, '__webglObjects') == null) {
    $.indexSet(scene, '__webglObjects', []);
    $.indexSet(scene, '__webglObjectsImmediate', []);
    $.indexSet(scene, '__webglSprites', []);
    $.indexSet(scene, '__webglFlares', []);
  }
  for (; $.gtB($.get$length(scene.get$__objectsAdded()), 0);) {
    this.addObject$2($.index(scene.get$__objectsAdded(), 0), scene);
    $.removeRange(scene.get$__objectsAdded(), 0, 1);
  }
  for (; $.gtB($.get$length(scene.get$__objectsRemoved()), 0);) {
    this.removeObject$2($.index(scene.get$__objectsRemoved(), 0), scene);
    $.removeRange(scene.get$__objectsRemoved(), 0, 1);
  }
  var ol = $.get$length($.index(scene, '__webglObjects'));
  if (typeof ol !== 'number')
    return this.initWebGLObjects$1$bailout(1, scene, ol);
  var o = 0;
  for (; o < ol; ++o)
    this.updateObject$1($.index($.index(scene, '__webglObjects'), o));
},
 initWebGLObjects$1$bailout: function(state0, scene, ol) {
  var o = 0;
  for (; $.ltB(o, ol); ++o)
    this.updateObject$1($.index($.index(scene, '__webglObjects'), o));
},
 addObject$2: function(object, scene) {
  var t1 = {};
  var webglobject = $.WebGLObject_WebGLObject(object, null, null, null, true, 0);
  t1.geometry_1 = webglobject.get$webglgeometry();
  if (webglobject.get$__webglInit() !== true) {
    webglobject.set$__webglInit(true);
    webglobject.set$_modelViewMatrix($.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1));
    webglobject.set$_normalMatrix($.Matrix3$());
    if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
      var t2 = object.geometry;
      if (typeof t2 === 'object' && t2 !== null && !!t2.is$Geometry) {
        t2 = t1.geometry_1;
        if (t2.get$geometryGroups() == null)
          this.sortFacesByMaterial$1(t2);
        $.forEach(t1.geometry_1.get$geometryGroups(), new $.WebGLRenderer_addObject_anon(t1, webglobject, this));
      } else if (typeof t2 === 'object' && t2 !== null && !!t2.is$BufferGeometry)
        this.initDirectBuffers$1($.propertyTypeCast(t2, 'is$BufferGeometry'));
    } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
      t2 = t1.geometry_1;
      if (t2.get$__webglVertexBuffer() == null) {
        this.createRibbonBuffers$1(t2);
        this.initRibbonBuffers$1(t1.geometry_1);
        t1.geometry_1.set$verticesNeedUpdate(true);
        t1.geometry_1.set$colorsNeedUpdate(true);
      }
    } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
      t1.geometry_1 = $.WebGLGeometry_WebGLGeometry$from(object.geometry);
      t2 = t1.geometry_1;
      if (t2.get$__webglVertexBuffer() == null) {
        this.createLineBuffers$1(t2);
        this.initLineBuffers$2(t1.geometry_1, webglobject);
        t1.geometry_1.set$verticesNeedUpdate(true);
        t1.geometry_1.set$colorsNeedUpdate(true);
      }
    } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
      t2 = t1.geometry_1;
      if (t2.get$__webglVertexBuffer() == null) {
        this.createParticleBuffers$1(t2);
        this.initParticleBuffers$2(t1.geometry_1, webglobject);
        t1.geometry_1.set$verticesNeedUpdate(true);
        t1.geometry_1.set$colorsNeedUpdate(true);
      }
    }
  }
  if (webglobject.get$__webglActive() == null) {
    if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
      t2 = object.geometry;
      if (typeof t2 === 'object' && t2 !== null && !!t2.is$BufferGeometry)
        this.addBuffer$3($.index(scene, '__webglObjects'), t1.geometry_1, webglobject);
      else
        $.forEach(t1.geometry_1.get$geometryGroups(), new $.WebGLRenderer_addObject_anon0(webglobject, scene, this));
    } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon || typeof object === 'object' && object !== null && !!object.is$Line || typeof object === 'object' && object !== null && !!object.is$ParticleSystem)
      this.addBuffer$3($.index(scene, '__webglObjects'), t1.geometry_1, webglobject);
    else if (typeof object === 'object' && object !== null && !!object.is$ImmediateRenderObject || !($.index(object, 'immediateRenderCallback') == null))
      this.addBufferImmediate$2($.index(scene, '__webglObjectsImmediate'), webglobject);
    else if (typeof object === 'object' && object !== null && !!object.is$Sprite)
      $.add$1($.index(scene, '__webglSprites'), object);
    else if (typeof object === 'object' && object !== null && !!object.is$LensFlare)
      $.add$1($.index(scene, '__webglFlares'), object);
    $.indexSet(object, '__webglActive', true);
  }
},
 addBuffer$3: function(objlist, buffer, object) {
  object.set$buffer(buffer);
  object.set$opaque(null);
  object.set$transparent(null);
  $.add$1(objlist, object);
},
 addBufferImmediate$2: function(objlist, object) {
  object.set$opaque(null);
  object.set$transparent(null);
  $.add$1(objlist, object);
},
 updateObject$1: function(webglobject) {
  var object = webglobject.get$object();
  var geometry = webglobject.get$webglgeometry();
  if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
    var t1 = object.geometry;
    if (typeof t1 === 'object' && t1 !== null && !!t1.is$BufferGeometry) {
      if (geometry.get$verticesNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true)
        this.setDirectBuffers$3(geometry, 35048, geometry !== true);
      geometry.set$verticesNeedUpdate(false);
      geometry.set$elementsNeedUpdate(false);
      geometry.set$uvsNeedUpdate(false);
      geometry.set$normalsNeedUpdate(false);
      geometry.set$colorsNeedUpdate(false);
      geometry.set$tangentsNeedUpdate(false);
    } else {
      var il = $.get$length(geometry.get$geometryGroupsList());
      if (typeof il !== 'number')
        return this.updateObject$1$bailout(1, webglobject, il, geometry, 0, 0);
      var geometryGroup = null;
      var customAttributesDirty = null;
      var material = null;
      var i = 0;
      for (; i < il; ++i) {
        t1 = geometry.get$geometryGroupsList();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.updateObject$1$bailout(2, i, webglobject, t1, il, geometry);
        if (i >= t1.length)
          throw $.ioore(i);
        geometryGroup = t1[i];
        material = this.getBufferMaterial$2(webglobject, geometryGroup);
        customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$morphTargetsNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true || customAttributesDirty)
          this.setMeshBuffers$5(geometryGroup, webglobject, 35048, geometry.get$Dynamic() !== true, material);
      }
      geometry.set$verticesNeedUpdate(false);
      geometry.set$morphTargetsNeedUpdate(false);
      geometry.set$elementsNeedUpdate(false);
      geometry.set$uvsNeedUpdate(false);
      geometry.set$normalsNeedUpdate(false);
      geometry.set$colorsNeedUpdate(false);
      geometry.set$tangentsNeedUpdate(false);
      if (!(material.get$attributes() == null))
        this.clearCustomAttributes$1(material);
    }
  } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
    if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true)
      this.setRibbonBuffers$2(geometry, 35048);
    geometry.set$verticesNeedUpdate(false);
    geometry.set$colorsNeedUpdate(false);
  } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
    material = this.getBufferMaterial$2(webglobject, null);
    customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
    if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || customAttributesDirty)
      this.setLineBuffers$2(geometry, 35048);
    geometry.set$verticesNeedUpdate(false);
    geometry.set$colorsNeedUpdate(false);
    if (!(material.get$attributes() == null))
      this.clearCustomAttributes$1(material);
  } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
    material = this.getBufferMaterial$2(webglobject, null);
    customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
    if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || object.sortParticles === true || customAttributesDirty)
      this.setParticleBuffers$3(geometry, 35048, object);
    geometry.set$verticesNeedUpdate(false);
    geometry.set$colorsNeedUpdate(false);
    if (!(material.get$attributes() == null))
      this.clearCustomAttributes$1(material);
  }
},
 updateObject$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      var webglobject = env0;
      il = env1;
      geometry = env2;
      break;
    case 2:
      i = env0;
      webglobject = env1;
      t1 = env2;
      il = env3;
      geometry = env4;
      break;
  }
  switch (state0) {
    case 0:
      var object = webglobject.get$object();
      var geometry = webglobject.get$webglgeometry();
    default:
      if (state0 === 2 || state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$Mesh)
        switch (state0) {
          case 0:
            var t1 = object.geometry;
          default:
            if (state0 === 0 && typeof t1 === 'object' && t1 !== null && !!t1.is$BufferGeometry) {
              if (geometry.get$verticesNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true)
                this.setDirectBuffers$3(geometry, 35048, geometry !== true);
              geometry.set$verticesNeedUpdate(false);
              geometry.set$elementsNeedUpdate(false);
              geometry.set$uvsNeedUpdate(false);
              geometry.set$normalsNeedUpdate(false);
              geometry.set$colorsNeedUpdate(false);
              geometry.set$tangentsNeedUpdate(false);
            } else
              switch (state0) {
                case 0:
                  var il = $.get$length(geometry.get$geometryGroupsList());
                case 1:
                  state0 = 0;
                  var geometryGroup = null;
                  var customAttributesDirty = null;
                  var material = null;
                  var i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, il))
                            break L0;
                          t1 = geometry.get$geometryGroupsList();
                        case 2:
                          state0 = 0;
                          geometryGroup = $.index(t1, i);
                          material = this.getBufferMaterial$2(webglobject, geometryGroup);
                          customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
                          if (geometry.get$verticesNeedUpdate() === true || geometry.get$morphTargetsNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true || customAttributesDirty)
                            this.setMeshBuffers$5(geometryGroup, webglobject, 35048, geometry.get$Dynamic() !== true, material);
                          ++i;
                      }
                  geometry.set$verticesNeedUpdate(false);
                  geometry.set$morphTargetsNeedUpdate(false);
                  geometry.set$elementsNeedUpdate(false);
                  geometry.set$uvsNeedUpdate(false);
                  geometry.set$normalsNeedUpdate(false);
                  geometry.set$colorsNeedUpdate(false);
                  geometry.set$tangentsNeedUpdate(false);
                  if (!(material.get$attributes() == null))
                    this.clearCustomAttributes$1(material);
              }
        }
      else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true)
          this.setRibbonBuffers$2(geometry, 35048);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
      } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
        material = this.getBufferMaterial$2(webglobject, null);
        customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || customAttributesDirty)
          this.setLineBuffers$2(geometry, 35048);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        if (!(material.get$attributes() == null))
          this.clearCustomAttributes$1(material);
      } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
        material = this.getBufferMaterial$2(webglobject, null);
        customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || object.sortParticles === true || customAttributesDirty)
          this.setParticleBuffers$3(geometry, 35048, object);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        if (!(material.get$attributes() == null))
          this.clearCustomAttributes$1(material);
      }
  }
},
 areCustomAttributesDirty$1: function(material) {
  for (var t1 = $.iterator(material.get$attributes()); t1.get$hasNext() === true;)
    if (t1.next$0().get$needsUpdate() === true)
      return true;
  return false;
},
 clearCustomAttributes$1: function(material) {
  for (var t1 = $.iterator(material.get$attributes()); t1.get$hasNext() === true;)
    t1.next$0().set$needsUpdate(false);
},
 removeObject$2: function(object, scene) {
  var webglobject = $.WebGLObject_WebGLObject(object, null, null, null, true, 0);
  if (typeof object === 'object' && object !== null && !!object.is$Mesh || typeof object === 'object' && object !== null && !!object.is$ParticleSystem || typeof object === 'object' && object !== null && !!object.is$Ribbon || typeof object === 'object' && object !== null && !!object.is$Line)
    this.removeInstances$2($.index(scene, '__webglObjects'), object);
  else if (typeof object === 'object' && object !== null && !!object.is$Sprite)
    this.removeInstancesDirect$2($.index(scene, '__webglSprites'), object);
  else if (typeof object === 'object' && object !== null && !!object.is$LensFlare)
    this.removeInstancesDirect$2($.index(scene, '__webglFlares'), object);
  else if (typeof object === 'object' && object !== null && !!object.is$ImmediateRenderObject || !($.index(object, 'immediateRenderCallback') == null))
    this.removeInstances$2($.index(scene, '__webglObjectsImmediate'), object);
  webglobject.set$__webglActive(false);
},
 removeInstances$2: function(objlist, object) {
  if (typeof objlist !== 'string' && (typeof objlist !== 'object' || objlist === null || objlist.constructor !== Array && !objlist.is$JavaScriptIndexingBehavior()))
    return this.removeInstances$2$bailout(1, objlist, object);
  for (var o = objlist.length - 1; o >= 0; --o) {
    if (o >= objlist.length)
      throw $.ioore(o);
    if ($.eqB(objlist[o].get$object(), object))
      objlist.splice$2(o, 1);
  }
},
 removeInstances$2$bailout: function(state0, objlist, object) {
  for (var o = $.sub($.get$length(objlist), 1); $.geB(o, 0); o = $.sub(o, 1))
    if ($.eqB($.index(objlist, o).get$object(), object))
      objlist.splice$2(o, 1);
},
 removeInstancesDirect$2: function(objlist, object) {
  if (typeof objlist !== 'string' && (typeof objlist !== 'object' || objlist === null || objlist.constructor !== Array && !objlist.is$JavaScriptIndexingBehavior()))
    return this.removeInstancesDirect$2$bailout(1, objlist, object);
  for (var o = objlist.length - 1; o >= 0; --o) {
    if (o >= objlist.length)
      throw $.ioore(o);
    var t1 = objlist[o];
    if (t1 == null ? object == null : t1 === object)
      objlist.splice$2(o, 1);
  }
},
 removeInstancesDirect$2$bailout: function(state0, objlist, object) {
  for (var o = $.sub($.get$length(objlist), 1); $.geB(o, 0); o = $.sub(o, 1)) {
    var t1 = $.index(objlist, o);
    if (t1 == null ? object == null : t1 === object)
      objlist.splice$2(o, 1);
  }
},
 initMaterial$4: function(material, lights, fog, webglobject) {
  var object = webglobject.get$object();
  if (material.get$isMeshDepthMaterial() === true)
    var shaderID = 'depth';
  else if (material.get$isMeshNormalMaterial() === true)
    shaderID = 'normal';
  else if (material.get$isMeshBasicMaterial() === true)
    shaderID = 'basic';
  else if (material.get$isMeshLambertMaterial() === true)
    shaderID = 'lambert';
  else if (material.get$isMeshPhongMaterial() === true)
    shaderID = 'phong';
  else if (material.get$isLineBasicMaterial() === true)
    shaderID = 'basic';
  else
    shaderID = material.get$isParticleBasicMaterial() === true ? 'particle_basic' : null;
  if (!(shaderID == null))
    this.setMaterialShaders$2(material, $.index($.ShaderLib(), shaderID));
  var maxLightCount = this.allocateLights$1(lights);
  var maxShadows = this.allocateShadows$1(lights);
  var maxBones = this.allocateBones$1(object);
  var t1 = material.get$fragmentShader();
  var t2 = material.get$vertexShader();
  var t3 = material.get$uniforms();
  var t4 = material.get$attributes();
  var t5 = material.get$map();
  var t6 = material.get$envMap();
  var t7 = material.get$lightMap();
  var t8 = material.get$bumpMap();
  var t9 = material.get$specularMap();
  var t10 = material.get$vertexColors();
  var t11 = material.get$fog();
  var t12 = material.get$sizeAttenuation();
  var t13 = material.get$skinning();
  var t14 = this.supportsBoneTextures === true && !(object == null) && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh && object.useVertexTexture === true;
  var t15 = !(object == null);
  var t16 = t15 && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh ? $.propertyTypeCast(object, 'is$SkinnedMesh').get$boneTextureWidth() : null;
  t15 = t15 && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh ? $.propertyTypeCast(object, 'is$SkinnedMesh').get$boneTextureHeight() : null;
  var t17 = material.get$morphTargets();
  var t18 = material.get$morphNormals();
  var t19 = this.maxMorphTargets;
  var t20 = this.maxMorphNormals;
  var t21 = $.index(maxLightCount, 'directional');
  var t22 = $.index(maxLightCount, 'point');
  var t23 = $.index(maxLightCount, 'spot');
  var t24 = this.shadowMapEnabled && object.get$receiveShadow() === true;
  var t25 = this.shadowMapSoft;
  var t26 = this.shadowMapDebug;
  var t27 = this.shadowMapCascade;
  var t28 = material.get$alphaTest();
  var t29 = material.get$metal();
  var t30 = material.get$perPixel();
  var t31 = material.get$wrapAround();
  material.set$program(this.buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround(shaderID, t1, t2, t3, t4, t28, t15, t16, t8, $.eq(material.get$side(), 2), t6, fog, t7, t5, maxBones, t21, t20, t19, t22, maxShadows, t23, t29, t18, t17, t30, t27, t26, t24, t25, t12, t13, t9, t11, t14, t10, t31));
  var attributes = material.get$program().get$attributes();
  if ($.geB($.index(attributes, 'position'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'position'));
  if ($.geB($.index(attributes, 'color'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'color'));
  if ($.geB($.index(attributes, 'normal'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'normal'));
  if ($.geB($.index(attributes, 'tangent'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'tangent'));
  if (material.get$skinning() === true && $.geB($.index(attributes, 'skinVertexA'), 0) && $.geB($.index(attributes, 'skinVertexB'), 0) && $.geB($.index(attributes, 'skinIndex'), 0) && $.geB($.index(attributes, 'skinWeight'), 0)) {
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinVertexA'));
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinVertexB'));
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinIndex'));
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinWeight'));
  }
  if (!(material.get$attributes() == null))
    for (var t1 = $.iterator(material.get$attributes()), a = null; t1.get$hasNext() === true;) {
      a = t1.next$0();
      if (!($.index(attributes, a) == null) && $.geB($.index(attributes, a), 0))
        this._gl.enableVertexAttribArray$1($.index(attributes, a));
    }
  if (material.get$morphTargets() === true) {
    material.set$numSupportedMorphTargets(0);
    for (var i = 0, id = null; i < t19; ++i) {
      id = 'morphTarget' + $.S(i);
      if ($.geB($.index(attributes, id), 0)) {
        this._gl.enableVertexAttribArray$1($.index(attributes, id));
        material.set$numSupportedMorphTargets($.add(material.get$numSupportedMorphTargets(), 1));
      }
    }
  }
  if (material.get$morphNormals() === true) {
    material.set$numSupportedMorphNormals(0);
    for (id = null, i = 0; i < t20; ++i) {
      id = 'morphNormal' + $.S(i);
      if ($.geB($.index(attributes, id), 0)) {
        this._gl.enableVertexAttribArray$1($.index(attributes, id));
        material.set$numSupportedMorphNormals($.add(material.get$numSupportedMorphNormals(), 1));
      }
    }
  }
  material.set$uniformsList([]);
  $.forEach(material.get$uniforms(), new $.WebGLRenderer_initMaterial_anon(material));
},
 setMaterialShaders$2: function(material, shaders) {
  material.set$uniforms($.UniformsUtils_clone($.index(shaders, 'uniforms')));
  material.set$vertexShader($.index(shaders, 'vertexShader'));
  material.set$fragmentShader($.index(shaders, 'fragmentShader'));
},
 setProgram$5: function(camera, lights, fog, material, object) {
  if (material.get$needsUpdate() === true) {
    if (!(material.get$program() == null))
      this.deallocateMaterial$1(material);
    this.initMaterial$4(material, lights, fog, object);
    material.set$needsUpdate(false);
  }
  if (material.get$morphTargets() === true)
    if (object.get$__webglMorphTargetInfluences() !== true)
      object.set$__webglMorphTargetInfluences($.Float32Array_Float32Array(this.maxMorphTargets));
  var program = material.get$program();
  var p_uniforms = program.get$uniforms();
  var m_uniforms = material.get$uniforms();
  var t1 = this._currentProgram;
  if (!(program == null ? t1 == null : program === t1)) {
    this._gl.useProgram$1(program.get$glProgram());
    this._currentProgram = program;
    var refreshMaterial = true;
  } else
    refreshMaterial = false;
  if (!$.eqB(material.get$id(), this._currentMaterialId)) {
    this._currentMaterialId = material.get$id();
    refreshMaterial = true;
  }
  if (!refreshMaterial) {
    t1 = this._currentCamera;
    var t2 = !(camera == null ? t1 == null : camera === t1);
    t1 = t2;
  } else
    t1 = true;
  if (t1) {
    this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'projectionMatrix'), false, camera.get$_projectionMatrixArray());
    t1 = this._currentCamera;
    if (!(camera == null ? t1 == null : camera === t1))
      this._currentCamera = camera;
  }
  if (refreshMaterial) {
    if (!(fog == null) && material.get$fog() === true)
      this.refreshUniformsFog$2(m_uniforms, fog);
    if (material.get$isMeshPhongMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$lights() === true) {
      if (this._lightsNeedUpdate) {
        this.setupLights$2(program, lights);
        this._lightsNeedUpdate = false;
      }
      this.refreshUniformsLights$2(m_uniforms, this._lights);
    }
    if (material.get$isMeshBasicMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$isMeshPhongMaterial() === true)
      this.refreshUniformsCommon$2(m_uniforms, material);
    if (material.get$isLineBasicMaterial() === true)
      this.refreshUniformsLine$2(m_uniforms, material);
    else if (material.get$isParticleBasicMaterial() === true)
      this.refreshUniformsParticle$2(m_uniforms, material);
    else if (material.get$isMeshPhongMaterial() === true)
      this.refreshUniformsPhong$2(m_uniforms, material);
    else if (material.get$isMeshLambertMaterial() === true)
      this.refreshUniformsLambert$2(m_uniforms, material);
    else if (material.get$isMeshDepthMaterial() === true) {
      t1 = camera.get$near();
      $.index(m_uniforms, 'mNear').set$value(t1);
      t1 = camera.get$far();
      $.index(m_uniforms, 'mFar').set$value(t1);
      t1 = material.get$opacity();
      $.index(m_uniforms, 'opacity').set$value(t1);
    } else if (material.get$isMeshNormalMaterial() === true) {
      t1 = material.get$opacity();
      $.index(m_uniforms, 'opacity').set$value(t1);
    }
    if (object.get$receiveShadow() === true && material.get$_shadowPass() !== true)
      this.refreshUniformsShadow$2(m_uniforms, lights);
    this.loadUniformsGeneric$2(program, material.get$uniformsList());
    if (material.get$isShaderMaterial() === true || material.get$isMeshPhongMaterial() === true || !(material.get$envMap() == null))
      if (!($.index(p_uniforms, 'cameraPosition') == null)) {
        var position = camera.get$matrixWorld().getPosition$0();
        this._gl.uniform3f$4($.index(p_uniforms, 'cameraPosition'), position.get$x(), position.get$y(), position.get$z());
      }
    if (material.get$isMeshPhongMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$isShaderMaterial() === true || material.get$skinning() === true)
      if (!($.index(p_uniforms, 'viewMatrix') == null))
        this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'viewMatrix'), false, camera.get$_viewMatrixArray());
  }
  if (material.get$skinning() === true)
    if (this.supportsBoneTextures === true && object.get$useVertexTexture() === true) {
      if (!($.index(p_uniforms, 'boneTexture') == null)) {
        this._gl.uniform1i$2($.index(p_uniforms, 'boneTexture'), 12);
        this.setTexture$2(object.get$boneTexture(), 12);
      }
    } else if (!($.index(p_uniforms, 'boneGlobalMatrices') == null))
      this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'boneGlobalMatrices'), false, object.get$boneMatrices());
  this.loadUniformsMatrices$2(p_uniforms, object);
  if (!($.index(p_uniforms, 'modelMatrix') == null))
    this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'modelMatrix'), false, object.get$matrixWorld().get$elements());
  return program;
},
 refreshUniformsCommon$2: function(uniforms, material) {
  var t1 = material.get$opacity();
  $.index(uniforms, 'opacity').set$value(t1);
  t1 = this.gammaInput;
  if (t1)
    $.index(uniforms, 'diffuse').get$value().copyGammaToLinear$1(material.get$color());
  else {
    var t2 = material.get$color();
    $.index(uniforms, 'diffuse').set$value(t2);
  }
  t2 = material.get$map();
  $.index(uniforms, 'map').set$texture(t2);
  t2 = material.get$lightMap();
  $.index(uniforms, 'lightMap').set$texture(t2);
  t2 = material.get$specularMap();
  $.index(uniforms, 'specularMap').set$texture(t2);
  if (!(material.get$bumpMap() == null)) {
    t2 = material.get$bumpMap();
    $.index(uniforms, 'bumpMap').set$texture(t2);
    t2 = material.get$bumpScale();
    $.index(uniforms, 'bumpScale').set$value(t2);
  }
  if (!(material.get$map() == null))
    var uvScaleMap = material.get$map();
  else if (!(material.get$specularMap() == null))
    uvScaleMap = material.get$specularMap();
  else
    uvScaleMap = !(material.get$bumpMap() == null) ? material.get$bumpMap() : null;
  if (!(uvScaleMap == null)) {
    var offset = uvScaleMap.get$offset();
    var repeat = uvScaleMap.get$repeat();
    $.index(uniforms, 'offsetRepeat').get$value().setValues$4(offset.get$x(), offset.get$y(), repeat.get$x(), repeat.get$y());
  }
  t2 = material.get$envMap();
  $.index(uniforms, 'envMap').set$texture(t2);
  t2 = material.get$envMap();
  t2 = typeof t2 === 'object' && t2 !== null && !!t2.is$WebGLRenderTargetCube ? 1 : -1;
  $.index(uniforms, 'flipEnvMap').set$value(t2);
  if (t1) {
    t1 = material.get$reflectivity();
    $.index(uniforms, 'reflectivity').set$value(t1);
  } else {
    t1 = material.get$reflectivity();
    $.index(uniforms, 'reflectivity').set$value(t1);
  }
  t1 = material.get$refractionRatio();
  $.index(uniforms, 'refractionRatio').set$value(t1);
  t1 = material.get$combine();
  $.index(uniforms, 'combine').set$value(t1);
  if (!(material.get$envMap() == null)) {
    t1 = material.get$envMap().get$mapping();
    t1 = typeof t1 === 'object' && t1 !== null && !!t1.is$CubeRefractionMapping;
  } else
    t1 = false;
  $.index(uniforms, 'useRefract').set$value(t1);
},
 refreshUniformsLine$2: function(uniforms, material) {
  var t1 = material.get$color();
  $.index(uniforms, 'diffuse').set$value(t1);
  t1 = material.get$opacity();
  $.index(uniforms, 'opacity').set$value(t1);
},
 refreshUniformsParticle$2: function(uniforms, material) {
  var t1 = material.get$color();
  $.index(uniforms, 'psColor').set$value(t1);
  t1 = material.get$opacity();
  $.index(uniforms, 'opacity').set$value(t1);
  t1 = material.get$size();
  $.index(uniforms, 'size').set$value(t1);
  t1 = $.div(this.canvas.get$height(), 2);
  $.index(uniforms, 'scale').set$value(t1);
  t1 = material.get$map();
  $.index(uniforms, 'map').set$texture(t1);
},
 refreshUniformsFog$2: function(uniforms, fog) {
  var t1 = fog.get$color();
  $.index(uniforms, 'fogColor').set$value(t1);
  if (typeof fog === 'object' && fog !== null && !!fog.is$FogLinear) {
    t1 = fog.near;
    $.index(uniforms, 'fogNear').set$value(t1);
    t1 = fog.far;
    $.index(uniforms, 'fogFar').set$value(t1);
  } else if (typeof fog === 'object' && fog !== null && !!fog.is$FogExp2) {
    t1 = fog.density;
    $.index(uniforms, 'fogDensity').set$value(t1);
  }
},
 refreshUniformsPhong$2: function(uniforms, material) {
  var t1 = material.get$shininess();
  $.index(uniforms, 'shininess').set$value(t1);
  if (this.gammaInput) {
    $.index(uniforms, 'ambient').get$value().copyGammaToLinear$1(material.get$ambient());
    $.index(uniforms, 'emissive').get$value().copyGammaToLinear$1(material.get$emissive());
    $.index(uniforms, 'specular').get$value().copyGammaToLinear$1(material.get$specular());
  } else {
    t1 = material.get$ambient();
    $.index(uniforms, 'ambient').set$value(t1);
    t1 = material.get$emissive();
    $.index(uniforms, 'emissive').set$value(t1);
    t1 = material.get$specular();
    $.index(uniforms, 'specular').set$value(t1);
  }
  if (material.get$wrapAround() === true)
    $.index(uniforms, 'wrapRGB').get$value().copy$1(material.get$wrapRGB());
},
 refreshUniformsLambert$2: function(uniforms, material) {
  if (this.gammaInput) {
    $.index(uniforms, 'ambient').get$value().copyGammaToLinear$1(material.get$ambient());
    $.index(uniforms, 'emissive').get$value().copyGammaToLinear$1(material.get$emissive());
  } else {
    var t1 = material.get$ambient();
    $.index(uniforms, 'ambient').set$value(t1);
    t1 = material.get$emissive();
    $.index(uniforms, 'emissive').set$value(t1);
  }
  if (material.get$wrapAround() === true)
    $.index(uniforms, 'wrapRGB').get$value().copy$1(material.get$wrapRGB());
},
 refreshUniformsLights$2: function(uniforms, lights) {
  var t1 = $.index(lights, 'ambient');
  $.index(uniforms, 'ambientLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'directional'), 'colors');
  $.index(uniforms, 'directionalLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'directional'), 'positions');
  $.index(uniforms, 'directionalLightDirection').set$value(t1);
  t1 = $.index($.index(lights, 'point'), 'colors');
  $.index(uniforms, 'pointLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'point'), 'positions');
  $.index(uniforms, 'pointLightPosition').set$value(t1);
  t1 = $.index($.index(lights, 'point'), 'distances');
  $.index(uniforms, 'pointLightDistance').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'colors');
  $.index(uniforms, 'spotLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'positions');
  $.index(uniforms, 'spotLightPosition').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'distances');
  $.index(uniforms, 'spotLightDistance').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'directions');
  $.index(uniforms, 'spotLightDirection').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'angles');
  $.index(uniforms, 'spotLightAngle').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'exponents');
  $.index(uniforms, 'spotLightExponent').set$value(t1);
},
 refreshUniformsShadow$2: function(uniforms, lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.refreshUniformsShadow$2$bailout(1, uniforms, lights);
  if ($.index(uniforms, 'shadowMatrix') === true)
    for (var il = lights.length, j = 0, i = 0; i < il; ++i) {
      if (i >= lights.length)
        throw $.ioore(i);
      var light = lights[i];
      if (light.get$castShadow() !== true)
        continue;
      if (!(typeof light === 'object' && light !== null && !!light.is$SpotLight))
        var t1 = typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true;
      else
        t1 = true;
      if (t1) {
        $.indexSet($.index(uniforms, 'shadowMap').get$texture(), j, light.get$shadowMap());
        $.indexSet($.index(uniforms, 'shadowMapSize').get$value(), j, light.get$shadowMapSize());
        $.indexSet($.index(uniforms, 'shadowMatrix').get$value(), j, light.get$shadowMatrix());
        $.indexSet($.index(uniforms, 'shadowDarkness').get$value(), j, light.get$shadowDarkness());
        $.indexSet($.index(uniforms, 'shadowBias').get$value(), j, light.get$shadowBias());
        ++j;
      }
    }
},
 refreshUniformsShadow$2$bailout: function(state0, uniforms, lights) {
  if ($.index(uniforms, 'shadowMatrix') === true)
    for (var il = $.get$length(lights), j = 0, i = 0; $.ltB(i, il); ++i) {
      var light = $.index(lights, i);
      if (light.get$castShadow() !== true)
        continue;
      if (!(typeof light === 'object' && light !== null && !!light.is$SpotLight))
        var t1 = typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true;
      else
        t1 = true;
      if (t1) {
        $.indexSet($.index(uniforms, 'shadowMap').get$texture(), j, light.get$shadowMap());
        $.indexSet($.index(uniforms, 'shadowMapSize').get$value(), j, light.get$shadowMapSize());
        $.indexSet($.index(uniforms, 'shadowMatrix').get$value(), j, light.get$shadowMatrix());
        $.indexSet($.index(uniforms, 'shadowDarkness').get$value(), j, light.get$shadowDarkness());
        $.indexSet($.index(uniforms, 'shadowBias').get$value(), j, light.get$shadowBias());
        ++j;
      }
    }
},
 loadUniformsMatrices$2: function(uniforms, object) {
  this._gl.uniformMatrix4fv$3($.index(uniforms, 'modelViewMatrix'), false, object.get$_modelViewMatrix().get$elements());
  if (!($.index(uniforms, 'normalMatrix') == null))
    this._gl.uniformMatrix3fv$3($.index(uniforms, 'normalMatrix'), false, object.get$_normalMatrix().get$elements());
},
 loadUniformsGeneric$2: function(program, uniforms) {
  if (typeof uniforms !== 'string' && (typeof uniforms !== 'object' || uniforms === null || uniforms.constructor !== Array && !uniforms.is$JavaScriptIndexingBehavior()))
    return this.loadUniformsGeneric$2$bailout(1, program, uniforms, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var jl = uniforms.length;
  for (var uniform = null, value = null, type = null, location$ = null, texture = null, i = null, il = null, j = 0, offset = null; j < jl; ++j) {
    var t1 = program.get$uniforms();
    if (j >= uniforms.length)
      throw $.ioore(j);
    location$ = $.index(t1, $.index(uniforms[j], 1));
    if (location$ == null)
      continue;
    if (j >= uniforms.length)
      throw $.ioore(j);
    uniform = $.index(uniforms[j], 0);
    type = uniform.get$type();
    value = uniform.get$value();
    if ($.eqB(type, 'i'))
      this._gl.uniform1i$2(location$, value);
    else if ($.eqB(type, 'f'))
      this._gl.uniform1f$2(location$, value);
    else if ($.eqB(type, 'v2'))
      this._gl.uniform2f$3(location$, value.get$x(), value.get$y());
    else if ($.eqB(type, 'v3'))
      this._gl.uniform3f$4(location$, value.get$x(), value.get$y(), value.get$z());
    else if ($.eqB(type, 'v4'))
      this._gl.uniform4f$5(location$, value.get$x(), value.get$y(), value.get$z(), value.get$w());
    else if ($.eqB(type, 'c'))
      this._gl.uniform3f$4(location$, value.get$r(), value.get$g(), value.get$b());
    else if ($.eqB(type, 'iv1')) {
      t1 = this._gl;
      t1.uniform1iv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Int32Array_Int32Array$fromList(value) : value);
    } else if ($.eqB(type, 'iv')) {
      t1 = this._gl;
      t1.uniform3iv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Int32Array_Int32Array$fromList(value) : value);
    } else if ($.eqB(type, 'fv1')) {
      t1 = this._gl;
      t1.uniform1fv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Float32Array_Float32Array$fromList(value) : value);
    } else if ($.eqB(type, 'fv')) {
      t1 = this._gl;
      t1.uniform3fv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Float32Array_Float32Array$fromList(value) : value);
    } else if ($.eqB(type, 'v2v')) {
      if (uniform.get$_lib1_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib1_array($.Float32Array_Float32Array(2 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i) {
        offset = i * 2;
        $.indexSet(uniform.get$_lib1_array(), offset, $.index(value, i).get$x());
        $.indexSet(uniform.get$_lib1_array(), offset + 1, $.index(value, i).get$y());
      }
      this._gl.uniform2fv$2(location$, uniform.get$_lib1_array());
    } else if ($.eqB(type, 'v3v')) {
      if (uniform.get$_lib1_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib1_array($.Float32Array_Float32Array(3 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i) {
        offset = i * 3;
        $.indexSet(uniform.get$_lib1_array(), offset, $.index(value, i).get$x());
        $.indexSet(uniform.get$_lib1_array(), offset + 1, $.index(value, i).get$y());
        $.indexSet(uniform.get$_lib1_array(), offset + 2, $.index(value, i).get$z());
      }
      this._gl.uniform3fv$2(location$, uniform.get$_lib1_array());
    } else if ($.eqB(type, 'v4v')) {
      if (uniform.get$_lib1_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib1_array($.Float32Array_Float32Array(4 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i) {
        offset = i * 4;
        $.indexSet(uniform.get$_lib1_array(), offset, $.index(value, i).get$x());
        $.indexSet(uniform.get$_lib1_array(), offset + 1, $.index(value, i).get$y());
        $.indexSet(uniform.get$_lib1_array(), offset + 2, $.index(value, i).get$z());
        $.indexSet(uniform.get$_lib1_array(), offset + 3, $.index(value, i).get$w());
      }
      this._gl.uniform4fv$2(location$, uniform.get$_lib1_array());
    } else if ($.eqB(type, 'm4')) {
      if (uniform.get$_lib1_array() == null)
        uniform.set$_lib1_array($.Float32Array_Float32Array(16));
      value.flattenToArray$1(uniform.get$_lib1_array());
      this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib1_array());
    } else if ($.eqB(type, 'm4v')) {
      if (uniform.get$_lib1_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib1_array($.Float32Array_Float32Array(16 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i)
        $.index(value, i).flattenToArrayOffset$2(uniform.get$_lib1_array(), i * 16);
      this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib1_array());
    } else if ($.eqB(type, 't')) {
      this._gl.uniform1i$2(location$, value);
      texture = uniform.get$texture();
      if (texture == null)
        continue;
      t1 = texture.get$image();
      if (typeof t1 === 'object' && t1 !== null && (t1.constructor === Array || t1.is$List()) && $.eqB($.get$length(texture.get$image()), 6))
        this.setCubeTexture$2(texture, value);
      else if (typeof texture === 'object' && texture !== null && !!texture.is$WebGLRenderTargetCube)
        this.setCubeTextureDynamic$2(texture, value);
      else
        this.setTexture$2(texture, value);
    } else if ($.eqB(type, 'tv')) {
      if (uniform.get$_lib1_array() == null) {
        uniform.set$_lib1_array([]);
        il = $.get$length(uniform.get$texture());
        if (typeof il !== 'number')
          return this.loadUniformsGeneric$2$bailout(2, uniform, j, value, offset, type, location$, program, il, jl, uniforms, texture);
        for (i = 0; i < il; ++i)
          $.indexSet(uniform.get$_lib1_array(), i, $.add(value, i));
      }
      this._gl.uniform1iv$2(location$, uniform.get$_lib1_array());
      il = $.get$length(uniform.get$texture());
      for (i = 0; $.ltB(i, il); ++i) {
        texture = $.index(uniform.get$texture(), i);
        if (texture !== true)
          continue;
        this.setTexture$2(texture, $.index(uniform.get$_lib1_array(), i));
      }
    }
  }
},
 loadUniformsGeneric$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10) {
  switch (state0) {
    case 1:
      var program = env0;
      var uniforms = env1;
      break;
    case 2:
      uniform = env0;
      j = env1;
      value = env2;
      offset = env3;
      type = env4;
      location$ = env5;
      program = env6;
      il = env7;
      jl = env8;
      uniforms = env9;
      texture = env10;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var jl = $.get$length(uniforms);
      var uniform = null;
      var value = null;
      var type = null;
      var location$ = null;
      var texture = null;
      var i = null;
      var il = null;
      var j = 0;
      var offset = null;
    case 2:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(j, jl))
                break L0;
            case 2:
              c$0: {
                switch (state0) {
                  case 0:
                    location$ = $.index(program.get$uniforms(), $.index($.index(uniforms, j), 1));
                    if (location$ == null)
                      break c$0;
                    uniform = $.index($.index(uniforms, j), 0);
                    type = uniform.get$type();
                    value = uniform.get$value();
                  case 2:
                    if (state0 === 0 && $.eqB(type, 'i'))
                      this._gl.uniform1i$2(location$, value);
                    else
                      switch (state0) {
                        case 0:
                        case 2:
                          if (state0 === 0 && $.eqB(type, 'f'))
                            this._gl.uniform1f$2(location$, value);
                          else
                            switch (state0) {
                              case 0:
                              case 2:
                                if (state0 === 0 && $.eqB(type, 'v2'))
                                  this._gl.uniform2f$3(location$, value.get$x(), value.get$y());
                                else
                                  switch (state0) {
                                    case 0:
                                    case 2:
                                      if (state0 === 0 && $.eqB(type, 'v3'))
                                        this._gl.uniform3f$4(location$, value.get$x(), value.get$y(), value.get$z());
                                      else
                                        switch (state0) {
                                          case 0:
                                          case 2:
                                            if (state0 === 0 && $.eqB(type, 'v4'))
                                              this._gl.uniform4f$5(location$, value.get$x(), value.get$y(), value.get$z(), value.get$w());
                                            else
                                              switch (state0) {
                                                case 0:
                                                case 2:
                                                  if (state0 === 0 && $.eqB(type, 'c'))
                                                    this._gl.uniform3f$4(location$, value.get$r(), value.get$g(), value.get$b());
                                                  else
                                                    switch (state0) {
                                                      case 0:
                                                      case 2:
                                                        if (state0 === 0 && $.eqB(type, 'iv1')) {
                                                          var t1 = this._gl;
                                                          t1.uniform1iv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Int32Array_Int32Array$fromList(value) : value);
                                                        } else
                                                          switch (state0) {
                                                            case 0:
                                                            case 2:
                                                              if (state0 === 0 && $.eqB(type, 'iv')) {
                                                                t1 = this._gl;
                                                                t1.uniform3iv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Int32Array_Int32Array$fromList(value) : value);
                                                              } else
                                                                switch (state0) {
                                                                  case 0:
                                                                  case 2:
                                                                    if (state0 === 0 && $.eqB(type, 'fv1')) {
                                                                      t1 = this._gl;
                                                                      t1.uniform1fv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Float32Array_Float32Array$fromList(value) : value);
                                                                    } else
                                                                      switch (state0) {
                                                                        case 0:
                                                                        case 2:
                                                                          if (state0 === 0 && $.eqB(type, 'fv')) {
                                                                            t1 = this._gl;
                                                                            t1.uniform3fv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $.Float32Array_Float32Array$fromList(value) : value);
                                                                          } else
                                                                            switch (state0) {
                                                                              case 0:
                                                                              case 2:
                                                                                if (state0 === 0 && $.eqB(type, 'v2v')) {
                                                                                  if (uniform.get$_lib1_array() == null) {
                                                                                    t1 = $.get$length(value);
                                                                                    if (typeof t1 !== 'number')
                                                                                      throw $.iae(t1);
                                                                                    uniform.set$_lib1_array($.Float32Array_Float32Array(2 * t1));
                                                                                  }
                                                                                  il = $.get$length(value);
                                                                                  for (i = 0; $.ltB(i, il); ++i) {
                                                                                    offset = i * 2;
                                                                                    $.indexSet(uniform.get$_lib1_array(), offset, $.index(value, i).get$x());
                                                                                    $.indexSet(uniform.get$_lib1_array(), offset + 1, $.index(value, i).get$y());
                                                                                  }
                                                                                  this._gl.uniform2fv$2(location$, uniform.get$_lib1_array());
                                                                                } else
                                                                                  switch (state0) {
                                                                                    case 0:
                                                                                    case 2:
                                                                                      if (state0 === 0 && $.eqB(type, 'v3v')) {
                                                                                        if (uniform.get$_lib1_array() == null) {
                                                                                          t1 = $.get$length(value);
                                                                                          if (typeof t1 !== 'number')
                                                                                            throw $.iae(t1);
                                                                                          uniform.set$_lib1_array($.Float32Array_Float32Array(3 * t1));
                                                                                        }
                                                                                        il = $.get$length(value);
                                                                                        for (i = 0; $.ltB(i, il); ++i) {
                                                                                          offset = i * 3;
                                                                                          $.indexSet(uniform.get$_lib1_array(), offset, $.index(value, i).get$x());
                                                                                          $.indexSet(uniform.get$_lib1_array(), offset + 1, $.index(value, i).get$y());
                                                                                          $.indexSet(uniform.get$_lib1_array(), offset + 2, $.index(value, i).get$z());
                                                                                        }
                                                                                        this._gl.uniform3fv$2(location$, uniform.get$_lib1_array());
                                                                                      } else
                                                                                        switch (state0) {
                                                                                          case 0:
                                                                                          case 2:
                                                                                            if (state0 === 0 && $.eqB(type, 'v4v')) {
                                                                                              if (uniform.get$_lib1_array() == null) {
                                                                                                t1 = $.get$length(value);
                                                                                                if (typeof t1 !== 'number')
                                                                                                  throw $.iae(t1);
                                                                                                uniform.set$_lib1_array($.Float32Array_Float32Array(4 * t1));
                                                                                              }
                                                                                              il = $.get$length(value);
                                                                                              for (i = 0; $.ltB(i, il); ++i) {
                                                                                                offset = i * 4;
                                                                                                $.indexSet(uniform.get$_lib1_array(), offset, $.index(value, i).get$x());
                                                                                                $.indexSet(uniform.get$_lib1_array(), offset + 1, $.index(value, i).get$y());
                                                                                                $.indexSet(uniform.get$_lib1_array(), offset + 2, $.index(value, i).get$z());
                                                                                                $.indexSet(uniform.get$_lib1_array(), offset + 3, $.index(value, i).get$w());
                                                                                              }
                                                                                              this._gl.uniform4fv$2(location$, uniform.get$_lib1_array());
                                                                                            } else
                                                                                              switch (state0) {
                                                                                                case 0:
                                                                                                case 2:
                                                                                                  if (state0 === 0 && $.eqB(type, 'm4')) {
                                                                                                    if (uniform.get$_lib1_array() == null)
                                                                                                      uniform.set$_lib1_array($.Float32Array_Float32Array(16));
                                                                                                    value.flattenToArray$1(uniform.get$_lib1_array());
                                                                                                    this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib1_array());
                                                                                                  } else
                                                                                                    switch (state0) {
                                                                                                      case 0:
                                                                                                      case 2:
                                                                                                        if (state0 === 0 && $.eqB(type, 'm4v')) {
                                                                                                          if (uniform.get$_lib1_array() == null) {
                                                                                                            t1 = $.get$length(value);
                                                                                                            if (typeof t1 !== 'number')
                                                                                                              throw $.iae(t1);
                                                                                                            uniform.set$_lib1_array($.Float32Array_Float32Array(16 * t1));
                                                                                                          }
                                                                                                          il = $.get$length(value);
                                                                                                          for (i = 0; $.ltB(i, il); ++i)
                                                                                                            $.index(value, i).flattenToArrayOffset$2(uniform.get$_lib1_array(), i * 16);
                                                                                                          this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib1_array());
                                                                                                        } else
                                                                                                          switch (state0) {
                                                                                                            case 0:
                                                                                                            case 2:
                                                                                                              if (state0 === 0 && $.eqB(type, 't')) {
                                                                                                                this._gl.uniform1i$2(location$, value);
                                                                                                                texture = uniform.get$texture();
                                                                                                                if (texture == null)
                                                                                                                  break c$0;
                                                                                                                t1 = texture.get$image();
                                                                                                                if (typeof t1 === 'object' && t1 !== null && (t1.constructor === Array || t1.is$List()) && $.eqB($.get$length(texture.get$image()), 6))
                                                                                                                  this.setCubeTexture$2(texture, value);
                                                                                                                else if (typeof texture === 'object' && texture !== null && !!texture.is$WebGLRenderTargetCube)
                                                                                                                  this.setCubeTextureDynamic$2(texture, value);
                                                                                                                else
                                                                                                                  this.setTexture$2(texture, value);
                                                                                                              } else
                                                                                                                switch (state0) {
                                                                                                                  case 0:
                                                                                                                  case 2:
                                                                                                                    if (state0 === 2 || state0 === 0 && $.eqB(type, 'tv'))
                                                                                                                      switch (state0) {
                                                                                                                        case 0:
                                                                                                                        case 2:
                                                                                                                          if (state0 === 2 || state0 === 0 && uniform.get$_lib1_array() == null)
                                                                                                                            switch (state0) {
                                                                                                                              case 0:
                                                                                                                                uniform.set$_lib1_array([]);
                                                                                                                                il = $.get$length(uniform.get$texture());
                                                                                                                              case 2:
                                                                                                                                state0 = 0;
                                                                                                                                for (i = 0; $.ltB(i, il); ++i)
                                                                                                                                  $.indexSet(uniform.get$_lib1_array(), i, $.add(value, i));
                                                                                                                            }
                                                                                                                          this._gl.uniform1iv$2(location$, uniform.get$_lib1_array());
                                                                                                                          il = $.get$length(uniform.get$texture());
                                                                                                                          for (i = 0; $.ltB(i, il); ++i) {
                                                                                                                            texture = $.index(uniform.get$texture(), i);
                                                                                                                            if (texture !== true)
                                                                                                                              continue;
                                                                                                                            this.setTexture$2(texture, $.index(uniform.get$_lib1_array(), i));
                                                                                                                          }
                                                                                                                      }
                                                                                                                }
                                                                                                          }
                                                                                                    }
                                                                                              }
                                                                                        }
                                                                                  }
                                                                            }
                                                                      }
                                                                }
                                                          }
                                                    }
                                              }
                                        }
                                  }
                            }
                      }
                }
              }
              ++j;
          }
  }
},
 setupMatrices$2: function(object, camera) {
  object.get$_modelViewMatrix().multiply$2(camera.get$matrixWorldInverse(), object.get$matrixWorld());
  object.get$_normalMatrix().getInverse$1(object.get$_modelViewMatrix());
  object.get$_normalMatrix().transpose$0();
},
 setupLights$2: function(program, lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.setupLights$2$bailout(1, lights, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var zlights = this._lights;
  var dcolors = $.index($.index(zlights, 'directional'), 'colors');
  if (typeof dcolors !== 'object' || dcolors === null || (dcolors.constructor !== Array || !!dcolors.immutable$list) && !dcolors.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(2, lights, dcolors, zlights, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var dpositions = $.index($.index(zlights, 'directional'), 'positions');
  if (typeof dpositions !== 'object' || dpositions === null || (dpositions.constructor !== Array || !!dpositions.immutable$list) && !dpositions.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(3, lights, dpositions, dcolors, zlights, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var pcolors = $.index($.index(zlights, 'point'), 'colors');
  if (typeof pcolors !== 'object' || pcolors === null || (pcolors.constructor !== Array || !!pcolors.immutable$list) && !pcolors.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(4, lights, dpositions, dcolors, pcolors, zlights, 0, 0, 0, 0, 0, 0, 0, 0);
  var ppositions = $.index($.index(zlights, 'point'), 'positions');
  if (typeof ppositions !== 'object' || ppositions === null || (ppositions.constructor !== Array || !!ppositions.immutable$list) && !ppositions.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(5, lights, dpositions, pcolors, zlights, ppositions, dcolors, 0, 0, 0, 0, 0, 0, 0);
  var pdistances = $.index($.index(zlights, 'point'), 'distances');
  if (typeof pdistances !== 'object' || pdistances === null || (pdistances.constructor !== Array || !!pdistances.immutable$list) && !pdistances.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(6, lights, dpositions, pcolors, zlights, ppositions, dcolors, pdistances, 0, 0, 0, 0, 0, 0);
  var scolors = $.index($.index(zlights, 'spot'), 'colors');
  if (typeof scolors !== 'object' || scolors === null || (scolors.constructor !== Array || !!scolors.immutable$list) && !scolors.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(7, lights, dpositions, scolors, pcolors, zlights, ppositions, dcolors, pdistances, 0, 0, 0, 0, 0);
  var spositions = $.index($.index(zlights, 'spot'), 'positions');
  if (typeof spositions !== 'object' || spositions === null || (spositions.constructor !== Array || !!spositions.immutable$list) && !spositions.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(8, lights, dpositions, scolors, pcolors, zlights, spositions, ppositions, dcolors, pdistances, 0, 0, 0, 0);
  var sdistances = $.index($.index(zlights, 'spot'), 'distances');
  if (typeof sdistances !== 'object' || sdistances === null || (sdistances.constructor !== Array || !!sdistances.immutable$list) && !sdistances.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(9, lights, dpositions, scolors, pcolors, zlights, spositions, ppositions, dcolors, sdistances, pdistances, 0, 0, 0);
  var sdirections = $.index($.index(zlights, 'spot'), 'directions');
  if (typeof sdirections !== 'object' || sdirections === null || (sdirections.constructor !== Array || !!sdirections.immutable$list) && !sdirections.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(10, lights, dpositions, scolors, pcolors, zlights, spositions, ppositions, sdirections, dcolors, sdistances, pdistances, 0, 0);
  var sangles = $.index($.index(zlights, 'spot'), 'angles');
  if (typeof sangles !== 'object' || sangles === null || (sangles.constructor !== Array || !!sangles.immutable$list) && !sangles.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(11, lights, scolors, zlights, spositions, dcolors, sdistances, dpositions, sdirections, pcolors, sangles, ppositions, pdistances, 0);
  var sexponents = $.index($.index(zlights, 'spot'), 'exponents');
  if (typeof sexponents !== 'object' || sexponents === null || (sexponents.constructor !== Array || !!sexponents.immutable$list) && !sexponents.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(12, lights, scolors, zlights, spositions, dcolors, sdistances, dpositions, sdirections, pcolors, sangles, ppositions, sexponents, pdistances);
  var ll = lights.length;
  for (var t1 = this.gammaInput, t2 = this._direction, l = 0, light = null, r = 0, g = 0, b = 0, color = null, position = null, intensity = null, distance = null, dlength = 0, plength = 0, slength = 0, doffset = 0, poffset = 0, soffset = 0; l < ll; ++l) {
    if (l >= lights.length)
      throw $.ioore(l);
    light = lights[l];
    if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && light.get$onlyShadow() === true || light.get$visible() !== true)
      continue;
    color = light.get$color();
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight || typeof light === 'object' && light !== null && !!light.is$PointLight) {
      intensity = light.get$intensity();
      distance = light.get$distance();
    }
    if (typeof light === 'object' && light !== null && !!light.is$AmbientLight)
      if (t1) {
        var t3 = $.mul(color.get$r(), color.get$r());
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        r += t3;
        t3 = color.get$g();
        t3 = $.mul(t3, t3);
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        g += t3;
        t3 = color.get$b();
        t3 = $.mul(t3, t3);
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        b += t3;
      } else {
        t3 = color.get$r();
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        r += t3;
        t3 = color.get$g();
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        g += t3;
        t3 = color.get$b();
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        b += t3;
      }
    else if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight) {
      doffset = dlength * 3;
      t3 = doffset + 3;
      $.set$length(dcolors, t3);
      $.set$length(dpositions, t3);
      t3 = doffset + 2;
      var t4 = doffset + 1;
      if (t1) {
        var t5 = $.mul($.mul($.mul(color.get$r(), color.get$r()), intensity), intensity);
        if (doffset < 0 || doffset >= dcolors.length)
          throw $.ioore(doffset);
        dcolors[doffset] = t5;
        t5 = color.get$g();
        var t6 = $.mul($.mul($.mul(t5, t5), intensity), intensity);
        if (t4 < 0 || t4 >= dcolors.length)
          throw $.ioore(t4);
        dcolors[t4] = t6;
        t6 = color.get$b();
        var t7 = $.mul($.mul($.mul(t6, t6), intensity), intensity);
        if (t3 < 0 || t3 >= dcolors.length)
          throw $.ioore(t3);
        dcolors[t3] = t7;
      } else {
        t5 = $.mul(color.get$r(), intensity);
        if (doffset < 0 || doffset >= dcolors.length)
          throw $.ioore(doffset);
        dcolors[doffset] = t5;
        t5 = $.mul(color.get$g(), intensity);
        if (t4 < 0 || t4 >= dcolors.length)
          throw $.ioore(t4);
        dcolors[t4] = t5;
        t5 = $.mul(color.get$b(), intensity);
        if (t3 < 0 || t3 >= dcolors.length)
          throw $.ioore(t3);
        dcolors[t3] = t5;
      }
      t2.copy$1(light.matrixWorld.getPosition$0());
      t2.subSelf$1(light.target.matrixWorld.getPosition$0());
      t2.normalize$0();
      t5 = t2.x;
      t6 = dpositions.length;
      if (doffset < 0 || doffset >= t6)
        throw $.ioore(doffset);
      dpositions[doffset] = t5;
      t5 = t2.y;
      if (t4 < 0 || t4 >= t6)
        throw $.ioore(t4);
      dpositions[t4] = t5;
      t5 = t2.z;
      if (t3 < 0 || t3 >= t6)
        throw $.ioore(t3);
      dpositions[t3] = t5;
      ++dlength;
    } else if (typeof light === 'object' && light !== null && !!light.is$PointLight) {
      poffset = plength * 3;
      t3 = poffset + 3;
      $.set$length(pcolors, t3);
      $.set$length(ppositions, t3);
      t3 = poffset + 1;
      t4 = poffset + 2;
      if (t1) {
        t5 = $.mul($.mul($.mul(color.get$r(), color.get$r()), intensity), intensity);
        if (poffset < 0 || poffset >= pcolors.length)
          throw $.ioore(poffset);
        pcolors[poffset] = t5;
        t5 = color.get$g();
        t6 = $.mul($.mul($.mul(t5, t5), intensity), intensity);
        if (t3 < 0 || t3 >= pcolors.length)
          throw $.ioore(t3);
        pcolors[t3] = t6;
        t6 = color.get$b();
        t7 = $.mul($.mul($.mul(t6, t6), intensity), intensity);
        if (t4 < 0 || t4 >= pcolors.length)
          throw $.ioore(t4);
        pcolors[t4] = t7;
      } else {
        t5 = $.mul(color.get$r(), intensity);
        if (poffset < 0 || poffset >= pcolors.length)
          throw $.ioore(poffset);
        pcolors[poffset] = t5;
        t5 = $.mul(color.get$g(), intensity);
        if (t3 < 0 || t3 >= pcolors.length)
          throw $.ioore(t3);
        pcolors[t3] = t5;
        t5 = $.mul(color.get$b(), intensity);
        if (t4 < 0 || t4 >= pcolors.length)
          throw $.ioore(t4);
        pcolors[t4] = t5;
      }
      position = light.matrixWorld.getPosition$0();
      t5 = position.get$x();
      if (poffset < 0 || poffset >= ppositions.length)
        throw $.ioore(poffset);
      ppositions[poffset] = t5;
      t5 = position.get$y();
      if (t3 < 0 || t3 >= ppositions.length)
        throw $.ioore(t3);
      ppositions[t3] = t5;
      t5 = position.get$z();
      if (t4 < 0 || t4 >= ppositions.length)
        throw $.ioore(t4);
      ppositions[t4] = t5;
      if (pdistances.length === 0)
        $.add$1(pdistances, 0);
      if (plength >= pdistances.length)
        throw $.ioore(plength);
      pdistances[plength] = distance;
      ++plength;
    } else if (typeof light === 'object' && light !== null && !!light.is$SpotLight) {
      soffset = slength * 3;
      t3 = soffset + 3;
      $.set$length(scolors, t3);
      $.set$length(spositions, t3);
      $.set$length(sdirections, t3);
      var slength0 = slength + 1;
      $.set$length(sdistances, slength0);
      t3 = soffset + 2;
      t4 = soffset + 1;
      if (t1) {
        t5 = $.mul($.mul($.mul(color.get$r(), color.get$r()), intensity), intensity);
        if (soffset < 0 || soffset >= scolors.length)
          throw $.ioore(soffset);
        scolors[soffset] = t5;
        t5 = color.get$g();
        t6 = $.mul($.mul($.mul(t5, t5), intensity), intensity);
        if (t4 < 0 || t4 >= scolors.length)
          throw $.ioore(t4);
        scolors[t4] = t6;
        t6 = color.get$b();
        t7 = $.mul($.mul($.mul(t6, t6), intensity), intensity);
        if (t3 < 0 || t3 >= scolors.length)
          throw $.ioore(t3);
        scolors[t3] = t7;
      } else {
        t5 = $.mul(color.get$r(), intensity);
        if (soffset < 0 || soffset >= scolors.length)
          throw $.ioore(soffset);
        scolors[soffset] = t5;
        t5 = $.mul(color.get$g(), intensity);
        if (t4 < 0 || t4 >= scolors.length)
          throw $.ioore(t4);
        scolors[t4] = t5;
        t5 = $.mul(color.get$b(), intensity);
        if (t3 < 0 || t3 >= scolors.length)
          throw $.ioore(t3);
        scolors[t3] = t5;
      }
      position = light.matrixWorld.getPosition$0();
      t5 = position.get$x();
      if (soffset < 0 || soffset >= spositions.length)
        throw $.ioore(soffset);
      spositions[soffset] = t5;
      t5 = position.get$y();
      if (t4 < 0 || t4 >= spositions.length)
        throw $.ioore(t4);
      spositions[t4] = t5;
      t5 = position.get$z();
      if (t3 < 0 || t3 >= spositions.length)
        throw $.ioore(t3);
      spositions[t3] = t5;
      if (slength >= sdistances.length)
        throw $.ioore(slength);
      sdistances[slength] = distance;
      t2.copy$1(position);
      t2.subSelf$1(light.target.get$matrixWorld().getPosition$0());
      t2.normalize$0();
      t5 = t2.x;
      t6 = sdirections.length;
      if (soffset >= t6)
        throw $.ioore(soffset);
      sdirections[soffset] = t5;
      t5 = t2.y;
      if (t4 >= t6)
        throw $.ioore(t4);
      sdirections[t4] = t5;
      t5 = t2.z;
      if (t3 >= t6)
        throw $.ioore(t3);
      sdirections[t3] = t5;
      t5 = $.cos(light.angle);
      if (slength >= sangles.length)
        throw $.ioore(slength);
      sangles[slength] = t5;
      t5 = light.exponent;
      if (slength >= sexponents.length)
        throw $.ioore(slength);
      sexponents[slength] = t5;
      slength = slength0;
    }
  }
  ll = dcolors.length;
  for (l = dlength * 3; l < ll; ++l) {
    if (l < 0)
      throw $.ioore(l);
    dcolors[l] = 0;
  }
  ll = pcolors.length;
  for (l = plength * 3; l < ll; ++l) {
    if (l < 0)
      throw $.ioore(l);
    pcolors[l] = 0;
  }
  ll = scolors.length;
  for (l = slength * 3; l < ll; ++l) {
    if (l < 0)
      throw $.ioore(l);
    scolors[l] = 0;
  }
  $.indexSet($.index(zlights, 'directional'), 'length', dlength);
  $.indexSet($.index(zlights, 'point'), 'length', plength);
  $.indexSet($.index(zlights, 'spot'), 'length', slength);
  $.indexSet($.index(zlights, 'ambient'), 0, r);
  $.indexSet($.index(zlights, 'ambient'), 1, g);
  $.indexSet($.index(zlights, 'ambient'), 2, b);
},
 setupLights$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12) {
  switch (state0) {
    case 1:
      var lights = env0;
      break;
    case 2:
      lights = env0;
      dcolors = env1;
      zlights = env2;
      break;
    case 3:
      lights = env0;
      dpositions = env1;
      dcolors = env2;
      zlights = env3;
      break;
    case 4:
      lights = env0;
      dpositions = env1;
      dcolors = env2;
      pcolors = env3;
      zlights = env4;
      break;
    case 5:
      lights = env0;
      dpositions = env1;
      pcolors = env2;
      zlights = env3;
      ppositions = env4;
      dcolors = env5;
      break;
    case 6:
      lights = env0;
      dpositions = env1;
      pcolors = env2;
      zlights = env3;
      ppositions = env4;
      dcolors = env5;
      pdistances = env6;
      break;
    case 7:
      lights = env0;
      dpositions = env1;
      scolors = env2;
      pcolors = env3;
      zlights = env4;
      ppositions = env5;
      dcolors = env6;
      pdistances = env7;
      break;
    case 8:
      lights = env0;
      dpositions = env1;
      scolors = env2;
      pcolors = env3;
      zlights = env4;
      spositions = env5;
      ppositions = env6;
      dcolors = env7;
      pdistances = env8;
      break;
    case 9:
      lights = env0;
      dpositions = env1;
      scolors = env2;
      pcolors = env3;
      zlights = env4;
      spositions = env5;
      ppositions = env6;
      dcolors = env7;
      sdistances = env8;
      pdistances = env9;
      break;
    case 10:
      lights = env0;
      dpositions = env1;
      scolors = env2;
      pcolors = env3;
      zlights = env4;
      spositions = env5;
      ppositions = env6;
      sdirections = env7;
      dcolors = env8;
      sdistances = env9;
      pdistances = env10;
      break;
    case 11:
      lights = env0;
      scolors = env1;
      zlights = env2;
      spositions = env3;
      dcolors = env4;
      sdistances = env5;
      dpositions = env6;
      sdirections = env7;
      pcolors = env8;
      sangles = env9;
      ppositions = env10;
      pdistances = env11;
      break;
    case 12:
      lights = env0;
      scolors = env1;
      zlights = env2;
      spositions = env3;
      dcolors = env4;
      sdistances = env5;
      dpositions = env6;
      sdirections = env7;
      pcolors = env8;
      sangles = env9;
      ppositions = env10;
      sexponents = env11;
      pdistances = env12;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var zlights = this._lights;
      var dcolors = $.index($.index(zlights, 'directional'), 'colors');
    case 2:
      state0 = 0;
      var dpositions = $.index($.index(zlights, 'directional'), 'positions');
    case 3:
      state0 = 0;
      var pcolors = $.index($.index(zlights, 'point'), 'colors');
    case 4:
      state0 = 0;
      var ppositions = $.index($.index(zlights, 'point'), 'positions');
    case 5:
      state0 = 0;
      var pdistances = $.index($.index(zlights, 'point'), 'distances');
    case 6:
      state0 = 0;
      var scolors = $.index($.index(zlights, 'spot'), 'colors');
    case 7:
      state0 = 0;
      var spositions = $.index($.index(zlights, 'spot'), 'positions');
    case 8:
      state0 = 0;
      var sdistances = $.index($.index(zlights, 'spot'), 'distances');
    case 9:
      state0 = 0;
      var sdirections = $.index($.index(zlights, 'spot'), 'directions');
    case 10:
      state0 = 0;
      var sangles = $.index($.index(zlights, 'spot'), 'angles');
    case 11:
      state0 = 0;
      var sexponents = $.index($.index(zlights, 'spot'), 'exponents');
    case 12:
      state0 = 0;
      var ll = $.get$length(lights);
      for (var t1 = this.gammaInput, t2 = this._direction, l = 0, light = null, r = 0, g = 0, b = 0, color = null, position = null, intensity = null, distance = null, dlength = 0, plength = 0, slength = 0, doffset = 0, poffset = 0, soffset = 0; $.ltB(l, ll); ++l) {
        light = $.index(lights, l);
        if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && light.get$onlyShadow() === true || light.get$visible() !== true)
          continue;
        color = light.get$color();
        if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight || typeof light === 'object' && light !== null && !!light.is$PointLight) {
          intensity = light.get$intensity();
          distance = light.get$distance();
        }
        if (typeof light === 'object' && light !== null && !!light.is$AmbientLight)
          if (t1) {
            var t3 = $.mul(color.get$r(), color.get$r());
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            r += t3;
            t3 = color.get$g();
            t3 = $.mul(t3, t3);
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            g += t3;
            t3 = color.get$b();
            t3 = $.mul(t3, t3);
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            b += t3;
          } else {
            t3 = color.get$r();
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            r += t3;
            t3 = color.get$g();
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            g += t3;
            t3 = color.get$b();
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            b += t3;
          }
        else if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight) {
          doffset = dlength * 3;
          t3 = doffset + 3;
          $.set$length(dcolors, t3);
          $.set$length(dpositions, t3);
          t3 = doffset + 2;
          var t4 = doffset + 1;
          if (t1) {
            $.indexSet(dcolors, doffset, $.mul($.mul($.mul(color.get$r(), color.get$r()), intensity), intensity));
            var t5 = color.get$g();
            $.indexSet(dcolors, t4, $.mul($.mul($.mul(t5, t5), intensity), intensity));
            t4 = color.get$b();
            $.indexSet(dcolors, t3, $.mul($.mul($.mul(t4, t4), intensity), intensity));
          } else {
            $.indexSet(dcolors, doffset, $.mul(color.get$r(), intensity));
            $.indexSet(dcolors, t4, $.mul(color.get$g(), intensity));
            $.indexSet(dcolors, t3, $.mul(color.get$b(), intensity));
          }
          t2.copy$1(light.matrixWorld.getPosition$0());
          t2.subSelf$1(light.target.matrixWorld.getPosition$0());
          t2.normalize$0();
          $.indexSet(dpositions, doffset, t2.x);
          $.indexSet(dpositions, doffset + 1, t2.y);
          $.indexSet(dpositions, doffset + 2, t2.z);
          ++dlength;
        } else if (typeof light === 'object' && light !== null && !!light.is$PointLight) {
          poffset = plength * 3;
          t3 = poffset + 3;
          $.set$length(pcolors, t3);
          $.set$length(ppositions, t3);
          t3 = poffset + 1;
          t4 = poffset + 2;
          if (t1) {
            $.indexSet(pcolors, poffset, $.mul($.mul($.mul(color.get$r(), color.get$r()), intensity), intensity));
            t5 = color.get$g();
            $.indexSet(pcolors, t3, $.mul($.mul($.mul(t5, t5), intensity), intensity));
            t3 = color.get$b();
            $.indexSet(pcolors, t4, $.mul($.mul($.mul(t3, t3), intensity), intensity));
          } else {
            $.indexSet(pcolors, poffset, $.mul(color.get$r(), intensity));
            $.indexSet(pcolors, t3, $.mul(color.get$g(), intensity));
            $.indexSet(pcolors, t4, $.mul(color.get$b(), intensity));
          }
          position = light.matrixWorld.getPosition$0();
          $.indexSet(ppositions, poffset, position.get$x());
          $.indexSet(ppositions, poffset + 1, position.get$y());
          $.indexSet(ppositions, poffset + 2, position.get$z());
          if (pdistances == null) {
            pdistances = $.ListImplementation_List(null);
            pdistances.push(0);
          }
          if ($.eqB($.get$length(pdistances), 0))
            $.add$1(pdistances, 0);
          $.indexSet(pdistances, plength, distance);
          ++plength;
        } else if (typeof light === 'object' && light !== null && !!light.is$SpotLight) {
          soffset = slength * 3;
          t3 = soffset + 3;
          $.set$length(scolors, t3);
          $.set$length(spositions, t3);
          $.set$length(sdirections, t3);
          var slength0 = slength + 1;
          $.set$length(sdistances, slength0);
          t3 = soffset + 2;
          t4 = soffset + 1;
          if (t1) {
            $.indexSet(scolors, soffset, $.mul($.mul($.mul(color.get$r(), color.get$r()), intensity), intensity));
            t5 = color.get$g();
            $.indexSet(scolors, t4, $.mul($.mul($.mul(t5, t5), intensity), intensity));
            t4 = color.get$b();
            $.indexSet(scolors, t3, $.mul($.mul($.mul(t4, t4), intensity), intensity));
          } else {
            $.indexSet(scolors, soffset, $.mul(color.get$r(), intensity));
            $.indexSet(scolors, t4, $.mul(color.get$g(), intensity));
            $.indexSet(scolors, t3, $.mul(color.get$b(), intensity));
          }
          position = light.matrixWorld.getPosition$0();
          $.indexSet(spositions, soffset, position.get$x());
          t3 = soffset + 1;
          $.indexSet(spositions, t3, position.get$y());
          t4 = soffset + 2;
          $.indexSet(spositions, t4, position.get$z());
          $.indexSet(sdistances, slength, distance);
          t2.copy$1(position);
          t2.subSelf$1(light.target.get$matrixWorld().getPosition$0());
          t2.normalize$0();
          $.indexSet(sdirections, soffset, t2.x);
          $.indexSet(sdirections, t3, t2.y);
          $.indexSet(sdirections, t4, t2.z);
          $.indexSet(sangles, slength, $.cos(light.angle));
          $.indexSet(sexponents, slength, light.exponent);
          slength = slength0;
        }
      }
      ll = $.get$length(dcolors);
      for (l = dlength * 3; $.ltB(l, ll); ++l)
        $.indexSet(dcolors, l, 0);
      ll = $.get$length(pcolors);
      for (l = plength * 3; $.ltB(l, ll); ++l)
        $.indexSet(pcolors, l, 0);
      ll = $.get$length(scolors);
      for (l = slength * 3; $.ltB(l, ll); ++l)
        $.indexSet(scolors, l, 0);
      $.indexSet($.index(zlights, 'directional'), 'length', dlength);
      $.indexSet($.index(zlights, 'point'), 'length', plength);
      $.indexSet($.index(zlights, 'spot'), 'length', slength);
      $.indexSet($.index(zlights, 'ambient'), 0, r);
      $.indexSet($.index(zlights, 'ambient'), 1, g);
      $.indexSet($.index(zlights, 'ambient'), 2, b);
  }
},
 setMaterialFaces$1: function(material) {
  var t1 = material.get$side();
  if (typeof t1 !== 'number')
    return this.setMaterialFaces$1$bailout(1, material, t1, 0);
  var doubleSided = t1 === 2;
  t1 = material.get$side();
  if (typeof t1 !== 'number')
    return this.setMaterialFaces$1$bailout(2, doubleSided, t1, 0);
  var flipSided = t1 === 1;
  t1 = this._oldDoubleSided;
  if (typeof t1 !== 'boolean')
    return this.setMaterialFaces$1$bailout(3, t1, flipSided, doubleSided);
  if (!(t1 === doubleSided)) {
    t1 = this._gl;
    if (doubleSided)
      t1.disable$1(2884);
    else
      t1.enable$1(2884);
    this._oldDoubleSided = doubleSided;
  }
  t1 = this._oldFlipSided;
  if (typeof t1 !== 'boolean')
    return this.setMaterialFaces$1$bailout(4, flipSided, t1, 0);
  if (!(t1 === flipSided)) {
    t1 = this._gl;
    if (flipSided)
      t1.frontFace$1(2304);
    else
      t1.frontFace$1(2305);
    this._oldFlipSided = flipSided;
  }
},
 setMaterialFaces$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var material = env0;
      t1 = env1;
      break;
    case 2:
      doubleSided = env0;
      t1 = env1;
      break;
    case 3:
      t1 = env0;
      flipSided = env1;
      doubleSided = env2;
      break;
    case 4:
      flipSided = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = material.get$side();
    case 1:
      state0 = 0;
      var doubleSided = $.eq(t1, 2);
      t1 = material.get$side();
    case 2:
      state0 = 0;
      var flipSided = $.eq(t1, 1);
      t1 = this._oldDoubleSided;
    case 3:
      state0 = 0;
      if (!$.eqB(t1, doubleSided)) {
        t1 = doubleSided === true;
        var t2 = this._gl;
        if (t1)
          t2.disable$1(2884);
        else
          t2.enable$1(2884);
        this._oldDoubleSided = doubleSided;
      }
      t1 = this._oldFlipSided;
    case 4:
      state0 = 0;
      if (!$.eqB(t1, flipSided)) {
        t1 = flipSided === true;
        t2 = this._gl;
        if (t1)
          t2.frontFace$1(2304);
        else
          t2.frontFace$1(2305);
        this._oldFlipSided = flipSided;
      }
  }
},
 setDepthTest$1: function(depthTest) {
  if (!$.eqB(this._oldDepthTest, depthTest)) {
    var t1 = depthTest === true;
    var t2 = this._gl;
    if (t1)
      t2.enable$1(2929);
    else
      t2.disable$1(2929);
    this._oldDepthTest = depthTest;
  }
},
 setDepthWrite$1: function(depthWrite) {
  if (!$.eqB(this._oldDepthWrite, depthWrite)) {
    this._gl.depthMask$1(depthWrite);
    this._oldDepthWrite = depthWrite;
  }
},
 setLineWidth$1: function(width) {
  if (!$.eqB(width, this._oldLineWidth)) {
    this._gl.lineWidth$1(width);
    this._oldLineWidth = width;
  }
},
 setPolygonOffset$3: function(polygonoffset, factor, units) {
  if (!$.eqB(this._oldPolygonOffset, polygonoffset)) {
    var t1 = polygonoffset === true;
    var t2 = this._gl;
    if (t1)
      t2.enable$1(32823);
    else
      t2.disable$1(32823);
    this._oldPolygonOffset = polygonoffset;
  }
  if (polygonoffset === true)
    t1 = !$.eqB(this._oldPolygonOffsetFactor, factor) || !$.eqB(this._oldPolygonOffsetUnits, units);
  else
    t1 = false;
  if (t1) {
    this._gl.polygonOffset$2(factor, units);
    this._oldPolygonOffsetFactor = factor;
    this._oldPolygonOffsetUnits = units;
  }
},
 setBlending$4: function(blending, blendEquation, blendSrc, blendDst) {
  if (typeof blending !== 'number')
    return this.setBlending$4$bailout(1, blending, blendEquation, blendSrc, blendDst);
  if (!(blending === this._oldBlending)) {
    if (blending === 0)
      this._gl.disable$1(3042);
    else if (blending === 2) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(770, 1);
    } else if (blending === 3) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(0, 769);
    } else if (blending === 4) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(0, 768);
    } else {
      var t1 = blending === 5;
      var t2 = this._gl;
      if (t1)
        t2.enable$1(3042);
      else {
        t2.enable$1(3042);
        this._gl.blendEquationSeparate$2(32774, 32774);
        this._gl.blendFuncSeparate$4(770, 771, 1, 771);
      }
    }
    this._oldBlending = blending;
  }
  if (blending === 5) {
    if (!$.eqB(blendEquation, this._oldBlendEquation)) {
      this._gl.blendEquation$1(this.paramThreeToGL$1(blendEquation));
      this._oldBlendEquation = blendEquation;
    }
    if (!$.eqB(blendSrc, this._oldBlendSrc) || !$.eqB(blendDst, this._oldBlendDst)) {
      this._gl.blendFunc$2(this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
      this._oldBlendSrc = blendSrc;
      this._oldBlendDst = blendDst;
    }
  } else {
    this._oldBlendEquation = null;
    this._oldBlendSrc = null;
    this._oldBlendDst = null;
  }
},
 setBlending$4$bailout: function(state0, blending, blendEquation, blendSrc, blendDst) {
  if (!$.eqB(blending, this._oldBlending)) {
    if ($.eqB(blending, 0))
      this._gl.disable$1(3042);
    else if ($.eqB(blending, 2)) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(770, 1);
    } else if ($.eqB(blending, 3)) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(0, 769);
    } else if ($.eqB(blending, 4)) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(0, 768);
    } else {
      var t1 = $.eqB(blending, 5);
      var t2 = this._gl;
      if (t1)
        t2.enable$1(3042);
      else {
        t2.enable$1(3042);
        this._gl.blendEquationSeparate$2(32774, 32774);
        this._gl.blendFuncSeparate$4(770, 771, 1, 771);
      }
    }
    this._oldBlending = blending;
  }
  if ($.eqB(blending, 5)) {
    if (!$.eqB(blendEquation, this._oldBlendEquation)) {
      this._gl.blendEquation$1(this.paramThreeToGL$1(blendEquation));
      this._oldBlendEquation = blendEquation;
    }
    if (!$.eqB(blendSrc, this._oldBlendSrc) || !$.eqB(blendDst, this._oldBlendDst)) {
      this._gl.blendFunc$2(this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
      this._oldBlendSrc = blendSrc;
      this._oldBlendDst = blendDst;
    }
  } else {
    this._oldBlendEquation = null;
    this._oldBlendSrc = null;
    this._oldBlendDst = null;
  }
},
 setBlending$1: function(blending) {
  return this.setBlending$4(blending,null,null,null)
},
 buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround: function(shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround) {
  var t1 = {};
  if (typeof maxMorphNormals !== 'number')
    return this.buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround$bailout(1, shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround, t1);
  if (typeof maxMorphTargets !== 'number')
    return this.buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround$bailout(1, shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround, t1);
  var chunks = [];
  if (!(shaderID == null))
    chunks.push(shaderID);
  else {
    chunks.push(fragmentShader);
    chunks.push(vertexShader);
  }
  var code = 'maxDirLights' + $.S(maxDirLights) + 'maxPointLights' + $.S(maxPointLights) + 'maxSpotLights' + $.S(maxSpotLights) + 'maxShadows' + $.S(maxShadows) + 'maxBones' + $.S(maxBones) + 'map' + $.S(map) + 'envMap' + $.S(envMap) + 'lightMap' + $.S(lightMap) + 'bumpMap' + $.S(bumpMap) + 'specularMap' + $.S(specularMap) + 'vertexColors' + $.S(vertexColors) + 'skinning' + $.S(skinning) + 'useVertexTexture' + $.S(useVertexTexture) + 'boneTextureWidth' + $.S(boneTextureWidth) + 'boneTextureHeight' + $.S(boneTextureHeight) + 'morphTargets' + $.S(morphTargets) + 'morphNormals' + $.S(morphNormals) + 'perPixel' + $.S(perPixel) + 'wrapAround' + $.S(wrapAround) + 'doubleSided' + $.S(doubleSided) + 'shadowMapEnabled' + $.S(shadowMapEnabled) + 'shadowMapSoft' + $.S(shadowMapSoft) + 'shadowMapDebug' + $.S(shadowMapDebug) + 'shadowMapCascade' + $.S(shadowMapCascade) + 'sizeAttenuation' + $.S(sizeAttenuation);
  var t2 = this._programs;
  var pl = t2.length;
  for (var p = 0; p < pl; ++p) {
    if (p >= t2.length)
      throw $.ioore(p);
    var program = t2[p];
    if (program.get$code() === code) {
      program.set$usedTimes($.add(program.get$usedTimes(), 1));
      return program;
    }
  }
  var glprogram = this._gl.createProgram$0();
  var t3 = this.precision;
  var t4 = 'precision ' + $.S(t3) + ' float;';
  var t5 = this.supportsVertexTextures === true ? '#define VERTEX_TEXTURES' : '';
  var t6 = this.gammaInput;
  var t7 = t6 ? '#define GAMMA_INPUT' : '';
  var t8 = this.gammaOutput;
  var t9 = t8 ? '#define GAMMA_OUTPUT' : '';
  var t10 = this.physicallyBasedShading;
  var t11 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  var t12 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  var t13 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  var t14 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  var t15 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  var t16 = '#define MAX_BONES ' + $.S(maxBones);
  var t17 = !(map == null);
  var t18 = t17 ? '#define USE_MAP' : '';
  var t19 = !(envMap == null);
  var t20 = t19 ? '#define USE_ENVMAP' : '';
  var t21 = !(lightMap == null);
  var t22 = t21 ? '#define USE_LIGHTMAP' : '';
  var t23 = !(bumpMap == null);
  var t24 = t23 ? '#define USE_BUMPMAP' : '';
  var t25 = !(specularMap == null);
  var t26 = t25 ? '#define USE_SPECULARMAP' : '';
  var t27 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  var t28 = skinning === true ? '#define USE_SKINNING' : '';
  var t29 = useVertexTexture === true;
  var t30 = t29 ? '#define BONE_TEXTURE' : '';
  var t31 = !(boneTextureWidth == null) ? '#define N_BONE_PIXEL_X ' + $.S($.toStringAsFixed(boneTextureWidth, 1)) : '';
  var t32 = !(boneTextureHeight == null) ? '#define N_BONE_PIXEL_Y ' + $.S($.toStringAsFixed(boneTextureHeight, 1)) : '';
  var t33 = morphTargets === true ? '#define USE_MORPHTARGETS' : '';
  var t34 = morphNormals === true ? '#define USE_MORPHNORMALS' : '';
  var t35 = perPixel === true;
  var t36 = t35 ? '#define PHONG_PER_PIXEL' : '';
  var t37 = wrapAround === true;
  var t38 = t37 ? '#define WRAP_AROUND' : '';
  var t39 = doubleSided === true;
  var t40 = t39 ? '#define DOUBLE_SIDED' : '';
  var t41 = shadowMapEnabled === true;
  var t42 = t41 ? '#define USE_SHADOWMAP' : '';
  var t43 = shadowMapSoft === true;
  var t44 = t43 ? '#define SHADOWMAP_SOFT' : '';
  var t45 = shadowMapDebug === true;
  var t46 = t45 ? '#define SHADOWMAP_DEBUG' : '';
  var t47 = shadowMapCascade === true;
  var t48 = t47 ? '#define SHADOWMAP_CASCADE' : '';
  var prefix_vertex = $.Strings_join([t4, t5, t7, t9, t11, t12, t13, t14, t15, t16, t18, t20, t22, t24, t26, t27, t28, t30, t31, t32, t33, t34, t36, t38, t40, t42, t44, t46, t48, sizeAttenuation === true ? '#define USE_SIZEATTENUATION' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', 'attribute vec2 uv2;', '#ifdef USE_COLOR', 'attribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', 'attribute vec3 morphTarget0;', 'attribute vec3 morphTarget1;', 'attribute vec3 morphTarget2;', 'attribute vec3 morphTarget3;', '#ifdef USE_MORPHNORMALS', 'attribute vec3 morphNormal0;', 'attribute vec3 morphNormal1;', 'attribute vec3 morphNormal2;', 'attribute vec3 morphNormal3;', '#else', 'attribute vec3 morphTarget4;', 'attribute vec3 morphTarget5;', 'attribute vec3 morphTarget6;', 'attribute vec3 morphTarget7;', '#endif', '#endif', '#ifdef USE_SKINNING', 'attribute vec4 skinVertexA;', 'attribute vec4 skinVertexB;', 'attribute vec4 skinIndex;', 'attribute vec4 skinWeight;', '#endif', ''], '\n');
  var t49 = 'precision ' + $.S(t3) + ' float;';
  t3 = t23 ? '#extension GL_OES_standard_derivatives : enable' : '';
  t4 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  t5 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  t7 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  t9 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  t11 = !$.eqB(alphaTest, 0) ? '#define ALPHATEST ' + $.S(alphaTest) : '';
  t6 = t6 ? '#define GAMMA_INPUT' : '';
  t8 = t8 ? '#define GAMMA_OUTPUT' : '';
  t10 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  t12 = useFog === true;
  t13 = t12 && !(fog == null) ? '#define USE_FOG' : '';
  t12 = t12 && typeof fog === 'object' && fog !== null && !!fog.is$FogExp2 ? '#define FOG_EXP2' : '';
  t14 = t17 ? '#define USE_MAP' : '';
  t15 = t19 ? '#define USE_ENVMAP' : '';
  t16 = t21 ? '#define USE_LIGHTMAP' : '';
  t17 = t23 ? '#define USE_BUMPMAP' : '';
  t18 = t25 ? '#define USE_SPECULARMAP' : '';
  t19 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  t20 = metal === true ? '#define METAL' : '';
  t21 = t35 ? '#define PHONG_PER_PIXEL' : '';
  t22 = t37 ? '#define WRAP_AROUND' : '';
  t23 = t39 ? '#define DOUBLE_SIDED' : '';
  t24 = t41 ? '#define USE_SHADOWMAP' : '';
  t25 = t43 ? '#define SHADOWMAP_SOFT' : '';
  t26 = t45 ? '#define SHADOWMAP_DEBUG' : '';
  var glFragmentShader = this.getShader$2('fragment', $.S($.Strings_join([t49, t3, t4, t5, t7, t9, t11, t6, t8, t10, t13, t12, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t47 ? '#define SHADOWMAP_CASCADE' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', ''], '\n')) + $.S(fragmentShader));
  var glVertexShader = this.getShader$2('vertex', $.S(prefix_vertex) + $.S(vertexShader));
  this._gl.attachShader$2(glprogram, glVertexShader);
  this._gl.attachShader$2(glprogram, glFragmentShader);
  this._gl.linkProgram$1(glprogram);
  if (this._gl.getProgramParameter$2(glprogram, 35714) !== true) {
    var status$ = this._gl.getProgramParameter$2(glprogram, 35715);
    var error = this._gl.getError$0();
    $.print('Could not initialise shader\nVALIDATE_STATUS: ' + $.S(status$) + ', gl error [' + $.S(error) + ']');
  }
  this._gl.deleteShader$1(glFragmentShader);
  this._gl.deleteShader$1(glVertexShader);
  t3 = this._programs_counter;
  this._programs_counter = t3 + 1;
  program = $.Program$(t3, glprogram, code, 1);
  t1.identifiers_1 = null;
  t1.identifiers_1 = ['viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition', 'morphTargetInfluences'];
  t3 = t1.identifiers_1;
  if (t29)
    $.add$1(t3, 'boneTexture');
  else
    $.add$1(t3, 'boneGlobalMatrices');
  $.forEach(uniforms, new $.WebGLRenderer_buildProgram_anon(t1));
  this.cacheUniformLocations$2(program, t1.identifiers_1);
  t1.identifiers_1 = ['position', 'normal', 'uv', 'uv2', 'tangent', 'color', 'skinVertexA', 'skinVertexB', 'skinIndex', 'skinWeight'];
  for (var i = 0; i < maxMorphTargets; ++i)
    $.add$1(t1.identifiers_1, 'morphTarget' + $.S(i));
  for (i = 0; i < maxMorphNormals; ++i)
    $.add$1(t1.identifiers_1, 'morphNormal' + $.S(i));
  if (!(attributes == null))
    $.forEach(attributes, new $.WebGLRenderer_buildProgram_anon0(t1));
  this.cacheAttributeLocations$2(program, t1.identifiers_1);
  t2.push(program);
  t2 = t2.length;
  this.info.memory.programs = t2;
  return program;
},
 buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround$bailout: function(state0, shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround, t1) {
  var chunks = [];
  if (!(shaderID == null))
    chunks.push(shaderID);
  else {
    chunks.push(fragmentShader);
    chunks.push(vertexShader);
  }
  var code = 'maxDirLights' + $.S(maxDirLights) + 'maxPointLights' + $.S(maxPointLights) + 'maxSpotLights' + $.S(maxSpotLights) + 'maxShadows' + $.S(maxShadows) + 'maxBones' + $.S(maxBones) + 'map' + $.S(map) + 'envMap' + $.S(envMap) + 'lightMap' + $.S(lightMap) + 'bumpMap' + $.S(bumpMap) + 'specularMap' + $.S(specularMap) + 'vertexColors' + $.S(vertexColors) + 'skinning' + $.S(skinning) + 'useVertexTexture' + $.S(useVertexTexture) + 'boneTextureWidth' + $.S(boneTextureWidth) + 'boneTextureHeight' + $.S(boneTextureHeight) + 'morphTargets' + $.S(morphTargets) + 'morphNormals' + $.S(morphNormals) + 'perPixel' + $.S(perPixel) + 'wrapAround' + $.S(wrapAround) + 'doubleSided' + $.S(doubleSided) + 'shadowMapEnabled' + $.S(shadowMapEnabled) + 'shadowMapSoft' + $.S(shadowMapSoft) + 'shadowMapDebug' + $.S(shadowMapDebug) + 'shadowMapCascade' + $.S(shadowMapCascade) + 'sizeAttenuation' + $.S(sizeAttenuation);
  var t2 = this._programs;
  var pl = t2.length;
  for (var p = 0; p < pl; ++p) {
    if (p >= t2.length)
      throw $.ioore(p);
    var program = t2[p];
    if (program.get$code() === code) {
      program.set$usedTimes($.add(program.get$usedTimes(), 1));
      return program;
    }
  }
  var glprogram = this._gl.createProgram$0();
  var t3 = this.precision;
  var t4 = 'precision ' + $.S(t3) + ' float;';
  var t5 = this.supportsVertexTextures === true ? '#define VERTEX_TEXTURES' : '';
  var t6 = this.gammaInput;
  var t7 = t6 ? '#define GAMMA_INPUT' : '';
  var t8 = this.gammaOutput;
  var t9 = t8 ? '#define GAMMA_OUTPUT' : '';
  var t10 = this.physicallyBasedShading;
  var t11 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  var t12 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  var t13 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  var t14 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  var t15 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  var t16 = '#define MAX_BONES ' + $.S(maxBones);
  var t17 = !(map == null);
  var t18 = t17 ? '#define USE_MAP' : '';
  var t19 = !(envMap == null);
  var t20 = t19 ? '#define USE_ENVMAP' : '';
  var t21 = !(lightMap == null);
  var t22 = t21 ? '#define USE_LIGHTMAP' : '';
  var t23 = !(bumpMap == null);
  var t24 = t23 ? '#define USE_BUMPMAP' : '';
  var t25 = !(specularMap == null);
  var t26 = t25 ? '#define USE_SPECULARMAP' : '';
  var t27 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  var t28 = skinning === true ? '#define USE_SKINNING' : '';
  var t29 = useVertexTexture === true;
  var t30 = t29 ? '#define BONE_TEXTURE' : '';
  var t31 = !(boneTextureWidth == null) ? '#define N_BONE_PIXEL_X ' + $.S($.toStringAsFixed(boneTextureWidth, 1)) : '';
  var t32 = !(boneTextureHeight == null) ? '#define N_BONE_PIXEL_Y ' + $.S($.toStringAsFixed(boneTextureHeight, 1)) : '';
  var t33 = morphTargets === true ? '#define USE_MORPHTARGETS' : '';
  var t34 = morphNormals === true ? '#define USE_MORPHNORMALS' : '';
  var t35 = perPixel === true;
  var t36 = t35 ? '#define PHONG_PER_PIXEL' : '';
  var t37 = wrapAround === true;
  var t38 = t37 ? '#define WRAP_AROUND' : '';
  var t39 = doubleSided === true;
  var t40 = t39 ? '#define DOUBLE_SIDED' : '';
  var t41 = shadowMapEnabled === true;
  var t42 = t41 ? '#define USE_SHADOWMAP' : '';
  var t43 = shadowMapSoft === true;
  var t44 = t43 ? '#define SHADOWMAP_SOFT' : '';
  var t45 = shadowMapDebug === true;
  var t46 = t45 ? '#define SHADOWMAP_DEBUG' : '';
  var t47 = shadowMapCascade === true;
  var t48 = t47 ? '#define SHADOWMAP_CASCADE' : '';
  var prefix_vertex = $.Strings_join([t4, t5, t7, t9, t11, t12, t13, t14, t15, t16, t18, t20, t22, t24, t26, t27, t28, t30, t31, t32, t33, t34, t36, t38, t40, t42, t44, t46, t48, sizeAttenuation === true ? '#define USE_SIZEATTENUATION' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', 'attribute vec2 uv2;', '#ifdef USE_COLOR', 'attribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', 'attribute vec3 morphTarget0;', 'attribute vec3 morphTarget1;', 'attribute vec3 morphTarget2;', 'attribute vec3 morphTarget3;', '#ifdef USE_MORPHNORMALS', 'attribute vec3 morphNormal0;', 'attribute vec3 morphNormal1;', 'attribute vec3 morphNormal2;', 'attribute vec3 morphNormal3;', '#else', 'attribute vec3 morphTarget4;', 'attribute vec3 morphTarget5;', 'attribute vec3 morphTarget6;', 'attribute vec3 morphTarget7;', '#endif', '#endif', '#ifdef USE_SKINNING', 'attribute vec4 skinVertexA;', 'attribute vec4 skinVertexB;', 'attribute vec4 skinIndex;', 'attribute vec4 skinWeight;', '#endif', ''], '\n');
  var t49 = 'precision ' + $.S(t3) + ' float;';
  t3 = t23 ? '#extension GL_OES_standard_derivatives : enable' : '';
  t4 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  t5 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  t7 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  t9 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  t11 = !$.eqB(alphaTest, 0) ? '#define ALPHATEST ' + $.S(alphaTest) : '';
  t6 = t6 ? '#define GAMMA_INPUT' : '';
  t8 = t8 ? '#define GAMMA_OUTPUT' : '';
  t10 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  t12 = useFog === true;
  t13 = t12 && !(fog == null) ? '#define USE_FOG' : '';
  t12 = t12 && typeof fog === 'object' && fog !== null && !!fog.is$FogExp2 ? '#define FOG_EXP2' : '';
  t14 = t17 ? '#define USE_MAP' : '';
  t15 = t19 ? '#define USE_ENVMAP' : '';
  t16 = t21 ? '#define USE_LIGHTMAP' : '';
  t17 = t23 ? '#define USE_BUMPMAP' : '';
  t18 = t25 ? '#define USE_SPECULARMAP' : '';
  t19 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  t20 = metal === true ? '#define METAL' : '';
  t21 = t35 ? '#define PHONG_PER_PIXEL' : '';
  t22 = t37 ? '#define WRAP_AROUND' : '';
  t23 = t39 ? '#define DOUBLE_SIDED' : '';
  t24 = t41 ? '#define USE_SHADOWMAP' : '';
  t25 = t43 ? '#define SHADOWMAP_SOFT' : '';
  t26 = t45 ? '#define SHADOWMAP_DEBUG' : '';
  var glFragmentShader = this.getShader$2('fragment', $.S($.Strings_join([t49, t3, t4, t5, t7, t9, t11, t6, t8, t10, t13, t12, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t47 ? '#define SHADOWMAP_CASCADE' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', ''], '\n')) + $.S(fragmentShader));
  var glVertexShader = this.getShader$2('vertex', $.S(prefix_vertex) + $.S(vertexShader));
  this._gl.attachShader$2(glprogram, glVertexShader);
  this._gl.attachShader$2(glprogram, glFragmentShader);
  this._gl.linkProgram$1(glprogram);
  if (this._gl.getProgramParameter$2(glprogram, 35714) !== true) {
    var status$ = this._gl.getProgramParameter$2(glprogram, 35715);
    var error = this._gl.getError$0();
    $.print('Could not initialise shader\nVALIDATE_STATUS: ' + $.S(status$) + ', gl error [' + $.S(error) + ']');
  }
  this._gl.deleteShader$1(glFragmentShader);
  this._gl.deleteShader$1(glVertexShader);
  t3 = this._programs_counter;
  this._programs_counter = t3 + 1;
  program = $.Program$(t3, glprogram, code, 1);
  t1.identifiers_1 = null;
  t1.identifiers_1 = ['viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition', 'morphTargetInfluences'];
  t3 = t1.identifiers_1;
  if (t29)
    $.add$1(t3, 'boneTexture');
  else
    $.add$1(t3, 'boneGlobalMatrices');
  $.forEach(uniforms, new $.WebGLRenderer_buildProgram_anon(t1));
  this.cacheUniformLocations$2(program, t1.identifiers_1);
  t1.identifiers_1 = ['position', 'normal', 'uv', 'uv2', 'tangent', 'color', 'skinVertexA', 'skinVertexB', 'skinIndex', 'skinWeight'];
  for (var i = 0; $.ltB(i, maxMorphTargets); ++i)
    $.add$1(t1.identifiers_1, 'morphTarget' + $.S(i));
  for (i = 0; $.ltB(i, maxMorphNormals); ++i)
    $.add$1(t1.identifiers_1, 'morphNormal' + $.S(i));
  if (!(attributes == null))
    $.forEach(attributes, new $.WebGLRenderer_buildProgram_anon0(t1));
  this.cacheAttributeLocations$2(program, t1.identifiers_1);
  t2.push(program);
  t2 = t2.length;
  this.info.memory.programs = t2;
  return program;
},
 cacheUniformLocations$2: function(program, identifiers) {
  if (typeof identifiers !== 'string' && (typeof identifiers !== 'object' || identifiers === null || identifiers.constructor !== Array && !identifiers.is$JavaScriptIndexingBehavior()))
    return this.cacheUniformLocations$2$bailout(1, program, identifiers);
  var l = identifiers.length;
  for (var t1 = program.glProgram, i = 0, id = null; i < l; ++i) {
    if (i >= identifiers.length)
      throw $.ioore(i);
    id = identifiers[i];
    $.indexSet(program.uniforms, id, this._gl.getUniformLocation$2(t1, id));
  }
},
 cacheUniformLocations$2$bailout: function(state0, program, identifiers) {
  var l = $.get$length(identifiers);
  for (var t1 = program.glProgram, i = 0, id = null; $.ltB(i, l); ++i) {
    id = $.index(identifiers, i);
    $.indexSet(program.uniforms, id, this._gl.getUniformLocation$2(t1, id));
  }
},
 cacheAttributeLocations$2: function(program, identifiers) {
  if (typeof identifiers !== 'string' && (typeof identifiers !== 'object' || identifiers === null || identifiers.constructor !== Array && !identifiers.is$JavaScriptIndexingBehavior()))
    return this.cacheAttributeLocations$2$bailout(1, program, identifiers, 0, 0);
  var l = identifiers.length;
  var t1 = program.attributes;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.cacheAttributeLocations$2$bailout(2, program, identifiers, t1, l);
  var t3 = program.glProgram;
  var i = 0;
  var id = null;
  for (; i < l; ++i) {
    if (i >= identifiers.length)
      throw $.ioore(i);
    id = identifiers[i];
    var t2 = this._gl.getAttribLocation$2(t3, id);
    if (id !== (id | 0))
      throw $.iae(id);
    if (id < 0 || id >= t1.length)
      throw $.ioore(id);
    t1[id] = t2;
  }
},
 cacheAttributeLocations$2$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      var program = env0;
      var identifiers = env1;
      break;
    case 2:
      program = env0;
      identifiers = env1;
      t1 = env2;
      l = env3;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var l = $.get$length(identifiers);
      var t1 = program.attributes;
    case 2:
      state0 = 0;
      var t3 = program.glProgram;
      var i = 0;
      var id = null;
      for (; $.ltB(i, l); ++i) {
        id = $.index(identifiers, i);
        $.indexSet(t1, id, this._gl.getAttribLocation$2(t3, id));
      }
  }
},
 addLineNumbers$1: function(string) {
  var chunks = string.split('\n');
  if (typeof chunks !== 'object' || chunks === null || (chunks.constructor !== Array || !!chunks.immutable$list) && !chunks.is$JavaScriptIndexingBehavior())
    return this.addLineNumbers$1$bailout(1, chunks);
  var il = chunks.length;
  for (var i = 0; i < il; ++i) {
    var t1 = $.S(i + 1) + ':';
    if (i >= chunks.length)
      throw $.ioore(i);
    var t2 = t1 + $.S(chunks[i]);
    if (i >= chunks.length)
      throw $.ioore(i);
    chunks[i] = t2;
  }
  return chunks.join$1('\n');
},
 addLineNumbers$1$bailout: function(state0, chunks) {
  var il = $.get$length(chunks);
  for (var i = 0; $.ltB(i, il); ++i)
    $.indexSet(chunks, i, $.S(i + 1) + ':' + $.S($.index(chunks, i)));
  return chunks.join$1('\n');
},
 getShader$2: function(type, string) {
  if (type === 'fragment')
    var shader = this._gl.createShader$1(35632);
  else
    shader = type === 'vertex' ? this._gl.createShader$1(35633) : null;
  this._gl.shaderSource$2(shader, string);
  this._gl.compileShader$1(shader);
  if (this._gl.getShaderParameter$2(shader, 35713) !== true) {
    $.print(this._gl.getShaderInfoLog$1(shader));
    $.print(this.addLineNumbers$1(string));
    return;
  }
  return shader;
},
 isPowerOfTwo$1: function(value) {
  return $.eq($.and(value, $.sub(value, 1)), 0);
},
 setTextureParameters$3: function(textureType, texture, isImagePowerOfTwo) {
  var t1 = this._gl;
  if (isImagePowerOfTwo) {
    t1.texParameteri$3(textureType, 10242, this.paramThreeToGL$1(texture.get$wrapS()));
    this._gl.texParameteri$3(textureType, 10243, this.paramThreeToGL$1(texture.get$wrapT()));
    this._gl.texParameteri$3(textureType, 10240, this.paramThreeToGL$1(texture.get$magFilter()));
    this._gl.texParameteri$3(textureType, 10241, this.paramThreeToGL$1(texture.get$minFilter()));
  } else {
    t1.texParameteri$3(textureType, 10242, 33071);
    this._gl.texParameteri$3(textureType, 10243, 33071);
    this._gl.texParameteri$3(textureType, 10240, this.filterFallback$1(texture.get$magFilter()));
    this._gl.texParameteri$3(textureType, 10241, this.filterFallback$1(texture.get$minFilter()));
  }
  if (!(this._glExtensionTextureFilterAnisotropic == null) && !$.eqB(texture.get$type(), 15))
    if ($.gtB(texture.get$anisotropy(), 1) || !($.index(texture, '__oldAnisotropy') == null)) {
      this._gl.texParameterf$3(textureType, 34046, $.min(texture.get$anisotropy(), this.maxAnisotropy));
      $.indexSet(texture, '__oldAnisotropy', texture.get$anisotropy());
    }
},
 setTexture$2: function(texture, slot) {
  if (texture.get$needsUpdate() === true) {
    if ($.index(texture, '__webglInit') == null) {
      $.indexSet(texture, '__webglInit', true);
      $.indexSet(texture, '__webglTexture', this._gl.createTexture$0());
      var t1 = this.info.memory;
      t1.textures = t1.textures + 1;
    }
    t1 = this._gl;
    if (typeof slot !== 'number')
      throw $.iae(slot);
    t1.activeTexture$1(33984 + slot);
    this._gl.bindTexture$2(3553, $.index(texture, '__webglTexture'));
    t1 = this._gl;
    t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
    t1 = this._gl;
    t1.pixelStorei$2(37441, texture.get$premultiplyAlpha() === true ? 1 : 0);
    var image = texture.get$image();
    var isImagePowerOfTwo = this.isPowerOfTwo$1(image.get$width()) === true && this.isPowerOfTwo$1(image.get$height()) === true;
    var glFormat = this.paramThreeToGL$1(texture.get$format());
    var glType = this.paramThreeToGL$1(texture.get$type());
    this.setTextureParameters$3(3553, texture, isImagePowerOfTwo);
    t1 = typeof texture === 'object' && texture !== null && !!texture.is$DataTexture;
    var t2 = this._gl;
    if (t1)
      t2.texImage2D$9(3553, 0, glFormat, image.get$width(), image.get$height(), 0, glFormat, glType, image.get$data());
    else
      t2.texImage2D$6(3553, 0, glFormat, glFormat, glType, texture.get$image());
    if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
      this._gl.generateMipmap$1(3553);
    texture.set$needsUpdate(false);
    if (!(texture.get$onUpdate() == null))
      texture.onUpdate$0();
  } else {
    t1 = this._gl;
    if (typeof slot !== 'number')
      throw $.iae(slot);
    t1.activeTexture$1(33984 + slot);
    this._gl.bindTexture$2(3553, $.index(texture, '__webglTexture'));
  }
},
 clampToMaxSize$2: function(image, maxSize) {
  if (typeof maxSize !== 'number')
    return this.clampToMaxSize$2$bailout(1, image, maxSize, 0, 0, 0);
  var t1 = image.get$width();
  if (typeof t1 !== 'number')
    return this.clampToMaxSize$2$bailout(2, image, maxSize, t1, 0, 0);
  if (t1 <= maxSize) {
    t1 = image.get$height();
    if (typeof t1 !== 'number')
      return this.clampToMaxSize$2$bailout(3, image, maxSize, t1, 0, 0);
    t1 = t1 <= maxSize;
  } else
    t1 = false;
  if (t1)
    return image;
  var maxDimension = $.max(image.get$width(), image.get$height());
  t1 = image.get$width();
  if (typeof t1 !== 'number')
    return this.clampToMaxSize$2$bailout(4, image, maxSize, maxDimension, t1, 0);
  var newWidth = $.floor(t1 * maxSize / maxDimension);
  var t3 = image.get$height();
  if (typeof t3 !== 'number')
    return this.clampToMaxSize$2$bailout(5, image, maxSize, newWidth, maxDimension, t3);
  var newHeight = $.floor(t3 * maxSize / maxDimension);
  var canvas = $.CanvasElement_CanvasElement($, $);
  canvas.set$width(newWidth);
  canvas.set$height(newHeight);
  canvas.get$context2d().drawImage$9(image, 0, 0, image.get$width(), image.get$height(), 0, 0, newWidth, newHeight);
  return canvas;
},
 clampToMaxSize$2$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      var image = env0;
      var maxSize = env1;
      break;
    case 2:
      image = env0;
      maxSize = env1;
      t1 = env2;
      break;
    case 3:
      image = env0;
      maxSize = env1;
      t1 = env2;
      break;
    case 4:
      image = env0;
      maxSize = env1;
      maxDimension = env2;
      t1 = env3;
      break;
    case 5:
      image = env0;
      maxSize = env1;
      newWidth = env2;
      maxDimension = env3;
      t3 = env4;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var t1 = image.get$width();
    case 2:
      state0 = 0;
    case 3:
      if (state0 === 3 || state0 === 0 && $.leB(t1, maxSize))
        switch (state0) {
          case 0:
            t1 = image.get$height();
          case 3:
            state0 = 0;
            t1 = $.leB(t1, maxSize);
        }
      else
        t1 = false;
      if (t1)
        return image;
      var maxDimension = $.max(image.get$width(), image.get$height());
      t1 = image.get$width();
    case 4:
      state0 = 0;
      var newWidth = $.floor($.div($.mul(t1, maxSize), maxDimension));
      var t3 = image.get$height();
    case 5:
      state0 = 0;
      var newHeight = $.floor($.div($.mul(t3, maxSize), maxDimension));
      var canvas = $.CanvasElement_CanvasElement($, $);
      canvas.set$width(newWidth);
      canvas.set$height(newHeight);
      canvas.get$context2d().drawImage$9(image, 0, 0, image.get$width(), image.get$height(), 0, 0, newWidth, newHeight);
      return canvas;
  }
},
 setCubeTexture$2: function(texture, slot) {
  var t1 = $.get$length(texture.get$image());
  if (typeof t1 !== 'number')
    return this.setCubeTexture$2$bailout(1, texture, slot, t1, 0, 0);
  if (t1 === 6)
    if (texture.get$needsUpdate() === true) {
      if ($.index(texture.get$image(), '__webglTextureCube') !== true)
        $.indexSet(texture.get$image(), '__webglTextureCube', this._gl.createTexture$0());
      t1 = this._gl;
      if (typeof slot !== 'number')
        throw $.iae(slot);
      t1.activeTexture$1(33984 + slot);
      this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
      t1 = this._gl;
      t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
      var cubeImage = [];
      for (var t1 = this.autoScaleCubemaps, i = 0; i < 6; ++i) {
        var t2 = texture.get$image();
        if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
          return this.setCubeTexture$2$bailout(2, texture, t1, cubeImage, i, t2);
        var t4 = t2.length;
        if (t1) {
          if (i >= t4)
            throw $.ioore(i);
          var t3 = this.clampToMaxSize$2(t2[i], this.maxCubemapSize);
          if (i >= cubeImage.length)
            throw $.ioore(i);
          cubeImage[i] = t3;
        } else {
          if (i >= t4)
            throw $.ioore(i);
          t2 = t2[i];
          if (i >= cubeImage.length)
            throw $.ioore(i);
          cubeImage[i] = t2;
        }
      }
      if (0 >= cubeImage.length)
        throw $.ioore(0);
      var image = cubeImage[0];
      var isImagePowerOfTwo = this.isPowerOfTwo$1(image.get$width()) === true && this.isPowerOfTwo$1(image.get$height()) === true;
      var glFormat = this.paramThreeToGL$1(texture.get$format());
      var glType = this.paramThreeToGL$1(texture.get$type());
      this.setTextureParameters$3(34067, texture, isImagePowerOfTwo);
      for (i = 0; i < 6; ++i) {
        t1 = this._gl;
        t2 = 34069 + i;
        if (i >= cubeImage.length)
          throw $.ioore(i);
        t1.texImage2D$6(t2, 0, glFormat, glFormat, glType, cubeImage[i]);
      }
      if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
        this._gl.generateMipmap$1(34067);
      texture.set$needsUpdate(false);
      if (texture.get$onUpdate() === true)
        texture.onUpdate$0();
    } else {
      t1 = this._gl;
      if (typeof slot !== 'number')
        throw $.iae(slot);
      t1.activeTexture$1(33984 + slot);
      this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
    }
},
 setCubeTexture$2$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      var texture = env0;
      var slot = env1;
      t1 = env2;
      break;
    case 2:
      texture = env0;
      t1 = env1;
      cubeImage = env2;
      i = env3;
      t2 = env4;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = $.get$length(texture.get$image());
    case 1:
      state0 = 0;
    case 2:
      if (state0 === 2 || state0 === 0 && $.eqB(t1, 6))
        switch (state0) {
          case 0:
          case 2:
            if (state0 === 2 || state0 === 0 && texture.get$needsUpdate() === true)
              switch (state0) {
                case 0:
                  if ($.index(texture.get$image(), '__webglTextureCube') !== true)
                    $.indexSet(texture.get$image(), '__webglTextureCube', this._gl.createTexture$0());
                  t1 = this._gl;
                  if (typeof slot !== 'number')
                    throw $.iae(slot);
                  t1.activeTexture$1(33984 + slot);
                  this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
                  t1 = this._gl;
                  t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
                  var cubeImage = [];
                  t1 = this.autoScaleCubemaps;
                  var i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!(i < 6))
                            break L0;
                          var t2 = texture.get$image();
                        case 2:
                          state0 = 0;
                          if (t1) {
                            var t3 = this.clampToMaxSize$2($.index(t2, i), this.maxCubemapSize);
                            if (i >= cubeImage.length)
                              throw $.ioore(i);
                            cubeImage[i] = t3;
                          } else {
                            t2 = $.index(t2, i);
                            if (i >= cubeImage.length)
                              throw $.ioore(i);
                            cubeImage[i] = t2;
                          }
                          ++i;
                      }
                  if (0 >= cubeImage.length)
                    throw $.ioore(0);
                  var image = cubeImage[0];
                  var isImagePowerOfTwo = this.isPowerOfTwo$1(image.get$width()) === true && this.isPowerOfTwo$1(image.get$height()) === true;
                  var glFormat = this.paramThreeToGL$1(texture.get$format());
                  var glType = this.paramThreeToGL$1(texture.get$type());
                  this.setTextureParameters$3(34067, texture, isImagePowerOfTwo);
                  for (i = 0; i < 6; ++i) {
                    t1 = this._gl;
                    t2 = 34069 + i;
                    if (i >= cubeImage.length)
                      throw $.ioore(i);
                    t1.texImage2D$6(t2, 0, glFormat, glFormat, glType, cubeImage[i]);
                  }
                  if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
                    this._gl.generateMipmap$1(34067);
                  texture.set$needsUpdate(false);
                  if (texture.get$onUpdate() === true)
                    texture.onUpdate$0();
              }
            else {
              t1 = this._gl;
              if (typeof slot !== 'number')
                throw $.iae(slot);
              t1.activeTexture$1(33984 + slot);
              this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
            }
        }
  }
},
 setCubeTextureDynamic$2: function(texture, slot) {
  var t1 = this._gl;
  if (typeof slot !== 'number')
    throw $.iae(slot);
  t1.activeTexture$1(33984 + slot);
  this._gl.bindTexture$2(34067, texture.operator$index$1('__webglTexture'));
},
 setupFrameBuffer$3: function(framebuffer, renderTarget, textureTarget) {
  this._gl.bindFramebuffer$2(36160, framebuffer);
  this._gl.framebufferTexture2D$5(36160, 36064, textureTarget, $.index(renderTarget, '__webglTexture'), 0);
},
 setupRenderBuffer$2: function(renderbuffer, renderTarget) {
  this._gl.bindRenderbuffer$2(36161, renderbuffer);
  var t1 = renderTarget.get$depthBuffer() === true;
  if (t1 && renderTarget.get$stencilBuffer() !== true) {
    this._gl.renderbufferStorage$4(36161, 33189, renderTarget.get$width(), renderTarget.get$height());
    this._gl.framebufferRenderbuffer$4(36160, 36096, 36161, renderbuffer);
  } else {
    t1 = t1 && renderTarget.get$stencilBuffer() === true;
    var t2 = this._gl;
    if (t1) {
      t2.renderbufferStorage$4(36161, 34041, renderTarget.get$width(), renderTarget.get$height());
      this._gl.framebufferRenderbuffer$4(36160, 33306, 36161, renderbuffer);
    } else
      t2.renderbufferStorage$4(36161, 32854, renderTarget.get$width(), renderTarget.get$height());
  }
},
 setRenderTarget$1: function(renderTarget) {
  var isCube = typeof renderTarget === 'object' && renderTarget !== null && !!renderTarget.is$WebGLRenderTargetCube;
  if (!(renderTarget == null) && renderTarget.get$__webglFramebuffer() == null) {
    if (renderTarget.get$depthBuffer() == null)
      renderTarget.set$depthBuffer(true);
    if (renderTarget.get$stencilBuffer() == null)
      renderTarget.set$stencilBuffer(true);
    renderTarget.set$__webglTexture(this._gl.createTexture$0());
    var isTargetPowerOfTwo = this.isPowerOfTwo$1(renderTarget.get$width()) === true && this.isPowerOfTwo$1(renderTarget.get$height()) === true;
    var glFormat = this.paramThreeToGL$1(renderTarget.get$format());
    var glType = this.paramThreeToGL$1(renderTarget.get$type());
    if (isCube) {
      renderTarget.__webglFramebuffer = [];
      renderTarget.__webglRenderbuffer = [];
      this._gl.bindTexture$2(34067, renderTarget.__webglTexture);
      this.setTextureParameters$3(34067, renderTarget, isTargetPowerOfTwo);
      for (var i = 0; i < 6; ++i) {
        $.indexSet(renderTarget.__webglFramebuffer, i, this._gl.createFramebuffer$0());
        $.indexSet(renderTarget.__webglRenderbuffer, i, this._gl.createRenderbuffer$0());
        var t1 = this._gl;
        var t2 = 34069 + i;
        t1.texImage2D$9(t2, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        this.setupFrameBuffer$3($.index(renderTarget.__webglFramebuffer, i), renderTarget, t2);
        this.setupRenderBuffer$2($.index(renderTarget.__webglRenderbuffer, i), renderTarget);
      }
      if (isTargetPowerOfTwo)
        this._gl.generateMipmap$1(34067);
      renderTarget = renderTarget;
    } else {
      renderTarget.set$__webglFramebuffer(this._gl.createFramebuffer$0());
      renderTarget.set$__webglRenderbuffer(this._gl.createRenderbuffer$0());
      this._gl.bindTexture$2(3553, renderTarget.get$__webglTexture());
      this.setTextureParameters$3(3553, renderTarget, isTargetPowerOfTwo);
      this._gl.texImage2D$9(3553, 0, glFormat, renderTarget.get$width(), renderTarget.get$height(), 0, glFormat, glType, null);
      this.setupFrameBuffer$3(renderTarget.get$__webglFramebuffer(), renderTarget, 3553);
      this.setupRenderBuffer$2(renderTarget.get$__webglRenderbuffer(), renderTarget);
      if (isTargetPowerOfTwo)
        this._gl.generateMipmap$1(3553);
    }
    t1 = this._gl;
    if (isCube)
      t1.bindTexture$2(34067, null);
    else
      t1.bindTexture$2(3553, null);
    this._gl.bindRenderbuffer$2(36161, null);
    this._gl.bindFramebuffer$2(36160, null);
  }
  if (!(renderTarget == null)) {
    var framebuffer = renderTarget.get$__webglFramebuffer();
    if (isCube)
      framebuffer = $.index(framebuffer, $.propertyTypeCast(renderTarget, 'is$WebGLRenderTargetCube').get$activeCubeFace());
    var width = renderTarget.get$width();
    var height = renderTarget.get$height();
    var vx = 0;
    var vy = 0;
  } else {
    width = this._viewportWidth;
    height = this._viewportHeight;
    vx = this._viewportX;
    vy = this._viewportY;
    framebuffer = null;
  }
  t1 = this._currentFramebuffer;
  if (!(framebuffer == null ? t1 == null : framebuffer === t1)) {
    this._gl.bindFramebuffer$2(36160, framebuffer);
    this._gl.viewport$4(vx, vy, width, height);
    this._currentFramebuffer = framebuffer;
  }
  this._currentWidth = width;
  this._currentHeight = height;
},
 updateRenderTargetMipmap$1: function(renderTarget) {
  var t1 = typeof renderTarget === 'object' && renderTarget !== null && !!renderTarget.is$WebGLRenderTargetCube;
  var t2 = this._gl;
  if (t1) {
    t2.bindTexture$2(34067, renderTarget.__webglTexture);
    this._gl.generateMipmap$1(34067);
    this._gl.bindTexture$2(34067, null);
  } else {
    t2.bindTexture$2(3553, renderTarget.get$__webglTexture());
    this._gl.generateMipmap$1(3553);
    this._gl.bindTexture$2(3553, null);
  }
},
 filterFallback$1: function(f) {
  if ($.eqB(f, 3) || $.eqB(f, 4) || $.eqB(f, 5))
    return 9728;
  return 9729;
},
 paramThreeToGL$1: function(p) {
  if ($.eqB(p, 0))
    return 10497;
  if ($.eqB(p, 1))
    return 33071;
  if ($.eqB(p, 2))
    return 33648;
  if ($.eqB(p, 3))
    return 9728;
  if ($.eqB(p, 4))
    return 9984;
  if ($.eqB(p, 5))
    return 9986;
  if ($.eqB(p, 6))
    return 9729;
  if ($.eqB(p, 7))
    return 9985;
  if ($.eqB(p, 8))
    return 9987;
  if ($.eqB(p, 10))
    return 5121;
  if ($.eqB(p, 1016))
    return 32819;
  if ($.eqB(p, 1017))
    return 32820;
  if ($.eqB(p, 1018))
    return 33635;
  if ($.eqB(p, 9))
    return 5120;
  if ($.eqB(p, 11))
    return 5122;
  if ($.eqB(p, 12))
    return 5123;
  if ($.eqB(p, 13))
    return 5124;
  if ($.eqB(p, 14))
    return 5125;
  if ($.eqB(p, 15))
    return 5126;
  if ($.eqB(p, 16))
    return 6406;
  if ($.eqB(p, 17))
    return 6407;
  if ($.eqB(p, 18))
    return 6408;
  if ($.eqB(p, 19))
    return 6409;
  if ($.eqB(p, 20))
    return 6410;
  if ($.eqB(p, 100))
    return 32774;
  if ($.eqB(p, 101))
    return 32778;
  if ($.eqB(p, 102))
    return 32779;
  if ($.eqB(p, 200))
    return 0;
  if ($.eqB(p, 201))
    return 1;
  if ($.eqB(p, 202))
    return 768;
  if ($.eqB(p, 203))
    return 769;
  if ($.eqB(p, 204))
    return 770;
  if ($.eqB(p, 205))
    return 771;
  if ($.eqB(p, 206))
    return 772;
  if ($.eqB(p, 207))
    return 773;
  if ($.eqB(p, 208))
    return 774;
  if ($.eqB(p, 209))
    return 775;
  if ($.eqB(p, 210))
    return 776;
  $.print('[paramThreeToGL] Unknown param ' + $.S(p));
  return 0;
},
 allocateBones$1: function(object) {
  if (this.supportsBoneTextures === true && !(object == null) && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh && object.useVertexTexture === true)
    return 1024;
  else {
    var nVertexMatrices = $.toInt($.floor($.div($.sub(this._gl.getParameter$1(36347), 20), 4)));
    if (!(object == null) && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh) {
      var maxBones = $.min($.get$length(object.get$bones()), nVertexMatrices);
      if ($.ltB(maxBones, $.get$length(object.get$bones())))
        $.print('WebGLRenderer: too many bones - ' + $.S($.get$length(object.get$bones())) + ' , this GPU supports just ' + $.S(maxBones) + '  (try OpenGL instead of ANGLE)');
    } else
      maxBones = nVertexMatrices;
    return maxBones;
  }
},
 allocateLights$1: function(lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.allocateLights$1$bailout(1, lights);
  var ll = lights.length;
  for (var l = 0, light = null, dirLights = 0, pointLights = 0, spotLights = 0; l < ll; ++l) {
    if (l >= lights.length)
      throw $.ioore(l);
    light = lights[l];
    if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && light.get$onlyShadow() === true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight)
      ++dirLights;
    if (typeof light === 'object' && light !== null && !!light.is$PointLight)
      ++pointLights;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++spotLights;
  }
  var t1 = pointLights + spotLights + dirLights;
  var t2 = this.maxLights;
  if ($.leB(t1, t2)) {
    var maxSpotLights = spotLights;
    var maxPointLights = pointLights;
    var maxDirLights = dirLights;
  } else {
    maxDirLights = $.ceil($.div($.mul(t2, dirLights), pointLights + dirLights));
    maxPointLights = $.sub(t2, maxDirLights);
    maxSpotLights = maxPointLights;
  }
  return $.makeLiteralMap(['directional', maxDirLights, 'point', maxPointLights, 'spot', maxSpotLights]);
},
 allocateLights$1$bailout: function(state0, lights) {
  var ll = $.get$length(lights);
  for (var l = 0, light = null, dirLights = 0, pointLights = 0, spotLights = 0; $.ltB(l, ll); ++l) {
    light = $.index(lights, l);
    if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && light.get$onlyShadow() === true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight)
      ++dirLights;
    if (typeof light === 'object' && light !== null && !!light.is$PointLight)
      ++pointLights;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++spotLights;
  }
  var t1 = pointLights + spotLights + dirLights;
  var t2 = this.maxLights;
  if ($.leB(t1, t2)) {
    var maxSpotLights = spotLights;
    var maxPointLights = pointLights;
    var maxDirLights = dirLights;
  } else {
    maxDirLights = $.ceil($.div($.mul(t2, dirLights), pointLights + dirLights));
    maxPointLights = $.sub(t2, maxDirLights);
    maxSpotLights = maxPointLights;
  }
  return $.makeLiteralMap(['directional', maxDirLights, 'point', maxPointLights, 'spot', maxSpotLights]);
},
 allocateShadows$1: function(lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.allocateShadows$1$bailout(1, lights);
  var ll = lights.length;
  for (var light = null, maxShadows = 0, l = 0; l < ll; ++l) {
    if (l >= lights.length)
      throw $.ioore(l);
    light = lights[l];
    if (light.get$castShadow() !== true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++maxShadows;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true)
      ++maxShadows;
  }
  return maxShadows;
},
 allocateShadows$1$bailout: function(state0, lights) {
  var ll = $.get$length(lights);
  for (var light = null, maxShadows = 0, l = 0; $.ltB(l, ll); ++l) {
    light = $.index(lights, l);
    if (light.get$castShadow() !== true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++maxShadows;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true)
      ++maxShadows;
  }
  return maxShadows;
},
 initGL$0: function() {
  try {
    this._gl = this.canvas.getContext$1('experimental-webgl');
    if (this._gl == null)
      throw $.$$throw('Error creating WebGL context.');
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var error = t1;
    $.print(error);
  }

},
 setDefaultGLState$0: function() {
  this._gl.clearColor$4(0, 0, 0, 1);
  this._gl.clearDepth$1(1);
  this._gl.clearStencil$1(0);
  this._gl.enable$1(2929);
  this._gl.depthFunc$1(515);
  this._gl.frontFace$1(2305);
  this._gl.cullFace$1(1029);
  this._gl.enable$1(2884);
  this._gl.enable$1(3042);
  this._gl.blendEquation$1(32774);
  this._gl.blendFunc$2(770, 771);
  var t1 = this._gl;
  var t2 = this.clearColor;
  t1.clearColor$4(t2.r, t2.g, t2.b, this.clearAlpha);
},
 WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$maxLights$precision$premultipliedAlpha$preserveDrawingBuffer$stencil: function(alpha, antialias, canvas, clearAlpha, clearColorHex, maxLights, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
  this._lights = $.makeLiteralMap(['ambient', [0, 0, 0], 'directional', $.makeLiteralMap(['length', 0, 'colors', [], 'positions', []]), 'point', $.makeLiteralMap(['length', 0, 'colors', [], 'positions', [], 'distances', []]), 'spot', $.makeLiteralMap(['length', 0, 'colors', [], 'positions', [], 'distances', [], 'directions', [], 'angles', [], 'exponents', []])]);
  if (this.canvas == null)
    this.canvas = $.CanvasElement_CanvasElement($, $);
  this.initGL$0();
  this.setDefaultGLState$0();
  this.maxVertexTextures = this._gl.getParameter$1(35660);
  this.maxTextureSize = this._gl.getParameter$1(3379);
  this.maxCubemapSize = this._gl.getParameter$1(34076);
  this.maxAnisotropy = !(this._glExtensionTextureFilterAnisotropic == null) ? this._gl.getParameter$1(34047) : 0;
  this.supportsVertexTextures = $.gt(this.maxVertexTextures, 0);
  this.supportsBoneTextures = this.supportsVertexTextures === true && !(this._glExtensionTextureFloat == null);
}
};

$$.WebGLRendererInfo = {"": ["memory", "render="],
 "super": "Object",
 render$1: function(arg0) { return this.render.call$1(arg0); },
 render$2: function(arg0, arg1) { return this.render.call$2(arg0, arg1); },
 render$4: function(arg0, arg1, arg2, arg3) { return this.render.call$4(arg0, arg1, arg2, arg3); },
 WebGLRendererInfo$0: function() {
  this.memory = $.WebGLRendererMemoryInfo$();
  this.render = $.WebGLRendererRenderInfo$();
}
};

$$.WebGLRendererMemoryInfo = {"": ["programs", "geometries", "textures"],
 "super": "Object"
};

$$.WebGLRendererRenderInfo = {"": ["calls=", "vertices=", "faces=", "points="],
 "super": "Object"
};

$$.Program = {"": ["id=", "glProgram?", "code?", "usedTimes=", "attributes?", "uniforms="],
 "super": "Object"
};

$$.Buffer = {"": ["glbuffer", "belongsToAttribute="],
 "super": "Object"
};

$$.WebGLObject = {"": ["__webglInit=", "__webglActive=", "_modelViewMatrix=", "_normalMatrix=", "_normalMatrixArray", "_modelViewMatrixArray", "modelMatrixArray", "buffer=", "object?", "opaque=", "transparent=", "render=", "z=", "__webglMorphTargetInfluences="],
 "super": "Object",
 render$1: function(arg0) { return this.render.call$1(arg0); },
 render$2: function(arg0, arg1) { return this.render.call$2(arg0, arg1); },
 render$4: function(arg0, arg1, arg2, arg3) { return this.render.call$4(arg0, arg1, arg2, arg3); },
 get$geometry: function() {
  return this.get$_hasGeometry() === true ? this.object.get$geometry() : null;
},
 get$webglgeometry: function() {
  return !(this.get$geometry() == null) ? $.WebGLGeometry_WebGLGeometry$from(this.get$geometry()) : null;
},
 get$material: function() {
  return this.object.get$material();
},
 get$webglmaterial: function() {
  return $.WebGLMaterial_WebGLMaterial$from(this.get$material());
},
 get$matrixWorld: function() {
  return this.object.get$matrixWorld();
},
 get$_hasGeometry: function() {
  var t1 = this.object;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$Mesh || typeof t1 === 'object' && t1 !== null && !!t1.is$ParticleSystem || typeof t1 === 'object' && t1 !== null && !!t1.is$Line;
},
 get$morphTargetBase: function() {
  return this.object.get$morphTargetBase();
},
 get$receiveShadow: function() {
  return this.object.get$receiveShadow();
},
 get$morphTargetForcedOrder: function() {
  return $.propertyTypeCast(this.object, 'is$Mesh').get$morphTargetForcedOrder();
},
 get$morphTargetInfluences: function() {
  return $.propertyTypeCast(this.object, 'is$Mesh').get$morphTargetInfluences();
},
 get$useVertexTexture: function() {
  return this.object.get$useVertexTexture();
},
 get$boneMatrices: function() {
  return this.object.get$boneMatrices();
},
 get$boneTexture: function() {
  return this.object.get$boneTexture();
}
};

$$.WebGLGeometry = {"": ["id=", "_vertices", "faces3?", "faces4?", "materialIndex?", "numMorphTargets?", "numMorphNormals?", "geometryGroups=", "geometryGroupsList=", "verticesNeedUpdate=", "morphTargetsNeedUpdate=", "elementsNeedUpdate=", "uvsNeedUpdate=", "normalsNeedUpdate=", "tangentsNeedUpdate=", "colorsNeedUpdate=", "__inittedArrays=", "__vertexArray=", "__normalArray=", "__tangentArray=", "__colorArray=", "__uvArray=", "__uv2Array=", "__skinVertexAArray=", "__skinVertexBArray=", "__skinIndexArray=", "__skinWeightArray=", "__faceArray=", "__lineArray=", "__morphTargetsArrays=", "__morphNormalsArrays=", "__webglFaceCount=", "__webglLineCount=", "__webglParticleCount=", "__webglVertexCount=", "__sortArray=", "__webglCustomAttributesList=", "__webglVertexBuffer=", "__webglNormalBuffer=", "__webglTangentBuffer=", "__webglColorBuffer=", "__webglUVBuffer=", "__webglUV2Buffer=", "__webglSkinVertexABuffer=", "__webglSkinVertexBBuffer=", "__webglSkinIndicesBuffer=", "__webglSkinWeightsBuffer=", "__webglFaceBuffer=", "__webglLineBuffer=", "__webglMorphTargetsBuffers=", "__webglMorphNormalsBuffers=", "_geometry"],
 "super": "Object",
 set$vertices: function(n) {
  this._vertices = n;
  return n;
},
 get$vertices: function() {
  var t1 = this._vertices;
  if (t1 == null && !(this._geometry == null))
    return this._geometry.get$vertices();
  return t1;
},
 get$morphTargets: function() {
  return this._geometry.get$morphTargets();
},
 get$morphNormals: function() {
  return this._geometry.get$morphNormals();
},
 get$faces: function() {
  return this._geometry.get$faces();
},
 get$Dynamic: function() {
  return this._geometry.get$Dynamic();
},
 get$faceVertexUvs: function() {
  return this._geometry.get$faceVertexUvs();
},
 get$colors: function() {
  return this._geometry.get$colors();
},
 get$skinIndices: function() {
  return this._geometry.get$skinIndices();
},
 get$skinWeights: function() {
  return this._geometry.get$skinWeights();
},
 get$skinVerticesA: function() {
  return $.index(this._geometry, 'skinVerticesA');
},
 get$skinVerticesB: function() {
  return $.index(this._geometry, 'skinVerticesB');
},
 get$hasTangents: function() {
  return this._geometry.get$hasTangents();
}
};

$$.WebGLMaterial = {"": ["_material", "program=", "_fragmentShader", "_vertexShader", "_uniforms", "uniformsList=", "numSupportedMorphTargets=", "numSupportedMorphNormals=", "_shadowPass?"],
 "super": "Object",
 get$attributes: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$attributes() : null;
},
 get$fragmentShader: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$fragmentShader() : this._fragmentShader;
},
 get$vertexShader: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$vertexShader() : this._vertexShader;
},
 get$uniforms: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$uniforms() : this._uniforms;
},
 set$fragmentShader: function(v) {
  if (this.get$isShaderMaterial() === true)
    $.propertyTypeCast(this._material, 'is$ShaderMaterial').set$fragmentShader(v);
  else
    this._fragmentShader = v;
  return v;
},
 set$vertexShader: function(v) {
  if (this.get$isShaderMaterial() === true)
    $.propertyTypeCast(this._material, 'is$ShaderMaterial').set$vertexShader(v);
  else
    this._vertexShader = v;
  return v;
},
 set$uniforms: function(v) {
  if (this.get$isShaderMaterial() === true)
    $.propertyTypeCast(this._material, 'is$ShaderMaterial').set$uniforms(v);
  else
    this._uniforms = v;
  return v;
},
 get$needsSmoothNormals: function() {
  return !(this._material == null) && !(this.get$shading() == null) && $.eqB(this.get$shading(), 2);
},
 get$needsNormals: function() {
  var t1 = this._material;
  return !(typeof t1 === 'object' && t1 !== null && !!t1.is$MeshBasicMaterial && this.get$envMap() == null || typeof t1 === 'object' && t1 !== null && !!t1.is$MeshDepthMaterial);
},
 get$name: function() {
  return this._material.get$name();
},
 get$id: function() {
  return this._material.get$id();
},
 get$side: function() {
  return this._material.get$side();
},
 get$opacity: function() {
  return this._material.get$opacity();
},
 get$blending: function() {
  return this._material.get$blending();
},
 get$blendSrc: function() {
  return this._material.get$blendSrc();
},
 get$blendDst: function() {
  return this._material.get$blendDst();
},
 get$blendEquation: function() {
  return this._material.get$blendEquation();
},
 blendEquation$1: function(arg0) { return this.get$blendEquation().call$1(arg0); },
 get$alphaTest: function() {
  return this._material.get$alphaTest();
},
 get$polygonOffsetFactor: function() {
  return this._material.get$polygonOffsetFactor();
},
 get$polygonOffsetUnits: function() {
  return this._material.get$polygonOffsetUnits();
},
 get$transparent: function() {
  return this._material.get$transparent();
},
 get$depthTest: function() {
  return this._material.get$depthTest();
},
 get$depthWrite: function() {
  return this._material.get$depthWrite();
},
 get$polygonOffset: function() {
  return this._material.get$polygonOffset();
},
 polygonOffset$2: function(arg0, arg1) { return this.get$polygonOffset().call$2(arg0, arg1); },
 get$visible: function() {
  return this._material.get$visible();
},
 get$needsUpdate: function() {
  return this._material.get$needsUpdate();
},
 set$needsUpdate: function(flag) {
  this._material.set$needsUpdate(flag);
  return flag;
},
 get$vertexColors: function() {
  return this.get$_hasVertexColors() === true ? this._material.get$vertexColors() : 0;
},
 get$color: function() {
  return this._material.get$color();
},
 get$ambient: function() {
  return this._material.get$ambient();
},
 get$emissive: function() {
  return this._material.get$emissive();
},
 get$lights: function() {
  return this.get$isShaderMaterial() === true && $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$lights();
},
 get$morphTargets: function() {
  return this.get$_hasMorhTargets() === true && this._material.get$morphTargets();
},
 get$morphNormals: function() {
  return this.get$_hasMorphNormals() === true && this._material.get$morphNormals();
},
 get$metal: function() {
  return this.get$isMeshPhongMaterial() === true && $.propertyTypeCast(this._material, 'is$MeshPhongMaterial').get$metal();
},
 get$perPixel: function() {
  return this.get$isMeshPhongMaterial() === true && $.propertyTypeCast(this._material, 'is$MeshPhongMaterial').get$perPixel();
},
 get$wrapAround: function() {
  return this.get$_hasWrapAround() === true && this._material.get$wrapAround();
},
 get$fog: function() {
  return this.get$_hasFog() === true && this._material.get$fog();
},
 get$shading: function() {
  return this._material.get$shading();
},
 get$map: function() {
  return this.get$_hasTextureMap() === true ? this._material.get$map() : null;
},
 map$1: function(arg0) { return this.get$map().call$1(arg0); },
 get$envMap: function() {
  return this.get$_hasEnvMap() === true ? this._material.get$envMap() : null;
},
 get$lightMap: function() {
  return this.get$_hasLightMap() === true ? this._material.get$lightMap() : null;
},
 get$bumpMap: function() {
  return this.get$isMeshPhongMaterial() === true ? $.propertyTypeCast(this._material, 'is$MeshPhongMaterial').get$bumpMap() : null;
},
 get$specularMap: function() {
  return this.get$_hasSpecularMap() === true ? this._material.get$specularMap() : null;
},
 get$wireframe: function() {
  return this.get$isLineBasicMaterial() !== true && this.get$isParticleBasicMaterial() !== true && this._material.get$wireframe() === true;
},
 get$wireframeLinewidth: function() {
  return this.get$isLineBasicMaterial() === true ? this._material.get$wireframeLinewidth() : null;
},
 get$linewidth: function() {
  return this.get$isLineBasicMaterial() === true ? this._material.get$linewidth() : null;
},
 get$reflectivity: function() {
  return this._material.get$reflectivity();
},
 get$refractionRatio: function() {
  return this._material.get$refractionRatio();
},
 get$combine: function() {
  return this._material.get$combine();
},
 get$skinning: function() {
  return this.get$_hasSkinning() === true && this._material.get$skinning();
},
 get$sizeAttenuation: function() {
  return this.get$isParticleBasicMaterial() === true && $.propertyTypeCast(this._material, 'is$ParticleBasicMaterial').get$sizeAttenuation();
},
 get$size: function() {
  return this.get$isParticleBasicMaterial() === true ? $.propertyTypeCast(this._material, 'is$ParticleBasicMaterial').get$size() : null;
},
 get$isShaderMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$ShaderMaterial;
},
 get$isMeshDepthMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshDepthMaterial;
},
 get$isMeshNormalMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshNormalMaterial;
},
 get$isMeshBasicMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshBasicMaterial;
},
 get$isMeshLambertMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshLambertMaterial;
},
 get$isMeshPhongMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshPhongMaterial;
},
 get$isLineBasicMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$LineBasicMaterial;
},
 get$isParticleBasicMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$ParticleBasicMaterial;
},
 get$_hasWrapAround: function() {
  return this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasLightMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasEnvMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasSpecularMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasTextureMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true;
},
 get$_hasSkinning: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasMorhTargets: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasMorphNormals: function() {
  return this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasVertexColors: function() {
  return this.get$isLineBasicMaterial() === true || this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasFog: function() {
  return this.get$isLineBasicMaterial() === true || this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true || this.get$isShaderMaterial() === true;
}
};

$$.WebGLCamera = {"": ["_camera", "_viewMatrixArray?", "_projectionMatrixArray?"],
 "super": "Object",
 get$near: function() {
  return this._camera.get$near();
},
 get$far: function() {
  return this._camera.get$far();
},
 get$parent: function() {
  return this._camera.get$parent();
},
 get$matrixWorld: function() {
  return this._camera.get$matrixWorld();
},
 get$matrixWorldInverse: function() {
  return this._camera.get$matrixWorldInverse();
},
 get$projectionMatrix: function() {
  return this._camera.get$projectionMatrix();
},
 updateMatrixWorld$1: function(force) {
  return this._camera.updateMatrixWorld$0();
},
 updateMatrixWorld$0: function() {
  return this.updateMatrixWorld$1(false)
}
};

$$.Uniform = {"": ["type?", "value=", "texture="],
 "super": "Object"
};

$$.Scene = {"": ["fog?", "overrideMaterial?", "objects", "lights?", "__objectsAdded?", "__objectsRemoved?", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 addObject$1: function(object) {
  if (typeof object === 'object' && object !== null && !!object.is$Light) {
    var t1 = $.indexOf$1(this.lights, object);
    if (typeof t1 !== 'number')
      return this.addObject$1$bailout(1, object, t1, 0);
    if (t1 === -1)
      this.lights.push(object);
  } else if (!(typeof object === 'object' && object !== null && !!object.is$Camera || typeof object === 'object' && object !== null && !!object.is$Bone)) {
    t1 = $.indexOf$1(this.objects, object);
    if (typeof t1 !== 'number')
      return this.addObject$1$bailout(2, object, t1, 0);
    if (t1 === -1) {
      this.objects.push(object);
      this.__objectsAdded.push(object);
      var i = $.indexOf$1(this.__objectsRemoved, object);
      if (typeof i !== 'number')
        return this.addObject$1$bailout(3, object, i, 0);
      if (!(i === -1))
        $.removeRange(this.__objectsRemoved, i, 1);
    }
  }
  var c = 0;
  while (true) {
    t1 = $.get$length(object.get$children());
    if (typeof t1 !== 'number')
      return this.addObject$1$bailout(4, object, c, t1);
    if (!(c < t1))
      break;
    t1 = object.get$children();
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.addObject$1$bailout(5, t1, object, c);
    if (c >= t1.length)
      throw $.ioore(c);
    this.addObject$1(t1[c]);
    ++c;
  }
},
 addObject$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var object = env0;
      t1 = env1;
      break;
    case 2:
      object = env0;
      t1 = env1;
      break;
    case 3:
      object = env0;
      i = env1;
      break;
    case 4:
      object = env0;
      c = env1;
      t1 = env2;
      break;
    case 5:
      t1 = env0;
      object = env1;
      c = env2;
      break;
  }
  switch (state0) {
    case 0:
    default:
      if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$Light)
        switch (state0) {
          case 0:
            var t1 = $.indexOf$1(this.lights, object);
          case 1:
            state0 = 0;
            if ($.eqB(t1, -1))
              this.lights.push(object);
        }
      else
        switch (state0) {
          case 0:
          default:
            if (state0 === 3 || state0 === 2 || state0 === 0 && !(typeof object === 'object' && object !== null && !!object.is$Camera || typeof object === 'object' && object !== null && !!object.is$Bone))
              switch (state0) {
                case 0:
                  t1 = $.indexOf$1(this.objects, object);
                case 2:
                  state0 = 0;
                case 3:
                  if (state0 === 3 || state0 === 0 && $.eqB(t1, -1))
                    switch (state0) {
                      case 0:
                        this.objects.push(object);
                        this.__objectsAdded.push(object);
                        var i = $.indexOf$1(this.__objectsRemoved, object);
                      case 3:
                        state0 = 0;
                        if (!$.eqB(i, -1))
                          $.removeRange(this.__objectsRemoved, i, 1);
                    }
              }
        }
      var c = 0;
    case 4:
    case 5:
      L0:
        while (true)
          switch (state0) {
            case 0:
              t1 = $.get$length(object.get$children());
            case 4:
              state0 = 0;
              if (!$.ltB(c, t1))
                break L0;
              t1 = object.get$children();
            case 5:
              state0 = 0;
              this.addObject$1($.index(t1, c));
              ++c;
          }
  }
},
 removeObject$1: function(object) {
  if (typeof object === 'object' && object !== null && !!object.is$Light) {
    var i = $.indexOf$1(this.lights, object);
    if (typeof i !== 'number')
      return this.removeObject$1$bailout(1, object, i, 0);
    if (!(i === -1))
      $.removeRange(this.lights, i, 1);
  } else if (!(typeof object === 'object' && object !== null && !!object.is$Camera)) {
    i = $.indexOf$1(this.objects, object);
    if (typeof i !== 'number')
      return this.removeObject$1$bailout(2, object, i, 0);
    if (!(i === -1)) {
      $.removeRange(this.objects, i, 1);
      this.__objectsRemoved.push(object);
      var ai = $.indexOf$1(this.__objectsAdded, object);
      if (typeof ai !== 'number')
        return this.removeObject$1$bailout(3, object, ai, 0);
      if (!(ai === -1))
        $.removeRange(this.__objectsAdded, ai, 1);
    }
  }
  var c = 0;
  while (true) {
    var t1 = $.get$length(object.get$children());
    if (typeof t1 !== 'number')
      return this.removeObject$1$bailout(4, object, t1, c);
    if (!(c < t1))
      break;
    t1 = object.get$children();
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.removeObject$1$bailout(5, object, t1, c);
    if (c >= t1.length)
      throw $.ioore(c);
    this.removeObject$1(t1[c]);
    ++c;
  }
},
 removeObject$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var object = env0;
      i = env1;
      break;
    case 2:
      object = env0;
      i = env1;
      break;
    case 3:
      object = env0;
      ai = env1;
      break;
    case 4:
      object = env0;
      t1 = env1;
      c = env2;
      break;
    case 5:
      object = env0;
      t1 = env1;
      c = env2;
      break;
  }
  switch (state0) {
    case 0:
    default:
      if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && !!object.is$Light)
        switch (state0) {
          case 0:
            var i = $.indexOf$1(this.lights, object);
          case 1:
            state0 = 0;
            if (!$.eqB(i, -1))
              $.removeRange(this.lights, i, 1);
        }
      else
        switch (state0) {
          case 0:
          default:
            if (state0 === 3 || state0 === 2 || state0 === 0 && !(typeof object === 'object' && object !== null && !!object.is$Camera))
              switch (state0) {
                case 0:
                  i = $.indexOf$1(this.objects, object);
                case 2:
                  state0 = 0;
                case 3:
                  if (state0 === 3 || state0 === 0 && !$.eqB(i, -1))
                    switch (state0) {
                      case 0:
                        $.removeRange(this.objects, i, 1);
                        this.__objectsRemoved.push(object);
                        var ai = $.indexOf$1(this.__objectsAdded, object);
                      case 3:
                        state0 = 0;
                        if (!$.eqB(ai, -1))
                          $.removeRange(this.__objectsAdded, ai, 1);
                    }
              }
        }
      var c = 0;
    case 4:
    case 5:
      L0:
        while (true)
          switch (state0) {
            case 0:
              var t1 = $.get$length(object.get$children());
            case 4:
              state0 = 0;
              if (!$.ltB(c, t1))
                break L0;
              t1 = object.get$children();
            case 5:
              state0 = 0;
              this.removeObject$1($.index(t1, c));
              ++c;
          }
  }
},
 Scene$0: function() {
  this.fog = null;
  this.overrideMaterial = null;
  this.matrixAutoUpdate = false;
  this.objects = [];
  this.lights = [];
  this.__objectsAdded = [];
  this.__objectsRemoved = [];
},
 is$Scene: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["values_3", "copies_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_3;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_2, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$ = $.get$length(t1);
  for (var i = 0; $.ltB(i, length$); ++i) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_2, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["writeSlot_8", "readSlot_7", "findSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.CTC1);
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.CTC2);
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.CTC3);
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.CTC4);
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.CTC5);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    var slot = this.findSlot_6.call$1(e);
    t1.copy_1 = this.readSlot_7.call$1(slot);
    var t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e, 0, 0, 0, 0, 0, 0);
    var length$ = e.length;
    slot = this.findSlot_6.call$1(e);
    t2 = this.readSlot_7;
    var copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    var t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (var i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        var element = e[i];
        var elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, e, t3, length$, elementCopy, slot, i, copy);
          for (var t1 = e.length, t2 = copy.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            var t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, copy, i, length$, 0, 0, 0);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.CTC8);
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      var e = env0;
      break;
    case 2:
      e = env0;
      t3 = env1;
      length$ = env2;
      elementCopy = env3;
      slot = env4;
      i = env5;
      copy = env6;
      break;
    case 3:
      e = env0;
      copy = env1;
      i = env2;
      length$ = env3;
      break;
  }
  switch (state0) {
    case 0:
      var t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.CTC1);
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.CTC2);
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.CTC3);
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.CTC4);
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.CTC5);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        var slot = this.findSlot_6.call$1(e);
        t1.copy_1 = this.readSlot_7.call$1(slot);
        var t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_1;
      }
    default:
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            var length$ = $.get$length(e);
            slot = this.findSlot_6.call$1(e);
            t2 = this.readSlot_7;
            var copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            var t3 = this.writeSlot_8;
          case 2:
            if (state0 === 2 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  var i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          var element = $.index(e, i);
                          var elementCopy = this.call$1(element);
                        case 2:
                          if (state0 === 2 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state0 = 0;
                                for (var j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.CTC8);
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["box_0", "walk_9"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"": ["visiting_3", "result_2", "box_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (t1.first_1 !== true)
    $.add$1(this.result_2, ', ');
  t1.first_1 = false;
  t1 = this.result_2;
  var t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"": ["arg2_5", "arg1_4", "closure_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_4, this.arg2_5);
}
};

$$.DoubleLinkedQueue_length__ = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$.LinkedHashMapImplementation_forEach__ = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"": ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_0;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$ = $.get$length(t1);
  for (var i = 0; $.ltB(i, length$); ++i) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"": ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_2, i);
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"": ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_3, i, x);
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"": ["readSlot_7", "mustCopy_6", "writeSlot_5", "findSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout(1, e, 0, 0, 0);
  if (e instanceof Date)
    throw $.$$throw($.CTC1);
  if (e instanceof RegExp)
    throw $.$$throw($.CTC2);
  if ($._isJavaScriptSimpleObject(e)) {
    var slot = this.findSlot_4.call$1(e);
    var copy = this.readSlot_7.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(2, e, slot, copy, 0);
    this.writeSlot_5.call$2(slot, copy);
    for (var t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
      var t2 = t1.next$0();
      var t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_4.call$1(e);
    copy = this.readSlot_7.call$1(slot);
    if (!(copy == null))
      return copy;
    var length$ = e.length;
    if (this.mustCopy_6 === true)
      copy = new Array(length$);
    else
      copy = e;
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, length$, copy, slot);
    this.writeSlot_5.call$2(slot, copy);
    for (var i = 0; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  return e;
},
 call$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      var e = env0;
      break;
    case 2:
      e = env0;
      slot = env1;
      copy = env2;
      break;
    case 3:
      e = env0;
      length$ = env1;
      copy = env2;
      slot = env3;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.CTC1);
      if (e instanceof RegExp)
        throw $.$$throw($.CTC2);
    case 2:
      if (state0 === 2 || state0 === 0 && $._isJavaScriptSimpleObject(e))
        switch (state0) {
          case 0:
            var slot = this.findSlot_4.call$1(e);
            var copy = this.readSlot_7.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 2:
            state0 = 0;
            this.writeSlot_5.call$2(slot, copy);
            for (var t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
              var t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    case 3:
      if (state0 === 3 || state0 === 0 && e instanceof Array)
        switch (state0) {
          case 0:
            slot = this.findSlot_4.call$1(e);
            copy = this.readSlot_7.call$1(slot);
            if (!(copy == null))
              return copy;
            var length$ = $.get$length(e);
            copy = this.mustCopy_6 === true ? new Array(length$) : e;
          case 3:
            state0 = 0;
            this.writeSlot_5.call$2(slot, copy);
            for (var i = 0; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      return e;
  }
}
};

$$._convertNativeToDart_IDBKey_containsDate = {"": [],
 "super": "Closure",
 call$1: function(object) {
  if (object instanceof Date)
    return true;
  if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, object);
    for (var i = 0; i < object.length; ++i)
      if (this.call$1(object[i]) === true)
        return true;
  }
  return false;
},
 call$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      var object = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (object instanceof Date)
        return true;
    case 1:
      if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            for (var i = 0; $.ltB(i, $.get$length(object)); ++i)
              if (this.call$1($.index(object, i)) === true)
                return true;
        }
      return false;
  }
}
};

$$.Face3_clone_anon = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face3_clone_anon0 = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face3_clone_anon1 = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$._FilteredElementList__filtered_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._ChildrenElementList_filter_anon = {"": ["output_1", "f_0"],
 "super": "Closure",
 call$1: function(element) {
  if (this.f_0.call$1(element) === true)
    $.add$1(this.output_1, element);
}
};

$$._FilteredElementList_removeRange_anon = {"": [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.Face4_clone_anon = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face4_clone_anon0 = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face4_clone_anon1 = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Geometry_computeBoundingSphere_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(curMaxRadiusSq, vertex) {
  var radiusSq = vertex.lengthSq$0();
  var t1 = this.box_0;
  t1.radiusSq_1 = radiusSq;
  return $.gtB(t1.radiusSq_1, curMaxRadiusSq) ? t1.radiusSq_1 : curMaxRadiusSq;
}
};

$$.Vector3_setEulerFromRotationMatrix_anon = {"": [],
 "super": "Closure",
 call$1: function(x) {
  return $.min($.max(x, -1), 1);
}
};

$$.Geometry_computeVertexNormals_anon = {"": ["this_2"],
 "super": "Closure",
 call$1: function(_) {
  return $.add$1(this.this_2.get$__tmpVertices(), $.Vector3$(0, 0, 0));
}
};

$$.Geometry_computeVertexNormals_anon0 = {"": [],
 "super": "Closure",
 call$1: function(face) {
  if (typeof face === 'object' && face !== null && !!face.is$Face3)
    face.vertexNormals = [$.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0)];
  else if (typeof face === 'object' && face !== null && !!face.is$Face4)
    face.vertexNormals = [$.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0)];
}
};

$$.Geometry_computeVertexNormals_anon1 = {"": ["box_0"],
 "super": "Closure",
 call$1: function(face) {
  if (typeof face === 'object' && face !== null && !!face.is$Face3) {
    var t1 = this.box_0;
    $.index(t1.vertices_1, face.a).addSelf$1(face.normal);
    $.index(t1.vertices_1, face.b).addSelf$1(face.normal);
    $.index(t1.vertices_1, face.c).addSelf$1(face.normal);
  } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
    t1 = this.box_0;
    $.index(t1.vertices_1, face.a).addSelf$1(face.normal);
    $.index(t1.vertices_1, face.b).addSelf$1(face.normal);
    $.index(t1.vertices_1, face.c).addSelf$1(face.normal);
    $.index(t1.vertices_1, face.d).addSelf$1(face.normal);
  }
}
};

$$.Geometry_computeVertexNormals_anon2 = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v.normalize$0();
}
};

$$.Geometry_computeVertexNormals_anon3 = {"": ["box_0"],
 "super": "Closure",
 call$1: function(face) {
  if (typeof face === 'object' && face !== null && !!face.is$Face3) {
    var t1 = $.index(face.vertexNormals, 0);
    var t2 = this.box_0;
    t1.copy$1($.index(t2.vertices_1, face.a));
    $.index(face.vertexNormals, 1).copy$1($.index(t2.vertices_1, face.b));
    $.index(face.vertexNormals, 2).copy$1($.index(t2.vertices_1, face.c));
  } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
    t1 = $.index(face.vertexNormals, 0);
    t2 = this.box_0;
    t1.copy$1($.index(t2.vertices_1, face.a));
    $.index(face.vertexNormals, 1).copy$1($.index(t2.vertices_1, face.b));
    $.index(face.vertexNormals, 2).copy$1($.index(t2.vertices_1, face.c));
    $.index(face.vertexNormals, 3).copy$1($.index(t2.vertices_1, face.d));
  }
}
};

$$.Geometry_computeFaceNormals_anon = {"": ["box_0", "this_6", "ab_5", "cb_4"],
 "super": "Closure",
 call$1: function(face) {
  var t1 = this.this_6;
  var vA = $.index(t1.get$vertices(), face.get$a());
  var t2 = this.box_0;
  t2.vA_1 = vA;
  t2.vB_2 = $.index(t1.get$vertices(), face.get$b());
  t2.vC_3 = $.index(t1.get$vertices(), face.get$c());
  var t3 = this.cb_4;
  t3.sub$2(t2.vC_3, t2.vB_2);
  var t4 = this.ab_5;
  t4.sub$2(t2.vA_1, t2.vB_2);
  t3.crossSelf$1(t4);
  if (t3.isZero$0() !== true)
    t3.normalize$0();
  face.get$normal().copy$1(t3);
}
};

$$.Geometry_computeCentroids_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(face) {
  face.get$centroid().setValues$3(0, 0, 0);
  if (typeof face === 'object' && face !== null && !!face.is$Face3) {
    var t1 = face.centroid;
    var t2 = this.this_0;
    t1.addSelf$1($.index(t2.get$vertices(), face.a));
    face.centroid.addSelf$1($.index(t2.get$vertices(), face.b));
    face.centroid.addSelf$1($.index(t2.get$vertices(), face.c));
    face.centroid.divideScalar$1(3);
  } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
    t1 = face.centroid;
    t2 = this.this_0;
    t1.addSelf$1($.index(t2.get$vertices(), face.a));
    face.centroid.addSelf$1($.index(t2.get$vertices(), face.b));
    face.centroid.addSelf$1($.index(t2.get$vertices(), face.c));
    face.centroid.addSelf$1($.index(t2.get$vertices(), face.d));
    face.centroid.divideScalar$1(4);
  }
}
};

$$.TubeGeometry__frenetFrames__initialNormal1 = {"": ["this_5"],
 "super": "Closure",
 call$1: function(lastBinormal) {
  var t1 = this.this_5;
  $.indexSet(t1.get$normals(), 0, $.Vector3$(0, 0, 0));
  $.indexSet(t1.get$binormals(), 0, $.Vector3$(0, 0, 0));
  if (lastBinormal == null)
    lastBinormal = $.Vector3$(0, 0, 1);
  $.index(t1.get$normals(), 0).cross$2(lastBinormal, $.index(t1.get$tangents(), 0)).normalize$0();
  $.index(t1.get$binormals(), 0).cross$2($.index(t1.get$tangents(), 0), $.index(t1.get$normals(), 0)).normalize$0();
},
 call$0: function() {
  return this.call$1(null)
}
};

$$.TubeGeometry__frenetFrames__initialNormal2 = {"": ["epsilon_7", "this_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_6;
  var t2 = t1.get$path().getTangentAt$1(this.epsilon_7);
  $.indexSet(t1.get$normals(), 0, $.Vector3$(0, 0, 0).sub$2(t2, $.index(t1.get$tangents(), 0)).normalize$0());
  $.indexSet(t1.get$binormals(), 0, $.Vector3$(0, 0, 0).cross$2($.index(t1.get$tangents(), 0), $.index(t1.get$normals(), 0)));
  $.index(t1.get$normals(), 0).cross$2($.index(t1.get$binormals(), 0), $.index(t1.get$tangents(), 0)).normalize$0();
  $.index(t1.get$binormals(), 0).cross$2($.index(t1.get$tangents(), 0), $.index(t1.get$normals(), 0)).normalize$0();
}
};

$$.TubeGeometry__frenetFrames__initialNormal3 = {"": ["vec_10", "this_9", "box_0", "normal_8"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_9;
  $.indexSet(t1.get$normals(), 0, $.Vector3$(0, 0, 0));
  $.indexSet(t1.get$binormals(), 0, $.Vector3$(0, 0, 0));
  var t2 = this.box_0;
  t2.smallest_1 = (1/0);
  t2.tx_2 = $.abs($.index(t1.get$tangents(), 0).get$x());
  t2.ty_3 = $.abs($.index(t1.get$tangents(), 0).get$y());
  t2.tz_4 = $.abs($.index(t1.get$tangents(), 0).get$z());
  if ($.leB(t2.tx_2, t2.smallest_1)) {
    t2.smallest_1 = t2.tx_2;
    this.normal_8.setValues$3(1, 0, 0);
  }
  if ($.leB(t2.ty_3, t2.smallest_1)) {
    t2.smallest_1 = t2.ty_3;
    this.normal_8.setValues$3(0, 1, 0);
  }
  if ($.leB(t2.tz_4, t2.smallest_1))
    this.normal_8.setValues$3(0, 0, 1);
  t2 = this.vec_10;
  t2.cross$2($.index(t1.get$tangents(), 0), this.normal_8).normalize$0();
  $.index(t1.get$normals(), 0).cross$2($.index(t1.get$tangents(), 0), t2);
  $.index(t1.get$binormals(), 0).cross$2($.index(t1.get$tangents(), 0), $.index(t1.get$normals(), 0));
}
};

$$.WebGLRenderer_renderImmediateObject_function = {"": ["this_2", "material_1", "program_0"],
 "super": "Closure",
 call$1: function(object) {
  this.this_2.renderBufferImmediate$3(object, this.program_0, this.material_1);
}
};

$$.WebGLRenderer_initMaterial_anon = {"": ["material_0"],
 "super": "Closure",
 call$2: function(k, u) {
  return $.add$1(this.material_0.get$uniformsList(), [u, k]);
}
};

$$.WebGLRenderer_buildProgram_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(u, _) {
  return $.add$1(this.box_0.identifiers_1, u);
}
};

$$.WebGLRenderer_buildProgram_anon0 = {"": ["box_0"],
 "super": "Closure",
 call$2: function(a, _) {
  return $.add$1(this.box_0.identifiers_1, a);
}
};

$$.ConstantMap_forEach_anon = {"": ["f_1", "this_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_1.call$2(key, $.index(this.this_0, key));
}
};

$$.UniformsUtils_clone_anon = {"": ["uniforms_dst_0"],
 "super": "Closure",
 call$2: function(k, u) {
  var parameter_src = u.get$value();
  if (typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Color || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Vector2 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Vector3 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Vector4 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Matrix4 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Texture)
    var parameter_dst = parameter_src.clone$0();
  else
    parameter_dst = typeof parameter_src === 'object' && parameter_src !== null && (parameter_src.constructor === Array || parameter_src.is$List()) ? $.ListImplementation_List$from(parameter_src) : parameter_src;
  var t1 = this.uniforms_dst_0;
  var t2 = u.get$type();
  $.indexSet(t1, k, $.Uniform$(u.get$texture(), t2, parameter_dst));
}
};

$$.UniformsUtils_merge_anon = {"": ["merged_2", "box_0"],
 "super": "Closure",
 call$2: function(k, _) {
  $.indexSet(this.merged_2, k, $.index(this.box_0.tmp_1, k));
}
};

$$.WebGLRenderer_addObject_anon = {"": ["box_0", "webglobject_3", "this_2"],
 "super": "Closure",
 call$2: function(k, geometryGroup) {
  if (geometryGroup.get$__webglVertexBuffer() == null) {
    var t1 = this.this_2;
    t1.createMeshBuffers$1(geometryGroup);
    t1.initMeshBuffers$2(geometryGroup, this.webglobject_3);
    t1 = this.box_0;
    t1.geometry_1.set$verticesNeedUpdate(true);
    t1.geometry_1.set$morphTargetsNeedUpdate(true);
    t1.geometry_1.set$elementsNeedUpdate(true);
    t1.geometry_1.set$uvsNeedUpdate(true);
    t1.geometry_1.set$normalsNeedUpdate(true);
    t1.geometry_1.set$tangentsNeedUpdate(true);
    t1.geometry_1.set$colorsNeedUpdate(true);
  }
}
};

$$.WebGLRenderer_addObject_anon0 = {"": ["webglobject_6", "scene_5", "this_4"],
 "super": "Closure",
 call$2: function(k, geometryGroup) {
  this.this_4.addBuffer$3($.index(this.scene_5, '__webglObjects'), geometryGroup, this.webglobject_6);
}
};

$$.WebGLRenderer_initDirectBuffers_anon = {"": ["box_0", "this_3"],
 "super": "Closure",
 call$2: function(a, v) {
  var t1 = $.eqB(a, 'index');
  var t2 = this.box_0;
  if (t1)
    t2.type_2 = 34963;
  else
    t2.type_2 = 34962;
  t1 = this.box_0;
  t1.attribute_1 = v;
  t2 = this.this_3;
  var t3 = t2.get$_gl().createBuffer$0();
  t1.attribute_1.set$buffer(t3);
  t2.get$_gl().bindBuffer$2(t1.type_2, t1.attribute_1.get$buffer());
  t2.get$_gl().bufferData$3(t1.type_2, t1.attribute_1.get$array(), 35044);
}
};

$$.WebGLRenderer_sortFacesByMaterial_anon = {"": ["geometry_1", "this_0"],
 "super": "Closure",
 call$2: function(k, g) {
  var t1 = this.this_0;
  var t2 = t1.get$_geometryGroupCounter();
  t1.set$_geometryGroupCounter($.add(t2, 1));
  g.set$id(t2);
  $.add$1(this.geometry_1.get$geometryGroupsList(), g);
}
};

$$.WebGLRenderer_initMeshBuffers_anon = {"": ["this_3", "material_2", "geometryGroup_1", "nvertices_0"],
 "super": "Closure",
 call$1: function(a) {
  var originalAttribute = $.index(this.material_2.get$attributes(), a);
  if (typeof originalAttribute !== 'string' && (typeof originalAttribute !== 'object' || originalAttribute === null || originalAttribute.constructor !== Array && !originalAttribute.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, a, originalAttribute, 0);
  var attribute = $.makeLiteralMap([]);
  if (typeof attribute !== 'object' || attribute === null || (attribute.constructor !== Array || !!attribute.immutable$list) && !attribute.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout(2, a, attribute, originalAttribute);
  for (var t1 = $.iterator(originalAttribute); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= originalAttribute.length)
      throw $.ioore(t2);
    var t3 = originalAttribute[t2];
    if (t2 >= attribute.length)
      throw $.ioore(t2);
    attribute[t2] = t3;
  }
  throw $.iae('__webglInitialized');
  if ('__webglInitialized' < 0 || '__webglInitialized' >= attribute.length)
    throw $.ioore('__webglInitialized');
  t1 = attribute.__webglInitialized;
  if (!(t1 == null || $.eqB(t1, false))) {
    throw $.iae('createUniqueBuffers');
    if ('createUniqueBuffers' < 0 || 'createUniqueBuffers' >= attribute.length)
      throw $.ioore('createUniqueBuffers');
    t1 = attribute.createUniqueBuffers;
    t1 = !(t1 == null) && t1 === true;
  } else
    t1 = true;
  if (t1) {
    t1 = attribute.length;
    if ('__webglInitialized' >= t1)
      throw $.ioore('__webglInitialized');
    attribute.__webglInitialized = true;
    throw $.iae('type');
    if ('type' < 0 || 'type' >= t1)
      throw $.ioore('type');
    if ($.eqB(attribute.type, 'v2'))
      var size = 2;
    else {
      if ('type' >= attribute.length)
        throw $.ioore('type');
      if ($.eqB(attribute.type, 'v3'))
        size = 3;
      else {
        if ('type' >= attribute.length)
          throw $.ioore('type');
        if ($.eqB(attribute.type, 'v4'))
          size = 4;
        else {
          if ('type' >= attribute.length)
            throw $.ioore('type');
          size = $.eqB(attribute.type, 'c') ? 3 : 1;
        }
      }
    }
    throw $.iae('size');
    if ('size' < 0 || 'size' >= attribute.length)
      throw $.ioore('size');
    attribute.size = size;
    t1 = $.Float32Array_Float32Array($.mul(this.nvertices_0, size));
    throw $.iae('array');
    if ('array' < 0 || 'array' >= attribute.length)
      throw $.ioore('array');
    attribute.array = t1;
    var buffer = $.Buffer$(this.this_3.get$_gl().createBuffer$0());
    buffer.belongsToAttribute = a;
    throw $.iae('buffer');
    if ('buffer' < 0 || 'buffer' >= attribute.length)
      throw $.ioore('buffer');
    attribute.buffer = buffer;
    originalAttribute.set$needsUpdate(true);
    throw $.iae('__original');
    if ('__original' < 0 || '__original' >= attribute.length)
      throw $.ioore('__original');
    attribute.__original = originalAttribute;
  }
  $.add$1(this.geometryGroup_1.get$__webglCustomAttributesList(), attribute);
},
 call$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      var a = env0;
      originalAttribute = env1;
      break;
    case 2:
      a = env0;
      attribute = env1;
      originalAttribute = env2;
      break;
  }
  switch (state0) {
    case 0:
      var originalAttribute = $.index(this.material_2.get$attributes(), a);
    case 1:
      state0 = 0;
      var attribute = $.makeLiteralMap([]);
    case 2:
      state0 = 0;
      for (var t1 = $.iterator(originalAttribute); t1.get$hasNext() === true;) {
        var t2 = t1.next$0();
        $.indexSet(attribute, t2, $.index(originalAttribute, t2));
      }
      if (!($.index(attribute, '__webglInitialized') == null || $.eqB($.index(attribute, '__webglInitialized'), false)))
        t1 = !($.index(attribute, 'createUniqueBuffers') == null) && $.index(attribute, 'createUniqueBuffers') === true;
      else
        t1 = true;
      if (t1) {
        $.indexSet(attribute, '__webglInitialized', true);
        if ($.eqB($.index(attribute, 'type'), 'v2'))
          var size = 2;
        else if ($.eqB($.index(attribute, 'type'), 'v3'))
          size = 3;
        else if ($.eqB($.index(attribute, 'type'), 'v4'))
          size = 4;
        else
          size = $.eqB($.index(attribute, 'type'), 'c') ? 3 : 1;
        $.indexSet(attribute, 'size', size);
        $.indexSet(attribute, 'array', $.Float32Array_Float32Array($.mul(this.nvertices_0, size)));
        var buffer = $.Buffer$(this.this_3.get$_gl().createBuffer$0());
        buffer.belongsToAttribute = a;
        $.indexSet(attribute, 'buffer', buffer);
        originalAttribute.set$needsUpdate(true);
        $.indexSet(attribute, '__original', originalAttribute);
      }
      $.add$1(this.geometryGroup_1.get$__webglCustomAttributesList(), attribute);
  }
}
};

$$.WebGLRenderer_setParticleBuffers_function = {"": [],
 "super": "Closure",
 call$2: function(a, b) {
  return $.sub($.index(b, 0), $.index(a, 0));
}
};

$$.Object3D_updateMatrixWorld_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(c) {
  return c.updateMatrixWorld$1(this.box_0.force_1);
}
};

$$.createMultiMaterialObject_anon = {"": ["group_1", "geometry_0"],
 "super": "Closure",
 call$1: function(material) {
  $.add$1(this.group_1, $.Mesh$(this.geometry_0, material));
}
};

$$.ExtrudeGeometry_addShape_f3 = {"": ["material_6", "uvgen_5", "shapesOffset_4", "this_3", "shape_2"],
 "super": "Closure",
 call$4: function(a, b, c, isBottom) {
  var t1 = this.shapesOffset_4;
  a = $.add(a, t1);
  b = $.add(b, t1);
  c = $.add(c, t1);
  t1 = this.this_3;
  $.add$1(t1.get$faces(), $.Face3$(a, b, c, null, null, this.material_6));
  var t2 = this.uvgen_5;
  var t3 = this.shape_2;
  var uvs = isBottom ? t2.generateBottomUV$6(t1, t3, null, a, b, c) : t2.generateTopUV$6(t1, t3, null, a, b, c);
  $.add$1($.index(t1.get$faceVertexUvs(), 0), uvs);
}
};

$$.ExtrudeGeometry_addShape_f4 = {"": ["uvgen_11", "shapesOffset_10", "this_9", "extrudeMaterial_8", "shape_7"],
 "super": "Closure",
 call$7: function(a, b, c, d, wallContour, stepIndex, stepsLength) {
  var t1 = this.shapesOffset_10;
  a = $.add(a, t1);
  b = $.add(b, t1);
  c = $.add(c, t1);
  d = $.add(d, t1);
  t1 = this.this_9;
  $.add$1(t1.get$faces(), $.Face4$(a, b, c, d, null, null, this.extrudeMaterial_8));
  var uvs = this.uvgen_11.generateSideWallUV$10(t1, this.shape_7, wallContour, null, a, b, c, d, stepIndex, stepsLength);
  $.add$1($.index(t1.get$faceVertexUvs(), 0), uvs);
}
};

$$.ExtrudeGeometry_addShape_sidewalls = {"": ["nSteps_14", "box_0", "f4_13", "vlen_12"],
 "super": "Closure",
 call$2: function(contour, layeroffset) {
  if (typeof layeroffset !== 'number')
    return this.call$2$bailout(1, contour, layeroffset, 0, 0, 0, 0, 0, 0);
  var i = $.get$length(contour);
  if (typeof i !== 'number')
    return this.call$2$bailout(2, contour, layeroffset, i, 0, 0, 0, 0, 0);
  var t1 = this.nSteps_14;
  if (typeof t1 !== 'number')
    return this.call$2$bailout(3, contour, layeroffset, t1, i, 0, 0, 0, 0);
  var t3 = this.box_0;
  var t4 = this.vlen_12;
  if (typeof t4 !== 'number')
    return this.call$2$bailout(4, contour, layeroffset, t4, i, t1, t3, 0, 0);
  var t6 = this.f4_13;
  var j = null;
  var k = null;
  for (; --i, i >= 0;) {
    k = i - 1;
    if (k < 0)
      k = $.sub($.get$length(contour), 1);
    if (typeof k !== 'number')
      return this.call$2$bailout(5, contour, layeroffset, i, t4, k, t1, t6, t3);
    var t5 = $.mul(t3.bevelSegments_1, 2);
    if (typeof t5 !== 'number')
      throw $.iae(t5);
    var sl = t1 + t5;
    for (var t2 = layeroffset + i, t5 = layeroffset + k, s = 0; s < sl; ++s) {
      var slen1 = t4 * s;
      var slen2 = t4 * (s + 1);
      t6.call$7(t2 + slen1, t5 + slen1, t5 + slen2, t2 + slen2, contour, s, sl);
    }
    j = i;
  }
},
 call$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      var contour = env0;
      var layeroffset = env1;
      break;
    case 2:
      contour = env0;
      layeroffset = env1;
      i = env2;
      break;
    case 3:
      contour = env0;
      layeroffset = env1;
      t1 = env2;
      i = env3;
      break;
    case 4:
      contour = env0;
      layeroffset = env1;
      t4 = env2;
      i = env3;
      t1 = env4;
      t3 = env5;
      break;
    case 5:
      contour = env0;
      layeroffset = env1;
      i = env2;
      t4 = env3;
      k = env4;
      t1 = env5;
      t6 = env6;
      t3 = env7;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var i = $.get$length(contour);
    case 2:
      state0 = 0;
      var t1 = this.nSteps_14;
    case 3:
      state0 = 0;
      var t3 = this.box_0;
      var t4 = this.vlen_12;
    case 4:
      state0 = 0;
      var t6 = this.f4_13;
      var j = null;
      var k = null;
    case 5:
      L0:
        while (true)
          switch (state0) {
            case 0:
              i = $.sub(i, 1);
              if (!$.geB(i, 0))
                break L0;
              k = $.sub(i, 1);
              if ($.ltB(k, 0))
                k = $.sub($.get$length(contour), 1);
            case 5:
              state0 = 0;
              var sl = $.add(t1, $.mul(t3.bevelSegments_1, 2));
              for (var s = 0; $.ltB(s, sl); ++s) {
                var slen1 = $.mul(t4, s);
                var slen2 = $.mul(t4, s + 1);
                t6.call$7($.add($.add(layeroffset, i), slen1), $.add($.add(layeroffset, k), slen1), $.add($.add(layeroffset, k), slen2), $.add($.add(layeroffset, i), slen2), contour, s, sl);
              }
              j = i;
          }
  }
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  this.port_0.close$0();
  var t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  var t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"": ["this_2", "replyTo_1", "message_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  var t2 = this.replyTo_1;
  t1._checkReplyTo$1(t2);
  var workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_0, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  var t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"": ["pos_5", "result_4", "completer_3", "box_0", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  $.indexSet(t1, this.pos_5, value);
  var t2 = this.box_0;
  var remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_4.get$isComplete() !== true)
    this.completer_3.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["result_8", "completer_7", "future_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_8.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_6.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._StorageImpl_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.values_0, v);
}
};

$$.LinkedHashMapImplementation_values__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$.HashMapImplementation_values__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$.ConstantMap_values_anon = {"": ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  return $.add$1(this.result_0, $.index(this.this_1, key));
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"": ["this_5", "replyTo_4", "message_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = {};
  var t2 = this.this_5;
  var t3 = this.replyTo_4;
  t2._checkReplyTo$1(t3);
  var isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  var shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  var msg = this.message_3;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"": ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      var t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._StorageImpl_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.keys_0, k);
}
};

$$.LinkedHashMapImplementation_keys__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$.HashMapImplementation_keys__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1 = this.box_0.copy_10;
  var t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon = {"": ["callback_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_1.call$1(this.this_0);
}
};

$$.anon0 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$3: function(p0, p1, p2) { return this.self[this.target](p0, p1, p2); },
 call$1: function(when) {
  return this.call$3(when,$,$)
},
 call$2: function(when,grainOffset) {
  return this.call$3(when,grainOffset,$)
}
};
$$.BoundClosure2 = {'':
['self', 'target'],
'super': 'Closure',
call$3: function(p0, p1, p2) { return this.self[this.target](p0, p1, p2); }
};
$$.BoundClosure3 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$$.BoundClosure4 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1($)
}
};
$$.BoundClosure5 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1($)
}
};
$.IndexOutOfRangeException$ = function(_value) {
  return new $.IndexOutOfRangeException(_value);
};

$.Face3$ = function(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  var t1 = new $.Face3(a, b, c, null, null, null, null, null, materialIndex, null);
  t1.Face3$6(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex);
  return t1;
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      var t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      var t4 = src[i];
      if (j < 0 || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
};

$._TextTrackEventsImpl$ = function(_ptr) {
  return new $._TextTrackEventsImpl(_ptr);
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  var end = start + length$;
  if (end > a.length)
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$._BodyElementEventsImpl$ = function(_ptr) {
  return new $._BodyElementEventsImpl(_ptr);
};

$._FilteredElementList$ = function(node) {
  return new $._FilteredElementList(node, node.get$nodes());
};

$.print = function(object) {
  if (typeof object === 'string')
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.toString(object));
};

$.coreSort = function(l, compare) {
  $._Sort__doSort(l, 0, $.sub($.get$length(l), 1), compare);
  return;
};

$._BatteryManagerEventsImpl$ = function(_ptr) {
  return new $._BatteryManagerEventsImpl(_ptr);
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index = function(a, index) {
  if (typeof a == "string" || a.constructor === Array) {
    var key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  if (a.constructor === Array && !a.immutable$list) {
    var key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.mod = function(a, b) {
  if ($.checkNumbers(a, b)) {
    var result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  $.add$1(visiting, c);
  var isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (var t1 = $.iterator(c), first = true; t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.index$slow = function(a, index) {
  if (typeof a === 'string' || $.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if ($.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  for (var t1 = $.iterator(c); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ioore = function(index) {
  throw $.$$throw($.IndexOutOfRangeException$(index));
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC0));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.$$throw = function(ex) {
  if (ex == null)
    ex = $.CTC;
  var jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.unwrapException = function(ex) {
  if ("dartException" in ex)
    return ex.dartException;
  var message = ex.message;
  if (ex instanceof TypeError) {
    var type = ex.type;
    var name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NullPointerException$(null, $.CTC0);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], null);
    var ieErrorCode = ex.number & 0xffff;
    var ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.endsWith(message, 'is null') === true || $.endsWith(message, 'is undefined') === true || $.endsWith(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC0);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          var t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], null);
      }
    return $._ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$('');
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper(list);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator = $.iterator(keyValuePairs);
  var result = $.LinkedHashMapImplementation$();
  for (; iterator.get$hasNext() === true;)
    result.operator$indexSet$2(iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg2, arg1, closure));
  else
    throw $.$$throw($._ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.convertDartClosureToJS = function(closure, arity) {
  if (closure == null)
    return;
  var function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$._TextTrackCueEventsImpl$ = function(_ptr) {
  return new $._TextTrackCueEventsImpl(_ptr);
};

$.Collections_reduce = function(iterable, initialValue, combine) {
  for (var t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    initialValue = combine.call$2(initialValue, t1.next$0());
  return initialValue;
};

$.propertyTypeCastError = function(value, property) {
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), $.substring$2(property, 3, $.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.jsHasOwnProperty = function(jsObject, property) {
  return jsObject.hasOwnProperty(property);
};

$.WebGLRendererMemoryInfo$ = function() {
  return new $.WebGLRendererMemoryInfo(0, 0, 0);
};

$.WebGLRendererRenderInfo$ = function() {
  return new $.WebGLRendererRenderInfo(0, 0, 0, 0);
};

$.constructorNameFallback = function(object) {
  if (object == null)
    return 'Null';
  var constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    var name$ = constructor$.name;
    if (typeof name$ === 'string')
      var t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  var string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$._DedicatedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._DedicatedWorkerContextEventsImpl(_ptr);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.regExpMakeNative = function(regExp, global) {
  var pattern = regExp.get$pattern();
  var multiLine = regExp.get$multiLine();
  var ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  var sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true)
    $.add$1(sb, 'm');
  if (ignoreCase === true)
    $.add$1(sb, 'i');
  if (global === true)
    $.add$1(sb, 'g');
  try {
    return new RegExp(pattern, $.toString(sb));
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return !$.eqB($.indexOf$2(receiver, other, startIndex), -1);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  if (from === '')
    if (receiver === '')
      return to;
    else {
      var result = $.StringBuffer_StringBuffer('');
      var length$ = receiver.length;
      $.add$1(result, to);
      for (var i = 0; i < length$; ++i) {
        $.add$1(result, receiver[i]);
        $.add$1(result, to);
      }
      return $.toString(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.CTC11, true), "\\$&"), false, false), true), to);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.eqB($.get$length(receiver), 0))
      throw $.$$throw($.IndexOutOfRangeException$(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.filter = function(receiver, predicate) {
  if (!$.isJsArray(receiver))
    return receiver.filter$1(predicate);
  else
    return $.Collections_filter(receiver, [], predicate);
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (index < 0)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    if (index >= receiver.length)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.get$isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.get$isEmpty();
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.IndexOutOfRangeException$(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$.map = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.map$1(f);
  else
    return $.Collections_map(receiver, [], f);
};

$.getRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  var t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.gtB(end, $.get$length(receiver)))
    throw $.$$throw($.IndexOutOfRangeException$(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
};

$.indexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, 0, receiver.length);
  return receiver.indexOf$1(element);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.compareTo = function(a, b) {
  if ($.checkNumbers(a, b))
    if ($.ltB(a, b))
      return -1;
    else if ($.gtB(a, b))
      return 1;
    else if ($.eqB(a, b)) {
      if ($.eqB(a, 0)) {
        var aIsNegative = $.get$isNegative(a);
        if ($.eqB(aIsNegative, $.get$isNegative(b)))
          return 0;
        if (aIsNegative === true)
          return -1;
        return 1;
      }
      return 0;
    } else if ($.get$isNaN(a) === true) {
      if ($.get$isNaN(b) === true)
        return 0;
      return 1;
    } else
      return -1;
  else if (typeof a === 'string') {
    if (!(typeof b === 'string'))
      throw $.$$throw($.ArgumentError$(b));
    if (a == b)
      var t1 = 0;
    else
      t1 = a < b ? -1 : 1;
    return t1;
  } else
    return a.compareTo$1(b);
};

$.get$last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.get$last();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.removeRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  var receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(t1));
  var t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$.reduce = function(receiver, initialValue, f) {
  if (!$.isJsArray(receiver))
    return receiver.reduce$2(initialValue, f);
  else
    return $.Collections_reduce(receiver, initialValue, f);
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag = $.getTypeNameOf(obj);
  var method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (var i = 0; i < $._dynamicMetadata0().length; ++i) {
      var entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  var proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.get$isNegative = function(receiver) {
  if (typeof receiver === 'number')
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  else
    return receiver.get$isNegative();
};

$.get$isNaN = function(receiver) {
  if (typeof receiver === 'number')
    return isNaN(receiver);
  else
    return receiver.get$isNaN();
};

$.sort$1 = function(receiver, compare) {
  if (!$.isJsArray(receiver))
    return receiver.sort$1(compare);
  $.checkMutable(receiver, 'sort');
  $.coreSort(receiver, compare);
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.toInt = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$('NaN'));
  if ($.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$('Infinity'));
  var truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.ceil = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.ceil$0();
  return Math.ceil(receiver);
};

$.floor = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.floor$0();
  return Math.floor(receiver);
};

$.get$isInfinite = function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
};

$._Sort__dualPivotQuicksort = function(a, left, right, compare) {
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort__dualPivotQuicksort$bailout(1, a, left, right, compare, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var sixth = $.tdiv($.add($.sub(right, left), 1), 6);
  if (typeof sixth !== 'number')
    throw $.iae(sixth);
  var index1 = left + sixth;
  var index5 = $.sub(right, sixth);
  if (typeof right !== 'number')
    throw $.iae(right);
  var index3 = $.tdiv(left + right, 2);
  var index2 = index3 - sixth;
  var index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  var t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  var el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  var el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  var el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  var el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  var el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    var t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left !== (left | 0))
    throw $.iae(left);
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  var t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right !== (right | 0))
    throw $.iae(right);
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  var less = left + 1;
  var great = right - 1;
  var pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (var k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      var ak = a[k];
      var comp = compare.call$2(ak, el2);
      if (typeof comp !== 'number')
        return $._Sort__dualPivotQuicksort$bailout(2, a, left, less, compare, great, right, k, index1, index5, el2, pivots_are_equal, ak, comp, el4);
      if (comp === 0)
        continue;
      if (comp < 0) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (var less0 = less + 1; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            var great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (less0 = less + 1; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  t2 = a.length;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  var t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less !== (less | 0))
        throw $.iae(less);
      if (less < 0 || less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great !== (great | 0))
        throw $.iae(great);
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (less0 = less + 1; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$.dynamicFunction = function(name$) {
  var f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  var methods = {};
  var dartMethod = Object.getPrototypeOf($.CTC16)[name$];
  if (!(dartMethod == null))
    $.propertySet(methods, 'Object', dartMethod);
  var bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$._Sort_insertionSort_ = function(a, left, right, compare) {
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== 'number')
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (var i = left + 1; i <= right; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    var el = a[i];
    var j = i;
    while (true) {
      if (j > left) {
        var t1 = j - 1;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        var t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      var j0 = j - 1;
      if (j0 !== (j0 | 0))
        throw $.iae(j0);
      t1 = a.length;
      if (j0 < 0 || j0 >= t1)
        throw $.ioore(j0);
      t2 = a[j0];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t1)
        throw $.ioore(j);
      a[j] = t2;
      j = j0;
    }
    if (j !== (j | 0))
      throw $.iae(j);
    if (j < 0 || j >= a.length)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.toStringAsFixed = function(receiver, fractionDigits) {
  if (!(typeof receiver === 'number'))
    return receiver.toStringAsFixed$1(fractionDigits);
  $.checkNum(fractionDigits);
  var result = receiver.toFixed(fractionDigits);
  if (receiver === 0 && $.get$isNegative(receiver) === true)
    return '-' + result;
  return result;
};

$._Sort__doSort = function(a, left, right, compare) {
  if ($.leB($.sub(right, left), 32))
    $._Sort_insertionSort_(a, left, right, compare);
  else
    $._Sort__dualPivotQuicksort(a, left, right, compare);
};

$.contains$1 = function(receiver, other) {
  return $.contains$2(receiver, other, 0);
  return receiver.contains$1(other);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.endsWith = function(receiver, other) {
  $.checkString(other);
  var receiverLength = receiver.length;
  var otherLength = other.length;
  if (otherLength > receiverLength)
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.replaceAll = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceAll$2(from, to);
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
};

$.addAll = function(receiver, collection) {
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  var iterator = $.iterator(collection);
  for (; iterator.get$hasNext() === true;)
    $.add$1(receiver, iterator.next$0());
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$2(startIndex, endIndex);
  $.checkNum(startIndex);
  var length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if (startIndex < 0)
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(endIndex, length$))
    throw $.$$throw($.IndexOutOfRangeException$(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  return name$;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.get$hashCode = function(receiver) {
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.get$hashCode();
  var length$ = receiver.length;
  for (var hash = 0, i = 0; i < length$; ++i) {
    var hash0 = 536870911 & hash + receiver.charCodeAt(i);
    var hash1 = 536870911 & hash0 + 524287 & hash0 << 10;
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
    hash = hash1;
  }
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.contains = function(userAgent, name$) {
  return userAgent.indexOf(name$) !== -1;
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result = [];
  for (var i = 0; i < inputTable.length; ++i) {
    var tag = inputTable[i][0];
    var array = inputTable[i];
    var tags = array[1];
    var set = {};
    var tagNames = tags.split('|');
    for (var j = 0, index = 1; j < tagNames.length; ++j) {
      $.propertySet(set, tagNames[j], true);
      index = j;
      array = tagNames;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, 'Chrome') || $.contains(userAgent, 'DumpRenderTree'))
    return $.typeNameInChrome;
  else if ($.contains(userAgent, 'Firefox'))
    return $.typeNameInFirefox;
  else if ($.contains(userAgent, 'MSIE'))
    return $.typeNameInIE;
  else if ($.contains(userAgent, 'Opera'))
    return $.typeNameInOpera;
  else if ($.contains(userAgent, 'AppleWebKit'))
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.propertySet = function(object, property, value) {
  object[property] = value;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$._JavaScriptAudioNodeEventsImpl$ = function(_ptr) {
  return new $._JavaScriptAudioNodeEventsImpl(_ptr);
};

$.main = function() {
  $.WebGL_Geometry_Extrude_By_U_Shapes$().run$0();
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$._document = function() {
  return document;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$._AudioContextEventsImpl$ = function(_ptr) {
  return new $._AudioContextEventsImpl(_ptr);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._RTCPeerConnectionEventsImpl$ = function(_ptr) {
  return new $._RTCPeerConnectionEventsImpl(_ptr);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.ArrowHelper$ = function(dir, origin, length$, hex) {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.add(t1, 1);
  t1 = new $.ArrowHelper(null, null, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.ArrowHelper$4(dir, origin, length$, hex);
  return t1;
};

$.UV$ = function(u, v) {
  return new $.UV(u, v);
};

$.Face4$ = function(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  var t1 = new $.Face4(a, b, c, d, null, null, null, null, null, materialIndex, null);
  t1.Face4$7(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex);
  return t1;
};

$.NotImplementedException$ = function(message) {
  return new $.NotImplementedException(message);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._WebSocketEventsImpl$ = function(_ptr) {
  return new $._WebSocketEventsImpl(_ptr);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(visiting, result, t1));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$.CylinderGeometry$ = function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.add(t1, 1);
  t1 = new $.CylinderGeometry(radiusTop, radiusBottom, height, null, null, null, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t1.CylinderGeometry$6(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded);
  return t1;
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.WebGL_Geometry_Extrude_By_U_Shapes$ = function() {
  return new $.WebGL_Geometry_Extrude_By_U_Shapes(null, null, null, null, null, null, 0, 0, 0, 0, null, null, null);
};

$.PerspectiveCamera$ = function(fov, aspect, near, far) {
  var t1 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  var t2 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  var t3 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  var t4 = $.Object3DCount;
  $.Object3DCount = $.add(t4, 1);
  t4 = new $.PerspectiveCamera(fov, aspect, null, null, null, null, null, null, t1, t2, t3, near, far, t4, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t4.PerspectiveCamera$4(fov, aspect, near, far);
  return t4;
};

$._RTCDataChannelEventsImpl$ = function(_ptr) {
  return new $._RTCDataChannelEventsImpl(_ptr);
};

$.Object3D$ = function() {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.add(t1, 1);
  return new $.Object3D(t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
};

$._InputElementEventsImpl$ = function(_ptr) {
  return new $._InputElementEventsImpl(_ptr);
};

$.Scene$ = function() {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.add(t1, 1);
  t1 = new $.Scene(null, null, null, null, null, null, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Scene$0();
  return t1;
};

$._DOMApplicationCacheEventsImpl$ = function(_ptr) {
  return new $._DOMApplicationCacheEventsImpl(_ptr);
};

$._Elements_createCanvasElement = function(width, height) {
  var _e = $._document().$dom_createElement$1('canvas');
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$.WebGLRenderer$ = function(alpha, antialias, canvas, clearAlpha, clearColorHex, maxLights, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
  var t1 = new $.WebGLRenderer(canvas, null, precision, $.Color$(clearColorHex), clearAlpha, maxLights, alpha, premultipliedAlpha, antialias, stencil, preserveDrawingBuffer, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, 8, 4, true, [], [], $.WebGLRendererInfo$(), [], 0, null, null, -1, null, null, 0, -1, -1, -1, -1, -1, -1, -1, -1, null, null, null, null, 0, 0, 0, 0, 0, 0, $.Frustum$(), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector3$(0, 0, 0), null, true, null, null, null, null, null, null, null, null, null, null);
  t1.WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$maxLights$precision$premultipliedAlpha$preserveDrawingBuffer$stencil(alpha, antialias, canvas, clearAlpha, clearColorHex, maxLights, precision, premultipliedAlpha, preserveDrawingBuffer, stencil);
  return t1;
};

$._IDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBRequestEventsImpl(_ptr);
};

$._IDBVersionChangeRequestEventsImpl$ = function(_ptr) {
  return new $._IDBVersionChangeRequestEventsImpl(_ptr);
};

$._PeerConnection00EventsImpl$ = function(_ptr) {
  return new $._PeerConnection00EventsImpl(_ptr);
};

$.ExtrudeGeometry___v4 = function() {
  var t1 = $.ExtrudeGeometry____v4;
  if (t1 == null) {
    t1 = $.Vector2$(0, 0);
    $.ExtrudeGeometry____v4 = t1;
  }
  return t1;
};

$.ExtrudeGeometry___v1 = function() {
  var t1 = $.ExtrudeGeometry____v1;
  if (t1 == null) {
    t1 = $.Vector2$(0, 0);
    $.ExtrudeGeometry____v1 = t1;
  }
  return t1;
};

$.ExtrudeGeometry$ = function(shapes, amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, frames$, material, steps) {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.add(t1, 1);
  t1 = new $.ExtrudeGeometry(shapes, null, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t1.ExtrudeGeometry$13$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$frames$$material$steps(shapes, amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, frames$, material, steps);
  return t1;
};

$.ExtrudeGeometry___v5 = function() {
  var t1 = $.ExtrudeGeometry____v5;
  if (t1 == null) {
    t1 = $.Vector2$(0, 0);
    $.ExtrudeGeometry____v5 = t1;
  }
  return t1;
};

$._DOMWindowCrossFrameImpl$ = function(_window) {
  return new $._DOMWindowCrossFrameImpl(_window);
};

$._DOMWindowCrossFrameImpl__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrameImpl$(w);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.ExtrudeGeometry___v2 = function() {
  var t1 = $.ExtrudeGeometry____v2;
  if (t1 == null) {
    t1 = $.Vector2$(0, 0);
    $.ExtrudeGeometry____v2 = t1;
  }
  return t1;
};

$.ExtrudeGeometry___v3 = function() {
  var t1 = $.ExtrudeGeometry____v3;
  if (t1 == null) {
    t1 = $.Vector2$(0, 0);
    $.ExtrudeGeometry____v3 = t1;
  }
  return t1;
};

$._IDBTransactionEventsImpl$ = function(_ptr) {
  return new $._IDBTransactionEventsImpl(_ptr);
};

$.ExtrudeGeometryWorldUVGenerator$ = function() {
  return new $.ExtrudeGeometryWorldUVGenerator();
};

$.Matrix4$ = function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  var t1 = new $.Matrix4($.Float32Array_Float32Array(16));
  t1.Matrix4$16(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
  return t1;
};

$._SpeechRecognitionEventsImpl$ = function(_ptr) {
  return new $._SpeechRecognitionEventsImpl(_ptr);
};

$.ExtrudeGeometry___v6 = function() {
  var t1 = $.ExtrudeGeometry____v6;
  if (t1 == null) {
    t1 = $.Vector2$(0, 0);
    $.ExtrudeGeometry____v6 = t1;
  }
  return t1;
};

$.Matrix4___v1 = function() {
  if ($.Matrix4____v1 == null)
    $.Matrix4____v1 = $.Vector3$(0, 0, 0);
  return $.Matrix4____v1;
};

$.Vector3$ = function(x, y, z) {
  return new $.Vector3(x, y, z);
};

$._IDBOpenDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBOpenDBRequestEventsImpl(_ptr);
};

$.Quaternion$ = function(x, y, z, w) {
  return new $.Quaternion(x, y, z, w);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.DirectionalLight$ = function(hex, intensity, distance) {
  var t1 = $.Color$(hex);
  var t2 = $.Object3DCount;
  $.Object3DCount = $.add(t2, 1);
  t2 = new $.DirectionalLight(null, null, intensity, distance, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t1, t2, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t2.DirectionalLight$3(hex, intensity, distance);
  return t2;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._MediaElementEventsImpl$ = function(_ptr) {
  return new $._MediaElementEventsImpl(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$.Color$ = function(hex) {
  var t1 = new $.Color(1, 1, 1);
  t1.Color$1(hex);
  return t1;
};

$._ElementEventsImpl$ = function(_ptr) {
  return new $._ElementEventsImpl(_ptr);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrameImpl__createSafe(win);
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._convertDartToNative_ImageData = function(imageData) {
  if (typeof imageData === 'object' && imageData !== null && imageData.is$_ImageDataImpl())
    return imageData;
  return {data: imageData.get$data(), height: imageData.get$height(), width: imageData.get$width()};
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._convertNativeToDart_IDBKey = function(nativeKey) {
  if (new $._convertNativeToDart_IDBKey_containsDate().call$1(nativeKey) === true)
    throw $.$$throw($.CTC10);
  return nativeKey;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object, false);
};

$._convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._convertNativeToDart_SerializedScriptValue = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values = [];
  var copies = [];
  var t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  var t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  var t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  var t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  var copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t2, t1).call$1(value);
  t4.call$0();
  return copy;
};

$._convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values = [];
  var copies = [];
  var t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies), mustCopy, new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), t1).call$1(object);
};

$._isJavaScriptSimpleObject = function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
};

$.Vector2$ = function(x, y) {
  return new $.Vector2(x, y);
};

$._MessageTraverser_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$._globalState = function() {
  return $globalState;
};

$.startRootIsolate = function(entry) {
  var t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  var rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $._fillStatics(rootContext);
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._fillStatics = function(context) {
  $globals = context.isolateStatics;
  $static_init();
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.Shape$ = function(points) {
  var t1 = new $.Shape([], false, null, [], [], [], false, null, null, null, false);
  t1.Path$1(points);
  return t1;
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.Path$ = function(points) {
  var t1 = new $.Path(false, null, [], [], [], false, null, null, null, false);
  t1.Path$1(points);
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.CurvePath$ = function() {
  return new $.CurvePath([], [], false, null, null, null, false);
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.atan2 = function(a, b) {
  return Math.atan2($.checkNum(a), $.checkNum(b));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.acos = function(x) {
  return Math.acos($.checkNum(x));
};

$.tan = function(x) {
  return Math.tan($.checkNum(x));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.asin = function(x) {
  return Math.asin($.checkNum(x));
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.get$isNegative(b) === true || $.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$._NotificationEventsImpl$ = function(_ptr) {
  return new $._NotificationEventsImpl(_ptr);
};

$.SplineCurve$ = function(points) {
  var t1 = new $.SplineCurve(points, null, null, false);
  t1.SplineCurve$1(points);
  return t1;
};

$._IDBDatabaseEventsImpl$ = function(_ptr) {
  return new $._IDBDatabaseEventsImpl(_ptr);
};

$.PathAction$ = function(action, args) {
  return new $.PathAction(action, args);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$._SharedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._SharedWorkerContextEventsImpl(_ptr);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0);
  var completer = $.Completer_Completer();
  var result = completer.get$future();
  t1.remaining_1 = futures.length;
  var values = $.ListImplementation_List(futures.length);
  for (var i = 0; i < futures.length; ++i) {
    var future = futures[i];
    future.then$1(new $.Futures_wait_anon(i, result, completer, t1, values));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$.CubicBezierCurve$ = function(v0, v1, v2, v3) {
  return new $.CubicBezierCurve(v0, v1, v2, v3, null, null, false);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.Random_Random = function(seed) {
  return $.CTC12;
};

$._HttpRequestUploadEventsImpl$ = function(_ptr) {
  return new $._HttpRequestUploadEventsImpl(_ptr);
};

$.LineCurve3$ = function(v1, v2) {
  return new $.LineCurve3(v1, v2, null, null, false);
};

$.EllipseCurve$ = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise) {
  return new $.EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, null, null, false);
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.LineCurve$ = function(v1, v2) {
  return new $.LineCurve(v1, v2, null, null, false);
};

$.QuadraticBezierCurve$ = function(v0, v1, v2) {
  return new $.QuadraticBezierCurve(v0, v1, v2, null, null, false);
};

$.SplineCurve3$ = function(points) {
  var t1 = new $.SplineCurve3(points, null, null, false);
  t1.SplineCurve3$1(points);
  return t1;
};

$._FixedSizeListIterator$ = function(array) {
  return new $._FixedSizeListIterator($.get$length(array), array, 0);
};

$._HttpRequestEventsImpl$ = function(_ptr) {
  return new $._HttpRequestEventsImpl(_ptr);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.TubeGeometry$ = function(path, segments, radius, segmentsRadius, closed$, debug) {
  var t1 = [];
  var t2 = $.GeometryCount;
  $.GeometryCount = $.add(t2, 1);
  t2 = new $.TubeGeometry(null, null, null, radius, segmentsRadius, null, t1, null, null, null, null, t2, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t2.TubeGeometry$6(path, segments, radius, segmentsRadius, closed$, debug);
  return t2;
};

$.TubeGeometry$FrenetFrames = function(path, segments, closed$) {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.add(t1, 1);
  t1 = new $.TubeGeometry(null, null, null, null, null, null, null, null, null, null, null, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t1.TubeGeometry$FrenetFrames$3(path, segments, closed$);
  return t1;
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.Geometry$ = function() {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.add(t1, 1);
  return new $.Geometry(t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.BoundingSphere$ = function(radius) {
  return new $.BoundingSphere(radius);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.ShaderChunk = function() {
  if ($.__ShaderChunk == null)
    $.__ShaderChunk = $.makeLiteralMap(['fog_pars_fragment', $.Strings_join(['#ifdef USE_FOG', 'uniform vec3 fogColor;', '#ifdef FOG_EXP2', 'uniform float fogDensity;', '#else', 'uniform float fogNear;', 'uniform float fogFar;', '#endif', '#endif'], '\n'), 'fog_fragment', $.Strings_join(['#ifdef USE_FOG', 'float depth = gl_FragCoord.z / gl_FragCoord.w;', '#ifdef FOG_EXP2', 'const float LOG2 = 1.442695;', 'float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );', 'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );', '#else', 'float fogFactor = smoothstep( fogNear, fogFar, depth );', '#endif', 'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );', '#endif'], '\n'), 'envmap_pars_fragment', $.Strings_join(['#ifdef USE_ENVMAP', 'uniform float reflectivity;', 'uniform samplerCube envMap;', 'uniform float flipEnvMap;', 'uniform int combine;', '#ifdef USE_BUMPMAP', 'uniform bool useRefract;', 'uniform float refractionRatio;', '#else', 'varying vec3 vReflect;', '#endif', '#endif'], '\n'), 'envmap_fragment', $.Strings_join(['#ifdef USE_ENVMAP', 'vec3 reflectVec;', '#ifdef USE_BUMPMAP', 'vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );', 'if ( useRefract ) {', 'reflectVec = refract( cameraToVertex, normal, refractionRatio );', '} else { ', 'reflectVec = reflect( cameraToVertex, normal );', '}', '#else', 'reflectVec = vReflect;', '#endif', '#ifdef DOUBLE_SIDED', 'float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );', 'vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );', '#else', 'vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );', '#endif', '#ifdef GAMMA_INPUT', 'cubeColor.xyz *= cubeColor.xyz;', '#endif', 'if ( combine == 1 ) {', 'gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );', '} else {', 'gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );', '}', '#endif'], '\n'), 'envmap_pars_vertex', $.Strings_join(['#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP )', 'varying vec3 vReflect;', 'uniform float refractionRatio;', 'uniform bool useRefract;', '#endif'], '\n'), 'envmap_vertex', $.Strings_join(['#ifdef USE_ENVMAP', 'vec4 mPosition = modelMatrix * vec4( position, 1.0 );', '#endif', '#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP )', 'vec3 nWorld = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * normal;', 'if ( useRefract ) {', 'vReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );', '} else {', 'vReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );', '}', '#endif'], '\n'), 'map_particle_pars_fragment', $.Strings_join(['#ifdef USE_MAP', 'uniform sampler2D map;', '#endif'], '\n'), 'map_particle_fragment', $.Strings_join(['#ifdef USE_MAP', 'gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );', '#endif'], '\n'), 'map_pars_vertex', $.Strings_join(['#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )', 'varying vec2 vUv;', 'uniform vec4 offsetRepeat;', '#endif'], '\n'), 'map_pars_fragment', $.Strings_join(['#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )', 'varying vec2 vUv;', '#endif', '#ifdef USE_MAP', 'uniform sampler2D map;', '#endif'], '\n'), 'map_vertex', $.Strings_join(['#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )', 'vUv = uv * offsetRepeat.zw + offsetRepeat.xy;', '#endif'], '\n'), 'map_fragment', $.Strings_join(['#ifdef USE_MAP', '#ifdef GAMMA_INPUT', 'vec4 texelColor = texture2D( map, vUv );', 'texelColor.xyz *= texelColor.xyz;', 'gl_FragColor = gl_FragColor * texelColor;', '#else', 'gl_FragColor = gl_FragColor * texture2D( map, vUv );', '#endif', '#endif'], '\n'), 'lightmap_pars_fragment', $.Strings_join(['#ifdef USE_LIGHTMAP', 'varying vec2 vUv2;', 'uniform sampler2D lightMap;', '#endif'], '\n'), 'lightmap_pars_vertex', $.Strings_join(['#ifdef USE_LIGHTMAP', 'varying vec2 vUv2;', '#endif'], '\n'), 'lightmap_fragment', $.Strings_join(['#ifdef USE_LIGHTMAP', 'gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );', '#endif'], '\n'), 'lightmap_vertex', $.Strings_join(['#ifdef USE_LIGHTMAP', 'vUv2 = uv2;', '#endif'], '\n'), 'bumpmap_pars_fragment', $.Strings_join(['#ifdef USE_BUMPMAP', 'uniform sampler2D bumpMap;', 'uniform float bumpScale;', 'vec2 dHdxy_fwd() {', 'vec2 dSTdx = dFdx( vUv );', 'vec2 dSTdy = dFdy( vUv );', 'float Hll = bumpScale * texture2D( bumpMap, vUv ).x;', 'float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;', 'float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;', 'return vec2( dBx, dBy );', '}', 'vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {', 'vec3 vSigmaX = dFdx( surf_pos );', 'vec3 vSigmaY = dFdy( surf_pos );', 'vec3 vN = surf_norm;', 'vec3 R1 = cross( vSigmaY, vN );', 'vec3 R2 = cross( vN, vSigmaX );', 'float fDet = dot( vSigmaX, R1 );', 'vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );', 'return normalize( abs( fDet ) * surf_norm - vGrad );', '}', '#endif'], '\n'), 'specularmap_pars_fragment', $.Strings_join(['#ifdef USE_SPECULARMAP', 'uniform sampler2D specularMap;', '#endif'], '\n'), 'specularmap_fragment', $.Strings_join(['float specularStrength;', '#ifdef USE_SPECULARMAP', 'vec4 texelSpecular = texture2D( specularMap, vUv );', 'specularStrength = texelSpecular.r;', '#else', 'specularStrength = 1.0;', '#endif'], '\n'), 'lights_lambert_pars_vertex', $.Strings_join(['uniform vec3 ambient;', 'uniform vec3 diffuse;', 'uniform vec3 emissive;', 'uniform vec3 ambientLightColor;', '#if MAX_DIR_LIGHTS > 0', 'uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];', 'uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];', '#endif', '#if MAX_POINT_LIGHTS > 0', 'uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];', 'uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];', 'uniform float pointLightDistance[ MAX_POINT_LIGHTS ];', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightAngle[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];', '#endif', '#ifdef WRAP_AROUND', 'uniform vec3 wrapRGB;', '#endif'], '\n'), 'lights_lambert_vertex', $.Strings_join(['vLightFront = vec3( 0.0 );', '#ifdef DOUBLE_SIDED', 'vLightBack = vec3( 0.0 );', '#endif', 'transformedNormal = normalize( transformedNormal );', '#if MAX_DIR_LIGHTS > 0', 'for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {', 'vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );', 'vec3 dirVector = normalize( lDirection.xyz );', 'float dotProduct = dot( transformedNormal, dirVector );', 'vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );', '#ifdef DOUBLE_SIDED', 'vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );', '#ifdef WRAP_AROUND', 'vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );', '#endif', '#endif', '#ifdef WRAP_AROUND', 'vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );', 'directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );', '#ifdef DOUBLE_SIDED', 'directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );', '#endif', '#endif', 'vLightFront += directionalLightColor[ i ] * directionalLightWeighting;', '#ifdef DOUBLE_SIDED', 'vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;', '#endif', '}', '#endif', '#if MAX_POINT_LIGHTS > 0', 'for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'float lDistance = 1.0;', 'if ( pointLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );', 'lVector = normalize( lVector );', 'float dotProduct = dot( transformedNormal, lVector );', 'vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );', '#ifdef DOUBLE_SIDED', 'vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );', '#ifdef WRAP_AROUND', 'vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );', '#endif', '#endif', '#ifdef WRAP_AROUND', 'vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );', 'pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );', '#ifdef DOUBLE_SIDED', 'pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );', '#endif', '#endif', 'vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;', '#ifdef DOUBLE_SIDED', 'vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;', '#endif', '}', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'lVector = normalize( lVector );', 'float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - mPosition.xyz ) );', 'if ( spotEffect > spotLightAngle[ i ] ) {', 'spotEffect = pow( spotEffect, spotLightExponent[ i ] );', 'float lDistance = 1.0;', 'if ( spotLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );', 'float dotProduct = dot( transformedNormal, lVector );', 'vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );', '#ifdef DOUBLE_SIDED', 'vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );', '#ifdef WRAP_AROUND', 'vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );', '#endif', '#endif', '#ifdef WRAP_AROUND', 'vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );', 'spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );', '#ifdef DOUBLE_SIDED', 'spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );', '#endif', '#endif', 'vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;', '#ifdef DOUBLE_SIDED', 'vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;', '#endif', '}', '}', '#endif', 'vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;', '#ifdef DOUBLE_SIDED', 'vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;', '#endif'], '\n'), 'lights_phong_pars_vertex', $.Strings_join(['#ifndef PHONG_PER_PIXEL', '#if MAX_POINT_LIGHTS > 0', 'uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];', 'uniform float pointLightDistance[ MAX_POINT_LIGHTS ];', 'varying vec4 vPointLight[ MAX_POINT_LIGHTS ];', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];', 'varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )', 'varying vec3 vWorldPosition;', '#endif'], '\n'), 'lights_phong_vertex', $.Strings_join(['#ifndef PHONG_PER_PIXEL', '#if MAX_POINT_LIGHTS > 0', 'for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'float lDistance = 1.0;', 'if ( pointLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );', 'vPointLight[ i ] = vec4( lVector, lDistance );', '}', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'float lDistance = 1.0;', 'if ( spotLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );', 'vSpotLight[ i ] = vec4( lVector, lDistance );', '}', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )', 'vWorldPosition = mPosition.xyz;', '#endif'], '\n'), 'lights_phong_pars_fragment', $.Strings_join(['uniform vec3 ambientLightColor;', '#if MAX_DIR_LIGHTS > 0', 'uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];', 'uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];', '#endif', '#if MAX_POINT_LIGHTS > 0', 'uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];', '#ifdef PHONG_PER_PIXEL', 'uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];', 'uniform float pointLightDistance[ MAX_POINT_LIGHTS ];', '#else', 'varying vec4 vPointLight[ MAX_POINT_LIGHTS ];', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightAngle[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];', '#ifdef PHONG_PER_PIXEL', 'uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];', '#else', 'varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )', 'varying vec3 vWorldPosition;', '#endif', '#ifdef WRAP_AROUND', 'uniform vec3 wrapRGB;', '#endif', 'varying vec3 vViewPosition;', 'varying vec3 vNormal;'], '\n'), 'lights_phong_fragment', $.Strings_join(['vec3 normal = normalize( vNormal );', 'vec3 viewPosition = normalize( vViewPosition );', '#ifdef DOUBLE_SIDED', 'normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );', '#endif', '#ifdef USE_BUMPMAP', 'normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );', '#endif', '#if MAX_POINT_LIGHTS > 0', 'vec3 pointDiffuse  = vec3( 0.0 );', 'vec3 pointSpecular = vec3( 0.0 );', 'for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {', '#ifdef PHONG_PER_PIXEL', 'vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz + vViewPosition.xyz;', 'float lDistance = 1.0;', 'if ( pointLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );', 'lVector = normalize( lVector );', '#else', 'vec3 lVector = normalize( vPointLight[ i ].xyz );', 'float lDistance = vPointLight[ i ].w;', '#endif', 'float dotProduct = dot( normal, lVector );', '#ifdef WRAP_AROUND', 'float pointDiffuseWeightFull = max( dotProduct, 0.0 );', 'float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );', 'vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );', '#else', 'float pointDiffuseWeight = max( dotProduct, 0.0 );', '#endif', 'pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;', 'vec3 pointHalfVector = normalize( lVector + viewPosition );', 'float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );', 'float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );', '#ifdef PHYSICALLY_BASED_SHADING', 'float specularNormalization = ( shininess + 2.0001 ) / 8.0;', 'vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );', 'pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;', '#else', 'pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;', '#endif', '}', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'vec3 spotDiffuse  = vec3( 0.0 );', 'vec3 spotSpecular = vec3( 0.0 );', 'for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {', '#ifdef PHONG_PER_PIXEL', 'vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz + vViewPosition.xyz;', 'float lDistance = 1.0;', 'if ( spotLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );', 'lVector = normalize( lVector );', '#else', 'vec3 lVector = normalize( vSpotLight[ i ].xyz );', 'float lDistance = vSpotLight[ i ].w;', '#endif', 'float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );', 'if ( spotEffect > spotLightAngle[ i ] ) {', 'spotEffect = pow( spotEffect, spotLightExponent[ i ] );', 'float dotProduct = dot( normal, lVector );', '#ifdef WRAP_AROUND', 'float spotDiffuseWeightFull = max( dotProduct, 0.0 );', 'float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );', 'vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );', '#else', 'float spotDiffuseWeight = max( dotProduct, 0.0 );', '#endif', 'spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;', 'vec3 spotHalfVector = normalize( lVector + viewPosition );', 'float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );', 'float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );', '#ifdef PHYSICALLY_BASED_SHADING', 'float specularNormalization = ( shininess + 2.0001 ) / 8.0;', 'vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );', 'spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;', '#else', 'spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;', '#endif', '}', '}', '#endif', '#if MAX_DIR_LIGHTS > 0', 'vec3 dirDiffuse  = vec3( 0.0 );', 'vec3 dirSpecular = vec3( 0.0 );', 'for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {', 'vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );', 'vec3 dirVector = normalize( lDirection.xyz );', 'float dotProduct = dot( normal, dirVector );', '#ifdef WRAP_AROUND', 'float dirDiffuseWeightFull = max( dotProduct, 0.0 );', 'float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );', 'vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );', '#else', 'float dirDiffuseWeight = max( dotProduct, 0.0 );', '#endif', 'dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;', 'vec3 dirHalfVector = normalize( dirVector + viewPosition );', 'float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );', 'float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );', '#ifdef PHYSICALLY_BASED_SHADING', 'float specularNormalization = ( shininess + 2.0001 ) / 8.0;', 'vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );', 'dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;', '#else', 'dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;', '#endif', '}', '#endif', 'vec3 totalDiffuse = vec3( 0.0 );', 'vec3 totalSpecular = vec3( 0.0 );', '#if MAX_DIR_LIGHTS > 0', 'totalDiffuse += dirDiffuse;', 'totalSpecular += dirSpecular;', '#endif', '#if MAX_POINT_LIGHTS > 0', 'totalDiffuse += pointDiffuse;', 'totalSpecular += pointSpecular;', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'totalDiffuse += spotDiffuse;', 'totalSpecular += spotSpecular;', '#endif', '#ifdef METAL', 'gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );', '#else', 'gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;', '#endif'], '\n'), 'color_pars_fragment', $.Strings_join(['#ifdef USE_COLOR', 'varying vec3 vColor;', '#endif'], '\n'), 'color_fragment', $.Strings_join(['#ifdef USE_COLOR', 'gl_FragColor = gl_FragColor * vec4( vColor, opacity );', '#endif'], '\n'), 'color_pars_vertex', $.Strings_join(['#ifdef USE_COLOR', 'varying vec3 vColor;', '#endif'], '\n'), 'color_vertex', $.Strings_join(['#ifdef USE_COLOR', '#ifdef GAMMA_INPUT', 'vColor = color * color;', '#else', 'vColor = color;', '#endif', '#endif'], '\n'), 'skinning_pars_vertex', $.Strings_join(['#ifdef USE_SKINNING', '#ifdef BONE_TEXTURE', 'uniform sampler2D boneTexture;', 'mat4 getBoneMatrix( const in float i ) {', 'float j = i * 4.0;', 'float x = mod( j, N_BONE_PIXEL_X );', 'float y = floor( j / N_BONE_PIXEL_X );', 'const float dx = 1.0 / N_BONE_PIXEL_X;', 'const float dy = 1.0 / N_BONE_PIXEL_Y;', 'y = dy * ( y + 0.5 );', 'vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );', 'vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );', 'vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );', 'vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );', 'mat4 bone = mat4( v1, v2, v3, v4 );', 'return bone;', '}', '#else', 'uniform mat4 boneGlobalMatrices[ MAX_BONES ];', 'mat4 getBoneMatrix( const in float i ) {', 'mat4 bone = boneGlobalMatrices[ int(i) ];', 'return bone;', '}', '#endif', '#endif'], '\n'), 'skinbase_vertex', $.Strings_join(['#ifdef USE_SKINNING', 'mat4 boneMatX = getBoneMatrix( skinIndex.x );', 'mat4 boneMatY = getBoneMatrix( skinIndex.y );', '#endif'], '\n'), 'skinning_vertex', $.Strings_join(['#ifdef USE_SKINNING', 'vec4 skinned  = boneMatX * skinVertexA * skinWeight.x;', 'skinned    += boneMatY * skinVertexB * skinWeight.y;', 'gl_Position  = projectionMatrix * modelViewMatrix * skinned;', '#endif'], '\n'), 'morphtarget_pars_vertex', $.Strings_join(['#ifdef USE_MORPHTARGETS', '#ifndef USE_MORPHNORMALS', 'uniform float morphTargetInfluences[ 8 ];', '#else', 'uniform float morphTargetInfluences[ 4 ];', '#endif', '#endif'], '\n'), 'morphtarget_vertex', $.Strings_join(['#ifdef USE_MORPHTARGETS', 'vec3 morphed = vec3( 0.0 );', 'morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];', 'morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];', 'morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];', 'morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];', '#ifndef USE_MORPHNORMALS', 'morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];', 'morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];', 'morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];', 'morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];', '#endif', 'morphed += position;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );', '#endif'], '\n'), 'default_vertex', $.Strings_join(['#ifndef USE_MORPHTARGETS', '#ifndef USE_SKINNING', 'gl_Position = projectionMatrix * mvPosition;', '#endif', '#endif'], '\n'), 'morphnormal_vertex', $.Strings_join(['#ifdef USE_MORPHNORMALS', 'vec3 morphedNormal = vec3( 0.0 );', 'morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];', 'morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];', 'morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];', 'morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];', 'morphedNormal += normal;', '#endif'], '\n'), 'skinnormal_vertex', $.Strings_join(['#ifdef USE_SKINNING', 'mat4 skinMatrix = skinWeight.x * boneMatX;', 'skinMatrix   += skinWeight.y * boneMatY;', 'vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );', '#endif'], '\n'), 'defaultnormal_vertex', $.Strings_join(['vec3 transformedNormal;', '#ifdef USE_SKINNING', 'transformedNormal = skinnedNormal.xyz;', '#endif', '#ifdef USE_MORPHNORMALS', 'transformedNormal = morphedNormal;', '#endif', '#ifndef USE_MORPHNORMALS', '#ifndef USE_SKINNING', 'transformedNormal = normal;', '#endif', '#endif', 'transformedNormal = normalMatrix * transformedNormal;'], '\n'), 'shadowmap_pars_fragment', $.Strings_join(['#ifdef USE_SHADOWMAP', 'uniform sampler2D shadowMap[ MAX_SHADOWS ];', 'uniform vec2 shadowMapSize[ MAX_SHADOWS ];', 'uniform float shadowDarkness[ MAX_SHADOWS ];', 'uniform float shadowBias[ MAX_SHADOWS ];', 'varying vec4 vShadowCoord[ MAX_SHADOWS ];', 'float unpackDepth( const in vec4 rgba_depth ) {', 'const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );', 'float depth = dot( rgba_depth, bit_shift );', 'return depth;', '}', '#endif'], '\n'), 'shadowmap_fragment', $.Strings_join(['#ifdef USE_SHADOWMAP', '#ifdef SHADOWMAP_DEBUG', 'vec3 frustumColors[3];', 'frustumColors[0] = vec3( 1.0, 0.5, 0.0 );', 'frustumColors[1] = vec3( 0.0, 1.0, 0.8 );', 'frustumColors[2] = vec3( 0.0, 0.5, 1.0 );', '#endif', '#ifdef SHADOWMAP_CASCADE', 'int inFrustumCount = 0;', '#endif', 'float fDepth;', 'vec3 shadowColor = vec3( 1.0 );', 'for( int i = 0; i < MAX_SHADOWS; i ++ ) {', 'vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;', 'bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );', 'bool inFrustum = all( inFrustumVec );', '#ifdef SHADOWMAP_CASCADE', 'inFrustumCount += int( inFrustum );', 'bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );', '#else', 'bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );', '#endif', 'bool frustumTest = all( frustumTestVec );', 'if ( frustumTest ) {', 'shadowCoord.z += shadowBias[ i ];', '#ifdef SHADOWMAP_SOFT', 'float shadow = 0.0;', 'const float shadowDelta = 1.0 / 9.0;', 'float xPixelOffset = 1.0 / shadowMapSize[ i ].x;', 'float yPixelOffset = 1.0 / shadowMapSize[ i ].y;', 'float dx0 = -1.25 * xPixelOffset;', 'float dy0 = -1.25 * yPixelOffset;', 'float dx1 = 1.25 * xPixelOffset;', 'float dy1 = 1.25 * yPixelOffset;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );', '#else', 'vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );', 'float fDepth = unpackDepth( rgbaDepth );', 'if ( fDepth < shadowCoord.z )', 'shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );', '#endif', '}', '#ifdef SHADOWMAP_DEBUG', '#ifdef SHADOWMAP_CASCADE', 'if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];', '#else', 'if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];', '#endif', '#endif', '}', '#ifdef GAMMA_OUTPUT', 'shadowColor *= shadowColor;', '#endif', 'gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;', '#endif'], '\n'), 'shadowmap_pars_vertex', $.Strings_join(['#ifdef USE_SHADOWMAP', 'varying vec4 vShadowCoord[ MAX_SHADOWS ];', 'uniform mat4 shadowMatrix[ MAX_SHADOWS ];', '#endif'], '\n'), 'shadowmap_vertex', $.Strings_join(['#ifdef USE_SHADOWMAP', 'vec4 transformedPosition;', '#ifdef USE_MORPHTARGETS', 'transformedPosition = modelMatrix * vec4( morphed, 1.0 );', '#else', '#ifdef USE_SKINNING', 'transformedPosition = modelMatrix * skinned;', '#else', 'transformedPosition = modelMatrix * vec4( position, 1.0 );', '#endif', '#endif', 'for( int i = 0; i < MAX_SHADOWS; i ++ ) {', 'vShadowCoord[ i ] = shadowMatrix[ i ] * transformedPosition;', '}', '#endif'], '\n'), 'alphatest_fragment', $.Strings_join(['#ifdef ALPHATEST', 'if ( gl_FragColor.a < ALPHATEST ) discard;', '#endif'], '\n'), 'linear_to_gamma_fragment', $.Strings_join(['#ifdef GAMMA_OUTPUT', 'gl_FragColor.xyz = sqrt( gl_FragColor.xyz );', '#endif'], '\n')]);
  return $.__ShaderChunk;
};

$.UniformsLib = function() {
  if ($.__UniformsLib == null)
    $.__UniformsLib = $.makeLiteralMap(['common', $.makeLiteralMap(['diffuse', $.Uniform$(null, 'c', $.Color$(15658734)), 'opacity', $.Uniform$(null, 'f', 1), 'map', $.Uniform$(null, 't', 0), 'offsetRepeat', $.Uniform$(null, 'v4', $.Vector4$(0, 0, 1, 1)), 'lightMap', $.Uniform$(null, 't', 2), 'specularMap', $.Uniform$(null, 't', 3), 'envMap', $.Uniform$(null, 't', 1), 'flipEnvMap', $.Uniform$(null, 'f', -1), 'useRefract', $.Uniform$(null, 'i', 0), 'reflectivity', $.Uniform$(null, 'f', 1), 'refractionRatio', $.Uniform$(null, 'f', 0.98), 'combine', $.Uniform$(null, 'i', 0), 'morphTargetInfluences', $.Uniform$(null, 'f', 0)]), 'bump', $.makeLiteralMap(['bumpMap', $.Uniform$(null, 't', 4), 'bumpScale', $.Uniform$(null, 'f', 1)]), 'fog', $.makeLiteralMap(['fogDensity', $.Uniform$(null, 'f', 0.00025), 'fogNear', $.Uniform$(null, 'f', 1), 'fogFar', $.Uniform$(null, 'f', 2000), 'fogColor', $.Uniform$(null, 'c', $.Color$(16777215))]), 'lights', $.makeLiteralMap(['ambientLightColor', $.Uniform$(null, 'fv', []), 'directionalLightDirection', $.Uniform$(null, 'fv', []), 'directionalLightColor', $.Uniform$(null, 'fv', []), 'pointLightColor', $.Uniform$(null, 'fv', []), 'pointLightPosition', $.Uniform$(null, 'fv', []), 'pointLightDistance', $.Uniform$(null, 'fv1', []), 'spotLightColor', $.Uniform$(null, 'fv', []), 'spotLightPosition', $.Uniform$(null, 'fv', []), 'spotLightDirection', $.Uniform$(null, 'fv', []), 'spotLightDistance', $.Uniform$(null, 'fv1', []), 'spotLightAngle', $.Uniform$(null, 'fv1', []), 'spotLightExponent', $.Uniform$(null, 'fv1', [])]), 'particle', $.makeLiteralMap(['psColor', $.Uniform$(null, 'c', $.Color$(15658734)), 'opacity', $.Uniform$(null, 'f', 1), 'size', $.Uniform$(null, 'f', 1), 'scale', $.Uniform$(null, 'f', 1), 'map', $.Uniform$(null, 't', 0), 'fogDensity', $.Uniform$(null, 'f', 0.00025), 'fogNear', $.Uniform$(null, 'f', 1), 'fogFar', $.Uniform$(null, 'f', 2000), 'fogColor', $.Uniform$(null, 'c', $.Color$(16777215))]), 'shadowmap', $.makeLiteralMap(['shadowMap', $.Uniform$([], 'tv', 6), 'shadowMapSize', $.Uniform$(null, 'v2v', []), 'shadowBias', $.Uniform$(null, 'fv1', []), 'shadowDarkness', $.Uniform$(null, 'fv1', []), 'shadowMatrix', $.Uniform$(null, 'm4v', [])])]);
  return $.__UniformsLib;
};

$.ShaderLib = function() {
  if ($.__ShaderLib == null)
    $.__ShaderLib = $.makeLiteralMap(['depth', $.makeLiteralMap(['uniforms', $.makeLiteralMap(['mNear', $.Uniform$(null, 'f', 1), 'mFar', $.Uniform$(null, 'f', 2000), 'opacity', $.Uniform$(null, 'f', 1)]), 'vertexShader', $.Strings_join(['void main() {', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform float mNear;', 'uniform float mFar;', 'uniform float opacity;', 'void main() {', 'float depth = gl_FragCoord.z / gl_FragCoord.w;', 'float color = 1.0 - smoothstep( mNear, mFar, depth );', 'gl_FragColor = vec4( vec3( color ), opacity );', '}'], '\n')]), 'normal', $.makeLiteralMap(['uniforms', $.makeLiteralMap(['opacity', $.Uniform$(null, 'f', 1)]), 'vertexShader', $.Strings_join(['varying vec3 vNormal;', 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', 'vNormal = normalMatrix * normal;', 'gl_Position = projectionMatrix * mvPosition;', '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform float opacity;', 'varying vec3 vNormal;', 'void main() {', 'gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );', '}'], '\n')]), 'basic', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'common'), $.index($.UniformsLib(), 'fog'), $.index($.UniformsLib(), 'shadowmap')]), 'vertexShader', $.Strings_join([$.index($.ShaderChunk(), 'map_pars_vertex'), $.index($.ShaderChunk(), 'lightmap_pars_vertex'), $.index($.ShaderChunk(), 'envmap_pars_vertex'), $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'map_vertex'), $.index($.ShaderChunk(), 'lightmap_vertex'), $.index($.ShaderChunk(), 'envmap_vertex'), $.index($.ShaderChunk(), 'color_vertex'), $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform vec3 diffuse;', 'uniform float opacity;', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_pars_fragment'), $.index($.ShaderChunk(), 'lightmap_pars_fragment'), $.index($.ShaderChunk(), 'envmap_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), $.index($.ShaderChunk(), 'specularmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( diffuse, opacity );', $.index($.ShaderChunk(), 'map_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'specularmap_fragment'), $.index($.ShaderChunk(), 'lightmap_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'envmap_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'linear_to_gamma_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'lambert', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'common'), $.index($.UniformsLib(), 'fog'), $.index($.UniformsLib(), 'lights'), $.index($.UniformsLib(), 'shadowmap'), $.makeLiteralMap(['ambient', $.Uniform$(null, 'c', $.Color$(16777215)), 'emissive', $.Uniform$(null, 'c', $.Color$(0)), 'wrapRGB', $.Uniform$(null, 'v3', $.Vector3$(1, 1, 1))])]), 'vertexShader', $.Strings_join(['varying vec3 vLightFront;', '#ifdef DOUBLE_SIDED', 'varying vec3 vLightBack;', '#endif', $.index($.ShaderChunk(), 'map_pars_vertex'), $.index($.ShaderChunk(), 'lightmap_pars_vertex'), $.index($.ShaderChunk(), 'envmap_pars_vertex'), $.index($.ShaderChunk(), 'lights_lambert_pars_vertex'), $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'map_vertex'), $.index($.ShaderChunk(), 'lightmap_vertex'), $.index($.ShaderChunk(), 'envmap_vertex'), $.index($.ShaderChunk(), 'color_vertex'), $.index($.ShaderChunk(), 'morphnormal_vertex'), $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinnormal_vertex'), $.index($.ShaderChunk(), 'defaultnormal_vertex'), '#ifndef USE_ENVMAP', 'vec4 mPosition = modelMatrix * vec4( position, 1.0 );', '#endif', $.index($.ShaderChunk(), 'lights_lambert_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform float opacity;', 'varying vec3 vLightFront;', '#ifdef DOUBLE_SIDED', 'varying vec3 vLightBack;', '#endif', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_pars_fragment'), $.index($.ShaderChunk(), 'lightmap_pars_fragment'), $.index($.ShaderChunk(), 'envmap_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), $.index($.ShaderChunk(), 'specularmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( vec3 ( 1.0 ), opacity );', $.index($.ShaderChunk(), 'map_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'specularmap_fragment'), '#ifdef DOUBLE_SIDED', 'if ( gl_FrontFacing )', 'gl_FragColor.xyz *= vLightFront;', 'else', 'gl_FragColor.xyz *= vLightBack;', '#else', 'gl_FragColor.xyz *= vLightFront;', '#endif', $.index($.ShaderChunk(), 'lightmap_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'envmap_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'linear_to_gamma_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'phong', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'common'), $.index($.UniformsLib(), 'bump'), $.index($.UniformsLib(), 'fog'), $.index($.UniformsLib(), 'lights'), $.index($.UniformsLib(), 'shadowmap'), $.makeLiteralMap(['ambient', $.Uniform$(null, 'c', $.Color$(16777215)), 'emissive', $.Uniform$(null, 'c', $.Color$(0)), 'specular', $.Uniform$(null, 'c', $.Color$(1118481)), 'shininess', $.Uniform$(null, 'f', 30), 'wrapRGB', $.Uniform$(null, 'v3', $.Vector3$(1, 1, 1))])]), 'vertexShader', $.Strings_join(['varying vec3 vViewPosition;', 'varying vec3 vNormal;', $.index($.ShaderChunk(), 'map_pars_vertex'), $.index($.ShaderChunk(), 'lightmap_pars_vertex'), $.index($.ShaderChunk(), 'envmap_pars_vertex'), $.index($.ShaderChunk(), 'lights_phong_pars_vertex'), $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'map_vertex'), $.index($.ShaderChunk(), 'lightmap_vertex'), $.index($.ShaderChunk(), 'envmap_vertex'), $.index($.ShaderChunk(), 'color_vertex'), '#ifndef USE_ENVMAP', 'vec4 mPosition = modelMatrix * vec4( position, 1.0 );', '#endif', 'vViewPosition = -mvPosition.xyz;', $.index($.ShaderChunk(), 'morphnormal_vertex'), $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinnormal_vertex'), $.index($.ShaderChunk(), 'defaultnormal_vertex'), 'vNormal = transformedNormal;', $.index($.ShaderChunk(), 'lights_phong_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform vec3 diffuse;', 'uniform float opacity;', 'uniform vec3 ambient;', 'uniform vec3 emissive;', 'uniform vec3 specular;', 'uniform float shininess;', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_pars_fragment'), $.index($.ShaderChunk(), 'lightmap_pars_fragment'), $.index($.ShaderChunk(), 'envmap_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'lights_phong_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), $.index($.ShaderChunk(), 'bumpmap_pars_fragment'), $.index($.ShaderChunk(), 'specularmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( vec3 ( 1.0 ), opacity );', $.index($.ShaderChunk(), 'map_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'specularmap_fragment'), $.index($.ShaderChunk(), 'lights_phong_fragment'), $.index($.ShaderChunk(), 'lightmap_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'envmap_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'linear_to_gamma_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'particle_basic', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'particle'), $.index($.UniformsLib(), 'shadowmap')]), 'vertexShader', $.Strings_join(['uniform float size;', 'uniform float scale;', $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', $.index($.ShaderChunk(), 'color_vertex'), 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '#ifdef USE_SIZEATTENUATION', 'gl_PointSize = size * ( scale / length( mvPosition.xyz ) );', '#else', 'gl_PointSize = size;', '#endif', 'gl_Position = projectionMatrix * mvPosition;', $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform vec3 psColor;', 'uniform float opacity;', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_particle_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( psColor, opacity );', $.index($.ShaderChunk(), 'map_particle_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'depthRGBA', $.makeLiteralMap(['uniforms', $.makeLiteralMap([]), 'vertexShader', $.Strings_join([$.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['vec4 pack_depth( const in float depth ) {', 'const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );', 'const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );', 'vec4 res = fract( depth * bit_shift );', 'res -= res.xxyz * bit_mask;', 'return res;', '}', 'void main() {', 'gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );', '}'], '\n')])]);
  return $.__ShaderLib;
};

$.WebGLRendererInfo$ = function() {
  var t1 = new $.WebGLRendererInfo(null, null);
  t1.WebGLRendererInfo$0();
  return t1;
};

$.Frustum$ = function() {
  return new $.Frustum([$.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1)]);
};

$.Vector4$ = function(x, y, z, w) {
  return new $.Vector4(x, y, z, w);
};

$._Deserializer_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.createMultiMaterialObject = function(geometry, materials) {
  var group = $.Object3D$();
  $.forEach(materials, new $.createMultiMaterialObject_anon(group, geometry));
  return group;
};

$.NoSuchMethodError$ = function(_receiver, _functionName, _arguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _functionName, _arguments, existingArgumentNames);
};

$.NoSuchMethodError_safeToString = function(object) {
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string')
    return '"' + $.S($.replaceAll($.replaceAll($.replaceAll($.replaceAll(object, '\\', '\\\\'), '\n', '\\n'), '\r', '\\r'), '"', '\\"')) + '"';
  return $.Primitives_objectToString(object);
};

$.process = function(contour, indices) {
  if (typeof contour !== 'string' && (typeof contour !== 'object' || contour === null || contour.constructor !== Array && !contour.is$JavaScriptIndexingBehavior()))
    return $.process$bailout(1, contour, indices, 0, 0, 0, 0);
  var n = contour.length;
  if (n < 3)
    return;
  var result = [];
  var verts = $.ListImplementation_List(n);
  var vertIndices = [];
  if ($.area(contour) > 0)
    for (var v = 0; v < n; ++v)
      verts[v] = v;
  else
    for (var t1 = n - 1, v = 0; v < n; ++v)
      verts[v] = t1 - v;
  var count = 2 * n;
  for (var v = n - 1, nv = n, w = null, u = null; nv > 2;) {
    var count0 = count - 1;
    if (count <= 0) {
      $.print('Warning, unable to triangulate polygon!');
      if (indices)
        return vertIndices;
      return result;
    }
    u = nv <= v ? 0 : v;
    v = u + 1;
    if (nv <= v)
      v = 0;
    w = v + 1;
    if (nv <= w)
      w = 0;
    if ($.snip(contour, u, v, w, nv, verts)) {
      if (u !== (u | 0))
        throw $.iae(u);
      if (u < 0 || u >= n)
        throw $.ioore(u);
      var a = verts[u];
      if (v !== (v | 0))
        throw $.iae(v);
      if (v < 0 || v >= n)
        throw $.ioore(v);
      var b = verts[v];
      if (w !== (w | 0))
        throw $.iae(w);
      if (w < 0 || w >= n)
        throw $.ioore(w);
      var c = verts[w];
      if (a !== (a | 0))
        throw $.iae(a);
      t1 = contour.length;
      if (a < 0 || a >= t1)
        throw $.ioore(a);
      var t2 = contour[a];
      if (b !== (b | 0))
        throw $.iae(b);
      if (b < 0 || b >= t1)
        throw $.ioore(b);
      var t3 = contour[b];
      if (c !== (c | 0))
        throw $.iae(c);
      if (c < 0 || c >= t1)
        throw $.ioore(c);
      result.push([t2, t3, contour[c]]);
      $.addAll(vertIndices, [verts[u], verts[v], verts[w]]);
      for (var t = v + 1, s = v; t < nv; ++t) {
        if (t >= n)
          throw $.ioore(t);
        t1 = verts[t];
        if (s >= n)
          throw $.ioore(s);
        verts[s] = t1;
        ++s;
      }
      --nv;
      count = 2 * nv;
    } else
      count = count0;
  }
  if (indices)
    return vertIndices;
  return result;
};

$.area = function(contour) {
  if (typeof contour !== 'string' && (typeof contour !== 'object' || contour === null || contour.constructor !== Array && !contour.is$JavaScriptIndexingBehavior()))
    return $.area$bailout(1, contour);
  var n = contour.length;
  for (var p = n - 1, a = 0, q = 0; q < n; q0 = q + 1, p = q, q = q0) {
    if (p < 0 || p >= contour.length)
      throw $.ioore(p);
    var t1 = contour[p].get$x();
    if (q >= contour.length)
      throw $.ioore(q);
    t1 = $.mul(t1, contour[q].get$y());
    if (q >= contour.length)
      throw $.ioore(q);
    var t2 = contour[q].get$x();
    if (p >= contour.length)
      throw $.ioore(p);
    t1 = $.sub(t1, $.mul(t2, contour[p].get$y()));
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    a += t1;
  }
  return a * 0.5;
  var q0;
};

$.insideTriangle = function(ax, ay, bx, by, cx, cy, px, py) {
  var aX = $.sub(cx, bx);
  var aY = $.sub(cy, by);
  var bX = $.sub(ax, cx);
  var bY = $.sub(ay, cy);
  var cX = $.sub(bx, ax);
  var cY = $.sub(by, ay);
  var apx = $.sub(px, ax);
  var apy = $.sub(py, ay);
  var bpx = $.sub(px, bx);
  var bpy = $.sub(py, by);
  var cpx = $.sub(px, cx);
  var cpy = $.sub(py, cy);
  var aCROSSbp = $.sub($.mul(aX, bpy), $.mul(aY, bpx));
  var cCROSSap = $.sub($.mul(cX, apy), $.mul(cY, apx));
  var bCROSScp = $.sub($.mul(bX, cpy), $.mul(bY, cpx));
  return $.geB(aCROSSbp, 0) && $.geB(bCROSScp, 0) && $.geB(cCROSSap, 0);
};

$.snip = function(contour, u, v, w, n, verts) {
  if (typeof contour !== 'string' && (typeof contour !== 'object' || contour === null || contour.constructor !== Array && !contour.is$JavaScriptIndexingBehavior()))
    return $.snip$bailout(1, contour, u, v, w, n, verts, 0, 0, 0, 0, 0, 0);
  if (u !== (u | 0))
    throw $.iae(u);
  if (u < 0 || u >= verts.length)
    throw $.ioore(u);
  var t1 = verts[u];
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  if (t1 < 0 || t1 >= contour.length)
    throw $.ioore(t1);
  var ax = contour[t1].get$x();
  if (typeof ax !== 'number')
    return $.snip$bailout(2, contour, u, v, w, n, verts, ax, 0, 0, 0, 0, 0);
  if (u >= verts.length)
    throw $.ioore(u);
  var t3 = verts[u];
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= contour.length)
    throw $.ioore(t3);
  var ay = contour[t3].get$y();
  if (typeof ay !== 'number')
    return $.snip$bailout(3, contour, u, v, w, n, verts, ay, ax, 0, 0, 0, 0);
  if (v !== (v | 0))
    throw $.iae(v);
  if (v < 0 || v >= verts.length)
    throw $.ioore(v);
  var t5 = verts[v];
  if (t5 !== (t5 | 0))
    throw $.iae(t5);
  if (t5 < 0 || t5 >= contour.length)
    throw $.ioore(t5);
  var bx = contour[t5].get$x();
  if (typeof bx !== 'number')
    return $.snip$bailout(4, contour, u, v, w, n, verts, bx, ay, ax, 0, 0, 0);
  if (v >= verts.length)
    throw $.ioore(v);
  var t7 = verts[v];
  if (t7 !== (t7 | 0))
    throw $.iae(t7);
  if (t7 < 0 || t7 >= contour.length)
    throw $.ioore(t7);
  var by = contour[t7].get$y();
  if (typeof by !== 'number')
    return $.snip$bailout(5, contour, u, v, w, n, verts, bx, ay, by, ax, 0, 0);
  if (w !== (w | 0))
    throw $.iae(w);
  if (w < 0 || w >= verts.length)
    throw $.ioore(w);
  var t9 = verts[w];
  if (t9 !== (t9 | 0))
    throw $.iae(t9);
  if (t9 < 0 || t9 >= contour.length)
    throw $.ioore(t9);
  var cx = contour[t9].get$x();
  if (typeof cx !== 'number')
    return $.snip$bailout(6, cx, contour, v, w, u, verts, bx, n, ay, ax, by, 0);
  if (w >= verts.length)
    throw $.ioore(w);
  var t11 = verts[w];
  if (t11 !== (t11 | 0))
    throw $.iae(t11);
  if (t11 < 0 || t11 >= contour.length)
    throw $.ioore(t11);
  var cy = contour[t11].get$y();
  if (typeof cy !== 'number')
    return $.snip$bailout(7, cx, contour, v, w, u, cy, verts, n, ax, ay, bx, by);
  if ($.gtB($.EPSILON, (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)))
    return false;
  for (var px = null, py = null, p = 0; p < n; ++p) {
    if (p === u || p === v || p === w)
      continue;
    if (p >= verts.length)
      throw $.ioore(p);
    t1 = verts[p];
    if (t1 !== (t1 | 0))
      throw $.iae(t1);
    if (t1 < 0 || t1 >= contour.length)
      throw $.ioore(t1);
    px = contour[t1].get$x();
    if (p >= verts.length)
      throw $.ioore(p);
    var t2 = verts[p];
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= contour.length)
      throw $.ioore(t2);
    py = contour[t2].get$y();
    if ($.insideTriangle(ax, ay, bx, by, cx, cy, px, py))
      return false;
  }
  return true;
};

$.triangulateShape = function(contour, holes) {
  var shapeWithoutHoles = $.removeHoles(contour, holes);
  var shape = $.index(shapeWithoutHoles, 'shape');
  var allpoints = $.index(shapeWithoutHoles, 'allpoints');
  if (typeof allpoints !== 'string' && (typeof allpoints !== 'object' || allpoints === null || allpoints.constructor !== Array && !allpoints.is$JavaScriptIndexingBehavior()))
    return $.triangulateShape$bailout(1, allpoints, shapeWithoutHoles, shape);
  var isolatedPts = $.index(shapeWithoutHoles, 'isolatedPts');
  if (typeof isolatedPts !== 'string' && (typeof isolatedPts !== 'object' || isolatedPts === null || isolatedPts.constructor !== Array && !isolatedPts.is$JavaScriptIndexingBehavior()))
    return $.triangulateShape$bailout(2, allpoints, isolatedPts, shape);
  var triangles = $.process(shape, false);
  if (typeof triangles !== 'string' && (typeof triangles !== 'object' || triangles === null || triangles.constructor !== Array && !triangles.is$JavaScriptIndexingBehavior()))
    return $.triangulateShape$bailout(3, triangles, allpoints, isolatedPts);
  var allPointsMap = $.makeLiteralMap([]);
  $.makeLiteralMap([]);
  for (var i = 0, key = null; i < allpoints.length; ++i) {
    var t1 = $.S(allpoints[i].get$x()) + ':';
    if (i >= allpoints.length)
      throw $.ioore(i);
    key = t1 + $.S(allpoints[i].get$y());
    if (allPointsMap.containsKey$1(key) === true)
      $.print('Duplicate point ' + key);
    $.indexSet(allPointsMap, key, i);
  }
  for (var i = 0, f = null, face = null; i < triangles.length; ++i) {
    face = triangles[i];
    for (f = 0; f < 3; ++f) {
      key = $.S($.index(face, f).get$x()) + ':' + $.S($.index(face, f).get$y());
      if (allPointsMap.containsKey$1(key) === true)
        $.indexSet(face, f, $.index(allPointsMap, key));
    }
  }
  for (i = 0; i < isolatedPts.length; ++i) {
    face = isolatedPts[i];
    for (f = 0; f < 3; ++f) {
      key = $.S($.index(face, f).get$x()) + ':' + $.S($.index(face, f).get$y());
      if (allPointsMap.containsKey$1(key) === true)
        $.indexSet(face, f, $.index(allPointsMap, key));
    }
  }
  $.addAll(triangles, isolatedPts);
  return triangles;
};

$.isClockWise = function(pts) {
  return $.area(pts) < 0;
};

$.b2 = function(t, p0, p1, p2) {
  if (typeof t !== 'number')
    throw $.iae(t);
  var k = 1 - t;
  var t1 = k * k;
  if (typeof p0 !== 'number')
    throw $.iae(p0);
  t1 *= p0;
  var t2 = 2 * k * t;
  if (typeof p1 !== 'number')
    throw $.iae(p1);
  t1 += t2 * p1;
  var t3 = t * t;
  if (typeof p2 !== 'number')
    throw $.iae(p2);
  return t1 + t3 * p2;
};

$.removeHoles = function(contour, holes) {
  if (typeof holes !== 'string' && (typeof holes !== 'object' || holes === null || holes.constructor !== Array && !holes.is$JavaScriptIndexingBehavior()))
    return $.removeHoles$bailout(1, contour, holes, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var shape = $.ListImplementation_List$from(contour);
  var allpoints = $.ListImplementation_List$from(shape);
  var verts = [];
  for (var prevShapeVert = null, prevHoleVert = null, holeIndex = null, shapeIndex = null, h = 0, h2 = null, hole = null, shortest = null, d = null, p = null, pts1 = null, pts2 = null, tmpShape1 = null, tmpShape2 = null, tmpHole1 = null, tmpHole2 = null; h < holes.length; ++h) {
    hole = holes[h];
    if (typeof hole !== 'string' && (typeof hole !== 'object' || hole === null || hole.constructor !== Array && !hole.is$JavaScriptIndexingBehavior()))
      return $.removeHoles$bailout(2, holes, allpoints, verts, shape, hole, holeIndex, shapeIndex, h, d, p, pts1, pts2);
    $.addAll(allpoints, hole);
    for (h2 = 0, shortest = (1/0); h2 < hole.length; ++h2) {
      pts1 = hole[h2];
      var dist = [];
      for (p = 0; p < shape.length; ++p) {
        pts2 = shape[p];
        d = pts1.distanceToSquared$1(pts2);
        dist.push(d);
        if ($.ltB(d, shortest)) {
          shortest = d;
          shapeIndex = p;
          holeIndex = h2;
        }
      }
    }
    prevShapeVert = $.geB($.sub(shapeIndex, 1), 0) ? $.sub(shapeIndex, 1) : shape.length - 1;
    prevHoleVert = $.geB($.sub(holeIndex, 1), 0) ? $.sub(holeIndex, 1) : hole.length - 1;
    if (holeIndex !== (holeIndex | 0))
      throw $.iae(holeIndex);
    if (holeIndex < 0 || holeIndex >= hole.length)
      throw $.ioore(holeIndex);
    var t1 = hole[holeIndex];
    if (shapeIndex !== (shapeIndex | 0))
      throw $.iae(shapeIndex);
    var t2 = shape.length;
    if (shapeIndex < 0 || shapeIndex >= t2)
      throw $.ioore(shapeIndex);
    var t3 = shape[shapeIndex];
    if (prevShapeVert !== (prevShapeVert | 0))
      throw $.iae(prevShapeVert);
    if (prevShapeVert < 0 || prevShapeVert >= t2)
      throw $.ioore(prevShapeVert);
    var areaa = $.area([t1, t3, shape[prevShapeVert]]);
    var t4 = hole.length;
    if (holeIndex >= t4)
      throw $.ioore(holeIndex);
    var t5 = hole[holeIndex];
    if (prevHoleVert !== (prevHoleVert | 0))
      throw $.iae(prevHoleVert);
    if (prevHoleVert < 0 || prevHoleVert >= t4)
      throw $.ioore(prevHoleVert);
    var t6 = hole[prevHoleVert];
    if (shapeIndex >= shape.length)
      throw $.ioore(shapeIndex);
    var areab = $.area([t5, t6, shape[shapeIndex]]);
    var shapeIndex0 = shapeIndex + 1;
    var holeIndex0 = holeIndex + -1;
    shapeIndex0 = $.mod(shapeIndex0, shape.length);
    if ($.ltB(holeIndex0, 0))
      holeIndex0 = $.add(holeIndex0, hole.length);
    holeIndex0 = $.mod(holeIndex0, hole.length);
    prevShapeVert = shapeIndex0 - 1;
    prevShapeVert = prevShapeVert >= 0 ? prevShapeVert : shape.length - 1;
    prevHoleVert = $.geB($.sub(holeIndex0, 1), 0) ? $.sub(holeIndex0, 1) : hole.length - 1;
    if (holeIndex0 !== (holeIndex0 | 0))
      throw $.iae(holeIndex0);
    if (holeIndex0 < 0 || holeIndex0 >= hole.length)
      throw $.ioore(holeIndex0);
    t1 = hole[holeIndex0];
    t2 = shape.length;
    if (shapeIndex0 < 0 || shapeIndex0 >= t2)
      throw $.ioore(shapeIndex0);
    t3 = shape[shapeIndex0];
    if (prevShapeVert < 0 || prevShapeVert >= t2)
      throw $.ioore(prevShapeVert);
    var areaa2 = $.area([t1, t3, shape[prevShapeVert]]);
    t4 = hole.length;
    if (holeIndex0 >= t4)
      throw $.ioore(holeIndex0);
    t5 = hole[holeIndex0];
    if (prevHoleVert !== (prevHoleVert | 0))
      throw $.iae(prevHoleVert);
    if (prevHoleVert < 0 || prevHoleVert >= t4)
      throw $.ioore(prevHoleVert);
    t6 = hole[prevHoleVert];
    if (shapeIndex0 >= shape.length)
      throw $.ioore(shapeIndex0);
    var areab2 = $.area([t5, t6, shape[shapeIndex0]]);
    if (areaa + areab > areaa2 + areab2) {
      shapeIndex = $.mod(shapeIndex, shape.length);
      holeIndex = $.mod(holeIndex, hole.length);
      prevShapeVert = shapeIndex - 1;
      prevShapeVert = prevShapeVert >= 0 ? prevShapeVert : shape.length - 1;
      prevHoleVert = $.geB($.sub(holeIndex, 1), 0) ? $.sub(holeIndex, 1) : hole.length - 1;
    } else {
      shapeIndex = shapeIndex0;
      holeIndex = holeIndex0;
    }
    tmpShape1 = $.getRange(shape, 0, shapeIndex);
    tmpShape2 = $.getRange(shape, shapeIndex, shape.length - shapeIndex);
    t1 = hole.length;
    if (typeof holeIndex !== 'number')
      throw $.iae(holeIndex);
    tmpHole1 = $.getRange(hole, holeIndex, t1 - holeIndex);
    tmpHole2 = $.getRange(hole, 0, holeIndex);
    if (holeIndex !== (holeIndex | 0))
      throw $.iae(holeIndex);
    t2 = hole.length;
    if (holeIndex < 0 || holeIndex >= t2)
      throw $.ioore(holeIndex);
    t3 = hole[holeIndex];
    t4 = shape.length;
    if (shapeIndex < 0 || shapeIndex >= t4)
      throw $.ioore(shapeIndex);
    t5 = shape[shapeIndex];
    if (prevShapeVert < 0 || prevShapeVert >= t4)
      throw $.ioore(prevShapeVert);
    var trianglea = [t3, t5, shape[prevShapeVert]];
    if (prevHoleVert !== (prevHoleVert | 0))
      throw $.iae(prevHoleVert);
    if (prevHoleVert < 0 || prevHoleVert >= t2)
      throw $.ioore(prevHoleVert);
    var triangleb = [t3, hole[prevHoleVert], t5];
    verts.push(trianglea);
    verts.push(triangleb);
    var shape0 = [];
    $.addAll(shape0, tmpShape1);
    $.addAll(shape0, tmpHole1);
    $.addAll(shape0, tmpHole2);
    $.addAll(shape0, tmpShape2);
    shape = shape0;
  }
  return $.makeLiteralMap(['shape', shape, 'isolatedPts', verts, 'allpoints', allpoints]);
};

$.b3 = function(t, p0, p1, p2, p3) {
  if (typeof t !== 'number')
    throw $.iae(t);
  var k = 1 - t;
  var t1 = k * k * k;
  if (typeof p0 !== 'number')
    throw $.iae(p0);
  t1 *= p0;
  var t2 = 3 * k;
  var t3 = t2 * k * t;
  if (typeof p1 !== 'number')
    throw $.iae(p1);
  t1 += t3 * p1;
  var t4 = t2 * t * t;
  if (typeof p2 !== 'number')
    throw $.iae(p2);
  t1 += t4 * p2;
  var t5 = t * t * t;
  if (typeof p3 !== 'number')
    throw $.iae(p3);
  return t1 + t5 * p3;
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.tangentQuadraticBezier = function(t, p0, p1, p2) {
  if (typeof t !== 'number')
    throw $.iae(t);
  var t1 = 2 * (1 - t);
  var t2 = $.sub(p1, p0);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  t2 = t1 * t2;
  t1 = 2 * t;
  var t3 = $.sub(p2, p1);
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  return t2 + t1 * t3;
};

$.WebGLObject_WebGLObject = function(object, opaque, transparent, buffer, render, z) {
  if ($.index(object, '__webglObject') == null)
    $.indexSet(object, '__webglObject', $.WebGLObject$_internal(object, opaque, transparent, buffer, render, z));
  return $.index(object, '__webglObject');
};

$.tangentCubicBezier = function(t, p0, p1, p2, p3) {
  if (typeof p0 !== 'number')
    throw $.iae(p0);
  var t1 = -3 * p0;
  if (typeof t !== 'number')
    throw $.iae(t);
  var t2 = 1 - t;
  var t3 = t1 * t2 * t2;
  if (typeof p1 !== 'number')
    throw $.iae(p1);
  t3 += 3 * p1 * t2 * t2;
  var t4 = 6 * t;
  t3 -= t4 * p1 * t2;
  if (typeof p2 !== 'number')
    throw $.iae(p2);
  t3 += t4 * p2 * t2;
  var t5 = 3 * t * t;
  t3 -= t5 * p2;
  if (typeof p3 !== 'number')
    throw $.iae(p3);
  return t3 + t5 * p3;
};

$.interpolate = function(p0, p1, p2, p3, t) {
  var v0 = $.mul($.sub(p2, p0), 0.5);
  var v1 = $.mul($.sub(p3, p1), 0.5);
  var t2 = $.mul(t, t);
  var t3 = $.mul(t, t2);
  if (typeof p1 !== 'number')
    throw $.iae(p1);
  var t1 = 2 * p1;
  if (typeof p2 !== 'number')
    throw $.iae(p2);
  t1 -= 2 * p2;
  if (typeof v0 !== 'number')
    throw $.iae(v0);
  t1 += v0;
  if (typeof v1 !== 'number')
    throw $.iae(v1);
  t1 += v1;
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  t3 = t1 * t3;
  t1 = -3 * p1 + 3 * p2 - 2 * v0 - v1;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  t3 += t1 * t2;
  if (typeof t !== 'number')
    throw $.iae(t);
  return t3 + v0 * t + p1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo(a, b);
};

$.WebGLObject$_internal = function(object, opaque, transparent, buffer, render, z) {
  return new $.WebGLObject(false, null, null, null, null, null, null, buffer, object, opaque, transparent, render, z, null);
};

$.StringImplementation_join = function(strings, separator) {
  $.checkNull(strings);
  $.checkNull(separator);
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray(strings), separator);
};

$.StringImplementation_concatAll = function(strings) {
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray(strings), '');
};

$.StringImplementation__toJsStringArray = function(strings) {
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.StringImplementation__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  var length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (var i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      var string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.LinkedHashMapImplementation$ = function() {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$.ListImplementation_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.ListImplementation_List$from = function(other) {
  return $.ListImplementation__from(other);
};

$.ListImplementation__from = function(other) {
  var result = $.ListImplementation_List(null);
  for (var t1 = $.iterator(other); t1.get$hasNext() === true;)
    result.push(t1.next$0());
  return result;
};

$._MessagePortEventsImpl$ = function(_ptr) {
  return new $._MessagePortEventsImpl(_ptr);
};

$.KeyValuePair$ = function(key, value) {
  return new $.KeyValuePair(key, value);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$.HashMapImplementation$ = function() {
  var t1 = new $.HashMapImplementation(null, null, null, null, null);
  t1.HashMapImplementation$0();
  return t1;
};

$.WebGLGeometry$_internal = function(geometry) {
  return new $.WebGLGeometry(geometry.get$id(), null, null, null, 0, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, geometry);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.WebGLGeometry_WebGLGeometry$from = function(geometry) {
  if ($.index(geometry, '__webglBuffer') == null)
    $.indexSet(geometry, '__webglBuffer', $.WebGLGeometry$_internal(geometry));
  return $.index(geometry, '__webglBuffer');
};

$.WebGLGeometry$ = function(faces3, faces4, materialIndex, numMorphNormals, numMorphTargets, vertices) {
  return new $.WebGLGeometry(null, vertices, faces3, faces4, materialIndex, numMorphTargets, numMorphNormals, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
};

$.WebGLMaterial$_internal = function(material) {
  return new $.WebGLMaterial(material, null, null, null, null, null, null, null, null);
};

$.WebGLMaterial_WebGLMaterial$from = function(material) {
  if ($.index(material, '__webglMaterial') == null)
    $.indexSet(material, '__webglMaterial', $.WebGLMaterial$_internal(material));
  return $.index(material, '__webglMaterial');
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.Strings_join = function(strings, separator) {
  return $.StringImplementation_join(strings, separator);
};

$._FrameSetElementEventsImpl$ = function(_ptr) {
  return new $._FrameSetElementEventsImpl(_ptr);
};

$._MediaStreamTrackListEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackListEventsImpl(_ptr);
};

$._SVGElementInstanceEventsImpl$ = function(_ptr) {
  return new $._SVGElementInstanceEventsImpl(_ptr);
};

$._MediaStreamTrackEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackEventsImpl(_ptr);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.UniformsUtils_merge = function(uniforms) {
  var t1 = {};
  t1.tmp_1 = null;
  var merged = $.makeLiteralMap([]);
  for (var u = 0; u < uniforms.length; ++u) {
    t1.tmp_1 = $.UniformsUtils_clone(uniforms[u]);
    $.forEach(t1.tmp_1, new $.UniformsUtils_merge_anon(merged, t1));
  }
  return merged;
};

$.UniformsUtils_clone = function(uniforms_src) {
  var uniforms_dst = $.makeLiteralMap([]);
  $.forEach(uniforms_src, new $.UniformsUtils_clone_anon(uniforms_dst));
  return uniforms_dst;
};

$._MediaStreamEventsImpl$ = function(_ptr) {
  return new $._MediaStreamEventsImpl(_ptr);
};

$.WebGLCamera_WebGLCamera = function(camera) {
  if ($.index(camera, '__webglCamera') == null)
    $.indexSet(camera, '__webglCamera', $.WebGLCamera$_internal(camera));
  return $.index(camera, '__webglCamera');
};

$.WebGLCamera$_internal = function(camera) {
  return new $.WebGLCamera(camera, $.Float32Array_Float32Array(16), $.Float32Array_Float32Array(16));
};

$.CanvasElement_CanvasElement = function(height, width) {
  var t1 = $ === height;
  if (t1)
    height = null;
  var t2 = $ === width;
  if (t2)
    width = null;
  if (t2)
    return $._Elements_createCanvasElement(null, null);
  if (t1)
    return $._Elements_createCanvasElement(width, null);
  return $._Elements_createCanvasElement(width, height);
};

$.Line$ = function(geometry, material, type) {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.add(t1, 1);
  t1 = new $.Line(geometry, material, type, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Line$3(geometry, material, type);
  return t1;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$.Uniform$ = function(texture, type, value) {
  return new $.Uniform(type, value, texture);
};

$.LineBasicMaterial$ = function(alphaTest, blendDst, blendEquation, blendSrc, blending, color, depthTest, depthWrite, fog, linecap, linejoin, linewidth, name$, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, side, transparent, vertexColors, visible) {
  var t1 = $.Color$(color);
  var t2 = $.MaterialCount;
  $.MaterialCount = $.add(t2, 1);
  return new $.LineBasicMaterial(t1, linewidth, linecap, linejoin, fog, vertexColors, name$, t2, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$.Program$ = function(id, glProgram, code, usedTimes) {
  var t1 = $.makeLiteralMap([]);
  return new $.Program(id, glProgram, code, usedTimes, $.makeLiteralMap([]), t1);
};

$._FileWriterEventsImpl$ = function(_ptr) {
  return new $._FileWriterEventsImpl(_ptr);
};

$._DocumentEventsImpl$ = function(_ptr) {
  return new $._DocumentEventsImpl(_ptr);
};

$.MeshLambertMaterial$ = function(alphaTest, ambient, blendDst, blendEquation, blendSrc, blending, color, combine, depthTest, depthWrite, emissive, envMap, fog, lightMap, map, morphNormals, morphTargets, name$, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, reflectivity, refractionRatio, shading, side, skinning, specularMap, transparent, vertexColors, visible, wireframe, wireframeLinecap, wireframeLinejoin, wireframeLinewidth, wrapAround, wrapRGB) {
  var t1 = $.Color$(color);
  var t2 = $.Color$(ambient);
  var t3 = $.Color$(emissive);
  var t4 = wrapRGB == null ? $.Vector3$(1, 1, 1) : wrapRGB;
  var t5 = $.MaterialCount;
  $.MaterialCount = $.add(t5, 1);
  return new $.MeshLambertMaterial(null, t1, t2, t3, wrapAround, t4, map, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, morphNormals, vertexColors, fog, name$, t5, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$.MeshBasicMaterial$ = function(alphaTest, blendDst, blendEquation, blendSrc, blending, color, combine, depthTest, depthWrite, envMap, fog, lightMap, map, morphTargets, name$, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, reflectivity, refractionRatio, shading, side, skinning, specularMap, transparent, vertexColors, visible, wireframe, wireframeLinecap, wireframeLinejoin, wireframeLinewidth) {
  var t1 = $.Color$(color);
  var t2 = $.MaterialCount;
  $.MaterialCount = $.add(t2, 1);
  return new $.MeshBasicMaterial(t1, map, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, vertexColors, fog, name$, t2, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$._LocalWindowEventsImpl$ = function(_ptr) {
  return new $._LocalWindowEventsImpl(_ptr);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.Float32Array_Float32Array = function(length$) {
  return new Float32Array(length$);
};

$.Float32Array_Float32Array$fromList = function(list) {
  return new Float32Array(list);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$._FileReaderEventsImpl$ = function(_ptr) {
  return new $._FileReaderEventsImpl(_ptr);
};

$.Int32Array_Int32Array$fromList = function(list) {
  return new Int32Array(list);
};

$._EventListenerListImpl$ = function(_ptr, _type) {
  return new $._EventListenerListImpl(_ptr, _type);
};

$.Uint16Array_Uint16Array = function(length$) {
  return new Uint16Array(length$);
};

$.Mesh$ = function(geometry, material) {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.add(t1, 1);
  t1 = new $.Mesh(geometry, material, null, null, null, null, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Mesh$2(geometry, material);
  return t1;
};

$._WorkerEventsImpl$ = function(_ptr) {
  return new $._WorkerEventsImpl(_ptr);
};

$._AbstractWorkerEventsImpl$ = function(_ptr) {
  return new $._AbstractWorkerEventsImpl(_ptr);
};

$._EventsImpl$ = function(_ptr) {
  return new $._EventsImpl(_ptr);
};

$._Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$._Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$._Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.get$hasNext() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.Matrix3$ = function() {
  return new $.Matrix3($.Float32Array_Float32Array(9));
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._EventSourceEventsImpl$ = function(_ptr) {
  return new $._EventSourceEventsImpl(_ptr);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._WorkerContextEventsImpl$ = function(_ptr) {
  return new $._WorkerContextEventsImpl(_ptr);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_objectTypeName = function(object) {
  var name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    var decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$.Primitives_newList = function(length$) {
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$._TextTrackListEventsImpl$ = function(_ptr) {
  return new $._TextTrackListEventsImpl(_ptr);
};

$.Buffer$ = function(glbuffer) {
  return new $.Buffer(glbuffer, null);
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (var t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i)
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$.StringImplementation__toJsStringArray$bailout = function(state0, strings) {
  $.checkNull(strings);
  var length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (var i = 0; $.ltB(i, length$); ++i) {
      var string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (var i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = $.add(start, length$);
  if ($.gtB(end, $.get$length(a)))
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.ltB(i, end); i = $.add(i, 1))
    accumulator.push($.index(a, i));
  return accumulator;
};

$._Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  for (var i = left + 1; $.leB(i, right); ++i) {
    var el = $.index(a, i);
    var j = i;
    while (true) {
      if (!(j > left && $.gtB(compare.call$2($.index(a, j - 1), el), 0)))
        break;
      var j0 = j - 1;
      $.indexSet(a, j, $.index(a, j0));
      j = j0;
    }
    $.indexSet(a, j, el);
  }
};

$._Sort__dualPivotQuicksort$bailout = function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13) {
  switch (state0) {
    case 1:
      var a = env0;
      var left = env1;
      var right = env2;
      var compare = env3;
      break;
    case 2:
      a = env0;
      left = env1;
      less = env2;
      compare = env3;
      great = env4;
      right = env5;
      k = env6;
      index1 = env7;
      index5 = env8;
      el2 = env9;
      pivots_are_equal = env10;
      ak = env11;
      comp = env12;
      el4 = env13;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var sixth = $.tdiv($.add($.sub(right, left), 1), 6);
      if (typeof sixth !== 'number')
        throw $.iae(sixth);
      var index1 = left + sixth;
      var index5 = $.sub(right, sixth);
      if (typeof right !== 'number')
        throw $.iae(right);
      var index3 = $.tdiv(left + right, 2);
      var index2 = index3 - sixth;
      var index4 = index3 + sixth;
      var el1 = $.index(a, index1);
      var el2 = $.index(a, index2);
      var el3 = $.index(a, index3);
      var el4 = $.index(a, index4);
      var el5 = $.index(a, index5);
      if ($.gtB(compare.call$2(el1, el2), 0)) {
        var t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if ($.gtB(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if ($.gtB(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if ($.gtB(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.gtB(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if ($.gtB(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if ($.gtB(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if ($.gtB(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.gtB(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      $.indexSet(a, index1, el1);
      $.indexSet(a, index3, el3);
      $.indexSet(a, index5, el5);
      $.indexSet(a, index2, $.index(a, left));
      $.indexSet(a, index4, $.index(a, right));
      var less = left + 1;
      var great = right - 1;
      var pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
    case 2:
      if (state0 === 2 || state0 === 0 && pivots_are_equal)
        switch (state0) {
          case 0:
            var k = less;
          case 2:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    if (!(k <= great))
                      break L0;
                  case 2:
                    c$0: {
                      switch (state0) {
                        case 0:
                          var ak = $.index(a, k);
                          var comp = compare.call$2(ak, el2);
                        case 2:
                          state0 = 0;
                          if ($.eqB(comp, 0))
                            break c$0;
                          if ($.ltB(comp, 0)) {
                            if (!(k === less)) {
                              $.indexSet(a, k, $.index(a, less));
                              $.indexSet(a, less, ak);
                            }
                            ++less;
                          } else
                            for (var less0 = less + 1; true;) {
                              comp = compare.call$2($.index(a, great), el2);
                              if ($.gtB(comp, 0)) {
                                --great;
                                continue;
                              } else if ($.ltB(comp, 0)) {
                                $.indexSet(a, k, $.index(a, less));
                                $.indexSet(a, less, $.index(a, great));
                                var great0 = great - 1;
                                $.indexSet(a, great, ak);
                                great = great0;
                                less = less0;
                                break;
                              } else {
                                $.indexSet(a, k, $.index(a, great));
                                great0 = great - 1;
                                $.indexSet(a, great, ak);
                                great = great0;
                                break;
                              }
                            }
                      }
                    }
                    ++k;
                }
        }
      else
        for (k = less; k <= great; ++k) {
          ak = $.index(a, k);
          if ($.ltB(compare.call$2(ak, el2), 0)) {
            if (!(k === less)) {
              $.indexSet(a, k, $.index(a, less));
              $.indexSet(a, less, ak);
            }
            ++less;
          } else if ($.gtB(compare.call$2(ak, el4), 0))
            for (less0 = less + 1; true;)
              if ($.gtB(compare.call$2($.index(a, great), el4), 0)) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                if ($.ltB(compare.call$2($.index(a, great), el2), 0)) {
                  $.indexSet(a, k, $.index(a, less));
                  $.indexSet(a, less, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  $.indexSet(a, k, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
      var t1 = less - 1;
      $.indexSet(a, left, $.index(a, t1));
      $.indexSet(a, t1, el2);
      $.indexSet(a, right, $.index(a, great + 1));
      $.indexSet(a, great + 1, el4);
      $._Sort__doSort(a, left, less - 2, compare);
      $._Sort__doSort(a, great + 2, right, compare);
      if (pivots_are_equal)
        return;
      if (less < index1 && $.gtB(great, index5)) {
        for (; $.eqB(compare.call$2($.index(a, less), el2), 0);)
          ++less;
        for (; $.eqB(compare.call$2($.index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = $.index(a, k);
          if ($.eqB(compare.call$2(ak, el2), 0)) {
            if (!(k === less)) {
              $.indexSet(a, k, $.index(a, less));
              $.indexSet(a, less, ak);
            }
            ++less;
          } else if ($.eqB(compare.call$2(ak, el4), 0))
            for (less0 = less + 1; true;)
              if ($.eqB(compare.call$2($.index(a, great), el4), 0)) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                if ($.ltB(compare.call$2($.index(a, great), el2), 0)) {
                  $.indexSet(a, k, $.index(a, less));
                  $.indexSet(a, less, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  $.indexSet(a, k, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        $._Sort__doSort(a, less, great, compare);
      } else
        $._Sort__doSort(a, less, great, compare);
  }
};

$.process$bailout = function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      var contour = env0;
      var indices = env1;
      break;
    case 2:
      contour = env0;
      vertIndices = env1;
      indices = env2;
      verts = env3;
      n = env4;
      result = env5;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var n = $.get$length(contour);
      if ($.ltB(n, 3))
        return;
      var result = [];
      var verts = $.ListImplementation_List(n);
      var vertIndices = [];
      if ($.area(contour) > 0)
        for (var v = 0; $.ltB(v, n); ++v) {
          if (v >= verts.length)
            throw $.ioore(v);
          verts[v] = v;
        }
      else
        for (v = 0; $.ltB(v, n); ++v) {
          var t1 = $.sub($.sub(n, 1), v);
          if (v >= verts.length)
            throw $.ioore(v);
          verts[v] = t1;
        }
      if (typeof n !== 'number')
        throw $.iae(n);
    case 2:
      state0 = 0;
      var count = 2 * n;
      for (var v = n - 1, nv = n, w = null, u = null; nv > 2;) {
        var count0 = count - 1;
        if (count <= 0) {
          $.print('Warning, unable to triangulate polygon!');
          if (indices)
            return vertIndices;
          return result;
        }
        u = nv <= v ? 0 : v;
        v = u + 1;
        if (nv <= v)
          v = 0;
        w = v + 1;
        if (nv <= w)
          w = 0;
        if ($.snip(contour, u, v, w, nv, verts)) {
          if (u !== (u | 0))
            throw $.iae(u);
          t1 = verts.length;
          if (u < 0 || u >= t1)
            throw $.ioore(u);
          var a = verts[u];
          if (v !== (v | 0))
            throw $.iae(v);
          if (v < 0 || v >= t1)
            throw $.ioore(v);
          var b = verts[v];
          if (w !== (w | 0))
            throw $.iae(w);
          if (w < 0 || w >= t1)
            throw $.ioore(w);
          var c = verts[w];
          result.push([$.index(contour, a), $.index(contour, b), $.index(contour, c)]);
          var t2 = verts.length;
          if (u >= t2)
            throw $.ioore(u);
          var t3 = verts[u];
          if (v >= t2)
            throw $.ioore(v);
          var t4 = verts[v];
          if (w >= t2)
            throw $.ioore(w);
          $.addAll(vertIndices, [t3, t4, verts[w]]);
          for (var t = v + 1, s = v; t < nv; ++t) {
            if (t !== (t | 0))
              throw $.iae(t);
            t1 = verts.length;
            if (t < 0 || t >= t1)
              throw $.ioore(t);
            t2 = verts[t];
            if (s !== (s | 0))
              throw $.iae(s);
            if (s < 0 || s >= t1)
              throw $.ioore(s);
            verts[s] = t2;
            ++s;
          }
          --nv;
          if (typeof nv !== 'number')
            throw $.iae(nv);
          count = 2 * nv;
        } else
          count = count0;
      }
      if (indices)
        return vertIndices;
      return result;
  }
};

$.area$bailout = function(state0, contour) {
  var n = $.get$length(contour);
  for (var p = $.sub(n, 1), a = 0, q = 0; $.ltB(q, n); q0 = q + 1, p = q, q = q0) {
    var t1 = $.sub($.mul($.index(contour, p).get$x(), $.index(contour, q).get$y()), $.mul($.index(contour, q).get$x(), $.index(contour, p).get$y()));
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    a += t1;
  }
  return a * 0.5;
  var q0;
};

$.triangulateShape$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      allpoints = env0;
      shapeWithoutHoles = env1;
      shape = env2;
      break;
    case 2:
      allpoints = env0;
      isolatedPts = env1;
      shape = env2;
      break;
    case 3:
      triangles = env0;
      allpoints = env1;
      isolatedPts = env2;
      break;
  }
  switch (state0) {
    case 0:
      var shapeWithoutHoles = $.removeHoles(contour, holes);
      var shape = $.index(shapeWithoutHoles, 'shape');
      var allpoints = $.index(shapeWithoutHoles, 'allpoints');
    case 1:
      state0 = 0;
      var isolatedPts = $.index(shapeWithoutHoles, 'isolatedPts');
    case 2:
      state0 = 0;
      var triangles = $.process(shape, false);
    case 3:
      state0 = 0;
      var allPointsMap = $.makeLiteralMap([]);
      $.makeLiteralMap([]);
      for (var i = 0, key = null; $.ltB(i, $.get$length(allpoints)); ++i) {
        key = $.S($.index(allpoints, i).get$x()) + ':' + $.S($.index(allpoints, i).get$y());
        if (allPointsMap.containsKey$1(key) === true)
          $.print('Duplicate point ' + key);
        $.indexSet(allPointsMap, key, i);
      }
      for (var i = 0, f = null, face = null; $.ltB(i, $.get$length(triangles)); ++i) {
        face = $.index(triangles, i);
        for (f = 0; f < 3; ++f) {
          key = $.S($.index(face, f).get$x()) + ':' + $.S($.index(face, f).get$y());
          if (allPointsMap.containsKey$1(key) === true)
            $.indexSet(face, f, $.index(allPointsMap, key));
        }
      }
      for (i = 0; $.ltB(i, $.get$length(isolatedPts)); ++i) {
        face = $.index(isolatedPts, i);
        for (f = 0; f < 3; ++f) {
          key = $.S($.index(face, f).get$x()) + ':' + $.S($.index(face, f).get$y());
          if (allPointsMap.containsKey$1(key) === true)
            $.indexSet(face, f, $.index(allPointsMap, key));
        }
      }
      $.addAll(triangles, isolatedPts);
      return triangles;
  }
};

$.removeHoles$bailout = function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11) {
  switch (state0) {
    case 1:
      var contour = env0;
      var holes = env1;
      break;
    case 2:
      holes = env0;
      allpoints = env1;
      verts = env2;
      shape = env3;
      hole = env4;
      holeIndex = env5;
      shapeIndex = env6;
      h = env7;
      d = env8;
      p = env9;
      pts1 = env10;
      pts2 = env11;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      var shape = $.ListImplementation_List$from(contour);
      var allpoints = $.ListImplementation_List$from(shape);
      var verts = [];
      var prevShapeVert = null;
      var prevHoleVert = null;
      var holeIndex = null;
      var shapeIndex = null;
      var h = 0;
      var h2 = null;
      var hole = null;
      var shortest = null;
      var d = null;
      var p = null;
      var pts1 = null;
      var pts2 = null;
      var tmpShape1 = null;
      var tmpShape2 = null;
      var tmpHole1 = null;
      var tmpHole2 = null;
    case 2:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(h, $.get$length(holes)))
                break L0;
              hole = $.index(holes, h);
            case 2:
              state0 = 0;
              $.addAll(allpoints, hole);
              for (h2 = 0, shortest = (1/0); $.ltB(h2, $.get$length(hole)); ++h2) {
                pts1 = $.index(hole, h2);
                var dist = [];
                for (p = 0; p < shape.length; ++p) {
                  pts2 = shape[p];
                  d = pts1.distanceToSquared$1(pts2);
                  dist.push(d);
                  if ($.ltB(d, shortest)) {
                    shortest = d;
                    shapeIndex = p;
                    holeIndex = h2;
                  }
                }
              }
              prevShapeVert = $.geB($.sub(shapeIndex, 1), 0) ? $.sub(shapeIndex, 1) : shape.length - 1;
              prevHoleVert = $.geB($.sub(holeIndex, 1), 0) ? $.sub(holeIndex, 1) : $.sub($.get$length(hole), 1);
              var t1 = $.index(hole, holeIndex);
              if (shapeIndex !== (shapeIndex | 0))
                throw $.iae(shapeIndex);
              var t2 = shape.length;
              if (shapeIndex < 0 || shapeIndex >= t2)
                throw $.ioore(shapeIndex);
              var t3 = shape[shapeIndex];
              if (prevShapeVert !== (prevShapeVert | 0))
                throw $.iae(prevShapeVert);
              if (prevShapeVert < 0 || prevShapeVert >= t2)
                throw $.ioore(prevShapeVert);
              var areaa = $.area([t1, t3, shape[prevShapeVert]]);
              var t4 = $.index(hole, holeIndex);
              var t5 = $.index(hole, prevHoleVert);
              if (shapeIndex >= shape.length)
                throw $.ioore(shapeIndex);
              var areab = $.area([t4, t5, shape[shapeIndex]]);
              var shapeIndex0 = shapeIndex + 1;
              var holeIndex0 = $.add(holeIndex, -1);
              if (shapeIndex0 < 0)
                shapeIndex0 += shape.length;
              shapeIndex0 = $.mod(shapeIndex0, shape.length);
              if ($.ltB(holeIndex0, 0))
                holeIndex0 = $.add(holeIndex0, $.get$length(hole));
              holeIndex0 = $.mod(holeIndex0, $.get$length(hole));
              prevShapeVert = shapeIndex0 - 1 >= 0 ? shapeIndex0 - 1 : shape.length - 1;
              prevHoleVert = $.geB($.sub(holeIndex0, 1), 0) ? $.sub(holeIndex0, 1) : $.sub($.get$length(hole), 1);
              t1 = $.index(hole, holeIndex0);
              if (shapeIndex0 !== (shapeIndex0 | 0))
                throw $.iae(shapeIndex0);
              t2 = shape.length;
              if (shapeIndex0 < 0 || shapeIndex0 >= t2)
                throw $.ioore(shapeIndex0);
              t3 = shape[shapeIndex0];
              if (prevShapeVert !== (prevShapeVert | 0))
                throw $.iae(prevShapeVert);
              if (prevShapeVert < 0 || prevShapeVert >= t2)
                throw $.ioore(prevShapeVert);
              var areaa2 = $.area([t1, t3, shape[prevShapeVert]]);
              t4 = $.index(hole, holeIndex0);
              t5 = $.index(hole, prevHoleVert);
              if (shapeIndex0 >= shape.length)
                throw $.ioore(shapeIndex0);
              var areab2 = $.area([t4, t5, shape[shapeIndex0]]);
              if (areaa + areab > areaa2 + areab2) {
                shapeIndex = $.mod(shapeIndex, shape.length);
                if ($.ltB(holeIndex, 0))
                  holeIndex = $.add(holeIndex, $.get$length(hole));
                holeIndex = $.mod(holeIndex, $.get$length(hole));
                prevShapeVert = shapeIndex - 1 >= 0 ? shapeIndex - 1 : shape.length - 1;
                prevHoleVert = $.geB($.sub(holeIndex, 1), 0) ? $.sub(holeIndex, 1) : $.sub($.get$length(hole), 1);
              } else {
                shapeIndex = shapeIndex0;
                holeIndex = holeIndex0;
              }
              tmpShape1 = $.getRange(shape, 0, shapeIndex);
              t1 = shape.length;
              if (typeof shapeIndex !== 'number')
                throw $.iae(shapeIndex);
              tmpShape2 = $.getRange(shape, shapeIndex, t1 - shapeIndex);
              tmpHole1 = $.getRange(hole, holeIndex, $.sub($.get$length(hole), holeIndex));
              tmpHole2 = $.getRange(hole, 0, holeIndex);
              t2 = $.index(hole, holeIndex);
              if (shapeIndex !== (shapeIndex | 0))
                throw $.iae(shapeIndex);
              t3 = shape.length;
              if (shapeIndex < 0 || shapeIndex >= t3)
                throw $.ioore(shapeIndex);
              t4 = shape[shapeIndex];
              if (prevShapeVert !== (prevShapeVert | 0))
                throw $.iae(prevShapeVert);
              if (prevShapeVert < 0 || prevShapeVert >= t3)
                throw $.ioore(prevShapeVert);
              var trianglea = [t2, t4, shape[prevShapeVert]];
              t4 = $.index(hole, holeIndex);
              t2 = $.index(hole, prevHoleVert);
              if (shapeIndex >= shape.length)
                throw $.ioore(shapeIndex);
              var triangleb = [t4, t2, shape[shapeIndex]];
              verts.push(trianglea);
              verts.push(triangleb);
              var shape0 = [];
              $.addAll(shape0, tmpShape1);
              $.addAll(shape0, tmpHole1);
              $.addAll(shape0, tmpHole2);
              $.addAll(shape0, tmpShape2);
              shape = shape0;
              ++h;
          }
      return $.makeLiteralMap(['shape', shape, 'isolatedPts', verts, 'allpoints', allpoints]);
  }
};

$.snip$bailout = function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11) {
  switch (state0) {
    case 1:
      var contour = env0;
      var u = env1;
      var v = env2;
      var w = env3;
      var n = env4;
      var verts = env5;
      break;
    case 2:
      contour = env0;
      u = env1;
      v = env2;
      w = env3;
      n = env4;
      verts = env5;
      ax = env6;
      break;
    case 3:
      contour = env0;
      u = env1;
      v = env2;
      w = env3;
      n = env4;
      verts = env5;
      ay = env6;
      ax = env7;
      break;
    case 4:
      contour = env0;
      u = env1;
      v = env2;
      w = env3;
      n = env4;
      verts = env5;
      bx = env6;
      ay = env7;
      ax = env8;
      break;
    case 5:
      contour = env0;
      u = env1;
      v = env2;
      w = env3;
      n = env4;
      verts = env5;
      bx = env6;
      ay = env7;
      by = env8;
      ax = env9;
      break;
    case 6:
      cx = env0;
      contour = env1;
      v = env2;
      w = env3;
      u = env4;
      verts = env5;
      bx = env6;
      n = env7;
      ay = env8;
      ax = env9;
      by = env10;
      break;
    case 7:
      cx = env0;
      contour = env1;
      v = env2;
      w = env3;
      u = env4;
      cy = env5;
      verts = env6;
      n = env7;
      ax = env8;
      ay = env9;
      bx = env10;
      by = env11;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (u !== (u | 0))
        throw $.iae(u);
      if (u < 0 || u >= verts.length)
        throw $.ioore(u);
      var ax = $.index(contour, verts[u]).get$x();
    case 2:
      state0 = 0;
      if (u >= verts.length)
        throw $.ioore(u);
      var ay = $.index(contour, verts[u]).get$y();
    case 3:
      state0 = 0;
      if (v !== (v | 0))
        throw $.iae(v);
      if (v < 0 || v >= verts.length)
        throw $.ioore(v);
      var bx = $.index(contour, verts[v]).get$x();
    case 4:
      state0 = 0;
      if (v >= verts.length)
        throw $.ioore(v);
      var by = $.index(contour, verts[v]).get$y();
    case 5:
      state0 = 0;
      if (w !== (w | 0))
        throw $.iae(w);
      if (w < 0 || w >= verts.length)
        throw $.ioore(w);
      var cx = $.index(contour, verts[w]).get$x();
    case 6:
      state0 = 0;
      if (w >= verts.length)
        throw $.ioore(w);
      var cy = $.index(contour, verts[w]).get$y();
    case 7:
      state0 = 0;
      if ($.gtB($.EPSILON, $.sub($.mul($.sub(bx, ax), $.sub(cy, ay)), $.mul($.sub(by, ay), $.sub(cx, ax)))))
        return false;
      for (var px = null, py = null, p = 0; p < n; ++p) {
        if (p === u || p === v || p === w)
          continue;
        if (p >= verts.length)
          throw $.ioore(p);
        px = $.index(contour, verts[p]).get$x();
        if (p >= verts.length)
          throw $.ioore(p);
        py = $.index(contour, verts[p]).get$y();
        if ($.insideTriangle(ax, ay, bx, by, cx, cy, px, py))
          return false;
      }
      return true;
  }
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0);
  var completer = $.Completer_Completer();
  var result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  var values = $.ListImplementation_List($.get$length(futures));
  for (var i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    var future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(i, result, completer, t1, values));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC0 = Isolate.makeConstantList([]);
$.CTC15 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC0);
$.CTC5 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ImageData');
$.CTC8 = new Isolate.$isolateProperties.NotImplementedException('structured clone of other type');
$.CTC11 = new Isolate.$isolateProperties.JSSyntaxRegExp('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
$.CTC9 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC6 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBuffer');
$.CTC7 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBufferView');
$.CTC1 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Date');
$.CTC14 = new Isolate.$isolateProperties._ExceptionImplementation('Incorrect number or type of arguments');
$.CTC3 = new Isolate.$isolateProperties.NotImplementedException('structured clone of File');
$.CTC10 = new Isolate.$isolateProperties.NotImplementedException('IDBKey containing Date');
$.CTC2 = new Isolate.$isolateProperties.NotImplementedException('structured clone of RegExp');
$.CTC16 = new Isolate.$isolateProperties.Object();
$.CTC12 = new Isolate.$isolateProperties._Random();
$.CTC = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC0);
$.CTC13 = new Isolate.$isolateProperties.NotImplementedException(null);
$.CTC4 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Blob');
$._getTypeNameOf = null;
$._cachedBrowserPrefix = null;
$.WebGLRenderer_PRECISION_HIGH = 'highp';
$.ExtrudeGeometry____v1 = null;
$.ExtrudeGeometry____v2 = null;
$.ExtrudeGeometry____v3 = null;
$.ExtrudeGeometry____v4 = null;
$.ExtrudeGeometry____v5 = null;
$.ExtrudeGeometry____v6 = null;
$.double_INFINITY = (1/0);
$.double_NEGATIVE_INFINITY = (-1/0);
$.Matrix4____v1 = null;
$.PI = 3.141592653589793;
$.PathAction_MOVE_TO = 'moveTo';
$.PathAction_LINE_TO = 'lineTo';
$.PathAction_QUADRATIC_CURVE_TO = 'quadraticCurveTo';
$.PathAction_BEZIER_CURVE_TO = 'bezierCurveTo';
$.PathAction_CSPLINE_THRU = 'splineThru';
$.PathAction_ARC = 'arc';
$.PathAction_ELLIPSE = 'ellipse';
$.GeometryCount = 0;
$.Object3DCount = 0;
$.MaterialCount = 0;
$.FrontSide = 0;
$.BackSide = 1;
$.DoubleSide = 2;
$.NoShading = 0;
$.FlatShading = 1;
$.SmoothShading = 2;
$.NoColors = 0;
$.VertexColors = 2;
$.NoBlending = 0;
$.NormalBlending = 1;
$.AdditiveBlending = 2;
$.SubtractiveBlending = 3;
$.MultiplyBlending = 4;
$.CustomBlending = 5;
$.AddEquation = 100;
$.SubtractEquation = 101;
$.ReverseSubtractEquation = 102;
$.ZeroFactor = 200;
$.OneFactor = 201;
$.SrcColorFactor = 202;
$.OneMinusSrcColorFactor = 203;
$.SrcAlphaFactor = 204;
$.OneMinusSrcAlphaFactor = 205;
$.DstAlphaFactor = 206;
$.OneMinusDstAlphaFactor = 207;
$.DstColorFactor = 208;
$.OneMinusDstColorFactor = 209;
$.SrcAlphaSaturateFactor = 210;
$.MultiplyOperation = 0;
$.RepeatWrapping = 0;
$.MirroredRepeatWrapping = 2;
$.ClampToEdgeWrapping = 1;
$.NearestFilter = 3;
$.NearestMipMapNearestFilter = 4;
$.NearestMipMapLinearFilter = 5;
$.LinearFilter = 6;
$.LinearMipMapNearestFilter = 7;
$.LinearMipMapLinearFilter = 8;
$.ByteType = 9;
$.UnsignedByteType = 10;
$.ShortType = 11;
$.UnsignedShortType = 12;
$.IntType = 13;
$.UnsignedIntType = 14;
$.FloatType = 15;
$.UnsignedShort5551Type = 1017;
$.RGBFormat = 17;
$.UnsignedShort4444Type = 1016;
$.LuminanceFormat = 19;
$.AlphaFormat = 16;
$.UnsignedShort565Type = 1018;
$.RGBAFormat = 18;
$.LuminanceAlphaFormat = 20;
$.LineStrip = 0;
$.__ShaderChunk = null;
$.__UniformsLib = null;
$.__ShaderLib = null;
$.EPSILON = 1e-10;
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC9;
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.EXTTextureFilterAnisotropic_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
$.EXTTextureFilterAnisotropic_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
$._Sort__INSERTION_SORT_THRESHOLD = 32;
$._TimerFactory__factory = null;
$.WebGLRenderingContext_ALPHA = 6406;
$.WebGLRenderingContext_ARRAY_BUFFER = 34962;
$.WebGLRenderingContext_BACK = 1029;
$.WebGLRenderingContext_BLEND = 3042;
$.WebGLRenderingContext_BYTE = 5120;
$.WebGLRenderingContext_CCW = 2305;
$.WebGLRenderingContext_CLAMP_TO_EDGE = 33071;
$.WebGLRenderingContext_COLOR_ATTACHMENT0 = 36064;
$.WebGLRenderingContext_COLOR_BUFFER_BIT = 16384;
$.WebGLRenderingContext_COMPILE_STATUS = 35713;
$.WebGLRenderingContext_CULL_FACE = 2884;
$.WebGLRenderingContext_CW = 2304;
$.WebGLRenderingContext_DEPTH_ATTACHMENT = 36096;
$.WebGLRenderingContext_DEPTH_BUFFER_BIT = 256;
$.WebGLRenderingContext_DEPTH_COMPONENT16 = 33189;
$.WebGLRenderingContext_DEPTH_STENCIL = 34041;
$.WebGLRenderingContext_DEPTH_STENCIL_ATTACHMENT = 33306;
$.WebGLRenderingContext_DEPTH_TEST = 2929;
$.WebGLRenderingContext_DST_COLOR = 774;
$.WebGLRenderingContext_DST_ALPHA = 772;
$.WebGLRenderingContext_DYNAMIC_DRAW = 35048;
$.WebGLRenderingContext_ELEMENT_ARRAY_BUFFER = 34963;
$.WebGLRenderingContext_FLOAT = 5126;
$.WebGLRenderingContext_FRAGMENT_SHADER = 35632;
$.WebGLRenderingContext_FRAMEBUFFER = 36160;
$.WebGLRenderingContext_FUNC_ADD = 32774;
$.WebGLRenderingContext_FUNC_REVERSE_SUBTRACT = 32779;
$.WebGLRenderingContext_FUNC_SUBTRACT = 32778;
$.WebGLRenderingContext_INT = 5124;
$.WebGLRenderingContext_LEQUAL = 515;
$.WebGLRenderingContext_LINEAR = 9729;
$.WebGLRenderingContext_LINEAR_MIPMAP_LINEAR = 9987;
$.WebGLRenderingContext_LINEAR_MIPMAP_NEAREST = 9985;
$.WebGLRenderingContext_LINES = 1;
$.WebGLRenderingContext_LINE_STRIP = 3;
$.WebGLRenderingContext_LINK_STATUS = 35714;
$.WebGLRenderingContext_LUMINANCE = 6409;
$.WebGLRenderingContext_LUMINANCE_ALPHA = 6410;
$.WebGLRenderingContext_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
$.WebGLRenderingContext_MAX_TEXTURE_SIZE = 3379;
$.WebGLRenderingContext_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
$.WebGLRenderingContext_MAX_VERTEX_UNIFORM_VECTORS = 36347;
$.WebGLRenderingContext_MIRRORED_REPEAT = 33648;
$.WebGLRenderingContext_NEAREST = 9728;
$.WebGLRenderingContext_NEAREST_MIPMAP_LINEAR = 9986;
$.WebGLRenderingContext_NEAREST_MIPMAP_NEAREST = 9984;
$.WebGLRenderingContext_ONE = 1;
$.WebGLRenderingContext_ONE_MINUS_DST_ALPHA = 773;
$.WebGLRenderingContext_ONE_MINUS_DST_COLOR = 775;
$.WebGLRenderingContext_ONE_MINUS_SRC_ALPHA = 771;
$.WebGLRenderingContext_ONE_MINUS_SRC_COLOR = 769;
$.WebGLRenderingContext_POINTS = 0;
$.WebGLRenderingContext_POLYGON_OFFSET_FILL = 32823;
$.WebGLRenderingContext_RENDERBUFFER = 36161;
$.WebGLRenderingContext_REPEAT = 10497;
$.WebGLRenderingContext_RGB = 6407;
$.WebGLRenderingContext_RGBA = 6408;
$.WebGLRenderingContext_RGBA4 = 32854;
$.WebGLRenderingContext_SHORT = 5122;
$.WebGLRenderingContext_SRC_ALPHA = 770;
$.WebGLRenderingContext_SRC_ALPHA_SATURATE = 776;
$.WebGLRenderingContext_SRC_COLOR = 768;
$.WebGLRenderingContext_STATIC_DRAW = 35044;
$._ReceivePortImpl__nextFreeId = 1;
$.WebGLRenderingContext_STENCIL_BUFFER_BIT = 1024;
$.WebGLRenderingContext_TEXTURE0 = 33984;
$.WebGLRenderingContext_TEXTURE_2D = 3553;
$.WebGLRenderingContext_TEXTURE_CUBE_MAP = 34067;
$.WebGLRenderingContext_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
$.WebGLRenderingContext_TEXTURE_MAG_FILTER = 10240;
$.WebGLRenderingContext_TEXTURE_MIN_FILTER = 10241;
$.WebGLRenderingContext_TEXTURE_WRAP_S = 10242;
$.WebGLRenderingContext_TEXTURE_WRAP_T = 10243;
$.WebGLRenderingContext_TRIANGLES = 4;
$.WebGLRenderingContext_TRIANGLE_STRIP = 5;
$.WebGLRenderingContext_UNPACK_FLIP_Y_WEBGL = 37440;
$.WebGLRenderingContext_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
$.WebGLRenderingContext_UNSIGNED_BYTE = 5121;
$.WebGLRenderingContext_UNSIGNED_INT = 5125;
$.WebGLRenderingContext_UNSIGNED_SHORT = 5123;
$.WebGLRenderingContext_UNSIGNED_SHORT_4_4_4_4 = 32819;
$.WebGLRenderingContext_UNSIGNED_SHORT_5_5_5_1 = 32820;
$.WebGLRenderingContext_UNSIGNED_SHORT_5_6_5 = 33635;
$.WebGLRenderingContext_VALIDATE_STATUS = 35715;
$.WebGLRenderingContext_VERTEX_SHADER = 35633;
$.WebGLRenderingContext_ZERO = 0;
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$_FileImpl: function() { return false; },
 is$Element: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$_FileListImpl: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$Collection: function() { return false; },
 is$JavaScriptIndexingBehavior: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$_BlobImpl: function() { return false; },
 is$IDBKeyRange: function() { return false; },
 is$ImageData: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$ImageElement: function() { return false; },
 is$CanvasElement: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$List: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 is$Map: function() { return false; },
 is$File: function() { return false; },
 is$Blob: function() { return false; },
 is$VideoElement: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._AbstractWorkerEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name?", "type?"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('WebKitAnimation', {"": ["name?"]
});

$.$defineNativeClass('HTMLAppletElement', {"": ["code?", "height=", "name?", "object?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": ["buffer?"],
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["name?", "value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["length?"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": ["buffer="],
 start$3: function(when, grainOffset, grainDuration) {
  var t1 = $ === grainOffset;
  if (t1)
    grainOffset = null;
  t1 = !t1;
  var t2 = $ === grainDuration;
  if (t2)
    grainDuration = null;
  t2 = !t2;
  if (!!this.start)
    if (t2)
      this.start(when, grainOffset, grainDuration);
    else if (t1)
      this.start(when, grainOffset);
    else
      this.start(when);
  else if (t2)
    this.noteOn(when, grainOffset, grainDuration);
  else if (t1)
    this.noteOn(when, grainOffset);
  else
    this.noteOn(when);
},
 get$start: function() { return new $.BoundClosure1(this, 'start$3'); }
});

$.$defineNativeClass('AudioChannelMerger', {"": []
});

$.$defineNativeClass('AudioChannelSplitter', {"": []
});

$.$defineNativeClass('AudioContext', {"": [],
 get$on: function() {
  return $._AudioContextEventsImpl$(this);
}
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioGainNode', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": []
});

$.$defineNativeClass('AudioPannerNode', {"": []
});

$.$defineNativeClass('AudioParam', {"": ["name?", "value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); },
 clear$1: function(arg0) { return this.clear.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('BarInfo', {"": ["visible?"]
});

$.$defineNativeClass('HTMLBaseElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {"": ["color?", "size="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {"": [],
 get$on: function() {
  return $._BatteryManagerEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": ["type?"]
});

$.$defineNativeClass('Blob', {"": ["size?", "type?"],
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": [],
 get$on: function() {
  return $._BodyElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CDATASection', {"": []
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": []
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name?"]
});

$.$defineNativeClass('WebKitCSSMatrix', {"": ["a?", "b?", "c?", "d?"],
 scale$3: function(scaleX, scaleY, scaleZ) {
  return this.scale(scaleX,scaleY,scaleZ);
},
 get$scale: function() { return new $.BoundClosure2(this, 'scale$3'); },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": []
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": ["type?"]
});

$.$defineNativeClass('CSSRuleList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length?"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 clear$1: function(arg0) { return this.get$clear().call$1(arg0); },
 get$color: function() {
  return this.getPropertyValue$1('color');
},
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 set$height: function(value) {
  this.setProperty$3('height', value, '');
},
 get$opacity: function() {
  return this.getPropertyValue$1('opacity');
},
 get$position: function() {
  return this.getPropertyValue$1('position');
},
 get$resize: function() {
  return this.getPropertyValue$1('resize');
},
 get$size: function() {
  return this.getPropertyValue$1('size');
},
 set$size: function(value) {
  this.setProperty$3('size', value, '');
},
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 set$width: function(value) {
  this.setProperty$3('width', value, '');
}
});

$.$defineNativeClass('CSSStyleRule', {"": []
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('CSSValueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height=", "width="],
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1('2d');
},
 is$CanvasElement: function() { return true; },
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": [],
 lineWidth$1: function(arg0) { return this.lineWidth.call$1(arg0); },
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 scale$2: function(sx, sy) {
  return this.scale(sx,sy);
},
 get$scale: function() { return new $.BoundClosure3(this, 'scale$2'); }
});

$.$defineNativeClass('CanvasRenderingContext', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["data?", "length?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["height?", "width?"]
});

$.$defineNativeClass('ClientRectList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": ["code?"]
});

$.$defineNativeClass('Comment', {"": []
});

$.$defineNativeClass('CompositionEvent', {"": ["data?"]
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
_ConsoleImpl.count$1 = function(arg) {
  return this.count(arg);
};
_ConsoleImpl.get$count = function() { return new $.BoundClosure(this, 'count$1'); };
$.$defineNativeClass('HTMLContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', {"": ["buffer="],
 normalize$0: function() { return this.normalize.call$0(); }
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": []
});

$.$defineNativeClass('HTMLDListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": [],
 get$on: function() {
  return $._DOMApplicationCacheEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', {"": ["name?"]
});

$.$defineNativeClass('DOMException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["name?"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["name?"]
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeTypeArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('MimeType', {"": ["type?"]
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('PluginArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Plugin', {"": ["length?", "name?"]
});

$.$defineNativeClass('Selection', {"": ["type?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMStringList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', {"": ["length?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('HTMLDataListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": ["type?"]
});

$.$defineNativeClass('DataTransferItemList', {"": ["length?"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $._DedicatedWorkerContextEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": []
});

$.$defineNativeClass('HTMLDirectoryElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', {"": [],
 get$elements: function() {
  if (this._elements == null)
    this._elements = $._FilteredElementList$(this);
  return this._elements;
},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CTC15;
},
 set$id: function(value) {
  throw $.$$throw($.UnsupportedError$('ID can\'t be set for document fragments.'));
},
 get$on: function() {
  return $._ElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {"": ["body?"],
 get$on: function() {
  return $._DocumentEventsImpl$(this);
},
 $dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentType', {"": ["name?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DynamicsCompressorNode', {"": []
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["id="],
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._ElementEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
  return this.children;
},
 get$$$dom_firstElementChild: function() {
  return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
  return this.lastElementChild;
},
 $dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 $dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height=", "name?", "type?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('EntityReference', {"": []
});

$.$defineNativeClass('EntryArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Entry', {"": ["name?"],
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": ["name?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": []
});

$.$defineNativeClass('EventException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Event', {"": ["type?"],
 preventDefault$0: function() {
  return this.preventDefault();
}
});

$.$defineNativeClass('EventSource', {"": [],
 get$on: function() {
  return $._EventSourceEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._EventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["elements?", "name?", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": ["code?"]
});

$.$defineNativeClass('FileException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('File', {"": ["name?"],
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('FileReader', {"": [],
 get$on: function() {
  return $._FileReaderEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["length?", "position?"],
 get$on: function() {
  return $._FileWriterEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length?", "position?"]
});

$.$defineNativeClass('Float32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": ["color?", "size="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["action?", "length?", "name?"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["height?", "name?", "width?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {"": [],
 get$on: function() {
  return $._FrameSetElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Gamepad', {"": ["id?", "index?"]
});

$.$defineNativeClass('GamepadList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": ["size=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequest', {"": [],
 get$on: function() {
  return $._HttpRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": ["position?"]
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $._HttpRequestUploadEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": [],
 get$key: function() {
  return $._convertNativeToDart_IDBKey(this.get$_key());
},
 get$_key: function() {
  return this.key;
}
});

$.$defineNativeClass('IDBCursorWithValue', {"": [],
 get$value: function() {
  return $._convertNativeToDart_IDBAny(this.get$_lib_value());
},
 get$_lib_value: function() {
  return this.value;
}
});

$.$defineNativeClass('IDBDatabaseException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBDatabase', {"": ["name?"],
 get$on: function() {
  return $._IDBDatabaseEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": ["name?"],
 count$1: function(key_OR_range) {
  var t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  var t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC14);
},
 get$count: function() { return new $.BoundClosure4(this, 'count$1'); },
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
}
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": [],
 is$IDBKeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {"": ["name?"],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($._convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 count$1: function(key_OR_range) {
  var t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  var t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC14);
},
 get$count: function() { return new $.BoundClosure5(this, 'count$1'); },
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
},
 index$1: function(name) {
  return this.index(name);
},
 get$index: function() { return new $.BoundClosure(this, 'index$1'); }
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $._IDBOpenDBRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBRequest', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._IDBRequestEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('IDBTransaction', {"": [],
 get$on: function() {
  return $._IDBTransactionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $._IDBVersionChangeRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height=", "name?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": ["data?", "height?", "width?"],
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["height=", "name?", "width=", "x?", "y?"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$ImageElement: function() { return true; },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["height=", "name?", "pattern?", "size=", "type?", "value=", "width="],
 get$on: function() {
  return $._InputElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('JavaScriptAudioNode', {"": [],
 get$on: function() {
  return $._JavaScriptAudioNodeEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('JavaScriptCallFrame', {"": ["type?"]
});

$.$defineNativeClass('KeyboardEvent', {"": []
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["name?", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length?"]
});

$.$defineNativeClass('Location', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('LocalMediaStream', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMWindow', {"": ["innerHeight?", "innerWidth?", "name?", "navigator?"],
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $._LocalWindowEventsImpl$(this);
},
 get$parent: function() {
  return $._convertNativeToDart_Window(this.get$_parent());
},
 get$_parent: function() {
  return this.parent;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height=", "width="],
 start$0: function() {
  return this.start();
},
 get$start: function() { return new $.BoundClosure0(this, 'start$0'); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLMediaElement', {"": [],
 get$on: function() {
  return $._MediaElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaError', {"": ["code?"]
});

$.$defineNativeClass('MediaKeyError', {"": ["code?"]
});

$.$defineNativeClass('MediaKeyEvent', {"": []
});

$.$defineNativeClass('MediaList', {"": ["length?"]
});

$.$defineNativeClass('MediaQueryList', {"": []
});

$.$defineNativeClass('MediaSource', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStream', {"": [],
 get$on: function() {
  return $._MediaStreamEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('MediaStreamList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": [],
 get$on: function() {
  return $._MediaStreamTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length?"],
 get$on: function() {
  return $._MediaStreamTrackListEventsImpl$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports?"],
 get$data: function() {
  return $._convertNativeToDart_SerializedScriptValue(this.get$_lib_data());
},
 get$_lib_data: function() {
  return this.data;
}
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $._MessagePortEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
},
 get$start: function() { return new $.BoundClosure0(this, 'start$0'); }
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Metadata', {"": ["size?"]
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": ["clientX?", "x?", "y?"]
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": []
});

$.$defineNativeClass('MutationRecord', {"": ["type?"]
});

$.$defineNativeClass('NamedNodeMap', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent?"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": ["code?"]
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('Node', {"": [],
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode) {
  try {
    var parent$ = this.get$parent();
    parent$.$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_attributes: function() {
  return this.attributes;
},
 get$$$dom_childNodes: function() {
  return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeIterator', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('NodeList', {"": ["_parent?", "length?"],
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._parent; t1.get$hasNext() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 operator$index$1: function(index) {
  return this[index];
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Notation', {"": []
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $._NotificationEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": ["start?", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["code?", "data?", "height=", "name?", "type?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["index?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Oscillator', {"": ["type?"],
 start$1: function(when) {
  return this.start(when);
},
 get$start: function() { return new $.BoundClosure(this, 'start$1'); }
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": [],
 get$on: function() {
  return $._PeerConnection00EventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": ["type?"]
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('PopStateEvent', {"": []
});

$.$defineNativeClass('PositionError', {"": ["code?"]
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": ["data?"]
});

$.$defineNativeClass('HTMLProgressElement', {"": ["position?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', {"": []
});

$.$defineNativeClass('HTMLQuoteElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": [],
 get$on: function() {
  return $._RTCDataChannelEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": []
});

$.$defineNativeClass('RTCPeerConnection', {"": [],
 get$on: function() {
  return $._RTCPeerConnectionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": ["type?"]
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": []
});

$.$defineNativeClass('RadioNodeList', {"": ["value="],
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('RangeException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Range', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RealtimeAnalyserNode', {"": []
});

$.$defineNativeClass('Rect', {"": []
});

$.$defineNativeClass('SQLError', {"": ["code?"]
});

$.$defineNativeClass('SQLException', {"": ["code?"]
});

$.$defineNativeClass('SQLResultSet', {"": []
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('SVGAElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', {"": ["format?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', {"": ["r?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": ["offset?", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', {"": ["x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDocument', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElement', {"": [],
 get$elements: function() {
  return $._FilteredElementList$(this);
},
 get$id: function() {
  return this.id;
},
 set$id: function(value) {
  this.id = value;
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $._SVGElementInstanceEventsImpl$(this);
}
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGEllipseElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["type?", "height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["scale?", "height?", "width?", "x?", "y?"],
 scale$1: function(arg0) { return this.scale.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x?", "y?", "z?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x?", "y?", "z?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["type?", "height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["format?", "x=", "y="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', {"": ["a?", "b?", "c?", "d?"],
 flipY$0: function() {
  return this.flipY();
},
 get$flipY: function() { return new $.BoundClosure0(this, 'flipY$0'); },
 scale$1: function(scaleFactor) {
  return this.scale(scaleFactor);
},
 get$scale: function() { return new $.BoundClosure(this, 'scale$1'); }
});

$.$defineNativeClass('SVGMetadataElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPatternElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": ["points?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', {"": ["points?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGRadialGradientElement', {"": ["r?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRectElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRect', {"": ["height=", "width=", "x=", "y="]
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGSVGElement', {"": ["height?", "width?", "x?", "y?"],
 viewport$4: function(arg0, arg1, arg2, arg3) { return this.viewport.call$4(arg0, arg1, arg2, arg3); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', {"": ["offset?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTransform', {"": ["type?"]
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGViewSpec', {"": []
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('Screen', {"": ["height?", "width?"]
});

$.$defineNativeClass('HTMLScriptElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProfile', {"": []
});

$.$defineNativeClass('ScriptProfileNode', {"": ["visible?"],
 children$0: function() {
  return this.children();
},
 get$children: function() { return new $.BoundClosure0(this, 'children$0'); }
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "name?", "size=", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', {"": ["name?"],
 get$on: function() {
  return $._SharedWorkerContextEventsImpl$(this);
}
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": []
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": ["code?"]
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": []
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $._SpeechRecognitionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
},
 get$start: function() { return new $.BoundClosure0(this, 'start$0'); }
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length?"]
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key?"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  for (var i = 0; true; ++i) {
    var key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": ["type?"]
});

$.$defineNativeClass('StyleSheet', {"": ["type?"]
});

$.$defineNativeClass('StyleSheetList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextEvent', {"": ["data?"]
});

$.$defineNativeClass('Text', {"": []
});

$.$defineNativeClass('TextMetrics', {"": ["width?"]
});

$.$defineNativeClass('TextTrackCue', {"": ["id=", "position?", "size=", "text!"],
 get$on: function() {
  return $._TextTrackCueEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $._TextTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackList', {"": ["length?"],
 get$on: function() {
  return $._TextTrackListEventsImpl$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length?"],
 start$1: function(index) {
  return this.start(index);
},
 get$start: function() { return new $.BoundClosure(this, 'start$1'); }
});

$.$defineNativeClass('HTMLTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TouchEvent', {"": ["touches?"]
});

$.$defineNativeClass('Touch', {"": ["clientX?", "pageX?"]
});

$.$defineNativeClass('TouchList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('UIEvent', {"": ["pageX?"]
});

$.$defineNativeClass('HTMLUListElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height=", "width="],
 is$VideoElement: function() { return true; },
 is$Element: function() { return true; }
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["name?", "size?", "type?"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": []
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": [],
 activeTexture$1: function(texture) {
  return this.activeTexture(texture);
},
 attachShader$2: function(program, shader) {
  return this.attachShader(program,shader);
},
 bindBuffer$2: function(target, buffer) {
  return this.bindBuffer(target,buffer);
},
 bindFramebuffer$2: function(target, framebuffer) {
  return this.bindFramebuffer(target,framebuffer);
},
 bindRenderbuffer$2: function(target, renderbuffer) {
  return this.bindRenderbuffer(target,renderbuffer);
},
 bindTexture$2: function(target, texture) {
  return this.bindTexture(target,texture);
},
 blendEquation$1: function(mode) {
  return this.blendEquation(mode);
},
 get$blendEquation: function() { return new $.BoundClosure(this, 'blendEquation$1'); },
 blendEquationSeparate$2: function(modeRGB, modeAlpha) {
  return this.blendEquationSeparate(modeRGB,modeAlpha);
},
 blendFunc$2: function(sfactor, dfactor) {
  return this.blendFunc(sfactor,dfactor);
},
 blendFuncSeparate$4: function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
  return this.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
},
 bufferData$3: function(target, data_OR_size, usage) {
  return this.bufferData(target,data_OR_size,usage);
},
 clear$1: function(mask) {
  return this.clear(mask);
},
 clearColor$4: function(red, green, blue, alpha) {
  return this.clearColor(red,green,blue,alpha);
},
 clearDepth$1: function(depth) {
  return this.clearDepth(depth);
},
 clearStencil$1: function(s) {
  return this.clearStencil(s);
},
 compileShader$1: function(shader) {
  return this.compileShader(shader);
},
 createBuffer$0: function() {
  return this.createBuffer();
},
 createFramebuffer$0: function() {
  return this.createFramebuffer();
},
 createProgram$0: function() {
  return this.createProgram();
},
 createRenderbuffer$0: function() {
  return this.createRenderbuffer();
},
 createShader$1: function(type) {
  return this.createShader(type);
},
 createTexture$0: function() {
  return this.createTexture();
},
 cullFace$1: function(mode) {
  return this.cullFace(mode);
},
 deleteProgram$1: function(program) {
  return this.deleteProgram(program);
},
 deleteShader$1: function(shader) {
  return this.deleteShader(shader);
},
 depthFunc$1: function(func) {
  return this.depthFunc(func);
},
 depthMask$1: function(flag) {
  return this.depthMask(flag);
},
 disable$1: function(cap) {
  return this.disable(cap);
},
 disableVertexAttribArray$1: function(index) {
  return this.disableVertexAttribArray(index);
},
 drawArrays$3: function(mode, first, count) {
  return this.drawArrays(mode,first,count);
},
 drawElements$4: function(mode, count, type, offset) {
  return this.drawElements(mode,count,type,offset);
},
 enable$1: function(cap) {
  return this.enable(cap);
},
 enableVertexAttribArray$1: function(index) {
  return this.enableVertexAttribArray(index);
},
 framebufferRenderbuffer$4: function(target, attachment, renderbuffertarget, renderbuffer) {
  return this.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
},
 framebufferTexture2D$5: function(target, attachment, textarget, texture, level) {
  return this.framebufferTexture2D(target,attachment,textarget,texture,level);
},
 frontFace$1: function(mode) {
  return this.frontFace(mode);
},
 generateMipmap$1: function(target) {
  return this.generateMipmap(target);
},
 getAttribLocation$2: function(program, name) {
  return this.getAttribLocation(program,name);
},
 getError$0: function() {
  return this.getError();
},
 getParameter$1: function(pname) {
  return this.getParameter(pname);
},
 getProgramParameter$2: function(program, pname) {
  return this.getProgramParameter(program,pname);
},
 getShaderInfoLog$1: function(shader) {
  return this.getShaderInfoLog(shader);
},
 getShaderParameter$2: function(shader, pname) {
  return this.getShaderParameter(shader,pname);
},
 getUniformLocation$2: function(program, name) {
  return this.getUniformLocation(program,name);
},
 lineWidth$1: function(width) {
  return this.lineWidth(width);
},
 linkProgram$1: function(program) {
  return this.linkProgram(program);
},
 pixelStorei$2: function(pname, param) {
  return this.pixelStorei(pname,param);
},
 polygonOffset$2: function(factor, units) {
  return this.polygonOffset(factor,units);
},
 get$polygonOffset: function() { return new $.BoundClosure3(this, 'polygonOffset$2'); },
 renderbufferStorage$4: function(target, internalformat, width, height) {
  return this.renderbufferStorage(target,internalformat,width,height);
},
 shaderSource$2: function(shader, string) {
  return this.shaderSource(shader,string);
},
 texImage2D$9: function(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
  var t1 = $ === format;
  if (t1)
    format = null;
  var t2 = $ === type;
  if (t2)
    type = null;
  var t3 = $ === pixels;
  if (t3)
    pixels = null;
  if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'number' && Math.floor(border_OR_canvas_OR_image_OR_pixels_OR_video) === border_OR_canvas_OR_image_OR_pixels_OR_video || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
    if (typeof format === 'number' && Math.floor(format) === format || format == null)
      if (typeof type === 'number' && Math.floor(type) === type || type == null)
        var t4 = typeof pixels === 'object' && pixels !== null && pixels.is$ArrayBufferView() || pixels == null;
      else
        t4 = false;
    else
      t4 = false;
  else
    t4 = false;
  if (t4) {
    this._texImage2D_1$9(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels);
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$ImageData() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_2$6(target, level, internalformat, format_OR_width, height_OR_type, $._convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$ImageElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_3$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$CanvasElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_4$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$VideoElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_5$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
    return;
  }
  throw $.$$throw($.CTC14);
},
 texImage2D$6: function(target,level,internalformat,format_OR_width,height_OR_type,border_OR_canvas_OR_image_OR_pixels_OR_video) {
  return this.texImage2D$9(target,level,internalformat,format_OR_width,height_OR_type,border_OR_canvas_OR_image_OR_pixels_OR_video,$,$,$)
},
 _texImage2D_1$9: function(target, level, internalformat, width, height, border, format, type, pixels) {
  return this.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
},
 _texImage2D_2$6: function(target, level, internalformat, format, type, pixels) {
  return this.texImage2D(target,level,internalformat,format,type,pixels);
},
 _texImage2D_3$6: function(target, level, internalformat, format, type, image) {
  return this.texImage2D(target,level,internalformat,format,type,image);
},
 _texImage2D_4$6: function(target, level, internalformat, format, type, canvas) {
  return this.texImage2D(target,level,internalformat,format,type,canvas);
},
 _texImage2D_5$6: function(target, level, internalformat, format, type, video) {
  return this.texImage2D(target,level,internalformat,format,type,video);
},
 texParameterf$3: function(target, pname, param) {
  return this.texParameterf(target,pname,param);
},
 texParameteri$3: function(target, pname, param) {
  return this.texParameteri(target,pname,param);
},
 uniform1f$2: function(location, x) {
  return this.uniform1f(location,x);
},
 uniform1fv$2: function(location, v) {
  return this.uniform1fv(location,v);
},
 uniform1i$2: function(location, x) {
  return this.uniform1i(location,x);
},
 uniform1iv$2: function(location, v) {
  return this.uniform1iv(location,v);
},
 uniform2f$3: function(location, x, y) {
  return this.uniform2f(location,x,y);
},
 uniform2fv$2: function(location, v) {
  return this.uniform2fv(location,v);
},
 uniform3f$4: function(location, x, y, z) {
  return this.uniform3f(location,x,y,z);
},
 uniform3fv$2: function(location, v) {
  return this.uniform3fv(location,v);
},
 uniform3iv$2: function(location, v) {
  return this.uniform3iv(location,v);
},
 uniform4f$5: function(location, x, y, z, w) {
  return this.uniform4f(location,x,y,z,w);
},
 uniform4fv$2: function(location, v) {
  return this.uniform4fv(location,v);
},
 uniformMatrix3fv$3: function(location, transpose, array) {
  return this.uniformMatrix3fv(location,transpose,array);
},
 uniformMatrix4fv$3: function(location, transpose, array) {
  return this.uniformMatrix4fv(location,transpose,array);
},
 useProgram$1: function(program) {
  return this.useProgram(program);
},
 vertexAttribPointer$6: function(indx, size, type, normalized, stride, offset) {
  return this.vertexAttribPointer(indx,size,type,normalized,stride,offset);
},
 viewport$4: function(x, y, width, height) {
  return this.viewport(x,y,width,height);
}
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', {"": ["name?"],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": [],
 get$on: function() {
  return $._WebSocketEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WheelEvent', {"": []
});

$.$defineNativeClass('WorkerContext', {"": ["navigator?"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._WorkerContextEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $._WorkerEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent?"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": ["code?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 set$id: function(i) {
  this.id = i;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

// 526 dynamic classes.
// 526 classes
// 41 !leaf
(function(){
  var v0/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v1/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v2/*class(_MouseEventImpl)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v3/*class(_AudioSourceNodeImpl)*/ = 'AudioSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode';
  var v4/*class(_SVGColorImpl)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v5/*class(_CSSValueListImpl)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v6/*class(_TextImpl)*/ = 'Text|CDATASection|CDATASection';
  var v7/*class(_SVGTextContentElementImpl)*/ = [v0/*class(_SVGTextPositioningElementImpl)*/,v0/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v8/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v9/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v10/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v11/*class(_SVGElementImpl)*/ = [v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v12/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v13/*class(_UIEventImpl)*/ = [v2/*class(_MouseEventImpl)*/,v2/*class(_MouseEventImpl)*/,'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent'].join('|');
  var v14/*class(_ProgressEventImpl)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v15/*class(_ElementImpl)*/ = [v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v16/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v17/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v18/*class(_CharacterDataImpl)*/ = [v6/*class(_TextImpl)*/,v6/*class(_TextImpl)*/,'CharacterData|Comment|Comment'].join('|');
  var v19/*class(_WorkerContextImpl)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v20/*class(_NodeImpl)*/ = [v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr'].join('|');
  var v21/*class(_MediaStreamImpl)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v22/*class(_IDBRequestImpl)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v23/*class(_AbstractWorkerImpl)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['SVGTextPositioningElement', v0/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v7/*class(_SVGTextContentElementImpl)*/],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet'],
    ['Text', v6/*class(_TextImpl)*/],
    ['AbstractWorker', v23/*class(_AbstractWorkerImpl)*/],
    ['Uint8Array', v1/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v1/*class(_Uint8ArrayImpl)*/,v1/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['MouseEvent', v2/*class(_MouseEventImpl)*/],
    ['UIEvent', v13/*class(_UIEventImpl)*/],
    ['AudioSourceNode', v3/*class(_AudioSourceNodeImpl)*/],
    ['AudioNode', [v3/*class(_AudioSourceNodeImpl)*/,v3/*class(_AudioSourceNodeImpl)*/,'AudioNode|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['WorkerContext', v19/*class(_WorkerContextImpl)*/],
    ['SVGColor', v4/*class(_SVGColorImpl)*/],
    ['CSSValueList', v5/*class(_CSSValueListImpl)*/],
    ['CSSValue', [v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext|CanvasRenderingContext2D'],
    ['CharacterData', v18/*class(_CharacterDataImpl)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['DocumentFragment', v17/*class(_DocumentFragmentImpl)*/],
    ['HTMLDocument', v16/*class(_DocumentImpl)*/],
    ['SVGGradientElement', v8/*class(_SVGGradientElementImpl)*/],
    ['SVGComponentTransferFunctionElement', v9/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v10/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v11/*class(_SVGElementImpl)*/],
    ['HTMLMediaElement', v12/*class(_MediaElementImpl)*/],
    ['Element', v15/*class(_ElementImpl)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['ProgressEvent', v14/*class(_ProgressEventImpl)*/],
    ['Event', [v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['Node', v20/*class(_NodeImpl)*/],
    ['MediaStream', v21/*class(_MediaStreamImpl)*/],
    ['IDBRequest', v22/*class(_IDBRequestImpl)*/],
    ['EventTarget', [v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,'EventTarget|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=WebGL_Geometry_Extrude_By_U_Shapes.dart.js.map