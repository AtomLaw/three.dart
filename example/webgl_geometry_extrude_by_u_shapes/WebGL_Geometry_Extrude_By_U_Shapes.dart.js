// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;actualType,expectedType",
  toString$0: function() {
    return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
  }
};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib$_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.length($.$$index(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._liblib$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start>,end,_groups",
  $index: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout7(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout7: function(state0, index, t1) {
    return $.$$index(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    this._liblib$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib$_current == null);
  }
};

$$.StringMatch = {"": "Object;start>,str,pattern>",
  $index: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.JsStringBuffer = {"": "Object;_contents",
  get$length: function() {
    return $.length(this._contents);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  addAll$1: function(objects) {
    var t1, t2, t4;
    for (t1 = $.iterator(objects); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (typeof t2 !== "string")
        return this.addAll$1$bailout(1, t1, t2);
      t4 = this._contents;
      this._contents = t4 + t2;
    }
  },
  addAll$1$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.iterator(objects);
      case 1:
        var t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
                t2 = t1.get$current();
              case 1:
                state0 = 0;
                t4 = this._contents;
                t2 = typeof t2 === "string" ? t2 : $.S(t2);
                this._contents = t4 + t2;
            }
    }
  },
  toString$0: function() {
    return this._contents;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(elements) {
    var t1;
    for (t1 = $.iterator(elements); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  $isCollection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, i;
    t1 = {};
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.$$lt(t1.i_1, t2.length) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
      if ($.$$gt(t1.i_1, 0) === true)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    t3 = $.toString(t1.sb_0);
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add(t1.sb_0, ", ");
      t4 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add(t4, t2[i]);
    }
    t2 = $.toString(t1.sb_0);
    t4 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t4) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t4) + "(" + $.S(t3) + ")\n" + "Found: " + $.S(t4) + "(" + $.S(t2) + ")";
  },
  toString$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.$$lt(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
            if ($.$$gt(t1.i_1, 0) === true)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, t4, i;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = $.toString(t1.sb_0);
          t1.sb_0 = $.StringBuffer_StringBuffer("");
          for (t4 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.CONSTANT1.$lt(i, t4.get$length(t2)); ++i) {
            if (i > 0)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t4.$index(t2, i));
          }
          t2 = $.toString(t1.sb_0);
          t4 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t4) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t4) + "(" + $.S(t3) + ")\n" + "Found: " + $.S(t4) + "(" + $.S(t2) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  }
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  }
};

$$.Iterable = {"": "Object;",
  mappedBy$1: function(f) {
    return $.MappedIterable$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  reduce$2: function(initialValue, combine) {
    var t1, value;
    for (t1 = $.iterator(this), value = initialValue; t1.moveNext$0() === true;)
      value = combine.call$2(value, t1.get$current());
    return value;
  },
  join$1: function(separator) {
    var t1, buffer, t2;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    t1 = $.iterator(this);
    if (t1.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator === "")
      do
        $.add(buffer, $.S(t1.get$current()));
      while (t1.moveNext$0() === true);
    else {
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, $.S(t1.get$current()));
      for (; t1.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(t1.get$current()));
      }
    }
    return $.toString(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var t1, buffer, t2;
    t1 = $.iterator(this);
    if (t1.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator == null || $.$$eq(separator, "") === true)
      do
        $.add(buffer, $.S(t1.get$current()));
      while (t1.moveNext$0() === true);
    else {
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, $.S(t1.get$current()));
      for (; t1.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(t1.get$current()));
      }
    }
    return $.toString(buffer);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$length: function() {
    var t1, count;
    t1 = $.iterator(this);
    for (count = 0; t1.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.iterator(this).moveNext$0() !== true;
  },
  get$last: function() {
    var t1, result;
    t1 = $.iterator(this);
    if (t1.moveNext$0() !== true)
      throw $.$$throw($.StateError$("No elements"));
    do
      result = t1.get$current();
    while (t1.moveNext$0() === true);
    return result;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.ObjectInterceptor = {"": "Object;",
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  $div: function(receiver, a0) {
    return receiver.$div(a0);
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  },
  get$last: function(receiver) {
    return receiver.get$last();
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  toInt$0: function(receiver) {
    return receiver.toInt$0();
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  contains$2: function(receiver, a0, a1) {
    return receiver.contains$2(a0, a1);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  abs$0: function(receiver) {
    return receiver.abs$0();
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  reduce$2: function(receiver, a0, a1) {
    return receiver.reduce$2(a0, a1);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  removeRange$2: function(receiver, a0, a1) {
    return receiver.removeRange$2(a0, a1);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  $negate: function(receiver) {
    return receiver.$negate();
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  compareTo$1: function(receiver, a0) {
    return receiver.compareTo$1(a0);
  },
  sort$1: function(receiver, a0) {
    return receiver.sort$1(a0);
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  $mod: function(receiver, a0) {
    return receiver.$mod(a0);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  mappedBy$1: function(receiver, a0) {
    return receiver.mappedBy$1(a0);
  },
  get$isNegative: function(receiver) {
    return receiver.get$isNegative();
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  toStringAsFixed$1: function(receiver, a0) {
    return receiver.toStringAsFixed$1(a0);
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  addAll$1: function(receiver, a0) {
    return receiver.addAll$1(a0);
  },
  get$isInfinite: function(receiver) {
    return receiver.get$isInfinite();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  $shr: function(receiver, a0) {
    return receiver.$shr(a0);
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  join$1: function(receiver, a0) {
    return receiver.join$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  $le: function(receiver, a0) {
    return receiver.$le(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.iterator(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(receiver, f) {
    return $.MappedList$(receiver, f);
  },
  join$1: function(receiver, separator) {
    var list, i, t1;
    if (separator == null)
      separator = "";
    list = $.List_List(receiver.length);
    for (i = 0; i < receiver.length; ++i) {
      t1 = $.S(receiver[i]);
      if (i >= list.length)
        throw $.ioore(i);
      list[i] = t1;
    }
    return list.join(separator);
  },
  reduce$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(receiver, initialValue, combine);
  },
  getRange$2: function(receiver, start, length) {
    var t1, end;
    if (0 === length)
      return [];
    $.checkNull(start);
    $.checkNull(length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof length === "number" && Math.floor(length) === length))
      throw $.$$throw($.ArgumentError$(length));
    t1 = length < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$(length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + length;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value(length));
    if (t1)
      throw $.$$throw($.ArgumentError$(length));
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, length) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if (length === 0)
      return;
    $.checkNull(start);
    $.checkNull(length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (length < 0)
      throw $.$$throw($.ArgumentError$(length));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + length;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - length;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  sort$1: function(receiver, compare) {
    $.checkMutable(receiver, "sort");
    $.IterableMixinWorkaround_sortList(receiver, compare);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.Collections_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    return $.List_List$from(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if ($.$$eq(this.get$isNegative(receiver), bIsNegative) === true)
          return 0;
        if (this.get$isNegative(receiver) === true)
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver) === true) {
      if (this.get$isNaN(b) === true)
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver) === true)
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver) === true)
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = this.truncate$0(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result;
    $.checkNum(fractionDigits);
    if (fractionDigits < 0 || fractionDigits > 20)
      throw $.$$throw($.RangeError$(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    if (receiver === 0 && this.get$isNegative(receiver) === true)
      return "-" + result;
    return result;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result;
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    t3 = this._keys.length;
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.$$eq(existingKey, key) === true)
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT2)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, key, null, hash, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, key, t1, hash, numberOfProbes0, insertionIndex) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.hashCode(key);
      case 1:
        state0 = 0;
        hash = $.$$and(t1, this._keys.length - 1);
        numberOfProbes = 1;
        insertionIndex = -1;
      case 2:
        var numberOfProbes, existingKey;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.$$eq(existingKey, key) === true)
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT2)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, hash, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.$$and($.hashCode(key), this._keys.length - 1);
    if (t1 !== (t1 | 0))
      return this._probeForLookup$1$bailout(1, key, t1);
    for (hash = t1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, t1) {
    var hash, numberOfProbes, existingKey, numberOfProbes0;
    for (hash = t1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var t1, capacity, t2;
    t1 = $.$$add(this._numberOfEntries, 1);
    if ($.$$ge(t1, this._loadLimit) === true) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this._numberOfDeleted;
    if (t2 > capacity - t1 - t2)
      this._grow$1(capacity);
  },
  _grow$1: function(newCapacity) {
    var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
    capacity = this._keys.length;
    this._loadLimit = $.$$tdiv($.$$mul(newCapacity, 3), 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT2)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  $indexSet: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT2) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.$$indexSet$bailout1(1, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout1: function(state0, key, value, t1, index) {
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT2))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.$$add(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  $index: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.$$index$bailout2(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout2: function(state0, index) {
    var t1;
    if ($.$$lt(index, 0) === true)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, value;
    index = this._probeForLookup$1(key);
    if ($.$$ge(index, 0) === true) {
      this._numberOfEntries = $.$$sub(this._numberOfEntries, 1);
      t1 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t1.length)
        throw $.ioore(index);
      value = t1[index];
      t1[index] = null;
      t1 = this._keys;
      if (index >= t1.length)
        throw $.ioore(index);
      t1[index] = $.CONSTANT2;
      this._numberOfDeleted = this._numberOfDeleted + 1;
      return value;
    }
    return;
  },
  get$isEmpty: function() {
    return $.$$eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  containsKey$1: function(key) {
    return $.$$eq(this._probeForLookup$1(key), -1) !== true;
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  $isMap: function() {
    return true;
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, t2, length, t3, newIndex, key;
    t1 = this._map;
    t2 = t1._keys;
    length = t2.length;
    t3 = this._index;
    if (t3 !== (t3 | 0))
      return this.moveNext$0$bailout(1, length, t3, t1);
    newIndex = t3 + 1;
    for (; newIndex < length;) {
      if (newIndex < 0)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT2)) {
        this._current = this._computeCurrentFromIndex$3(newIndex, t2, t1._values);
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length;
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, length, t2, t1) {
    var newIndex, key;
    newIndex = $.$$add(t2, 1);
    for (; $.$$lt(newIndex, length) === true;) {
      t2 = t1._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT2)) {
        this._current = this._computeCurrentFromIndex$3(newIndex, t2, t1._values);
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length;
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_list,_map",
  $indexSet: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.$$indexSet$bailout0(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      t3 = this._list.lastEntry$0();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
        return this.$$indexSet$bailout0(2, key, null, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  $$indexSet$bailout0: function(state0, key, value, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.$$index(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              $.$$indexSet(t1, key, this._list.lastEntry$0());
          }
    }
  },
  $index: function(key) {
    var t1 = this._map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout1(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1 = t1[key];
    if (t1 == null)
      return;
    return t1.get$element().get$value();
  },
  $$index$bailout1: function(state0, key, t1) {
    t1 = $.$$index(t1, key);
    if (t1 == null)
      return;
    return t1.get$element().get$value();
  },
  remove$1: function(key) {
    var t1 = $.remove(this._map, key);
    if (t1 == null)
      return;
    t1.remove$0();
    return t1.get$element().get$value();
  },
  forEach$1: function(f) {
    this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    return $.length(this._map);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._list = $.DoubleLinkedQueue$();
  },
  $isMap: function() {
    return true;
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Iterable;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._sentinel.prepend$1(t2);
    }
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.$$eq(entry.get$element(), o) === true) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  get$last: function() {
    return this._sentinel._previous.get$element();
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  $isCollection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._current = null;
      this._sentinel = null;
      return false;
    }
    this._current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._current;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    return $.MappedIterator$($.iterator(this._iterable), this._f);
  },
  get$length: function() {
    return $.length(this._iterable);
  },
  get$isEmpty: function() {
    return $.isEmpty(this._iterable);
  }
};

$$.MappedIterator = {"": "Iterator;_liblib0$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib0$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib0$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    return $.WhereIterator$($.iterator(this._iterable), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ListBase = {"": "Collection;",
  get$iterator: function() {
    return $.ListIterator$(this);
  },
  forEach$1: function(f) {
    var t1, i;
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = 0; $.CONSTANT1.$lt(i, t1.get$length(this)); ++i)
      f.call$1(this.$index(i));
  },
  reduce$2: function(initialValue, combine) {
    var t1, value, i;
    for (t1 = $.getInterceptor$JSStringJSArray(this), value = initialValue, i = 0; $.CONSTANT1.$lt(i, t1.get$length(this)); ++i)
      value = combine.call$2(value, this.$index(i));
    return value;
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  indexOf$2: function(value, start) {
    var t1, i, t2;
    if (typeof start !== "number")
      return this.indexOf$2$bailout(1, value, start);
    t1 = $.getInterceptor$JSStringJSArray(this);
    i = start;
    while (true) {
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.indexOf$2$bailout(2, value, null, t2, i);
      if (!(i < t2))
        break;
      if ($.$$eq(this.$index(i), value) === true)
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$2$bailout: function(state0, value, start, t2, i) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = start;
      case 2:
        var t1, t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(this);
              case 2:
                state0 = 0;
                t4 = $.getInterceptor$JSNumber(i);
                if (!(t4.$lt(i, t2) === true))
                  break L0;
                if ($.$$eq(this.$index(i), value) === true)
                  return i;
                i = t4.$add(i, 1);
            }
        return -1;
    }
  },
  indexOf$1: function(value) {
    return this.indexOf$2(value, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  getRange$2: function(start, length) {
    var result, i;
    if (typeof start !== "number")
      return this.getRange$2$bailout(1, start, length);
    if (typeof length !== "number")
      return this.getRange$2$bailout(1, start, length);
    result = [];
    for (i = 0; i < length; ++i)
      result.push(this.$index(start + i));
    return result;
  },
  getRange$2$bailout: function(state0, start, length) {
    var result, t1, i;
    result = [];
    for (t1 = $.getInterceptor$JSNumber(start), i = 0; $.CONSTANT1.$lt(i, length); ++i)
      result.push(this.$index(t1.$add(start, i)));
    return result;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  toString$0: function() {
    return this.get$Collections().collectionToString$1(this);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$.UnmodifiableListBase = {"": "ListBase;",
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeRange$2: function(start, length) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  }
};

$$.ListIterator = {"": "Object;_liblib0$_list,_length,_position,_liblib0$_current",
  moveNext$0: function() {
    var t1, t3, t4, t5, t2;
    t1 = this._liblib0$_list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.moveNext$0$bailout0(1, t1);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    t4 = t1.length;
    t5 = this._length;
    if (typeof t5 !== "number")
      return this.moveNext$0$bailout0(3, t1, t3, t4, t5);
    if (!(t4 === t5))
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout0(4, t1, t3, null, t5, t2);
    ++t2;
    if (t2 < t5) {
      this._position = t2;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      this._liblib0$_current = t1[t2];
      return true;
    }
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, t1, t3, t4, t6, t2) {
    switch (state0) {
      case 0:
        t1 = this._liblib0$_list;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        t4 = t3.get$length(t1);
      case 2:
        state0 = 0;
        t6 = this._length;
      case 3:
        state0 = 0;
        if ($.$$eq(t4, t6) !== true)
          throw $.$$throw($.ConcurrentModificationError$(t1));
        t2 = this._position;
      case 4:
        state0 = 0;
        t2 = $.$$add(t2, 1);
        if ($.$$lt(t2, t6) === true) {
          this._position = t2;
          this._liblib0$_current = t3.$index(t1, t2);
          return true;
        }
        this._liblib0$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.MappedList = {"": "UnmodifiableListBase;_liblib0$_list,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  $index: function(index) {
    var t1 = this._liblib0$_list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout3(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return this._f$1(t1[index]);
  },
  $$index$bailout3: function(state0, index, t1) {
    return this._f$1($.$$index(t1, index));
  },
  get$length: function() {
    return $.length(this._liblib0$_list);
  }
};

$$.WebGL_Geometry_Extrude_By_U_Shapes = {"": "Object;container,camera,scene,renderer,windowHalfX,windowHalfY,mouseX,mouseXOnMouseDown,targetRotation,targetRotationOnMouseDown,parent=,text,plane",
  run$0: function() {
    var t1, t2, t3;
    this.windowHalfX = $.$$div(window.get$innerWidth(), 2);
    this.windowHalfY = $.$$div(window.get$innerHeight(), 2);
    this.init$0();
    window.requestAnimationFrame$1(this.get$animate());
    t1 = this.parent.get$rotation();
    t2 = t1.get$y();
    t3 = this.targetRotation;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1.set$y($.$$add(t2, (t3 - t2) * 0.05));
    this.renderer.render$2(this.scene, this.camera);
  },
  _addGeometry$9: function(geometry, color, x, y, z, rx, ry, rz, s) {
    var mesh = $.createMultiMaterialObject(geometry, [$.MeshLambertMaterial$(0, 16777215, 205, 100, 204, 1, color, 0, true, true, 0, null, true, null, null, false, false, "", 0.2, false, false, 0, 0, 1, 0.98, 2, 0, false, null, true, 0, true, false, "round", "round", 1, false, null), $.MeshBasicMaterial$(0, 205, 100, 204, 1, 0, 0, true, true, null, true, null, null, false, "", 0.3, false, false, 0, 0, 1, 0.98, 2, 0, false, null, false, 0, true, true, "round", "round", 1)]);
    mesh.position.setValues$3(x, y, z - 75);
    mesh.scale.setValues$3(s, s, s);
    $.add(this.parent, mesh);
  },
  init$0: function() {
    var light, pts, i, l, a, starShape, rnd, line, line2, curvepath, randomPoints, extrudeUSteps, t1, t2, initU, t3, t4, t5, d, t6, circleShape, rectShape, smileyShape, smileyEye1Path, smileyEye2Path, smileyMouthPath, circle3d, tube;
    this.container = $.Element_Element$tag("div");
    $.add(document.get$body().get$nodes(), this.container);
    this.camera = $.PerspectiveCamera$(50, $.$$div(window.get$innerWidth(), window.get$innerHeight()), 1, 1000);
    this.camera.get$position().setValues$3(0, 150, 500);
    this.scene = $.Scene$();
    light = $.DirectionalLight$(16777215, 1, 0);
    light.position.setValues$3(0, 0, 1);
    $.add(this.scene, light);
    this.parent = $.Object3D$();
    this.parent.get$position().set$y(50);
    $.add(this.scene, this.parent);
    pts = [];
    for (i = 0; i < 10; ++i) {
      l = $.CONSTANT1.$mod(i, 2) === 1 ? 5 : 10;
      a = i / 5 * 3.141592653589793;
      pts.push($.Vector2$(Math.cos($.checkNum(a)) * l, Math.sin($.checkNum(a)) * l));
    }
    starShape = $.Shape$(pts);
    rnd = $.Random_Random(null);
    line = $.LineCurve3$($.Vector3$(0, 0, 0), $.Vector3$(100, 0, 0));
    line2 = $.LineCurve3$($.Vector3$(100, 0, 0), $.Vector3$(200, 50, 0));
    curvepath = $.CurvePath$();
    curvepath.add$1(line);
    curvepath.add$1(line2);
    randomPoints = [$.Vector3$(200, 50, 0)];
    for (i = 0; i < 5; ++i)
      randomPoints.push($.Vector3$($.$$mul(rnd.nextDouble$0(), 200), $.$$mul(rnd.nextDouble$0(), 200), $.$$mul(rnd.nextDouble$0(), 200)));
    curvepath.add$1($.SplineCurve3$(randomPoints));
    extrudeUSteps = $.List_List(0);
    t1 = $.length(curvepath);
    if (typeof t1 !== "number")
      return this.init$0$bailout(1, starShape, curvepath, t1, extrudeUSteps);
    for (t2 = $.CONSTANT0.get$iterator(curvepath.curves), initU = 0; t2.moveNext$0() === true;) {
      t3 = t2.get$current();
      if (typeof t3 === "object" && t3 !== null && !!t3.$isLineCurve3) {
        initU = $.$$add(initU, $.$$div($.length(t3), t1));
        extrudeUSteps.push(initU);
      } else {
        for (t4 = $.getInterceptor$JSStringJSArray(t3), t5 = $.getInterceptor$JSNumber(initU), d = 0; d <= 40; ++d) {
          t6 = $.$$div(t4.get$length(t3), t1);
          if (typeof t6 !== "number")
            throw $.iae(t6);
          extrudeUSteps.push(t5.$add(initU, d / 40 * t6));
        }
        initU = $.CONSTANT0.get$last(extrudeUSteps);
      }
    }
    $.print("[WebGL_Geometry_Extrude_By_U_Shapes] " + $.S(extrudeUSteps));
    circleShape = $.Shape$(null);
    circleShape.moveTo$2(0, 4);
    circleShape.quadraticCurveTo$4(4, 4, 4, 0);
    circleShape.quadraticCurveTo$4(4, -4, 0, -4);
    circleShape.quadraticCurveTo$4(-4, -4, -4, 0);
    circleShape.quadraticCurveTo$4(-4, 4, 0, 4);
    rectShape = $.Shape$(null);
    rectShape.moveTo$2(-6, -2);
    rectShape.lineTo$2(-6, 2);
    rectShape.lineTo$2(6, 2);
    rectShape.lineTo$2(6, -6);
    rectShape.lineTo$2(-6, -6);
    smileyShape = $.Shape$(null);
    smileyShape.moveTo$2(80, 40);
    smileyShape.arc$6(40, 40, 40, 0, 6.283185307179586, false);
    smileyEye1Path = $.Path$(null);
    smileyEye1Path.moveTo$2(35, 20);
    smileyEye1Path.arc$6(25, 20, 10, 0, 6.283185307179586, true);
    t1 = smileyShape.holes;
    t1.push(smileyEye1Path);
    smileyEye2Path = $.Path$(null);
    smileyEye2Path.moveTo$2(65, 20);
    smileyEye2Path.arc$6(55, 20, 10, 0, 6.283185307179586, true);
    t1.push(smileyEye2Path);
    smileyMouthPath = $.Path$(null);
    smileyMouthPath.moveTo$2(20, 40);
    smileyMouthPath.quadraticCurveTo$4(40, 60, 60, 40);
    smileyMouthPath.bezierCurveTo$6(70, 45, 70, 50, 60, 60);
    smileyMouthPath.quadraticCurveTo$4(40, 80, 20, 60);
    smileyMouthPath.quadraticCurveTo$4(5, 50, 20, 40);
    t1.push(smileyMouthPath);
    circle3d = starShape.extrude$5$amount$bevelEnabled$bevelSegments$extrudePath$steps(200, false, 2, curvepath, extrudeUSteps);
    tube = $.TubeGeometry$(curvepath, 40, 4, 5, false, true);
    this._addGeometry$9(circle3d, 16716049, -100, 0, 0, 0, 0, 0, 1);
    this._addGeometry$9(tube, 65297, 0, 0, 0, 0, 0, 0, 1);
    this.renderer = $.WebGLRenderer$(true, true, null, 0, 0, 4, "highp", true, false, true);
    this.renderer.setSize$2(window.get$innerWidth(), window.get$innerHeight());
    this.renderer.set$sortObjects(false);
    $.add(this.container.get$nodes(), this.renderer.get$domElement());
    document.get$on().get$mouseDown().add$2(this.get$onDocumentMouseDown(), false);
    document.get$on().get$touchStart().add$2(this.get$onDocumentTouchStart(), false);
    document.get$on().get$touchMove().add$2(this.get$onDocumentTouchMove(), false);
    $.add(window.get$on().get$resize(), this.get$onWindowResize());
  },
  init$0$bailout: function(state0, starShape, curvepath, t1, extrudeUSteps) {
    var t2, initU, t3, t4, t5, d, t6, circleShape, rectShape, smileyShape, smileyEye1Path, smileyEye2Path, smileyMouthPath, circle3d, tube;
    for (t2 = $.CONSTANT0.get$iterator(curvepath.curves), initU = 0; t2.moveNext$0() === true;) {
      t3 = t2.get$current();
      if (typeof t3 === "object" && t3 !== null && !!t3.$isLineCurve3) {
        initU = $.$$add(initU, $.$$div($.length(t3), t1));
        extrudeUSteps.push(initU);
      } else {
        for (t4 = $.getInterceptor$JSStringJSArray(t3), t5 = $.getInterceptor$JSNumber(initU), d = 0; d <= 40; ++d) {
          t6 = $.$$div(t4.get$length(t3), t1);
          if (typeof t6 !== "number")
            throw $.iae(t6);
          extrudeUSteps.push(t5.$add(initU, d / 40 * t6));
        }
        initU = $.CONSTANT0.get$last(extrudeUSteps);
      }
    }
    $.print("[WebGL_Geometry_Extrude_By_U_Shapes] " + $.S(extrudeUSteps));
    circleShape = $.Shape$(null);
    circleShape.moveTo$2(0, 4);
    circleShape.quadraticCurveTo$4(4, 4, 4, 0);
    circleShape.quadraticCurveTo$4(4, -4, 0, -4);
    circleShape.quadraticCurveTo$4(-4, -4, -4, 0);
    circleShape.quadraticCurveTo$4(-4, 4, 0, 4);
    rectShape = $.Shape$(null);
    rectShape.moveTo$2(-6, -2);
    rectShape.lineTo$2(-6, 2);
    rectShape.lineTo$2(6, 2);
    rectShape.lineTo$2(6, -6);
    rectShape.lineTo$2(-6, -6);
    smileyShape = $.Shape$(null);
    smileyShape.moveTo$2(80, 40);
    smileyShape.arc$6(40, 40, 40, 0, 6.283185307179586, false);
    smileyEye1Path = $.Path$(null);
    smileyEye1Path.moveTo$2(35, 20);
    smileyEye1Path.arc$6(25, 20, 10, 0, 6.283185307179586, true);
    t1 = smileyShape.holes;
    t1.push(smileyEye1Path);
    smileyEye2Path = $.Path$(null);
    smileyEye2Path.moveTo$2(65, 20);
    smileyEye2Path.arc$6(55, 20, 10, 0, 6.283185307179586, true);
    t1.push(smileyEye2Path);
    smileyMouthPath = $.Path$(null);
    smileyMouthPath.moveTo$2(20, 40);
    smileyMouthPath.quadraticCurveTo$4(40, 60, 60, 40);
    smileyMouthPath.bezierCurveTo$6(70, 45, 70, 50, 60, 60);
    smileyMouthPath.quadraticCurveTo$4(40, 80, 20, 60);
    smileyMouthPath.quadraticCurveTo$4(5, 50, 20, 40);
    t1.push(smileyMouthPath);
    circle3d = starShape.extrude$5$amount$bevelEnabled$bevelSegments$extrudePath$steps(200, false, 2, curvepath, extrudeUSteps);
    tube = $.TubeGeometry$(curvepath, 40, 4, 5, false, true);
    this._addGeometry$9(circle3d, 16716049, -100, 0, 0, 0, 0, 0, 1);
    this._addGeometry$9(tube, 65297, 0, 0, 0, 0, 0, 0, 1);
    this.renderer = $.WebGLRenderer$(true, true, null, 0, 0, 4, "highp", true, false, true);
    this.renderer.setSize$2(window.get$innerWidth(), window.get$innerHeight());
    this.renderer.set$sortObjects(false);
    $.add(this.container.get$nodes(), this.renderer.get$domElement());
    document.get$on().get$mouseDown().add$2(this.get$onDocumentMouseDown(), false);
    document.get$on().get$touchStart().add$2(this.get$onDocumentTouchStart(), false);
    document.get$on().get$touchMove().add$2(this.get$onDocumentTouchMove(), false);
    $.add(window.get$on().get$resize(), this.get$onWindowResize());
  },
  onWindowResize$1: function(event) {
    var t1;
    this.windowHalfX = $.$$div(window.get$innerWidth(), 2);
    this.windowHalfY = $.$$div(window.get$innerHeight(), 2);
    t1 = $.$$div(window.get$innerWidth(), window.get$innerHeight());
    this.camera.set$aspect(t1);
    this.camera.updateProjectionMatrix$0();
    this.renderer.setSize$2(window.get$innerWidth(), window.get$innerHeight());
  },
  get$onWindowResize: function() {
    return new $.BoundClosure(this, "onWindowResize$1");
  },
  onDocumentMouseDown$1: function(event) {
    event.preventDefault$0();
    document.get$on().get$mouseMove().add$2(this.get$onDocumentMouseMove(), false);
    document.get$on().get$mouseUp().add$2(this.get$onDocumentMouseUp(), false);
    document.get$on().get$mouseOut().add$2(this.get$onDocumentMouseOut(), false);
    this.mouseXOnMouseDown = $.$$sub(event.get$clientX(), this.windowHalfX);
    this.targetRotationOnMouseDown = this.targetRotation;
  },
  get$onDocumentMouseDown: function() {
    return new $.BoundClosure(this, "onDocumentMouseDown$1");
  },
  onDocumentMouseMove$1: function(event) {
    var t1, t2;
    this.mouseX = $.$$sub(event.get$clientX(), this.windowHalfX);
    t1 = this.targetRotationOnMouseDown;
    t2 = $.$$mul($.$$sub(this.mouseX, this.mouseXOnMouseDown), 0.02);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this.targetRotation = t1 + t2;
  },
  get$onDocumentMouseMove: function() {
    return new $.BoundClosure(this, "onDocumentMouseMove$1");
  },
  onDocumentMouseUp$1: function(event) {
    document.get$on().get$mouseMove().remove$2(this.get$onDocumentMouseMove(), false);
    document.get$on().get$mouseUp().remove$2(this.get$onDocumentMouseUp(), false);
    document.get$on().get$mouseOut().remove$2(this.get$onDocumentMouseOut(), false);
  },
  get$onDocumentMouseUp: function() {
    return new $.BoundClosure(this, "onDocumentMouseUp$1");
  },
  onDocumentMouseOut$1: function(event) {
    document.get$on().get$mouseMove().remove$2(this.get$onDocumentMouseMove(), false);
    document.get$on().get$mouseUp().remove$2(this.get$onDocumentMouseUp(), false);
    document.get$on().get$mouseOut().remove$2(this.get$onDocumentMouseOut(), false);
  },
  get$onDocumentMouseOut: function() {
    return new $.BoundClosure(this, "onDocumentMouseOut$1");
  },
  onDocumentTouchStart$1: function(event) {
    if ($.$$eq($.length(event.get$touches()), 1) === true) {
      event.preventDefault$0();
      this.mouseXOnMouseDown = $.$$sub($.$$index(event.get$touches(), 0).get$pageX(), this.windowHalfX);
      this.targetRotationOnMouseDown = this.targetRotation;
    }
  },
  get$onDocumentTouchStart: function() {
    return new $.BoundClosure(this, "onDocumentTouchStart$1");
  },
  onDocumentTouchMove$1: function(event) {
    var t1, t2;
    if ($.$$eq($.length(event.get$touches()), 1) === true) {
      event.preventDefault$0();
      this.mouseX = $.$$sub($.$$index(event.get$touches(), 0).get$pageX(), this.windowHalfX);
      t1 = this.targetRotationOnMouseDown;
      t2 = $.$$mul($.$$sub(this.mouseX, this.mouseXOnMouseDown), 0.05);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      this.targetRotation = t1 + t2;
    }
  },
  get$onDocumentTouchMove: function() {
    return new $.BoundClosure(this, "onDocumentTouchMove$1");
  },
  animate$1: function(time) {
    var t1, t2;
    window.requestAnimationFrame$1(this.get$animate());
    t1 = this.parent.get$rotation();
    t2 = t1.get$y();
    if (typeof t2 !== "number")
      return this.animate$1$bailout(1, t1, t2);
    t1.set$y(t2 + (this.targetRotation - t2) * 0.05);
    this.renderer.render$2(this.scene, this.camera);
  },
  animate$1$bailout: function(state0, t1, t2) {
    var t4 = this.targetRotation;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1.set$y($.$$add(t2, (t4 - t2) * 0.05));
    this.renderer.render$2(this.scene, this.camera);
  },
  get$animate: function() {
    return new $.BoundClosure(this, "animate$1");
  },
  render$0: function() {
    var t1, t2, t3;
    t1 = this.parent.get$rotation();
    t2 = t1.get$y();
    t3 = this.targetRotation;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1.set$y($.$$add(t2, (t3 - t2) * 0.05));
    this.renderer.render$2(this.scene, this.camera);
  },
  get$render: function() {
    return new $.BoundClosure0(this, "render$0");
  }
};

$$.AbstractWorkerEvents = {"": "Events;_ptr"};

$$.ApplicationCacheEvents = {"": "Events;_ptr"};

$$.BatteryManagerEvents = {"": "Events;_ptr"};

$$.BodyElementEvents = {"": "ElementEvents;_ptr",
  get$resize: function() {
    return this.$index("resize");
  }
};

$$.DedicatedWorkerContextEvents = {"": "WorkerContextEvents;_ptr"};

$$.DocumentEvents = {"": "ElementEvents;_ptr"};

$$._ChildrenElementList = {"": "Object;_liblib1$_element,_childElements",
  toList$0: function() {
    var t1, t3, output, len, i, t2;
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toList$0$bailout(1, t1);
    t3 = t1.length;
    output = $.List_List$fixedLength(t3, null);
    for (len = t1.length, i = 0; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0$bailout: function(state0, t1, t3, len, output) {
    switch (state0) {
      case 0:
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        output = $.List_List$fixedLength(t3.get$length(t1), null);
        len = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT1.$lt(i, len); ++i) {
          t2 = t3.$index(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this._childElements); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  get$isEmpty: function() {
    return this._liblib1$_element.firstElementChild == null;
  },
  get$length: function() {
    return $.length(this._childElements);
  },
  $index: function(index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout4(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout4: function(state0, t1, index) {
    return $.$$index(t1, index);
  },
  $indexSet: function(index, value) {
    var t1, t2;
    t1 = this._liblib1$_element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.$$indexSet$bailout3(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.$$dom_replaceChild$2(value, t2[index]);
  },
  $$indexSet$bailout3: function(state0, index, value, t1, t2) {
    t1.$$dom_replaceChild$2(value, $.$$index(t2, index));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(value) {
    this._liblib1$_element.$$dom_appendChild$1(value);
    return value;
  },
  addLast$1: function(value) {
    this._liblib1$_element.$$dom_appendChild$1(value);
    return value;
  },
  get$iterator: function() {
    return $.iterator(this.toList$0());
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable), t2 = this._liblib1$_element; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  remove$1: function(object) {
    if (typeof object === "object" && object !== null && object.$isElement())
      if (object.parentNode === this)
        this._liblib1$_element.$$dom_removeChild$1(object);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    var t1 = $.last(this);
    if (!(t1 == null))
      this._liblib1$_element.$$dom_removeChild$1(t1);
    return t1;
  },
  get$last: function() {
    var result = this._liblib1$_element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.isEmpty(this._nodeList);
  },
  get$length: function() {
    return $.length(this._nodeList);
  },
  $index: function(index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout6(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout6: function(state0, t1, index) {
    return $.$$index(t1, index);
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  set$length: function(newLength) {
    $.length0(this._nodeList, newLength);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function() {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
  },
  indexOf$2: function(element, start) {
    return $.indexOf(this._nodeList, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$last: function() {
    return $.last(this._nodeList);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$._FrozenElementListIterator = {"": "Object;_liblib1$_list,_liblib1$_index,_liblib1$_current",
  moveNext$0: function() {
    var t1, t2, t3, t4;
    t1 = this._liblib1$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(1, t1);
    ++t1;
    t2 = this._liblib1$_list;
    t3 = $.getInterceptor$JSStringJSArray(t2);
    t4 = t3.get$length(t2);
    if (typeof t4 !== "number")
      return this.moveNext$0$bailout1(2, t1, t2, t4, t3);
    if (t1 < t4) {
      this._liblib1$_current = t2.$index(t1);
      this._liblib1$_index = t1;
      return true;
    }
    this._liblib1$_index = t3.get$length(t2);
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout1: function(state0, t1, t2, t4, t3) {
    switch (state0) {
      case 0:
        t1 = this._liblib1$_index;
      case 1:
        state0 = 0;
        t1 = $.$$add(t1, 1);
        t2 = this._liblib1$_list;
        t3 = $.getInterceptor$JSStringJSArray(t2);
        t4 = t3.get$length(t2);
      case 2:
        state0 = 0;
        if ($.$$lt(t1, t4) === true) {
          this._liblib1$_current = t2.$index(t1);
          this._liblib1$_index = t1;
          return true;
        }
        this._liblib1$_index = t3.get$length(t2);
        this._liblib1$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.ElementEvents = {"": "Events;_ptr",
  get$copy: function() {
    return this.$index("copy");
  },
  copy$1: function(arg0) {
    return this.get$copy().call$1(arg0);
  },
  get$mouseDown: function() {
    return this.$index("mousedown");
  },
  get$mouseMove: function() {
    return this.$index("mousemove");
  },
  get$mouseOut: function() {
    return this.$index("mouseout");
  },
  get$mouseUp: function() {
    return this.$index("mouseup");
  },
  get$touchMove: function() {
    return this.$index("touchmove");
  },
  get$touchStart: function() {
    return this.$index("touchstart");
  }
};

$$.EventSourceEvents = {"": "Events;_ptr"};

$$.Events = {"": "Object;_ptr",
  $index: function(type) {
    return $.EventListenerList$(this._ptr, type);
  }
};

$$.EventListenerList = {"": "Object;_ptr,_type",
  add$2: function(listener, useCapture) {
    this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
    return this;
  },
  add$1: function(listener) {
    return this.add$2(listener, false);
  },
  remove$2: function(listener, useCapture) {
    this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
    return this;
  },
  remove$1: function(listener) {
    return this.remove$2(listener, false);
  }
};

$$.FileReaderEvents = {"": "Events;_ptr"};

$$.FileWriterEvents = {"": "Events;_ptr"};

$$.HttpRequestEvents = {"": "Events;_ptr"};

$$.HttpRequestUploadEvents = {"": "Events;_ptr"};

$$.InputElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaStreamEvents = {"": "Events;_ptr"};

$$.MediaStreamTrackEvents = {"": "Events;_ptr"};

$$.MessagePortEvents = {"": "Events;_ptr"};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function() {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addLast$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  removeLast$0: function() {
    var t1 = $.last(this);
    if (!(t1 == null))
      this._this.$$dom_removeChild$1(t1);
    return t1;
  },
  remove$1: function(object) {
    if (!(typeof object === "object" && object !== null && object.$isNode()))
      return;
    if (!(this === object.parentNode))
      return;
    this._this.$$dom_removeChild$1(object);
  },
  $indexSet: function(index, value) {
    this._this.$$dom_replaceChild$2(value, this.$index(index));
  },
  get$iterator: function() {
    return $.iterator(this._this.childNodes);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  get$length: function() {
    return $.length(this._this.childNodes);
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout9(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout9: function(state0, index, t1) {
    return $.$$index(t1, index);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$.NotificationEvents = {"": "Events;_ptr"};

$$.RtcDataChannelEvents = {"": "Events;_ptr"};

$$.RtcPeerConnectionEvents = {"": "Events;_ptr"};

$$.SharedWorkerContextEvents = {"": "WorkerContextEvents;_ptr"};

$$.SpeechRecognitionEvents = {"": "Events;_ptr",
  get$start: function() {
    return this.$index("start");
  }
};

$$.TextTrackEvents = {"": "Events;_ptr"};

$$.TextTrackCueEvents = {"": "Events;_ptr"};

$$.TextTrackListEvents = {"": "Events;_ptr"};

$$.WebSocketEvents = {"": "Events;_ptr"};

$$.WindowEvents = {"": "Events;_ptr",
  get$mouseDown: function() {
    return this.$index("mousedown");
  },
  get$mouseMove: function() {
    return this.$index("mousemove");
  },
  get$mouseOut: function() {
    return this.$index("mouseout");
  },
  get$mouseUp: function() {
    return this.$index("mouseup");
  },
  get$resize: function() {
    return this.$index("resize");
  },
  get$touchMove: function() {
    return this.$index("touchmove");
  },
  get$touchStart: function() {
    return this.$index("touchstart");
  }
};

$$.WorkerEvents = {"": "AbstractWorkerEvents;_ptr"};

$$.WorkerContextEvents = {"": "Events;_ptr"};

$$._FrameSetElementEvents = {"": "ElementEvents;_ptr",
  get$resize: function() {
    return this.$index("resize");
  }
};

$$._AttributeMap = {"": "Object;",
  forEach$1: function(f) {
    var t1, t2;
    for (t1 = $.iterator(this.get$keys()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._liblib1$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push(attributes[i].get$$$dom_localName());
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, attributes, t1, len, keys) {
    switch (state0) {
      case 0:
        attributes = this._liblib1$_element.attributes;
      case 1:
        state0 = 0;
        keys = $.List_List(0);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var i;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT1.$lt(i, len); ++i)
          if (this._matches$1(t1.$index(attributes, i)) === true)
            keys.push(t1.$index(attributes, i).get$$$dom_localName());
        return keys;
    }
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  $isMap: function() {
    return true;
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib1$_element",
  containsKey$1: function(key) {
    return this._liblib1$_element.$$dom_hasAttribute$1(key);
  },
  $index: function(key) {
    return this._liblib1$_element.$$dom_getAttribute$1(key);
  },
  $indexSet: function(key, value) {
    this._liblib1$_element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    t1 = this._liblib1$_element;
    value = t1.$$dom_getAttribute$1(key);
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    return $.length(this.get$keys());
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  }
};

$$.FixedSizeListIterator = {"": "Object;_liblib1$_array,_liblib1$_length,_liblib1$_position,_liblib1$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._liblib1$_position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout2(1, t1);
    ++t1;
    t2 = this._liblib1$_length;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout2(2, t1, t2);
    if (t1 < t2) {
      t2 = this._liblib1$_array;
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout2(3, t1, t2);
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2.length)
        throw $.ioore(t1);
      this._liblib1$_current = t2[t1];
      this._liblib1$_position = t1;
      return true;
    }
    this._liblib1$_current = null;
    this._liblib1$_position = t2;
    return false;
  },
  moveNext$0$bailout2: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._liblib1$_position;
      case 1:
        state0 = 0;
        t1 = $.$$add(t1, 1);
        t2 = this._liblib1$_length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$lt(t1, t2) === true)
          switch (state0) {
            case 0:
              t2 = this._liblib1$_array;
            case 3:
              state0 = 0;
              this._liblib1$_current = $.$$index(t2, t1);
              this._liblib1$_position = t1;
              return true;
          }
        this._liblib1$_current = null;
        this._liblib1$_position = t2;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    return $.List_List$from($.where(this._childNodes, new $.FilteredElementList__filtered_anon()));
  },
  forEach$1: function(f) {
    $.forEach(this.get$_filtered(), f);
  },
  $indexSet: function(index, value) {
    this.$index(index).replaceWith$1(value);
  },
  set$length: function(newLength) {
    var t1, t2;
    t1 = $.length(this);
    t2 = $.getInterceptor$JSNumber(newLength);
    if (t2.$ge(newLength, t1) === true)
      return;
    else if (t2.$lt(newLength, 0) === true)
      throw $.$$throw($.ArgumentError$("Invalid list length"));
    this.removeRange$2(newLength, $.$$sub(t1, newLength));
  },
  join$1: function(separator) {
    return $.join(this.get$_filtered(), separator);
  },
  add$1: function(value) {
    $.add(this._childNodes, value);
  },
  addAll$1: function(iterable) {
    var t1, t2, t3;
    for (t1 = $.iterator(iterable), t2 = this._childNodes, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;)
      t3.add$1(t2, t1.get$current());
  },
  addLast$1: function(value) {
    $.add(this._childNodes, value);
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  removeRange$2: function(start, rangeLength) {
    $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $.FilteredElementList_removeRange_anon());
  },
  removeLast$0: function() {
    var t1 = $.last(this);
    if (!(t1 == null))
      t1.remove$0();
    return t1;
  },
  mappedBy$1: function(f) {
    return $.mappedBy(this.get$_filtered(), f);
  },
  where$1: function(f) {
    return $.where(this.get$_filtered(), f);
  },
  remove$1: function(element) {
    var t1, i, indexElement;
    if (!(typeof element === "object" && element !== null && element.$isElement()))
      return;
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = 0; $.CONSTANT1.$lt(i, t1.get$length(this)); ++i) {
      indexElement = this.$index(i);
      if (indexElement === element) {
        indexElement.remove$0();
        return;
      }
    }
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.isEmpty(this.get$_filtered());
  },
  get$length: function() {
    return $.length(this.get$_filtered());
  },
  $index: function(index) {
    var t1 = this.get$_filtered();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout5(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout5: function(state0, index, t1) {
    return $.$$index(t1, index);
  },
  get$iterator: function() {
    return $.iterator(this.get$_filtered());
  },
  getRange$2: function(start, rangeLength) {
    return $.getRange(this.get$_filtered(), start, rangeLength);
  },
  indexOf$2: function(element, start) {
    return $.indexOf(this.get$_filtered(), element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    return $.last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$.DatabaseEvents = {"": "Events;_ptr"};

$$.OpenDBRequestEvents = {"": "RequestEvents;_ptr"};

$$.RequestEvents = {"": "Events;_ptr"};

$$.TransactionEvents = {"": "Events;_ptr"};

$$.VersionChangeRequestEvents = {"": "RequestEvents;_ptr"};

$$._Random = {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  },
  nextDouble$0: function() {
    return Math.random();
  }
};

$$.ElementInstanceEvents = {"": "Events;_ptr",
  get$copy: function() {
    return this.$index("copy");
  },
  copy$1: function(arg0) {
    return this.get$copy().call$1(arg0);
  },
  get$mouseDown: function() {
    return this.$index("mousedown");
  },
  get$mouseMove: function() {
    return this.$index("mousemove");
  },
  get$mouseOut: function() {
    return this.$index("mouseout");
  },
  get$mouseUp: function() {
    return this.$index("mouseup");
  },
  get$resize: function() {
    return this.$index("resize");
  }
};

$$.AudioContextEvents = {"": "Events;_ptr"};

$$.Camera = {"": "Object3D;matrixWorldInverse>,projectionMatrix>,near>,far>", $isCamera: true};

$$.PerspectiveCamera = {"": "Camera;fov,aspect<,_fullWidth,_fullHeight,_x,_y,_width,_height,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,__data",
  updateProjectionMatrix$0: function() {
    var t1, t2, t3, t4, t5, t6, aspect, t7, top, bottom, left, t8, height, t9, t10, t11, t12, t13;
    t1 = this._fullWidth;
    t2 = this.projectionMatrix;
    t3 = this.near;
    t4 = this.fov;
    t5 = this.far;
    if (!(t1 == null)) {
      t6 = this._fullHeight;
      aspect = $.CONSTANT1.$div(t1, t6);
      t7 = Math.tan($.checkNum($.$$div($.$$mul(t4, 3.141592653589793), 360)));
      if (typeof t3 !== "number")
        throw $.iae(t3);
      top = t7 * t3;
      bottom = -top;
      t7 = $.getInterceptor$JSNumber(aspect);
      left = t7.$mul(aspect, bottom);
      t8 = $.abs($.$$sub(t7.$mul(aspect, top), left));
      height = $.CONSTANT6.abs$0(top - bottom);
      t9 = this._x;
      t10 = $.getInterceptor$JSNumber(left);
      t11 = t10.$add(left, $.$$div($.CONSTANT1.$mul(t9, t8), t1));
      t10 = t10.$add(left, $.$$div($.$$mul($.CONSTANT1.$add(t9, t8), t8), t1));
      t12 = this._y;
      t13 = $.$$div($.$$mul($.CONSTANT1.$add(t12, height), height), t6);
      if (typeof t13 !== "number")
        throw $.iae(t13);
      t6 = $.$$div($.CONSTANT1.$mul(t12, height), t6);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t2.makeFrustum$6(t11, t10, top - t13, top - t6, t3, t5);
    } else
      t2.makePerspective$4(t4, this.aspect, t3, t5);
  },
  PerspectiveCamera$4: function(fov, aspect, near, far) {
    this.updateProjectionMatrix$0();
  }
};

$$.Vector3 = {"": "Object;x=,y=,z=",
  setValues$3: function(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  },
  setY$1: function(y) {
    this.y = y;
    return this;
  },
  copy$1: function(v) {
    this.x = v.get$x();
    this.y = v.get$y();
    this.z = v.get$z();
    return this;
  },
  add$2: function(v1, v2) {
    this.x = $.$$add(v1.get$x(), v2.get$x());
    this.y = $.$$add(v1.get$y(), v2.get$y());
    this.z = $.$$add(v1.get$z(), v2.get$z());
    return this;
  },
  addSelf$1: function(v) {
    this.x = $.$$add(this.x, v.get$x());
    this.y = $.$$add(this.y, v.get$y());
    this.z = $.$$add(this.z, v.get$z());
    return this;
  },
  sub$2: function(v1, v2) {
    this.x = $.$$sub(v1.get$x(), v2.get$x());
    this.y = $.$$sub(v1.get$y(), v2.get$y());
    this.z = $.$$sub(v1.get$z(), v2.get$z());
    return this;
  },
  subSelf$1: function(v) {
    this.x = $.$$sub(this.x, v.get$x());
    this.y = $.$$sub(this.y, v.get$y());
    this.z = $.$$sub(this.z, v.get$z());
    return this;
  },
  multiply$2: function(a, b) {
    this.x = $.$$mul(a.get$x(), b.get$x());
    this.y = $.$$mul(a.get$y(), b.get$y());
    this.z = $.$$mul(a.get$z(), b.get$z());
    return this;
  },
  multiplyScalar$1: function(s) {
    this.x = $.$$mul(this.x, s);
    this.y = $.$$mul(this.y, s);
    this.z = $.$$mul(this.z, s);
    return this;
  },
  divideScalar$1: function(s) {
    var t1, t3, t5;
    if (typeof s !== "number")
      return this.divideScalar$1$bailout0(1, s);
    if (!(s === 0)) {
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.divideScalar$1$bailout0(2, s, t1);
      this.x = t1 / s;
      t3 = this.y;
      if (typeof t3 !== "number")
        return this.divideScalar$1$bailout0(3, s, null, t3);
      this.y = t3 / s;
      t5 = this.z;
      if (typeof t5 !== "number")
        return this.divideScalar$1$bailout0(4, s, null, null, t5);
      this.z = t5 / s;
    } else {
      this.x = 0;
      this.y = 0;
      this.z = 0;
    }
    return this;
  },
  divideScalar$1$bailout0: function(state0, s, t1, t3, t5) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
      default:
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && !(s === 0))
          switch (state0) {
            case 0:
              t1 = this.x;
            case 2:
              state0 = 0;
              this.x = $.$$div(t1, s);
              t3 = this.y;
            case 3:
              state0 = 0;
              this.y = $.$$div(t3, s);
              t5 = this.z;
            case 4:
              state0 = 0;
              this.z = $.$$div(t5, s);
          }
        else {
          this.x = 0;
          this.y = 0;
          this.z = 0;
        }
        return this;
    }
  },
  dot$1: function(v) {
    var t1, t3, t6, t8, t10;
    t1 = this.x;
    t3 = v.get$x();
    if (typeof t1 !== "number")
      return this.dot$1$bailout(1, v, t1);
    if (typeof t3 !== "number")
      return this.dot$1$bailout(2, v, t1, t3);
    t3 = t1 * t3;
    t1 = this.y;
    t6 = v.get$y();
    if (typeof t1 !== "number")
      return this.dot$1$bailout(3, v, t1, t3);
    if (typeof t6 !== "number")
      return this.dot$1$bailout(4, v, t1, t3, t6);
    t3 += t1 * t6;
    t8 = this.z;
    t10 = v.get$z();
    if (typeof t8 !== "number")
      return this.dot$1$bailout(5, v, null, t3, null, t8);
    if (typeof t10 !== "number")
      return this.dot$1$bailout(6, null, null, t3, null, t8, t10);
    return t3 + t8 * t10;
  },
  dot$1$bailout: function(state0, v, t1, t3, t6, t8, t10) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = v.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$mul(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = v.get$y();
      case 4:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t1, t6));
        t8 = this.z;
      case 5:
        state0 = 0;
        t10 = v.get$z();
      case 6:
        state0 = 0;
        return $.$$add(t3, $.$$mul(t8, t10));
    }
  },
  lengthSq$0: function() {
    var t1, t2, t3;
    t1 = this.x;
    t1 = $.$$mul(t1, t1);
    t2 = this.y;
    t1 = $.$$add(t1, $.$$mul(t2, t2));
    t3 = this.z;
    return $.$$add(t1, $.$$mul(t3, t3));
  },
  length$0: function() {
    var t1, t3, t5;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.length$0$bailout1(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.length$0$bailout1(2, t1, t3);
    t1 += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.length$0$bailout1(3, t1, null, t5);
    return Math.sqrt($.checkNum(t1 + t5 * t5));
  },
  length$0$bailout1: function(state0, t1, t3, t5) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t3, t3));
        t5 = this.z;
      case 3:
        state0 = 0;
        return Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t5, t5))));
    }
  },
  get$length: function() {
    return new $.BoundClosure0(this, "length$0");
  },
  normalize$0: function() {
    var t1, t3, t5;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.normalize$0$bailout0(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.normalize$0$bailout0(2, t1, t3);
    t1 += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.normalize$0$bailout0(3, t1, null, t5);
    return this.divideScalar$1(Math.sqrt($.checkNum(t1 + t5 * t5)));
  },
  normalize$0$bailout0: function(state0, t1, t3, t5) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t3, t3));
        t5 = this.z;
      case 3:
        state0 = 0;
        return this.divideScalar$1(Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t5, t5)))));
    }
  },
  cross$2: function(a, b) {
    var t1, t3, t6, t8, t10, t13, t15, t17, t20;
    t1 = a.get$y();
    t3 = b.get$z();
    if (typeof t1 !== "number")
      return this.cross$2$bailout(1, a, b, t1);
    if (typeof t3 !== "number")
      return this.cross$2$bailout(2, a, b, t1, t3);
    t3 = t1 * t3;
    t1 = a.get$z();
    t6 = b.get$y();
    if (typeof t1 !== "number")
      return this.cross$2$bailout(3, a, b, t1, t3);
    if (typeof t6 !== "number")
      return this.cross$2$bailout(4, a, b, t1, t3, t6);
    this.x = t3 - t1 * t6;
    t8 = a.get$z();
    t10 = b.get$x();
    if (typeof t8 !== "number")
      return this.cross$2$bailout(5, a, b, null, null, null, t8);
    if (typeof t10 !== "number")
      return this.cross$2$bailout(6, a, b, null, null, null, t8, t10);
    t10 = t8 * t10;
    t8 = a.get$x();
    t13 = b.get$z();
    if (typeof t8 !== "number")
      return this.cross$2$bailout(7, a, b, null, null, null, t8, t10);
    if (typeof t13 !== "number")
      return this.cross$2$bailout(8, a, b, null, null, null, t8, t10, t13);
    this.y = t10 - t8 * t13;
    t15 = a.get$x();
    t17 = b.get$y();
    if (typeof t15 !== "number")
      return this.cross$2$bailout(9, a, b, null, null, null, null, null, null, t15);
    if (typeof t17 !== "number")
      return this.cross$2$bailout(10, a, b, null, null, null, null, null, null, t15, t17);
    t17 = t15 * t17;
    t15 = a.get$y();
    t20 = b.get$x();
    if (typeof t15 !== "number")
      return this.cross$2$bailout(11, null, b, null, null, null, null, null, null, t15, t17);
    if (typeof t20 !== "number")
      return this.cross$2$bailout(12, null, null, null, null, null, null, null, null, t15, t17, t20);
    this.z = t17 - t15 * t20;
    return this;
  },
  cross$2$bailout: function(state0, a, b, t1, t3, t6, t8, t10, t13, t15, t17, t20) {
    switch (state0) {
      case 0:
        t1 = a.get$y();
      case 1:
        state0 = 0;
        t3 = b.get$z();
      case 2:
        state0 = 0;
        t3 = $.$$mul(t1, t3);
        t1 = a.get$z();
      case 3:
        state0 = 0;
        t6 = b.get$y();
      case 4:
        state0 = 0;
        this.x = $.$$sub(t3, $.$$mul(t1, t6));
        t8 = a.get$z();
      case 5:
        state0 = 0;
        t10 = b.get$x();
      case 6:
        state0 = 0;
        t10 = $.$$mul(t8, t10);
        t8 = a.get$x();
      case 7:
        state0 = 0;
        t13 = b.get$z();
      case 8:
        state0 = 0;
        this.y = $.$$sub(t10, $.$$mul(t8, t13));
        t15 = a.get$x();
      case 9:
        state0 = 0;
        t17 = b.get$y();
      case 10:
        state0 = 0;
        t17 = $.$$mul(t15, t17);
        t15 = a.get$y();
      case 11:
        state0 = 0;
        t20 = b.get$x();
      case 12:
        state0 = 0;
        this.z = $.$$sub(t17, $.$$mul(t15, t20));
        return this;
    }
  },
  crossSelf$1: function(v) {
    var x2, y2, z2, t1, t2, t3;
    x2 = this.x;
    y2 = this.y;
    z2 = this.z;
    t1 = $.getInterceptor$JSNumber(y2);
    t2 = $.getInterceptor$JSNumber(z2);
    this.x = $.$$sub(t1.$mul(y2, v.get$z()), t2.$mul(z2, v.get$y()));
    t3 = $.getInterceptor$JSNumber(x2);
    this.y = $.$$sub(t2.$mul(z2, v.get$x()), t3.$mul(x2, v.get$z()));
    this.z = $.$$sub(t3.$mul(x2, v.get$y()), t1.$mul(y2, v.get$x()));
    return this;
  },
  distanceTo$1: function(v) {
    return Math.sqrt($.checkNum($.Vector3$(0, 0, 0).sub$2(this, v).lengthSq$0()));
  },
  distanceToSquared$1: function(v) {
    return $.Vector3$(0, 0, 0).sub$2(this, v).lengthSq$0();
  },
  setEulerFromRotationMatrix$2: function(m, order) {
    var clamp, te, t1, m11, m12, m13, m21, m22, m23, m31, m32, m33;
    clamp = new $.Vector3_setEulerFromRotationMatrix_anon();
    te = m.get$elements();
    t1 = $.getInterceptor$JSStringJSArray(te);
    m11 = t1.$index(te, 0);
    m12 = t1.$index(te, 4);
    m13 = t1.$index(te, 8);
    m21 = t1.$index(te, 1);
    m22 = t1.$index(te, 5);
    m23 = t1.$index(te, 9);
    m31 = t1.$index(te, 2);
    m32 = t1.$index(te, 6);
    m33 = t1.$index(te, 10);
    t1 = $.getInterceptor(order);
    if (t1.$eq(order, "XYZ") === true) {
      this.y = Math.asin($.checkNum(clamp.call$1(m13)));
      if ($.$$lt($.abs(m13), 0.99999) === true) {
        this.x = Math.atan2($.checkNum($.$$negate(m23)), $.checkNum(m33));
        this.z = Math.atan2($.checkNum($.$$negate(m12)), $.checkNum(m11));
      } else {
        this.x = Math.atan2($.checkNum(m21), $.checkNum(m22));
        this.z = 0;
      }
    } else if (t1.$eq(order, "YXZ") === true) {
      this.x = Math.asin($.checkNum($.$$negate(clamp.call$1(m23))));
      if ($.$$lt($.abs(m23), 0.99999) === true) {
        this.y = Math.atan2($.checkNum(m13), $.checkNum(m33));
        this.z = Math.atan2($.checkNum(m21), $.checkNum(m22));
      } else {
        this.y = Math.atan2($.checkNum($.$$negate(m31)), $.checkNum(m11));
        this.z = 0;
      }
    } else if (t1.$eq(order, "ZXY") === true) {
      this.x = Math.asin($.checkNum(clamp.call$1(m32)));
      if ($.$$lt($.abs(m32), 0.99999) === true) {
        this.y = Math.atan2($.checkNum($.$$negate(m31)), $.checkNum(m33));
        this.z = Math.atan2($.checkNum($.$$negate(m12)), $.checkNum(m22));
      } else {
        this.y = 0;
        this.z = Math.atan2($.checkNum(m13), $.checkNum(m11));
      }
    } else if (t1.$eq(order, "ZYX") === true) {
      this.y = Math.asin($.checkNum($.$$negate(clamp.call$1(m31))));
      if ($.$$lt($.abs(m31), 0.99999) === true) {
        this.x = Math.atan2($.checkNum(m32), $.checkNum(m33));
        this.z = Math.atan2($.checkNum(m21), $.checkNum(m11));
      } else {
        this.x = 0;
        this.z = Math.atan2($.checkNum($.$$negate(m12)), $.checkNum(m22));
      }
    } else if (t1.$eq(order, "YZX") === true) {
      this.z = Math.asin($.checkNum(clamp.call$1(m21)));
      if ($.$$lt($.abs(m21), 0.99999) === true) {
        this.x = Math.atan2($.checkNum($.$$negate(m23)), $.checkNum(m22));
        this.y = Math.atan2($.checkNum($.$$negate(m31)), $.checkNum(m11));
      } else {
        this.x = 0;
        this.y = Math.atan2($.checkNum(m31), $.checkNum(m33));
      }
    } else if (t1.$eq(order, "XZY") === true) {
      this.z = Math.asin($.checkNum($.$$negate(clamp.call$1(m12))));
      if ($.$$lt($.abs(m12), 0.99999) === true) {
        this.x = Math.atan2($.checkNum(m32), $.checkNum(m22));
        this.y = Math.atan2($.checkNum(m13), $.checkNum(m11));
      } else {
        this.x = Math.atan2($.checkNum($.$$negate(m13)), $.checkNum(m33));
        this.y = 0;
      }
    }
    return this;
  },
  equals$1: function(v) {
    if (v == null)
      return false;
    return $.$$eq(v.get$x(), this.x) === true && $.$$eq(v.get$y(), this.y) === true && $.$$eq(v.get$z(), this.z) === true;
  },
  isZero$0: function() {
    var t1, t2, t3;
    t1 = this.x;
    t1 = $.$$mul(t1, t1);
    t2 = this.y;
    t1 = $.$$add(t1, $.$$mul(t2, t2));
    t3 = this.z;
    return $.$$lt($.$$add(t1, $.$$mul(t3, t3)), 0.0001);
  },
  clone$0: function() {
    return $.Vector3$(this.x, this.y, this.z);
  },
  toString$0: function() {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ", " + $.S(this.z) + ")";
  },
  $isVector3: true
};

$$.Matrix3 = {"": "Object;elements>",
  getInverse$1: function(matrix) {
    var me, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, idet, m;
    me = matrix.get$elements();
    t1 = $.getInterceptor$JSStringJSArray(me);
    t2 = $.$$sub($.$$mul(t1.$index(me, 10), t1.$index(me, 5)), $.$$mul(t1.$index(me, 6), t1.$index(me, 9)));
    t3 = $.$$add($.$$mul($.$$negate(t1.$index(me, 10)), t1.$index(me, 1)), $.$$mul(t1.$index(me, 2), t1.$index(me, 9)));
    t4 = $.$$sub($.$$mul(t1.$index(me, 6), t1.$index(me, 1)), $.$$mul(t1.$index(me, 2), t1.$index(me, 5)));
    t5 = $.$$add($.$$mul($.$$negate(t1.$index(me, 10)), t1.$index(me, 4)), $.$$mul(t1.$index(me, 6), t1.$index(me, 8)));
    t6 = $.$$sub($.$$mul(t1.$index(me, 10), t1.$index(me, 0)), $.$$mul(t1.$index(me, 2), t1.$index(me, 8)));
    t7 = $.$$add($.$$mul($.$$negate(t1.$index(me, 6)), t1.$index(me, 0)), $.$$mul(t1.$index(me, 2), t1.$index(me, 4)));
    t8 = $.$$sub($.$$mul(t1.$index(me, 9), t1.$index(me, 4)), $.$$mul(t1.$index(me, 5), t1.$index(me, 8)));
    t9 = $.$$add($.$$mul($.$$negate(t1.$index(me, 9)), t1.$index(me, 0)), $.$$mul(t1.$index(me, 1), t1.$index(me, 8)));
    t10 = $.$$sub($.$$mul(t1.$index(me, 5), t1.$index(me, 0)), $.$$mul(t1.$index(me, 1), t1.$index(me, 4)));
    t11 = $.$$add($.$$add($.$$mul(t1.$index(me, 0), t2), $.$$mul(t1.$index(me, 1), t5)), $.$$mul(t1.$index(me, 2), t8));
    if ($.$$eq(t11, 0) === true)
      $.print("Matrix3.getInverse(): determinant == 0");
    if (typeof t11 !== "number")
      throw $.iae(t11);
    idet = 1 / t11;
    m = this.elements;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1 = $.getInterceptor$JSArray(m);
    t1.$indexSet(m, 0, idet * t2);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t1.$indexSet(m, 1, idet * t3);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t1.$indexSet(m, 2, idet * t4);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t1.$indexSet(m, 3, idet * t5);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1.$indexSet(m, 4, idet * t6);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t1.$indexSet(m, 5, idet * t7);
    if (typeof t8 !== "number")
      throw $.iae(t8);
    t1.$indexSet(m, 6, idet * t8);
    if (typeof t9 !== "number")
      throw $.iae(t9);
    t1.$indexSet(m, 7, idet * t9);
    if (typeof t10 !== "number")
      throw $.iae(t10);
    t1.$indexSet(m, 8, idet * t10);
    return this;
  },
  transpose$0: function() {
    var m, t1, tmp;
    m = this.elements;
    t1 = $.getInterceptor$JSStringJSArray(m);
    tmp = t1.$index(m, 1);
    t1.$indexSet(m, 1, t1.$index(m, 3));
    t1.$indexSet(m, 3, tmp);
    tmp = t1.$index(m, 2);
    t1.$indexSet(m, 2, t1.$index(m, 6));
    t1.$indexSet(m, 6, tmp);
    tmp = t1.$index(m, 5);
    t1.$indexSet(m, 5, t1.$index(m, 7));
    t1.$indexSet(m, 7, tmp);
    return this;
  }
};

$$.Matrix4 = {"": "Object;elements>",
  setValues$16: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    var te, t1;
    te = this.elements;
    t1 = $.getInterceptor$JSArray(te);
    t1.$indexSet(te, 0, n11);
    t1.$indexSet(te, 4, n12);
    t1.$indexSet(te, 8, n13);
    t1.$indexSet(te, 12, n14);
    t1.$indexSet(te, 1, n21);
    t1.$indexSet(te, 5, n22);
    t1.$indexSet(te, 9, n23);
    t1.$indexSet(te, 13, n24);
    t1.$indexSet(te, 2, n31);
    t1.$indexSet(te, 6, n32);
    t1.$indexSet(te, 10, n33);
    t1.$indexSet(te, 14, n34);
    t1.$indexSet(te, 3, n41);
    t1.$indexSet(te, 7, n42);
    t1.$indexSet(te, 11, n43);
    t1.$indexSet(te, 15, n44);
    return this;
  },
  copy$1: function(m) {
    var me, t1;
    me = m.get$elements();
    t1 = $.getInterceptor$JSStringJSArray(me);
    this.setValues$16(t1.$index(me, 0), t1.$index(me, 4), t1.$index(me, 8), t1.$index(me, 12), t1.$index(me, 1), t1.$index(me, 5), t1.$index(me, 9), t1.$index(me, 13), t1.$index(me, 2), t1.$index(me, 6), t1.$index(me, 10), t1.$index(me, 14), t1.$index(me, 3), t1.$index(me, 7), t1.$index(me, 11), t1.$index(me, 15));
    return this;
  },
  multiply$2: function(a, b) {
    var ae, be, te, t1, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44, b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34, b41, b42, b43, b44, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
    ae = a.get$elements();
    be = b.get$elements();
    te = this.elements;
    t1 = $.getInterceptor$JSStringJSArray(ae);
    a11 = t1.$index(ae, 0);
    a12 = t1.$index(ae, 4);
    a13 = t1.$index(ae, 8);
    a14 = t1.$index(ae, 12);
    a21 = t1.$index(ae, 1);
    a22 = t1.$index(ae, 5);
    a23 = t1.$index(ae, 9);
    a24 = t1.$index(ae, 13);
    a31 = t1.$index(ae, 2);
    a32 = t1.$index(ae, 6);
    a33 = t1.$index(ae, 10);
    a34 = t1.$index(ae, 14);
    a41 = t1.$index(ae, 3);
    a42 = t1.$index(ae, 7);
    a43 = t1.$index(ae, 11);
    a44 = t1.$index(ae, 15);
    t1 = $.getInterceptor$JSStringJSArray(be);
    b11 = t1.$index(be, 0);
    b12 = t1.$index(be, 4);
    b13 = t1.$index(be, 8);
    b14 = t1.$index(be, 12);
    b21 = t1.$index(be, 1);
    b22 = t1.$index(be, 5);
    b23 = t1.$index(be, 9);
    b24 = t1.$index(be, 13);
    b31 = t1.$index(be, 2);
    b32 = t1.$index(be, 6);
    b33 = t1.$index(be, 10);
    b34 = t1.$index(be, 14);
    b41 = t1.$index(be, 3);
    b42 = t1.$index(be, 7);
    b43 = t1.$index(be, 11);
    b44 = t1.$index(be, 15);
    t1 = $.getInterceptor$JSNumber(a11);
    t2 = $.getInterceptor$JSNumber(a12);
    t3 = $.getInterceptor$JSNumber(a13);
    t4 = $.getInterceptor$JSNumber(a14);
    t5 = $.getInterceptor$JSArray(te);
    t5.$indexSet(te, 0, $.$$add($.$$add($.$$add(t1.$mul(a11, b11), t2.$mul(a12, b21)), t3.$mul(a13, b31)), t4.$mul(a14, b41)));
    t5.$indexSet(te, 4, $.$$add($.$$add($.$$add(t1.$mul(a11, b12), t2.$mul(a12, b22)), t3.$mul(a13, b32)), t4.$mul(a14, b42)));
    t5.$indexSet(te, 8, $.$$add($.$$add($.$$add(t1.$mul(a11, b13), t2.$mul(a12, b23)), t3.$mul(a13, b33)), t4.$mul(a14, b43)));
    t5.$indexSet(te, 12, $.$$add($.$$add($.$$add(t1.$mul(a11, b14), t2.$mul(a12, b24)), t3.$mul(a13, b34)), t4.$mul(a14, b44)));
    t6 = $.getInterceptor$JSNumber(a21);
    t7 = $.getInterceptor$JSNumber(a22);
    t8 = $.getInterceptor$JSNumber(a23);
    t9 = $.getInterceptor$JSNumber(a24);
    t5.$indexSet(te, 1, $.$$add($.$$add($.$$add(t6.$mul(a21, b11), t7.$mul(a22, b21)), t8.$mul(a23, b31)), t9.$mul(a24, b41)));
    t5.$indexSet(te, 5, $.$$add($.$$add($.$$add(t6.$mul(a21, b12), t7.$mul(a22, b22)), t8.$mul(a23, b32)), t9.$mul(a24, b42)));
    t5.$indexSet(te, 9, $.$$add($.$$add($.$$add(t6.$mul(a21, b13), t7.$mul(a22, b23)), t8.$mul(a23, b33)), t9.$mul(a24, b43)));
    t5.$indexSet(te, 13, $.$$add($.$$add($.$$add(t6.$mul(a21, b14), t7.$mul(a22, b24)), t8.$mul(a23, b34)), t9.$mul(a24, b44)));
    t10 = $.getInterceptor$JSNumber(a31);
    t11 = $.getInterceptor$JSNumber(a32);
    t12 = $.getInterceptor$JSNumber(a33);
    t13 = $.getInterceptor$JSNumber(a34);
    t5.$indexSet(te, 2, $.$$add($.$$add($.$$add(t10.$mul(a31, b11), t11.$mul(a32, b21)), t12.$mul(a33, b31)), t13.$mul(a34, b41)));
    t5.$indexSet(te, 6, $.$$add($.$$add($.$$add(t10.$mul(a31, b12), t11.$mul(a32, b22)), t12.$mul(a33, b32)), t13.$mul(a34, b42)));
    t5.$indexSet(te, 10, $.$$add($.$$add($.$$add(t10.$mul(a31, b13), t11.$mul(a32, b23)), t12.$mul(a33, b33)), t13.$mul(a34, b43)));
    t5.$indexSet(te, 14, $.$$add($.$$add($.$$add(t10.$mul(a31, b14), t11.$mul(a32, b24)), t12.$mul(a33, b34)), t13.$mul(a34, b44)));
    t14 = $.getInterceptor$JSNumber(a41);
    t15 = $.getInterceptor$JSNumber(a42);
    t16 = $.getInterceptor$JSNumber(a43);
    t17 = $.getInterceptor$JSNumber(a44);
    t5.$indexSet(te, 3, $.$$add($.$$add($.$$add(t14.$mul(a41, b11), t15.$mul(a42, b21)), t16.$mul(a43, b31)), t17.$mul(a44, b41)));
    t5.$indexSet(te, 7, $.$$add($.$$add($.$$add(t14.$mul(a41, b12), t15.$mul(a42, b22)), t16.$mul(a43, b32)), t17.$mul(a44, b42)));
    t5.$indexSet(te, 11, $.$$add($.$$add($.$$add(t14.$mul(a41, b13), t15.$mul(a42, b23)), t16.$mul(a43, b33)), t17.$mul(a44, b43)));
    t5.$indexSet(te, 15, $.$$add($.$$add($.$$add(t14.$mul(a41, b14), t15.$mul(a42, b24)), t16.$mul(a43, b34)), t17.$mul(a44, b44)));
    return this;
  },
  multiplySelf$1: function(m) {
    return this.multiply$2(this, m);
  },
  multiplyScalar$1: function(s) {
    var te, t1;
    te = this.elements;
    t1 = $.getInterceptor$JSStringJSArray(te);
    t1.$indexSet(te, 0, $.$$mul(t1.$index(te, 0), s));
    t1.$indexSet(te, 4, $.$$mul(t1.$index(te, 4), s));
    t1.$indexSet(te, 8, $.$$mul(t1.$index(te, 8), s));
    t1.$indexSet(te, 12, $.$$mul(t1.$index(te, 12), s));
    t1.$indexSet(te, 1, $.$$mul(t1.$index(te, 1), s));
    t1.$indexSet(te, 5, $.$$mul(t1.$index(te, 5), s));
    t1.$indexSet(te, 9, $.$$mul(t1.$index(te, 9), s));
    t1.$indexSet(te, 13, $.$$mul(t1.$index(te, 13), s));
    t1.$indexSet(te, 2, $.$$mul(t1.$index(te, 2), s));
    t1.$indexSet(te, 6, $.$$mul(t1.$index(te, 6), s));
    t1.$indexSet(te, 10, $.$$mul(t1.$index(te, 10), s));
    t1.$indexSet(te, 14, $.$$mul(t1.$index(te, 14), s));
    t1.$indexSet(te, 3, $.$$mul(t1.$index(te, 3), s));
    t1.$indexSet(te, 7, $.$$mul(t1.$index(te, 7), s));
    t1.$indexSet(te, 11, $.$$mul(t1.$index(te, 11), s));
    t1.$indexSet(te, 15, $.$$mul(t1.$index(te, 15), s));
    return this;
  },
  multiplyVector3$1: function(v) {
    var te, vx, vy, vz, t5, t6, t7, t9, t11, t13, d, t15, t17, t19, t21, t23, t24, t26, t28, t30, t32, t33, t35, t37, t39;
    te = this.elements;
    if (typeof te !== "string" && (typeof te !== "object" || te === null || te.constructor !== Array && !te.$isJavaScriptIndexingBehavior()))
      return this.multiplyVector3$1$bailout(1, v, te);
    vx = v.get$x();
    if (typeof vx !== "number")
      return this.multiplyVector3$1$bailout(2, v, te, vx);
    vy = v.get$y();
    if (typeof vy !== "number")
      return this.multiplyVector3$1$bailout(3, v, te, vx, vy);
    vz = v.get$z();
    if (typeof vz !== "number")
      return this.multiplyVector3$1$bailout(4, v, te, vx, vy, vz);
    t5 = $.getInterceptor$JSStringJSArray(te);
    t6 = te.length;
    if (3 >= t6)
      throw $.ioore(3);
    t7 = te[3];
    if (typeof t7 !== "number")
      return this.multiplyVector3$1$bailout(5, v, te, vx, vy, vz, t5, t7);
    t7 *= vx;
    if (7 >= t6)
      throw $.ioore(7);
    t9 = te[7];
    if (typeof t9 !== "number")
      return this.multiplyVector3$1$bailout(6, v, te, vx, vy, vz, t5, t7, t9);
    t7 += t9 * vy;
    if (11 >= t6)
      throw $.ioore(11);
    t11 = te[11];
    if (typeof t11 !== "number")
      return this.multiplyVector3$1$bailout(7, v, te, vx, vy, vz, t5, t7, null, t11);
    t7 += t11 * vz;
    if (15 >= t6)
      throw $.ioore(15);
    t13 = te[15];
    if (typeof t13 !== "number")
      return this.multiplyVector3$1$bailout(8, v, te, vx, vy, vz, t5, t7, null, null, t13);
    d = 1 / (t7 + t13);
    t15 = te[0];
    if (typeof t15 !== "number")
      return this.multiplyVector3$1$bailout(10, v, te, vx, vy, vz, t5, t15, null, null, null, d);
    t15 *= vx;
    t17 = te[4];
    if (typeof t17 !== "number")
      return this.multiplyVector3$1$bailout(11, v, te, vx, vy, vz, t5, t15, null, null, null, d, t17);
    t15 += t17 * vy;
    t19 = te[8];
    if (typeof t19 !== "number")
      return this.multiplyVector3$1$bailout(12, v, te, vx, vy, vz, t5, t15, null, null, null, d, null, t19);
    t15 += t19 * vz;
    t21 = te[12];
    if (typeof t21 !== "number")
      return this.multiplyVector3$1$bailout(13, v, te, vx, vy, vz, t5, t15, null, null, null, d, null, null, t21);
    v.set$x((t15 + t21) * d);
    t23 = te.length;
    if (1 >= t23)
      throw $.ioore(1);
    t24 = te[1];
    if (typeof t24 !== "number")
      return this.multiplyVector3$1$bailout(14, v, te, vx, vy, vz, t5, null, null, null, null, d, null, null, null, t24);
    t24 *= vx;
    if (5 >= t23)
      throw $.ioore(5);
    t26 = te[5];
    if (typeof t26 !== "number")
      return this.multiplyVector3$1$bailout(15, v, te, vx, vy, vz, t5, null, null, null, null, d, null, null, null, t24, t26);
    t24 += t26 * vy;
    if (9 >= t23)
      throw $.ioore(9);
    t28 = te[9];
    if (typeof t28 !== "number")
      return this.multiplyVector3$1$bailout(16, v, te, vx, vy, vz, t5, null, null, null, null, d, null, null, null, t24, null, t28);
    t24 += t28 * vz;
    if (13 >= t23)
      throw $.ioore(13);
    t30 = te[13];
    if (typeof t30 !== "number")
      return this.multiplyVector3$1$bailout(17, v, te, vx, vy, vz, t5, null, null, null, null, d, null, null, null, t24, null, null, t30);
    v.set$y((t24 + t30) * d);
    t32 = te.length;
    if (2 >= t32)
      throw $.ioore(2);
    t33 = te[2];
    if (typeof t33 !== "number")
      return this.multiplyVector3$1$bailout(18, v, te, vx, vy, vz, t5, null, null, null, null, d, null, null, null, null, null, null, null, t33);
    t33 *= vx;
    if (6 >= t32)
      throw $.ioore(6);
    t35 = te[6];
    if (typeof t35 !== "number")
      return this.multiplyVector3$1$bailout(19, v, te, null, vy, vz, t5, null, null, null, null, d, null, null, null, null, null, null, null, t33, t35);
    t33 += t35 * vy;
    if (10 >= t32)
      throw $.ioore(10);
    t37 = te[10];
    if (typeof t37 !== "number")
      return this.multiplyVector3$1$bailout(20, v, te, null, null, vz, t5, null, null, null, null, d, null, null, null, null, null, null, null, t33, null, t37);
    t33 += t37 * vz;
    if (14 >= t32)
      throw $.ioore(14);
    t39 = te[14];
    if (typeof t39 !== "number")
      return this.multiplyVector3$1$bailout(21, v, null, null, null, null, t39, null, null, null, null, d, null, null, null, null, null, null, null, t33);
    v.set$z((t33 + t39) * d);
    return v;
  },
  multiplyVector3$1$bailout: function(state0, v, te, vx, vy, vz, t5, t6, t8, t10, t12, d, t15, t17, t19, t21, t23, t25, t27, t29, t31, t33) {
    switch (state0) {
      case 0:
        te = this.elements;
      case 1:
        state0 = 0;
        vx = v.get$x();
      case 2:
        state0 = 0;
        vy = v.get$y();
      case 3:
        state0 = 0;
        vz = v.get$z();
      case 4:
        state0 = 0;
        t5 = $.getInterceptor$JSStringJSArray(te);
        t6 = t5.$index(te, 3);
      case 5:
        state0 = 0;
        t6 = $.$$mul(t6, vx);
        t8 = t5.$index(te, 7);
      case 6:
        state0 = 0;
        t6 = $.$$add(t6, $.$$mul(t8, vy));
        t10 = t5.$index(te, 11);
      case 7:
        state0 = 0;
        t6 = $.$$add(t6, $.$$mul(t10, vz));
        t12 = t5.$index(te, 15);
      case 8:
        state0 = 0;
        t12 = $.$$add(t6, t12);
        if (typeof t12 !== "number")
          throw $.iae(t12);
        d = 1 / t12;
      case 9:
        state0 = 0;
        t6 = t5.$index(te, 0);
      case 10:
        state0 = 0;
        t6 = $.$$mul(t6, vx);
        t15 = t5.$index(te, 4);
      case 11:
        state0 = 0;
        t6 = $.$$add(t6, $.$$mul(t15, vy));
        t17 = t5.$index(te, 8);
      case 12:
        state0 = 0;
        t6 = $.$$add(t6, $.$$mul(t17, vz));
        t19 = t5.$index(te, 12);
      case 13:
        state0 = 0;
        v.set$x($.$$mul($.$$add(t6, t19), d));
        t21 = t5.$index(te, 1);
      case 14:
        state0 = 0;
        t21 = $.$$mul(t21, vx);
        t23 = t5.$index(te, 5);
      case 15:
        state0 = 0;
        t21 = $.$$add(t21, $.$$mul(t23, vy));
        t25 = t5.$index(te, 9);
      case 16:
        state0 = 0;
        t21 = $.$$add(t21, $.$$mul(t25, vz));
        t27 = t5.$index(te, 13);
      case 17:
        state0 = 0;
        v.set$y($.$$mul($.$$add(t21, t27), d));
        t29 = t5.$index(te, 2);
      case 18:
        state0 = 0;
        t29 = $.$$mul(t29, vx);
        t31 = t5.$index(te, 6);
      case 19:
        state0 = 0;
        t29 = $.$$add(t29, $.$$mul(t31, vy));
        t33 = t5.$index(te, 10);
      case 20:
        state0 = 0;
        t29 = $.$$add(t29, $.$$mul(t33, vz));
        t5 = t5.$index(te, 14);
      case 21:
        state0 = 0;
        v.set$z($.$$mul($.$$add(t29, t5), d));
        return v;
    }
  },
  determinant$0: function() {
    var te, t1, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44, t2, t3, t4;
    te = this.elements;
    t1 = $.getInterceptor$JSStringJSArray(te);
    n11 = t1.$index(te, 0);
    n12 = t1.$index(te, 4);
    n13 = t1.$index(te, 8);
    n14 = t1.$index(te, 12);
    n21 = t1.$index(te, 1);
    n22 = t1.$index(te, 5);
    n23 = t1.$index(te, 9);
    n24 = t1.$index(te, 13);
    n31 = t1.$index(te, 2);
    n32 = t1.$index(te, 6);
    n33 = t1.$index(te, 10);
    n34 = t1.$index(te, 14);
    n41 = t1.$index(te, 3);
    n42 = t1.$index(te, 7);
    n43 = t1.$index(te, 11);
    n44 = t1.$index(te, 15);
    t1 = $.getInterceptor$JSNumber(n14);
    t2 = $.getInterceptor$JSNumber(n13);
    t3 = $.getInterceptor$JSNumber(n12);
    t4 = $.getInterceptor$JSNumber(n11);
    return $.$$add($.$$sub($.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul($.$$mul(t1.$mul(n14, n23), n32), n41), $.$$mul($.$$mul(t2.$mul(n13, n24), n32), n41)), $.$$mul($.$$mul(t1.$mul(n14, n22), n33), n41)), $.$$mul($.$$mul(t3.$mul(n12, n24), n33), n41)), $.$$mul($.$$mul(t2.$mul(n13, n22), n34), n41)), $.$$mul($.$$mul(t3.$mul(n12, n23), n34), n41)), $.$$mul($.$$mul(t1.$mul(n14, n23), n31), n42)), $.$$mul($.$$mul(t2.$mul(n13, n24), n31), n42)), $.$$mul($.$$mul(t1.$mul(n14, n21), n33), n42)), $.$$mul($.$$mul(t4.$mul(n11, n24), n33), n42)), $.$$mul($.$$mul(t2.$mul(n13, n21), n34), n42)), $.$$mul($.$$mul(t4.$mul(n11, n23), n34), n42)), $.$$mul($.$$mul(t1.$mul(n14, n22), n31), n43)), $.$$mul($.$$mul(t3.$mul(n12, n24), n31), n43)), $.$$mul($.$$mul(t1.$mul(n14, n21), n32), n43)), $.$$mul($.$$mul(t4.$mul(n11, n24), n32), n43)), $.$$mul($.$$mul(t3.$mul(n12, n21), n34), n43)), $.$$mul($.$$mul(t4.$mul(n11, n22), n34), n43)), $.$$mul($.$$mul(t2.$mul(n13, n22), n31), n44)), $.$$mul($.$$mul(t3.$mul(n12, n23), n31), n44)), $.$$mul($.$$mul(t2.$mul(n13, n21), n32), n44)), $.$$mul($.$$mul(t4.$mul(n11, n23), n32), n44)), $.$$mul($.$$mul(t3.$mul(n12, n21), n33), n44)), $.$$mul($.$$mul(t4.$mul(n11, n22), n33), n44));
  },
  transpose$0: function() {
    var te, t1, tmp;
    te = this.elements;
    t1 = $.getInterceptor$JSStringJSArray(te);
    tmp = t1.$index(te, 1);
    t1.$indexSet(te, 1, t1.$index(te, 4));
    t1.$indexSet(te, 4, tmp);
    tmp = t1.$index(te, 2);
    t1.$indexSet(te, 2, t1.$index(te, 8));
    t1.$indexSet(te, 8, tmp);
    tmp = t1.$index(te, 6);
    t1.$indexSet(te, 6, t1.$index(te, 9));
    t1.$indexSet(te, 9, tmp);
    tmp = t1.$index(te, 3);
    t1.$indexSet(te, 3, t1.$index(te, 12));
    t1.$indexSet(te, 12, tmp);
    tmp = t1.$index(te, 7);
    t1.$indexSet(te, 7, t1.$index(te, 13));
    t1.$indexSet(te, 13, tmp);
    tmp = t1.$index(te, 11);
    t1.$indexSet(te, 11, t1.$index(te, 14));
    t1.$indexSet(te, 14, tmp);
    return this;
  },
  flattenToArray$1: function(flat) {
    var te, t2, t3, t4;
    if (typeof flat !== "object" || flat === null || (flat.constructor !== Array || !!flat.immutable$list) && !flat.$isJavaScriptIndexingBehavior())
      return this.flattenToArray$1$bailout(1, flat);
    te = this.elements;
    if (typeof te !== "string" && (typeof te !== "object" || te === null || te.constructor !== Array && !te.$isJavaScriptIndexingBehavior()))
      return this.flattenToArray$1$bailout(2, flat, te);
    t2 = te.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = te[0];
    t4 = flat.length;
    if (0 >= t4)
      throw $.ioore(0);
    flat[0] = t3;
    if (1 >= t2)
      throw $.ioore(1);
    t3 = te[1];
    if (1 >= t4)
      throw $.ioore(1);
    flat[1] = t3;
    if (2 >= t2)
      throw $.ioore(2);
    t3 = te[2];
    if (2 >= t4)
      throw $.ioore(2);
    flat[2] = t3;
    if (3 >= t2)
      throw $.ioore(3);
    t3 = te[3];
    if (3 >= t4)
      throw $.ioore(3);
    flat[3] = t3;
    if (4 >= t2)
      throw $.ioore(4);
    t3 = te[4];
    if (4 >= t4)
      throw $.ioore(4);
    flat[4] = t3;
    if (5 >= t2)
      throw $.ioore(5);
    t3 = te[5];
    if (5 >= t4)
      throw $.ioore(5);
    flat[5] = t3;
    if (6 >= t2)
      throw $.ioore(6);
    t3 = te[6];
    if (6 >= t4)
      throw $.ioore(6);
    flat[6] = t3;
    if (7 >= t2)
      throw $.ioore(7);
    t3 = te[7];
    if (7 >= t4)
      throw $.ioore(7);
    flat[7] = t3;
    if (8 >= t2)
      throw $.ioore(8);
    t3 = te[8];
    if (8 >= t4)
      throw $.ioore(8);
    flat[8] = t3;
    if (9 >= t2)
      throw $.ioore(9);
    t3 = te[9];
    if (9 >= t4)
      throw $.ioore(9);
    flat[9] = t3;
    if (10 >= t2)
      throw $.ioore(10);
    t3 = te[10];
    if (10 >= t4)
      throw $.ioore(10);
    flat[10] = t3;
    if (11 >= t2)
      throw $.ioore(11);
    t3 = te[11];
    if (11 >= t4)
      throw $.ioore(11);
    flat[11] = t3;
    if (12 >= t2)
      throw $.ioore(12);
    t3 = te[12];
    if (12 >= t4)
      throw $.ioore(12);
    flat[12] = t3;
    if (13 >= t2)
      throw $.ioore(13);
    t3 = te[13];
    if (13 >= t4)
      throw $.ioore(13);
    flat[13] = t3;
    if (14 >= t2)
      throw $.ioore(14);
    t3 = te[14];
    if (14 >= t4)
      throw $.ioore(14);
    flat[14] = t3;
    if (15 >= t2)
      throw $.ioore(15);
    t3 = te[15];
    if (15 >= t4)
      throw $.ioore(15);
    flat[15] = t3;
    return flat;
  },
  flattenToArray$1$bailout: function(state0, flat, te) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        te = this.elements;
      case 2:
        var t2, t3;
        state0 = 0;
        t2 = $.getInterceptor$JSStringJSArray(te);
        t3 = $.getInterceptor$JSArray(flat);
        t3.$indexSet(flat, 0, t2.$index(te, 0));
        t3.$indexSet(flat, 1, t2.$index(te, 1));
        t3.$indexSet(flat, 2, t2.$index(te, 2));
        t3.$indexSet(flat, 3, t2.$index(te, 3));
        t3.$indexSet(flat, 4, t2.$index(te, 4));
        t3.$indexSet(flat, 5, t2.$index(te, 5));
        t3.$indexSet(flat, 6, t2.$index(te, 6));
        t3.$indexSet(flat, 7, t2.$index(te, 7));
        t3.$indexSet(flat, 8, t2.$index(te, 8));
        t3.$indexSet(flat, 9, t2.$index(te, 9));
        t3.$indexSet(flat, 10, t2.$index(te, 10));
        t3.$indexSet(flat, 11, t2.$index(te, 11));
        t3.$indexSet(flat, 12, t2.$index(te, 12));
        t3.$indexSet(flat, 13, t2.$index(te, 13));
        t3.$indexSet(flat, 14, t2.$index(te, 14));
        t3.$indexSet(flat, 15, t2.$index(te, 15));
        return flat;
    }
  },
  flattenToArrayOffset$2: function(flat, offset) {
    var te, t2, t3, t4, t5;
    if (typeof flat !== "object" || flat === null || (flat.constructor !== Array || !!flat.immutable$list) && !flat.$isJavaScriptIndexingBehavior())
      return this.flattenToArrayOffset$2$bailout(1, flat, offset);
    te = this.elements;
    if (typeof te !== "string" && (typeof te !== "object" || te === null || te.constructor !== Array && !te.$isJavaScriptIndexingBehavior()))
      return this.flattenToArrayOffset$2$bailout(2, flat, offset, te);
    t2 = te.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = te[0];
    t4 = flat.length;
    if (offset < 0 || offset >= t4)
      throw $.ioore(offset);
    flat[offset] = t3;
    if (1 >= t2)
      throw $.ioore(1);
    t3 = te[1];
    t5 = offset + 1;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (2 >= t2)
      throw $.ioore(2);
    t3 = te[2];
    t5 = offset + 2;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (3 >= t2)
      throw $.ioore(3);
    t3 = te[3];
    t5 = offset + 3;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (4 >= t2)
      throw $.ioore(4);
    t3 = te[4];
    t5 = offset + 4;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (5 >= t2)
      throw $.ioore(5);
    t3 = te[5];
    t5 = offset + 5;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (6 >= t2)
      throw $.ioore(6);
    t3 = te[6];
    t5 = offset + 6;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (7 >= t2)
      throw $.ioore(7);
    t3 = te[7];
    t5 = offset + 7;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (8 >= t2)
      throw $.ioore(8);
    t3 = te[8];
    t5 = offset + 8;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (9 >= t2)
      throw $.ioore(9);
    t3 = te[9];
    t5 = offset + 9;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (10 >= t2)
      throw $.ioore(10);
    t3 = te[10];
    t5 = offset + 10;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (11 >= t2)
      throw $.ioore(11);
    t3 = te[11];
    t5 = offset + 11;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (12 >= t2)
      throw $.ioore(12);
    t3 = te[12];
    t5 = offset + 12;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (13 >= t2)
      throw $.ioore(13);
    t3 = te[13];
    t5 = offset + 13;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (14 >= t2)
      throw $.ioore(14);
    t3 = te[14];
    t5 = offset + 14;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    if (15 >= t2)
      throw $.ioore(15);
    t3 = te[15];
    t5 = offset + 15;
    if (t5 >= t4)
      throw $.ioore(t5);
    flat[t5] = t3;
    return flat;
  },
  flattenToArrayOffset$2$bailout: function(state0, flat, offset, te) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        te = this.elements;
      case 2:
        var t2, t3;
        state0 = 0;
        t2 = $.getInterceptor$JSStringJSArray(te);
        t3 = $.getInterceptor$JSArray(flat);
        t3.$indexSet(flat, offset, t2.$index(te, 0));
        t3.$indexSet(flat, offset + 1, t2.$index(te, 1));
        t3.$indexSet(flat, offset + 2, t2.$index(te, 2));
        t3.$indexSet(flat, offset + 3, t2.$index(te, 3));
        t3.$indexSet(flat, offset + 4, t2.$index(te, 4));
        t3.$indexSet(flat, offset + 5, t2.$index(te, 5));
        t3.$indexSet(flat, offset + 6, t2.$index(te, 6));
        t3.$indexSet(flat, offset + 7, t2.$index(te, 7));
        t3.$indexSet(flat, offset + 8, t2.$index(te, 8));
        t3.$indexSet(flat, offset + 9, t2.$index(te, 9));
        t3.$indexSet(flat, offset + 10, t2.$index(te, 10));
        t3.$indexSet(flat, offset + 11, t2.$index(te, 11));
        t3.$indexSet(flat, offset + 12, t2.$index(te, 12));
        t3.$indexSet(flat, offset + 13, t2.$index(te, 13));
        t3.$indexSet(flat, offset + 14, t2.$index(te, 14));
        t3.$indexSet(flat, offset + 15, t2.$index(te, 15));
        return flat;
    }
  },
  getPosition$0: function() {
    var t1, t2, t4, t5, t6;
    if ($.Matrix4____v1 == null)
      $.Matrix4____v1 = $.Vector3$(0, 0, 0);
    t1 = $.Matrix4____v1;
    t2 = this.elements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.getPosition$0$bailout(1, t2, t1);
    t4 = t2.length;
    if (12 >= t4)
      throw $.ioore(12);
    t5 = t2[12];
    if (13 >= t4)
      throw $.ioore(13);
    t6 = t2[13];
    if (14 >= t4)
      throw $.ioore(14);
    return t1.setValues$3(t5, t6, t2[14]);
  },
  getPosition$0$bailout: function(state0, t2, t1) {
    var t4 = $.getInterceptor$JSStringJSArray(t2);
    return t1.setValues$3(t4.$index(t2, 12), t4.$index(t2, 13), t4.$index(t2, 14));
  },
  setPosition$1: function(v) {
    var te, t1;
    te = this.elements;
    t1 = $.getInterceptor$JSArray(te);
    t1.$indexSet(te, 12, v.get$x());
    t1.$indexSet(te, 13, v.get$y());
    t1.$indexSet(te, 14, v.get$z());
    return this;
  },
  getInverse$1: function(m) {
    var te, me, t1, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44, t2, t3, t4, t5, t6, t7, t8, t9;
    te = this.elements;
    me = m.get$elements();
    t1 = $.getInterceptor$JSStringJSArray(me);
    n11 = t1.$index(me, 0);
    n12 = t1.$index(me, 4);
    n13 = t1.$index(me, 8);
    n14 = t1.$index(me, 12);
    n21 = t1.$index(me, 1);
    n22 = t1.$index(me, 5);
    n23 = t1.$index(me, 9);
    n24 = t1.$index(me, 13);
    n31 = t1.$index(me, 2);
    n32 = t1.$index(me, 6);
    n33 = t1.$index(me, 10);
    n34 = t1.$index(me, 14);
    n41 = t1.$index(me, 3);
    n42 = t1.$index(me, 7);
    n43 = t1.$index(me, 11);
    n44 = t1.$index(me, 15);
    t1 = $.getInterceptor$JSNumber(n23);
    t2 = $.getInterceptor$JSNumber(n24);
    t3 = $.getInterceptor$JSNumber(n22);
    t4 = $.getInterceptor$JSArray(te);
    t4.$indexSet(te, 0, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t1.$mul(n23, n34), n42), $.$$mul(t2.$mul(n24, n33), n42)), $.$$mul(t2.$mul(n24, n32), n43)), $.$$mul(t3.$mul(n22, n34), n43)), $.$$mul(t1.$mul(n23, n32), n44)), $.$$mul(t3.$mul(n22, n33), n44)));
    t5 = $.getInterceptor$JSNumber(n14);
    t6 = $.getInterceptor$JSNumber(n13);
    t7 = $.getInterceptor$JSNumber(n12);
    t4.$indexSet(te, 4, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t5.$mul(n14, n33), n42), $.$$mul(t6.$mul(n13, n34), n42)), $.$$mul(t5.$mul(n14, n32), n43)), $.$$mul(t7.$mul(n12, n34), n43)), $.$$mul(t6.$mul(n13, n32), n44)), $.$$mul(t7.$mul(n12, n33), n44)));
    t4.$indexSet(te, 8, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t6.$mul(n13, n24), n42), $.$$mul(t5.$mul(n14, n23), n42)), $.$$mul(t5.$mul(n14, n22), n43)), $.$$mul(t7.$mul(n12, n24), n43)), $.$$mul(t6.$mul(n13, n22), n44)), $.$$mul(t7.$mul(n12, n23), n44)));
    t4.$indexSet(te, 12, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t5.$mul(n14, n23), n32), $.$$mul(t6.$mul(n13, n24), n32)), $.$$mul(t5.$mul(n14, n22), n33)), $.$$mul(t7.$mul(n12, n24), n33)), $.$$mul(t6.$mul(n13, n22), n34)), $.$$mul(t7.$mul(n12, n23), n34)));
    t8 = $.getInterceptor$JSNumber(n21);
    t4.$indexSet(te, 1, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t2.$mul(n24, n33), n41), $.$$mul(t1.$mul(n23, n34), n41)), $.$$mul(t2.$mul(n24, n31), n43)), $.$$mul(t8.$mul(n21, n34), n43)), $.$$mul(t1.$mul(n23, n31), n44)), $.$$mul(t8.$mul(n21, n33), n44)));
    t9 = $.getInterceptor$JSNumber(n11);
    t4.$indexSet(te, 5, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t6.$mul(n13, n34), n41), $.$$mul(t5.$mul(n14, n33), n41)), $.$$mul(t5.$mul(n14, n31), n43)), $.$$mul(t9.$mul(n11, n34), n43)), $.$$mul(t6.$mul(n13, n31), n44)), $.$$mul(t9.$mul(n11, n33), n44)));
    t4.$indexSet(te, 9, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t5.$mul(n14, n23), n41), $.$$mul(t6.$mul(n13, n24), n41)), $.$$mul(t5.$mul(n14, n21), n43)), $.$$mul(t9.$mul(n11, n24), n43)), $.$$mul(t6.$mul(n13, n21), n44)), $.$$mul(t9.$mul(n11, n23), n44)));
    t4.$indexSet(te, 13, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t6.$mul(n13, n24), n31), $.$$mul(t5.$mul(n14, n23), n31)), $.$$mul(t5.$mul(n14, n21), n33)), $.$$mul(t9.$mul(n11, n24), n33)), $.$$mul(t6.$mul(n13, n21), n34)), $.$$mul(t9.$mul(n11, n23), n34)));
    t4.$indexSet(te, 2, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t3.$mul(n22, n34), n41), $.$$mul(t2.$mul(n24, n32), n41)), $.$$mul(t2.$mul(n24, n31), n42)), $.$$mul(t8.$mul(n21, n34), n42)), $.$$mul(t3.$mul(n22, n31), n44)), $.$$mul(t8.$mul(n21, n32), n44)));
    t4.$indexSet(te, 6, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t5.$mul(n14, n32), n41), $.$$mul(t7.$mul(n12, n34), n41)), $.$$mul(t5.$mul(n14, n31), n42)), $.$$mul(t9.$mul(n11, n34), n42)), $.$$mul(t7.$mul(n12, n31), n44)), $.$$mul(t9.$mul(n11, n32), n44)));
    t4.$indexSet(te, 10, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t7.$mul(n12, n24), n41), $.$$mul(t5.$mul(n14, n22), n41)), $.$$mul(t5.$mul(n14, n21), n42)), $.$$mul(t9.$mul(n11, n24), n42)), $.$$mul(t7.$mul(n12, n21), n44)), $.$$mul(t9.$mul(n11, n22), n44)));
    t4.$indexSet(te, 14, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t5.$mul(n14, n22), n31), $.$$mul(t7.$mul(n12, n24), n31)), $.$$mul(t5.$mul(n14, n21), n32)), $.$$mul(t9.$mul(n11, n24), n32)), $.$$mul(t7.$mul(n12, n21), n34)), $.$$mul(t9.$mul(n11, n22), n34)));
    t4.$indexSet(te, 3, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t1.$mul(n23, n32), n41), $.$$mul(t3.$mul(n22, n33), n41)), $.$$mul(t1.$mul(n23, n31), n42)), $.$$mul(t8.$mul(n21, n33), n42)), $.$$mul(t3.$mul(n22, n31), n43)), $.$$mul(t8.$mul(n21, n32), n43)));
    t4.$indexSet(te, 7, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t7.$mul(n12, n33), n41), $.$$mul(t6.$mul(n13, n32), n41)), $.$$mul(t6.$mul(n13, n31), n42)), $.$$mul(t9.$mul(n11, n33), n42)), $.$$mul(t7.$mul(n12, n31), n43)), $.$$mul(t9.$mul(n11, n32), n43)));
    t4.$indexSet(te, 11, $.$$sub($.$$add($.$$add($.$$sub($.$$sub($.$$mul(t6.$mul(n13, n22), n41), $.$$mul(t7.$mul(n12, n23), n41)), $.$$mul(t6.$mul(n13, n21), n42)), $.$$mul(t9.$mul(n11, n23), n42)), $.$$mul(t7.$mul(n12, n21), n43)), $.$$mul(t9.$mul(n11, n22), n43)));
    t4.$indexSet(te, 15, $.$$add($.$$sub($.$$sub($.$$add($.$$sub($.$$mul(t7.$mul(n12, n23), n31), $.$$mul(t6.$mul(n13, n22), n31)), $.$$mul(t6.$mul(n13, n21), n32)), $.$$mul(t9.$mul(n11, n23), n32)), $.$$mul(t7.$mul(n12, n21), n33)), $.$$mul(t9.$mul(n11, n22), n33)));
    t4 = m.determinant$0();
    if (typeof t4 !== "number")
      throw $.iae(t4);
    this.multiplyScalar$1(1 / t4);
    return this;
  },
  setRotationFromEuler$2: function(v, order) {
    var te, x, y, z, a, b, c, d, e, f, t1, t2, t3, ce, cf, de, df, t4, af, be, bf, ad, bc, bd;
    te = this.elements;
    x = v.get$x();
    y = v.get$y();
    z = v.get$z();
    a = Math.cos($.checkNum(x));
    b = Math.sin($.checkNum(x));
    c = Math.cos($.checkNum(y));
    d = Math.sin($.checkNum(y));
    e = Math.cos($.checkNum(z));
    f = Math.sin($.checkNum(z));
    t1 = a * e;
    t2 = $.getInterceptor$JSArray(te);
    t3 = a * c;
    ce = c * e;
    switch (order) {
      case "YXZ":
        cf = c * f;
        de = d * e;
        df = d * f;
        t2.$indexSet(te, 0, ce + df * b);
        t2.$indexSet(te, 4, de * b - cf);
        t2.$indexSet(te, 8, a * d);
        t2.$indexSet(te, 1, a * f);
        t2.$indexSet(te, 5, t1);
        t2.$indexSet(te, 9, -b);
        t2.$indexSet(te, 2, cf * b - de);
        t2.$indexSet(te, 6, df + ce * b);
        t2.$indexSet(te, 10, t3);
        break;
      case "ZXY":
        cf = c * f;
        de = d * e;
        df = d * f;
        t2.$indexSet(te, 0, ce - df * b);
        t4 = -a;
        t2.$indexSet(te, 4, t4 * f);
        t2.$indexSet(te, 8, de + cf * b);
        t2.$indexSet(te, 1, cf + de * b);
        t2.$indexSet(te, 5, t1);
        t2.$indexSet(te, 9, df - ce * b);
        t2.$indexSet(te, 2, t4 * d);
        t2.$indexSet(te, 6, b);
        t2.$indexSet(te, 10, t3);
        break;
      case "ZYX":
        af = a * f;
        be = b * e;
        bf = b * f;
        t2.$indexSet(te, 0, ce);
        t2.$indexSet(te, 4, be * d - af);
        t2.$indexSet(te, 8, t1 * d + bf);
        t2.$indexSet(te, 1, c * f);
        t2.$indexSet(te, 5, bf * d + t1);
        t2.$indexSet(te, 9, af * d - be);
        t2.$indexSet(te, 2, -d);
        t2.$indexSet(te, 6, b * c);
        t2.$indexSet(te, 10, t3);
        break;
      case "YZX":
        ad = a * d;
        bc = b * c;
        bd = b * d;
        t2.$indexSet(te, 0, ce);
        t2.$indexSet(te, 4, bd - t3 * f);
        t2.$indexSet(te, 8, bc * f + ad);
        t2.$indexSet(te, 1, f);
        t2.$indexSet(te, 5, t1);
        t2.$indexSet(te, 9, -b * e);
        t2.$indexSet(te, 2, -d * e);
        t2.$indexSet(te, 6, ad * f + bc);
        t2.$indexSet(te, 10, t3 - bd * f);
        break;
      case "XZY":
        ad = a * d;
        bc = b * c;
        bd = b * d;
        t2.$indexSet(te, 0, ce);
        t2.$indexSet(te, 4, -f);
        t2.$indexSet(te, 8, d * e);
        t2.$indexSet(te, 1, t3 * f + bd);
        t2.$indexSet(te, 5, t1);
        t2.$indexSet(te, 9, ad * f - bc);
        t2.$indexSet(te, 2, bc * f - ad);
        t2.$indexSet(te, 6, b * e);
        t2.$indexSet(te, 10, bd * f + t3);
        break;
      default:
        af = a * f;
        be = b * e;
        bf = b * f;
        t2.$indexSet(te, 0, ce);
        t2.$indexSet(te, 4, -c * f);
        t2.$indexSet(te, 8, d);
        t2.$indexSet(te, 1, af + be * d);
        t2.$indexSet(te, 5, t1 - bf * d);
        t2.$indexSet(te, 9, -b * c);
        t2.$indexSet(te, 2, bf - t1 * d);
        t2.$indexSet(te, 6, be + af * d);
        t2.$indexSet(te, 10, t3);
        break;
    }
    return this;
  },
  setRotationFromQuaternion$1: function(q) {
    var te, x, y, z, w, t1, x2, t2, y2, t3, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, t4, t5, t6, t7;
    te = this.elements;
    x = q.x;
    y = q.y;
    z = q.z;
    w = q.w;
    t1 = $.getInterceptor$JSNumber(x);
    x2 = t1.$add(x, x);
    t2 = $.getInterceptor$JSNumber(y);
    y2 = t2.$add(y, y);
    t3 = $.getInterceptor$JSNumber(z);
    z2 = t3.$add(z, z);
    xx = t1.$mul(x, x2);
    xy = t1.$mul(x, y2);
    xz = t1.$mul(x, z2);
    yy = t2.$mul(y, y2);
    yz = t2.$mul(y, z2);
    zz = t3.$mul(z, z2);
    t3 = $.getInterceptor$JSNumber(w);
    wx = t3.$mul(w, x2);
    wy = t3.$mul(w, y2);
    wz = t3.$mul(w, z2);
    t3 = $.$$add(yy, zz);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t2 = $.getInterceptor$JSArray(te);
    t2.$indexSet(te, 0, 1 - t3);
    t1 = $.getInterceptor$JSNumber(xy);
    t2.$indexSet(te, 4, t1.$sub(xy, wz));
    t4 = $.getInterceptor$JSNumber(xz);
    t2.$indexSet(te, 8, t4.$add(xz, wy));
    t2.$indexSet(te, 1, t1.$add(xy, wz));
    t5 = $.getInterceptor$JSNumber(xx);
    t6 = t5.$add(xx, zz);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t2.$indexSet(te, 5, 1 - t6);
    t7 = $.getInterceptor$JSNumber(yz);
    t2.$indexSet(te, 9, t7.$sub(yz, wx));
    t2.$indexSet(te, 2, t4.$sub(xz, wy));
    t2.$indexSet(te, 6, t7.$add(yz, wx));
    t5 = t5.$add(xx, yy);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t2.$indexSet(te, 10, 1 - t5);
    return this;
  },
  scale$1: function(v) {
    var te, x, y, z, t1;
    te = this.elements;
    x = v.get$x();
    y = v.get$y();
    z = v.get$z();
    t1 = $.getInterceptor$JSStringJSArray(te);
    t1.$indexSet(te, 0, $.$$mul(t1.$index(te, 0), x));
    t1.$indexSet(te, 4, $.$$mul(t1.$index(te, 4), y));
    t1.$indexSet(te, 8, $.$$mul(t1.$index(te, 8), z));
    t1.$indexSet(te, 1, $.$$mul(t1.$index(te, 1), x));
    t1.$indexSet(te, 5, $.$$mul(t1.$index(te, 5), y));
    t1.$indexSet(te, 9, $.$$mul(t1.$index(te, 9), z));
    t1.$indexSet(te, 2, $.$$mul(t1.$index(te, 2), x));
    t1.$indexSet(te, 6, $.$$mul(t1.$index(te, 6), y));
    t1.$indexSet(te, 10, $.$$mul(t1.$index(te, 10), z));
    t1.$indexSet(te, 3, $.$$mul(t1.$index(te, 3), x));
    t1.$indexSet(te, 7, $.$$mul(t1.$index(te, 7), y));
    t1.$indexSet(te, 11, $.$$mul(t1.$index(te, 11), z));
    return this;
  },
  get$scale: function() {
    return new $.BoundClosure(this, "scale$1");
  },
  getMaxScaleOnAxis$0: function() {
    var te, t1;
    te = this.elements;
    t1 = $.getInterceptor$JSStringJSArray(te);
    return Math.sqrt($.checkNum($.max($.$$add($.$$add($.$$mul(t1.$index(te, 0), t1.$index(te, 0)), $.$$mul(t1.$index(te, 1), t1.$index(te, 1))), $.$$mul(t1.$index(te, 2), t1.$index(te, 2))), $.max($.$$add($.$$add($.$$mul(t1.$index(te, 4), t1.$index(te, 4)), $.$$mul(t1.$index(te, 5), t1.$index(te, 5))), $.$$mul(t1.$index(te, 6), t1.$index(te, 6))), $.$$add($.$$add($.$$mul(t1.$index(te, 8), t1.$index(te, 8)), $.$$mul(t1.$index(te, 9), t1.$index(te, 9))), $.$$mul(t1.$index(te, 10), t1.$index(te, 10)))))));
  },
  makeRotationAxis$2: function(axis, angle) {
    var c, s, t, x, y, z, tx, ty, t1, t2, t3, t4, t5, t6;
    c = Math.cos($.checkNum(angle));
    s = Math.sin($.checkNum(angle));
    t = 1 - c;
    x = axis.get$x();
    y = axis.get$y();
    z = axis.get$z();
    if (typeof x !== "number")
      throw $.iae(x);
    tx = t * x;
    if (typeof y !== "number")
      throw $.iae(y);
    ty = t * y;
    t1 = tx * y;
    if (typeof z !== "number")
      throw $.iae(z);
    t2 = s * z;
    t3 = tx * z;
    t4 = s * y;
    t5 = ty * z;
    t6 = s * x;
    this.setValues$16(tx * x + c, t1 - t2, t3 + t4, 0, t1 + t2, ty * y + c, t5 - t6, 0, t3 - t4, t5 + t6, t * z * z + c, 0, 0, 0, 0, 1);
    return this;
  },
  makeFrustum$6: function(left, right, bottom, top, near, far) {
    var te, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    te = this.elements;
    if (typeof near !== "number")
      throw $.iae(near);
    t1 = 2 * near;
    t2 = $.getInterceptor$JSNumber(right);
    t3 = t2.$sub(right, left);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = $.getInterceptor$JSNumber(top);
    t5 = t4.$sub(top, bottom);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = $.$$div(t2.$add(right, left), t2.$sub(right, left));
    t7 = $.$$div(t4.$add(top, bottom), t4.$sub(top, bottom));
    t8 = $.getInterceptor$JSNumber(far);
    t9 = $.$$div($.$$negate(t8.$add(far, near)), t8.$sub(far, near));
    if (typeof far !== "number")
      throw $.iae(far);
    t10 = $.getInterceptor$JSArray(te);
    t10.$indexSet(te, 0, t1 / t3);
    t10.$indexSet(te, 4, 0);
    t10.$indexSet(te, 8, t6);
    t10.$indexSet(te, 12, 0);
    t10.$indexSet(te, 1, 0);
    t10.$indexSet(te, 5, t1 / t5);
    t10.$indexSet(te, 9, t7);
    t10.$indexSet(te, 13, 0);
    t10.$indexSet(te, 2, 0);
    t10.$indexSet(te, 6, 0);
    t10.$indexSet(te, 10, t9);
    t10.$indexSet(te, 14, -2 * far * near / (far - near));
    t10.$indexSet(te, 3, 0);
    t10.$indexSet(te, 7, 0);
    t10.$indexSet(te, 11, -1);
    t10.$indexSet(te, 15, 0);
    return this;
  },
  makePerspective$4: function(fov, aspect, near, far) {
    var t1, t2, ymin;
    t1 = $.$$mul(near, Math.tan($.checkNum($.$$div($.$$mul(fov, 3.141592653589793), 360))));
    t2 = $.getInterceptor$JSNumber(t1);
    ymin = t2.$negate(t1);
    return this.makeFrustum$6($.$$mul(ymin, aspect), t2.$mul(t1, aspect), ymin, t1, near, far);
  },
  clone$0: function() {
    var te, t1;
    te = this.elements;
    t1 = $.getInterceptor$JSStringJSArray(te);
    return $.Matrix4$(t1.$index(te, 0), t1.$index(te, 4), t1.$index(te, 8), t1.$index(te, 12), t1.$index(te, 1), t1.$index(te, 5), t1.$index(te, 9), t1.$index(te, 13), t1.$index(te, 2), t1.$index(te, 6), t1.$index(te, 10), t1.$index(te, 14), t1.$index(te, 3), t1.$index(te, 7), t1.$index(te, 11), t1.$index(te, 15));
  },
  Matrix4$16: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    this.setValues$16(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
  },
  $isMatrix4: true
};

$$.Quaternion = {"": "Object;x=,y=,z=,w>",
  setValues$4: function(newX, newY, newZ, newW) {
    this.x = newX;
    this.y = newY;
    this.z = newZ;
    this.w = newW;
    return this;
  },
  copy$1: function(q) {
    this.x = q.get$x();
    this.y = q.get$y();
    this.z = q.get$z();
    this.w = q.get$w();
    return this;
  },
  length$0: function() {
    var t1, t3, t5, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.length$0$bailout0(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.length$0$bailout0(2, t1, t3);
    t1 += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.length$0$bailout0(3, t1, null, t5);
    t1 += t5 * t5;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.length$0$bailout0(4, t1, null, null, t7);
    return Math.sqrt($.checkNum(t1 + t7 * t7));
  },
  length$0$bailout0: function(state0, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t3, t3));
        t5 = this.z;
      case 3:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t5, t5));
        t7 = this.w;
      case 4:
        state0 = 0;
        return Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t7, t7))));
    }
  },
  get$length: function() {
    return new $.BoundClosure0(this, "length$0");
  },
  normalize$0: function() {
    var t1, t3, t5, t7, l;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.normalize$0$bailout2(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.normalize$0$bailout2(2, t1, t3);
    t1 += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.normalize$0$bailout2(3, t1, null, t5);
    t1 += t5 * t5;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.normalize$0$bailout2(4, t1, null, null, t7);
    l = Math.sqrt($.checkNum(t1 + t7 * t7));
    if (l === 0) {
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 0;
    } else {
      l = 1 / l;
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.normalize$0$bailout2(6, null, null, null, null, l, t1);
      this.x = t1 * l;
      t3 = this.y;
      if (typeof t3 !== "number")
        return this.normalize$0$bailout2(7, null, null, null, null, l, null, t3);
      this.y = t3 * l;
      t5 = this.z;
      if (typeof t5 !== "number")
        return this.normalize$0$bailout2(8, null, null, null, null, l, null, null, t5);
      this.z = t5 * l;
      t7 = this.w;
      if (typeof t7 !== "number")
        return this.normalize$0$bailout2(9, null, null, null, null, l, null, null, null, t7);
      this.w = t7 * l;
    }
    return this;
  },
  normalize$0$bailout2: function(state0, t1, t3, t5, t7, l, t2, t4, t6, t8) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t3, t3));
        t5 = this.z;
      case 3:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t5, t5));
        t7 = this.w;
      case 4:
        state0 = 0;
        l = Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t7, t7))));
      default:
        if (state0 === 0 && l === 0) {
          this.x = 0;
          this.y = 0;
          this.z = 0;
          this.w = 0;
        } else
          switch (state0) {
            case 0:
              l = 1 / l;
            case 5:
              state0 = 0;
              t2 = this.x;
            case 6:
              state0 = 0;
              this.x = $.$$mul(t2, l);
              t4 = this.y;
            case 7:
              state0 = 0;
              this.y = $.$$mul(t4, l);
              t6 = this.z;
            case 8:
              state0 = 0;
              this.z = $.$$mul(t6, l);
              t8 = this.w;
            case 9:
              state0 = 0;
              this.w = $.$$mul(t8, l);
          }
        return this;
    }
  },
  multiply$2: function(q1, q2) {
    this.x = $.$$add($.$$sub($.$$add($.$$mul(q1.get$x(), q2.get$w()), $.$$mul(q1.get$y(), q2.get$z())), $.$$mul(q1.get$z(), q2.get$y())), $.$$mul(q1.get$w(), q2.get$x()));
    this.y = $.$$add($.$$add($.$$add($.$$mul($.$$negate(q1.get$x()), q2.get$z()), $.$$mul(q1.get$y(), q2.get$w())), $.$$mul(q1.get$z(), q2.get$x())), $.$$mul(q1.get$w(), q2.get$y()));
    this.z = $.$$add($.$$add($.$$sub($.$$mul(q1.get$x(), q2.get$y()), $.$$mul(q1.get$y(), q2.get$x())), $.$$mul(q1.get$z(), q2.get$w())), $.$$mul(q1.get$w(), q2.get$z()));
    this.w = $.$$add($.$$sub($.$$sub($.$$mul($.$$negate(q1.get$x()), q2.get$x()), $.$$mul(q1.get$y(), q2.get$y())), $.$$mul(q1.get$z(), q2.get$z())), $.$$mul(q1.get$w(), q2.get$w()));
    return this;
  },
  multiplyVector3$2$dest: function(vec, dest) {
    var _x, _y, _z, qx, qy, qz, qw, t8, t9, t10, t11, t12, t13, t14;
    if (dest == null)
      dest = vec;
    _x = vec.get$x();
    if (typeof _x !== "number")
      return this.multiplyVector3$2$dest$bailout(1, vec, dest, _x);
    _y = vec.get$y();
    if (typeof _y !== "number")
      return this.multiplyVector3$2$dest$bailout(2, vec, dest, _x, _y);
    _z = vec.get$z();
    if (typeof _z !== "number")
      return this.multiplyVector3$2$dest$bailout(3, null, dest, _x, _y, _z);
    qx = this.x;
    if (typeof qx !== "number")
      return this.multiplyVector3$2$dest$bailout(4, null, dest, _x, _y, _z, qx);
    qy = this.y;
    if (typeof qy !== "number")
      return this.multiplyVector3$2$dest$bailout(5, null, dest, _x, _y, _z, qx, qy);
    qz = this.z;
    if (typeof qz !== "number")
      return this.multiplyVector3$2$dest$bailout(6, null, dest, _x, _y, _z, qx, qy, qz);
    qw = this.w;
    if (typeof qw !== "number")
      return this.multiplyVector3$2$dest$bailout(7, null, dest, _x, _y, _z, qx, qy, qz, qw);
    t8 = qw * _x + qy * _z - qz * _y;
    t9 = qw * _y + qz * _x - qx * _z;
    t10 = qw * _z + qx * _y - qy * _x;
    t11 = -qx;
    t12 = t11 * _x - qy * _y - qz * _z;
    t13 = -qz;
    t14 = -qy;
    dest.set$x(t8 * qw + t12 * t11 + t9 * t13 - t10 * t14);
    dest.set$y(t9 * qw + t12 * t14 + t10 * t11 - t8 * t13);
    dest.set$z(t10 * qw + t12 * t13 + t8 * t14 - t9 * t11);
    return dest;
  },
  multiplyVector3$2$dest$bailout: function(state0, vec, dest, _x, _y, _z, qx, qy, qz, qw) {
    switch (state0) {
      case 0:
        if (dest == null)
          dest = vec;
        _x = vec.get$x();
      case 1:
        state0 = 0;
        _y = vec.get$y();
      case 2:
        state0 = 0;
        _z = vec.get$z();
      case 3:
        state0 = 0;
        qx = this.x;
      case 4:
        state0 = 0;
        qy = this.y;
      case 5:
        state0 = 0;
        qz = this.z;
      case 6:
        state0 = 0;
        qw = this.w;
      case 7:
        var t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
        state0 = 0;
        t8 = $.getInterceptor$JSNumber(qw);
        t9 = $.getInterceptor$JSNumber(qy);
        t10 = $.getInterceptor$JSNumber(qz);
        t11 = $.$$sub($.$$add(t8.$mul(qw, _x), t9.$mul(qy, _z)), t10.$mul(qz, _y));
        t12 = $.getInterceptor$JSNumber(qx);
        t13 = $.$$sub($.$$add(t8.$mul(qw, _y), t10.$mul(qz, _x)), t12.$mul(qx, _z));
        t14 = $.$$sub($.$$add(t8.$mul(qw, _z), t12.$mul(qx, _y)), t9.$mul(qy, _x));
        t15 = $.$$sub($.$$sub($.$$mul(t12.$negate(qx), _x), t9.$mul(qy, _y)), t10.$mul(qz, _z));
        t16 = $.getInterceptor$JSNumber(t11);
        t17 = $.getInterceptor$JSNumber(t15);
        t18 = $.getInterceptor$JSNumber(t13);
        t19 = $.getInterceptor$JSNumber(t14);
        dest.set$x($.$$sub($.$$add($.$$add(t16.$mul(t11, qw), t17.$mul(t15, t12.$negate(qx))), t18.$mul(t13, t10.$negate(qz))), t19.$mul(t14, t9.$negate(qy))));
        dest.set$y($.$$sub($.$$add($.$$add(t18.$mul(t13, qw), t17.$mul(t15, t9.$negate(qy))), t19.$mul(t14, t12.$negate(qx))), t16.$mul(t11, t10.$negate(qz))));
        dest.set$z($.$$sub($.$$add($.$$add(t19.$mul(t14, qw), t17.$mul(t15, t10.$negate(qz))), t16.$mul(t11, t9.$negate(qy))), t18.$mul(t13, t12.$negate(qx))));
        return dest;
    }
  },
  multiplyVector3$1: function(vec) {
    return this.multiplyVector3$2$dest(vec, null);
  },
  clone$0: function() {
    return $.Quaternion$(this.x, this.y, this.z, this.w);
  },
  $isIVector4: true
};

$$.Vector4 = {"": "Object;x=,y=,z=,w>",
  setValues$4: function(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  },
  copy$1: function(v) {
    this.x = v.get$x();
    this.y = v.get$y();
    this.z = v.get$z();
    if (typeof v === "object" && v !== null && !!v.$isIVector4)
      this.w = v.get$w();
    else
      this.w = 1;
  },
  add$2: function(v1, v2) {
    this.x = $.$$add(v1.get$x(), v2.get$x());
    this.y = $.$$add(v1.get$y(), v2.get$y());
    this.z = $.$$add(v1.get$z(), v2.get$z());
    this.w = $.$$add(v1.get$w(), v2.get$w());
    return this;
  },
  addSelf$1: function(v) {
    this.x = $.$$add(this.x, v.get$x());
    this.y = $.$$add(this.y, v.get$y());
    this.z = $.$$add(this.z, v.get$z());
    this.w = $.$$add(this.w, v.get$w());
    return this;
  },
  sub$2: function(v1, v2) {
    this.x = $.$$sub(v1.get$x(), v2.get$x());
    this.y = $.$$sub(v1.get$y(), v2.get$y());
    this.z = $.$$sub(v1.get$z(), v2.get$z());
    this.w = $.$$sub(v1.get$w(), v2.get$w());
    return this;
  },
  subSelf$1: function(v) {
    this.x = $.$$sub(this.x, v.get$x());
    this.y = $.$$sub(this.y, v.get$y());
    this.z = $.$$sub(this.z, v.get$z());
    this.w = $.$$sub(this.w, v.get$w());
    return this;
  },
  multiplyScalar$1: function(s) {
    this.x = $.$$mul(this.x, s);
    this.y = $.$$mul(this.y, s);
    this.z = $.$$mul(this.z, s);
    this.w = $.$$mul(this.w, s);
    return this;
  },
  divideScalar$1: function(s) {
    var t1, t3, t5, t7;
    if (typeof s !== "number")
      return this.divideScalar$1$bailout1(1, s);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.divideScalar$1$bailout1(2, s, t1);
    this.x = t1 / s;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.divideScalar$1$bailout1(3, s, null, t3);
    this.y = t3 / s;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.divideScalar$1$bailout1(4, s, null, null, t5);
    this.z = t5 / s;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.divideScalar$1$bailout1(5, s, null, null, null, t7);
    this.w = t7 / s;
    return this;
  },
  divideScalar$1$bailout1: function(state0, s, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
      default:
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && !(s == null))
          switch (state0) {
            case 0:
              t1 = this.x;
            case 2:
              state0 = 0;
              this.x = $.$$div(t1, s);
              t3 = this.y;
            case 3:
              state0 = 0;
              this.y = $.$$div(t3, s);
              t5 = this.z;
            case 4:
              state0 = 0;
              this.z = $.$$div(t5, s);
              t7 = this.w;
            case 5:
              state0 = 0;
              this.w = $.$$div(t7, s);
          }
        else {
          this.x = 0;
          this.y = 0;
          this.z = 0;
          this.w = 1;
        }
        return this;
    }
  },
  dot$1: function(v) {
    var t1, t3, t6, t8, t10, t12, t14;
    t1 = this.x;
    t3 = v.get$x();
    if (typeof t1 !== "number")
      return this.dot$1$bailout1(1, v, t1);
    if (typeof t3 !== "number")
      return this.dot$1$bailout1(2, v, t1, t3);
    t3 = t1 * t3;
    t1 = this.y;
    t6 = v.get$y();
    if (typeof t1 !== "number")
      return this.dot$1$bailout1(3, v, t1, t3);
    if (typeof t6 !== "number")
      return this.dot$1$bailout1(4, v, t1, t3, t6);
    t3 += t1 * t6;
    t8 = this.z;
    t10 = v.get$z();
    if (typeof t8 !== "number")
      return this.dot$1$bailout1(5, v, null, t3, null, t8);
    if (typeof t10 !== "number")
      return this.dot$1$bailout1(6, v, null, t3, null, t8, t10);
    t3 += t8 * t10;
    t12 = this.w;
    t14 = v.get$w();
    if (typeof t12 !== "number")
      return this.dot$1$bailout1(7, v, null, t3, null, null, null, t12);
    if (typeof t14 !== "number")
      return this.dot$1$bailout1(8, null, null, t3, null, null, null, t12, t14);
    return t3 + t12 * t14;
  },
  dot$1$bailout1: function(state0, v, t1, t3, t6, t8, t10, t12, t14) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = v.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$mul(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = v.get$y();
      case 4:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t1, t6));
        t8 = this.z;
      case 5:
        state0 = 0;
        t10 = v.get$z();
      case 6:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t8, t10));
        t12 = this.w;
      case 7:
        state0 = 0;
        t14 = v.get$w();
      case 8:
        state0 = 0;
        return $.$$add(t3, $.$$mul(t12, t14));
    }
  },
  lengthSq$0: function() {
    var t1, t2, t3, t4;
    t1 = this.x;
    t1 = $.$$mul(t1, t1);
    t2 = this.y;
    t1 = $.$$add(t1, $.$$mul(t2, t2));
    t3 = this.z;
    t1 = $.$$add(t1, $.$$mul(t3, t3));
    t4 = this.w;
    return $.$$add(t1, $.$$mul(t4, t4));
  },
  length$0: function() {
    var t1, t3, t5, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.length$0$bailout(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.length$0$bailout(2, t1, t3);
    t1 += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.length$0$bailout(3, t1, null, t5);
    t1 += t5 * t5;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.length$0$bailout(4, t1, null, null, t7);
    return Math.sqrt($.checkNum(t1 + t7 * t7));
  },
  length$0$bailout: function(state0, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t3, t3));
        t5 = this.z;
      case 3:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t5, t5));
        t7 = this.w;
      case 4:
        state0 = 0;
        return Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t7, t7))));
    }
  },
  get$length: function() {
    return new $.BoundClosure0(this, "length$0");
  },
  normalize$0: function() {
    var t1, t3, t5, t7;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.normalize$0$bailout1(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.normalize$0$bailout1(2, t1, t3);
    t1 += t3 * t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.normalize$0$bailout1(3, t1, null, t5);
    t1 += t5 * t5;
    t7 = this.w;
    if (typeof t7 !== "number")
      return this.normalize$0$bailout1(4, t1, null, null, t7);
    return this.divideScalar$1(Math.sqrt($.checkNum(t1 + t7 * t7)));
  },
  normalize$0$bailout1: function(state0, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t3, t3));
        t5 = this.z;
      case 3:
        state0 = 0;
        t1 = $.$$add(t1, $.$$mul(t5, t5));
        t7 = this.w;
      case 4:
        state0 = 0;
        return this.divideScalar$1(Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t7, t7)))));
    }
  },
  clone$0: function() {
    return $.Vector4$(this.x, this.y, this.z, this.w);
  },
  $isVector4: true,
  $isIVector4: true
};

$$.Object3D = {"": "Object;id=,name>,properties,parent=,children>,up,position>,rotation>,scale>,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth>,matrix,matrixWorld>,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible>,castShadow>,receiveShadow>,frustumCulled>,_vector,__data",
  scale$1: function(arg0) {
    return this.scale.call$1(arg0);
  },
  get$Dynamic: function() {
    return this._dynamic;
  },
  add$1: function(object) {
    var scene;
    if ($.$$eq(object, this) === true) {
      $.print("THREE.Object3D.add: An object can't be added as a child of itself.");
      return;
    }
    if (!(object.get$parent() == null))
      $.remove(object.get$parent(), object);
    object.set$parent(this);
    this.children.push(object);
    for (scene = this; !(scene.get$parent() == null);)
      scene = scene.get$parent();
    if (typeof scene === "object" && scene !== null && !!scene.$isScene)
      scene.addObject$1(object);
  },
  remove$1: function(object) {
    var t1, index, scene;
    t1 = this.children;
    index = $.CONSTANT0.indexOf$1(t1, object);
    if ($.$$eq(index, -1) !== true) {
      object.set$parent(null);
      $.CONSTANT0.removeRange$2(t1, index, 1);
      for (scene = this; !(scene.get$parent() == null);)
        scene = scene.get$parent();
      if (typeof scene === "object" && scene !== null && !!scene.$isScene)
        scene.removeObject$1(object);
    }
  },
  updateMatrix$0: function() {
    var t1, t2;
    this.matrix.setPosition$1(this.position);
    t1 = this.useQuaternion;
    t2 = this.matrix;
    if (t1)
      t2.setRotationFromQuaternion$1(this.quaternion);
    else
      t2.setRotationFromEuler$2(this.rotation, this.eulerOrder);
    t1 = this.scale;
    if ($.$$eq(t1.x, 1) !== true || $.$$eq(t1.y, 1) !== true || $.$$eq(t1.z, 1) !== true) {
      this.matrix.scale$1(t1);
      this.boundRadiusScale = $.max(t1.x, $.max(t1.y, t1.z));
    }
    this.matrixWorldNeedsUpdate = true;
  },
  updateMatrixWorld$1$force: function(force) {
    var t1, t2, t3;
    t1 = {};
    t1.force_0 = force;
    if (this.matrixAutoUpdate === true)
      this.updateMatrix$0();
    if (this.matrixWorldNeedsUpdate || t1.force_0 === true) {
      t2 = this.parent;
      t3 = this.matrixWorld;
      if (!(t2 == null))
        t3.multiply$2(t2.get$matrixWorld(), this.matrix);
      else
        t3.copy$1(this.matrix);
      this.matrixWorldNeedsUpdate = false;
      t1.force_0 = true;
    }
    $.CONSTANT0.forEach$1(this.children, new $.Object3D_updateMatrixWorld_anon(t1));
  },
  updateMatrixWorld$0: function() {
    return this.updateMatrixWorld$1$force(false);
  },
  clone$0: function() {
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = $.makeLiteralMap([]);
    return this.__data;
  },
  $index: function(key) {
    var t1 = this.get$_data();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout0(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    return t1[key];
  },
  $$index$bailout0: function(state0, key, t1) {
    return $.$$index(t1, key);
  },
  $indexSet: function(key, value) {
    var t1 = this.get$_data();
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout2(1, key, value, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = value;
    return value;
  },
  $$indexSet$bailout2: function(state0, key, value, t1) {
    $.$$indexSet(t1, key, value);
    return value;
  }
};

$$.Color = {"": "Object;r>,g>,b>",
  copy$1: function(color) {
    this.r = color.get$r();
    this.g = color.get$g();
    this.b = color.get$b();
    return this;
  },
  copyGammaToLinear$1: function(color) {
    var t1, t2, t3;
    t1 = color.get$r();
    this.r = $.$$mul(t1, t1);
    t2 = color.get$g();
    this.g = $.$$mul(t2, t2);
    t3 = color.get$b();
    this.b = $.$$mul(t3, t3);
    return this;
  },
  setRGB$3: function(newR, newG, newB) {
    this.r = newR;
    this.g = newG;
    this.b = newB;
    return this;
  },
  setHex$1: function(hex) {
    var t1, t2;
    t1 = $.toInt($.CONSTANT3.floor$0(hex));
    t2 = $.getInterceptor$JSNumber(t1);
    this.r = $.$$div($.$$shr(t2.$and(t1, 16711680), 16), 255);
    this.g = $.$$div($.$$shr(t2.$and(t1, 65280), 8), 255);
    this.b = $.$$div(t2.$and(t1, 255), 255);
    return this;
  },
  clone$0: function() {
    return $.Color$(null).setRGB$3(this.r, this.g, this.b);
  },
  Color$1: function(hex) {
    if (typeof hex === "number")
      this.setHex$1(hex);
  },
  $isColor: true
};

$$.Face3 = {"": "Object;a>,b>,c>,normal>,vertexNormals>,vertexColors>,vertexTangents>,color>,materialIndex>,centroid>",
  clone$0: function() {
    var face = $.Face3$(this.a, this.b, this.c, null, null, null);
    face.normal.copy$1(this.normal);
    face.color.copy$1(this.color);
    face.centroid.copy$1(this.centroid);
    face.materialIndex = this.materialIndex;
    face.vertexNormals = $.toList($.mappedBy(this.vertexNormals, new $.Face3_clone_anon()));
    face.vertexColors = $.toList($.mappedBy(this.vertexColors, new $.Face3_clone_anon0()));
    face.vertexTangents = $.toList($.mappedBy(this.vertexTangents, new $.Face3_clone_anon1()));
    return face;
  },
  Face3$6: function(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
    this.normal = typeof normalOrVertexNormals === "object" && normalOrVertexNormals !== null && !!normalOrVertexNormals.$isVector3 ? normalOrVertexNormals : $.Vector3$(0, 0, 0);
    this.vertexNormals = typeof normalOrVertexNormals === "object" && normalOrVertexNormals !== null && (normalOrVertexNormals.constructor === Array || normalOrVertexNormals.$isList()) ? normalOrVertexNormals : [];
    this.color = typeof colorOrVertexColors === "object" && colorOrVertexColors !== null && !!colorOrVertexColors.$isColor ? colorOrVertexColors : $.Color$(null);
    this.vertexColors = typeof colorOrVertexColors === "object" && colorOrVertexColors !== null && (colorOrVertexColors.constructor === Array || colorOrVertexColors.$isList()) ? colorOrVertexColors : [];
    this.vertexTangents = [];
    this.centroid = $.Vector3$(0, 0, 0);
  },
  $isFace3: true
};

$$.Face4 = {"": "Object;a>,b>,c>,d>,normal>,vertexNormals>,vertexColors>,vertexTangents>,color>,materialIndex>,centroid>",
  clone$0: function() {
    var face = $.Face4$(this.a, this.b, this.c, this.d, null, null, null);
    face.normal.copy$1(this.normal);
    face.color.copy$1(this.color);
    face.centroid.copy$1(this.centroid);
    face.materialIndex = this.materialIndex;
    face.vertexNormals = $.toList($.mappedBy(this.vertexNormals, new $.Face4_clone_anon()));
    face.vertexColors = $.toList($.mappedBy(this.vertexColors, new $.Face4_clone_anon0()));
    face.vertexTangents = $.toList($.mappedBy(this.vertexTangents, new $.Face4_clone_anon1()));
    return face;
  },
  Face4$7: function(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
    this.normal = typeof normalOrVertexNormals === "object" && normalOrVertexNormals !== null && !!normalOrVertexNormals.$isVector3 ? normalOrVertexNormals : $.Vector3$(0, 0, 0);
    this.vertexNormals = typeof normalOrVertexNormals === "object" && normalOrVertexNormals !== null && (normalOrVertexNormals.constructor === Array || normalOrVertexNormals.$isList()) ? normalOrVertexNormals : [];
    this.color = typeof colorOrVertexColors === "object" && colorOrVertexColors !== null && !!colorOrVertexColors.$isColor ? colorOrVertexColors : $.Color$(null);
    this.vertexColors = typeof colorOrVertexColors === "object" && colorOrVertexColors !== null && (colorOrVertexColors.constructor === Array || colorOrVertexColors.$isList()) ? colorOrVertexColors : [];
    this.vertexTangents = [];
    this.materialIndex = this.materialIndex;
    this.centroid = $.Vector3$(0, 0, 0);
  },
  $isFace4: true
};

$$.Frustum = {"": "Object;planes",
  setFromMatrix$1: function(m) {
    var me, t1, me0, me1, me2, me3, me4, me5, me6, me7, me8, me9, me10, me11, me12, me13, me14, me15, t2, t3, t4, t5, i, plane;
    me = m.elements;
    t1 = $.getInterceptor$JSStringJSArray(me);
    me0 = t1.$index(me, 0);
    me1 = t1.$index(me, 1);
    me2 = t1.$index(me, 2);
    me3 = t1.$index(me, 3);
    me4 = t1.$index(me, 4);
    me5 = t1.$index(me, 5);
    me6 = t1.$index(me, 6);
    me7 = t1.$index(me, 7);
    me8 = t1.$index(me, 8);
    me9 = t1.$index(me, 9);
    me10 = t1.$index(me, 10);
    me11 = t1.$index(me, 11);
    me12 = t1.$index(me, 12);
    me13 = t1.$index(me, 13);
    me14 = t1.$index(me, 14);
    me15 = t1.$index(me, 15);
    t1 = this.planes;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.getInterceptor$JSNumber(me3);
    t3 = $.getInterceptor$JSNumber(me7);
    t4 = $.getInterceptor$JSNumber(me11);
    t5 = $.getInterceptor$JSNumber(me15);
    t1[0].setValues$4(t2.$sub(me3, me0), t3.$sub(me7, me4), t4.$sub(me11, me8), t5.$sub(me15, me12));
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1].setValues$4(t2.$add(me3, me0), t3.$add(me7, me4), t4.$add(me11, me8), t5.$add(me15, me12));
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2].setValues$4(t2.$add(me3, me1), t3.$add(me7, me5), t4.$add(me11, me9), t5.$add(me15, me13));
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3].setValues$4(t2.$sub(me3, me1), t3.$sub(me7, me5), t4.$sub(me11, me9), t5.$sub(me15, me13));
    if (4 >= t1.length)
      throw $.ioore(4);
    t1[4].setValues$4(t2.$sub(me3, me2), t3.$sub(me7, me6), t4.$sub(me11, me10), t5.$sub(me15, me14));
    if (5 >= t1.length)
      throw $.ioore(5);
    t1[5].setValues$4(t2.$add(me3, me2), t3.$add(me7, me6), t4.$add(me11, me10), t5.$add(me15, me14));
    for (i = 0; i < 6; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      plane = t1[i];
      t2 = plane.get$x();
      t2 = $.$$mul(t2, t2);
      t3 = plane.get$y();
      t2 = $.$$add(t2, $.$$mul(t3, t3));
      t4 = plane.get$z();
      plane.divideScalar$1(Math.sqrt($.checkNum($.$$add(t2, $.$$mul(t4, t4)))));
    }
  },
  contains$1: function(object) {
    var matrix, me, t2, t4, t1, t3, t5, i, t6, t7, t9, t12, t14, t16;
    matrix = object.get$matrixWorld();
    me = matrix.get$elements();
    if (typeof me !== "string" && (typeof me !== "object" || me === null || me.constructor !== Array && !me.$isJavaScriptIndexingBehavior()))
      return this.contains$1$bailout(1, object, matrix, me);
    t2 = object.get$geometry().get$boundingSphere().get$radius();
    if (typeof t2 !== "number")
      return this.contains$1$bailout(2, null, matrix, me, t2);
    t2 = -t2;
    t4 = matrix.getMaxScaleOnAxis$0();
    if (typeof t4 !== "number")
      return this.contains$1$bailout(3, null, null, me, t2, t4);
    t4 = t2 * t4;
    for (t1 = this.planes, t2 = $.getInterceptor$JSStringJSArray(me), t3 = t1.length, t5 = me.length, i = 0; i < 6; ++i) {
      if (i >= t3)
        throw $.ioore(i);
      t6 = t1[i];
      t7 = t6.get$x();
      if (12 >= t5)
        throw $.ioore(12);
      t9 = me[12];
      if (typeof t7 !== "number")
        return this.contains$1$bailout(4, null, null, me, t2, t4, i, t1, t7);
      if (typeof t9 !== "number")
        return this.contains$1$bailout(5, null, null, me, t2, t4, i, t1, t7, t9);
      t9 = t7 * t9;
      t7 = t6.get$y();
      if (13 >= t5)
        throw $.ioore(13);
      t12 = me[13];
      if (typeof t7 !== "number")
        return this.contains$1$bailout(6, null, null, me, t2, t4, i, t1, t7, t9);
      if (typeof t12 !== "number")
        return this.contains$1$bailout(7, null, null, me, t2, t4, i, t1, t7, t9, t12);
      t9 += t7 * t12;
      t14 = t6.get$z();
      if (14 >= t5)
        throw $.ioore(14);
      t16 = me[14];
      if (typeof t14 !== "number")
        return this.contains$1$bailout(8, null, null, me, t2, t4, i, t1, null, t9, null, t14);
      if (typeof t16 !== "number")
        return this.contains$1$bailout(9, null, null, me, t2, t4, i, t1, null, t9, null, t14, t16);
      t9 += t14 * t16;
      t6 = t6.get$w();
      if (typeof t6 !== "number")
        return this.contains$1$bailout(10, null, null, me, t2, t4, i, t1, null, t9, null, null, null, t6);
      if (t9 + t6 <= t4)
        return false;
    }
    return true;
  },
  contains$1$bailout: function(state0, object, matrix, me, t2, t4, i, t1, t3, t6, t9, t11, t13, t15) {
    switch (state0) {
      case 0:
        matrix = object.get$matrixWorld();
        me = matrix.get$elements();
      case 1:
        state0 = 0;
        t2 = object.get$geometry().get$boundingSphere().get$radius();
      case 2:
        state0 = 0;
        t2 = $.$$negate(t2);
        t4 = matrix.getMaxScaleOnAxis$0();
      case 3:
        state0 = 0;
        t4 = $.$$mul(t2, t4);
        t1 = this.planes;
        t2 = $.getInterceptor$JSStringJSArray(me);
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < 6))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t3 = t1[i].get$x();
              case 4:
                state0 = 0;
                t6 = t2.$index(me, 12);
              case 5:
                state0 = 0;
                t6 = $.$$mul(t3, t6);
                if (i >= t1.length)
                  throw $.ioore(i);
                t3 = t1[i].get$y();
              case 6:
                state0 = 0;
                t9 = t2.$index(me, 13);
              case 7:
                state0 = 0;
                t6 = $.$$add(t6, $.$$mul(t3, t9));
                if (i >= t1.length)
                  throw $.ioore(i);
                t11 = t1[i].get$z();
              case 8:
                state0 = 0;
                t13 = t2.$index(me, 14);
              case 9:
                state0 = 0;
                t6 = $.$$add(t6, $.$$mul(t11, t13));
                if (i >= t1.length)
                  throw $.ioore(i);
                t15 = t1[i].get$w();
              case 10:
                state0 = 0;
                if ($.$$le($.$$add(t6, t15), t4) === true)
                  return false;
                ++i;
            }
        return true;
    }
  }
};

$$.Geometry = {"": "Object;id=,name>,vertices=,colors>,materials>,faces=,faceUvs>,faceVertexUvs>,morphTargets>,morphColors,morphNormals>,skinWeights>,skinIndices>,__tmpVertices>,boundingBox,boundingSphere>,hasTangents>,_dynamic,bones>,animation,__data",
  get$Dynamic: function() {
    return this._dynamic;
  },
  computeCentroids$0: function() {
    $.forEach(this.faces, new $.Geometry_computeCentroids_anon(this));
  },
  computeFaceNormals$0: function() {
    var t1, cb, ab;
    t1 = {};
    t1.vA_0 = null;
    t1.vB_1 = null;
    t1.vC_2 = null;
    cb = $.Vector3$(0, 0, 0);
    ab = $.Vector3$(0, 0, 0);
    $.forEach(this.faces, new $.Geometry_computeFaceNormals_anon(t1, this, cb, ab));
  },
  computeVertexNormals$0: function() {
    var t1, t2, v;
    t1 = {};
    t1.vertices_0 = null;
    t2 = this.__tmpVertices;
    if (t2 == null) {
      this.__tmpVertices = [];
      $.forEach(this.vertices, new $.Geometry_computeVertexNormals_anon(this));
      t1.vertices_0 = this.__tmpVertices;
      $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon0());
    } else {
      t1.vertices_0 = t2;
      t2 = $.length(this.vertices);
      if (typeof t2 !== "number")
        return this.computeVertexNormals$0$bailout(1, t1, t2);
      for (v = 0; v < t2; ++v)
        $.$$index(t1.vertices_0, v).setValues$3(0, 0, 0);
    }
    $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon1(t1));
    $.forEach(t1.vertices_0, new $.Geometry_computeVertexNormals_anon2());
    $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon3(t1));
  },
  computeVertexNormals$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.vertices_0 = null;
        t2 = this.__tmpVertices;
      case 1:
        var v;
        if (state0 === 0 && t2 == null) {
          this.__tmpVertices = [];
          $.forEach(this.vertices, new $.Geometry_computeVertexNormals_anon(this));
          t1.vertices_0 = this.__tmpVertices;
          $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon0());
        } else
          switch (state0) {
            case 0:
              t1.vertices_0 = t2;
              t2 = $.length(this.vertices);
            case 1:
              state0 = 0;
              for (v = 0; $.CONSTANT1.$lt(v, t2); ++v)
                $.$$index(t1.vertices_0, v).setValues$3(0, 0, 0);
          }
        $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon1(t1));
        $.forEach(t1.vertices_0, new $.Geometry_computeVertexNormals_anon2());
        $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon3(t1));
    }
  },
  computeBoundingSphere$0: function() {
    var t1 = {};
    t1.radiusSq_0 = null;
    this.boundingSphere = $.BoundingSphere$(Math.sqrt($.checkNum($.reduce(this.vertices, 0, new $.Geometry_computeBoundingSphere_anon(t1)))));
  },
  clone$0: function() {
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = $.makeLiteralMap([]);
    return this.__data;
  },
  $index: function(key) {
    var t1 = this.get$_data();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    return t1[key];
  },
  $$index$bailout: function(state0, key, t1) {
    return $.$$index(t1, key);
  },
  $indexSet: function(key, value) {
    var t1 = this.get$_data();
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout(1, key, value, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = value;
    return value;
  },
  $$indexSet$bailout: function(state0, key, value, t1) {
    $.$$indexSet(t1, key, value);
    return value;
  },
  $isGeometry: true
};

$$.BoundingSphere = {"": "Object;radius>"};

$$.Vector2 = {"": "Object;x=,y=",
  setValues$2: function(x, y) {
    this.x = x;
    this.y = y;
    return this;
  },
  copy$1: function(v) {
    this.x = v.get$x();
    this.y = v.get$y();
    return this;
  },
  add$2: function(v1, v2) {
    this.x = $.$$add(v1.get$x(), v2.get$x());
    this.y = $.$$add(v1.get$y(), v2.get$y());
    return this;
  },
  addSelf$1: function(v) {
    this.x = $.$$add(this.x, v.get$x());
    this.y = $.$$add(this.y, v.get$y());
    return this;
  },
  sub$2: function(v1, v2) {
    this.x = $.$$sub(v1.get$x(), v2.get$x());
    this.y = $.$$sub(v1.get$y(), v2.get$y());
    return this;
  },
  subSelf$1: function(v) {
    this.x = $.$$sub(this.x, v.get$x());
    this.y = $.$$sub(this.y, v.get$y());
    return this;
  },
  multiplyScalar$1: function(s) {
    this.x = $.$$mul(this.x, s);
    this.y = $.$$mul(this.y, s);
    return this;
  },
  divideScalar$1: function(s) {
    var t1, t3;
    if (typeof s !== "number")
      return this.divideScalar$1$bailout(1, s);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.divideScalar$1$bailout(2, s, t1);
    this.x = t1 / s;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.divideScalar$1$bailout(3, s, null, t3);
    this.y = t3 / s;
    return this;
  },
  divideScalar$1$bailout: function(state0, s, t1, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && !(s == null))
          switch (state0) {
            case 0:
              t1 = this.x;
            case 2:
              state0 = 0;
              this.x = $.$$div(t1, s);
              t3 = this.y;
            case 3:
              state0 = 0;
              this.y = $.$$div(t3, s);
          }
        else {
          this.x = 0;
          this.y = 0;
        }
        return this;
    }
  },
  dot$1: function(v) {
    var t1, t3, t6;
    t1 = this.x;
    t3 = v.get$x();
    if (typeof t1 !== "number")
      return this.dot$1$bailout0(1, v, t1);
    if (typeof t3 !== "number")
      return this.dot$1$bailout0(2, v, t1, t3);
    t3 = t1 * t3;
    t1 = this.y;
    t6 = v.get$y();
    if (typeof t1 !== "number")
      return this.dot$1$bailout0(3, v, t1, t3);
    if (typeof t6 !== "number")
      return this.dot$1$bailout0(4, null, t1, t3, t6);
    return t3 + t1 * t6;
  },
  dot$1$bailout0: function(state0, v, t1, t3, t6) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = v.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$mul(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = v.get$y();
      case 4:
        state0 = 0;
        return $.$$add(t3, $.$$mul(t1, t6));
    }
  },
  lengthSq$0: function() {
    var t1, t2;
    t1 = this.x;
    t1 = $.$$mul(t1, t1);
    t2 = this.y;
    return $.$$add(t1, $.$$mul(t2, t2));
  },
  length$0: function() {
    var t1, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.length$0$bailout2(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.length$0$bailout2(2, t1, t3);
    return Math.sqrt($.checkNum(t1 + t3 * t3));
  },
  length$0$bailout2: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        return Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t3, t3))));
    }
  },
  get$length: function() {
    return new $.BoundClosure0(this, "length$0");
  },
  normalize$0: function() {
    var t1, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.normalize$0$bailout(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.normalize$0$bailout(2, t1, t3);
    return this.divideScalar$1(Math.sqrt($.checkNum(t1 + t3 * t3)));
  },
  normalize$0$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        return this.divideScalar$1(Math.sqrt($.checkNum($.$$add(t1, $.$$mul(t3, t3)))));
    }
  },
  distanceTo$1: function(v) {
    var t1, t3, t6;
    t1 = this.x;
    t3 = v.get$x();
    if (typeof t1 !== "number")
      return this.distanceTo$1$bailout(1, v, t1);
    if (typeof t3 !== "number")
      return this.distanceTo$1$bailout(2, v, t1, t3);
    t3 = t1 - t3;
    t1 = this.y;
    t6 = v.get$y();
    if (typeof t1 !== "number")
      return this.distanceTo$1$bailout(3, v, t1, t3);
    if (typeof t6 !== "number")
      return this.distanceTo$1$bailout(4, null, t1, t3, t6);
    t6 = t1 - t6;
    return Math.sqrt($.checkNum(t3 * t3 + t6 * t6));
  },
  distanceTo$1$bailout: function(state0, v, t1, t3, t6) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = v.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$sub(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = v.get$y();
      case 4:
        state0 = 0;
        t6 = $.$$sub(t1, t6);
        return Math.sqrt($.checkNum($.$$add($.$$mul(t3, t3), $.$$mul(t6, t6))));
    }
  },
  distanceToSquared$1: function(v) {
    var t1, t3, t6;
    t1 = this.x;
    t3 = v.get$x();
    if (typeof t1 !== "number")
      return this.distanceToSquared$1$bailout(1, v, t1);
    if (typeof t3 !== "number")
      return this.distanceToSquared$1$bailout(2, v, t1, t3);
    t3 = t1 - t3;
    t1 = this.y;
    t6 = v.get$y();
    if (typeof t1 !== "number")
      return this.distanceToSquared$1$bailout(3, v, t1, t3);
    if (typeof t6 !== "number")
      return this.distanceToSquared$1$bailout(4, null, t1, t3, t6);
    t6 = t1 - t6;
    return t3 * t3 + t6 * t6;
  },
  distanceToSquared$1$bailout: function(state0, v, t1, t3, t6) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = v.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$sub(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = v.get$y();
      case 4:
        state0 = 0;
        t6 = $.$$sub(t1, t6);
        return $.$$add($.$$mul(t3, t3), $.$$mul(t6, t6));
    }
  },
  equals$1: function(v) {
    return $.$$eq(v.get$x(), this.x) === true && $.$$eq(v.get$y(), this.y) === true;
  },
  isZero$0: function() {
    var t1, t2;
    t1 = this.x;
    t1 = $.$$mul(t1, t1);
    t2 = this.y;
    return $.$$lt($.$$add(t1, $.$$mul(t2, t2)), 0.0001);
  },
  clone$0: function() {
    return $.Vector2$(this.x, this.y);
  },
  $isVector2: true
};

$$.UV = {"": "Object;u>,v>",
  setValues$2: function(u, v) {
    this.u = u;
    this.v = v;
    return this;
  },
  copy$1: function(uv) {
    this.u = uv.get$u();
    this.v = uv.get$v();
    return this;
  },
  clone$0: function() {
    return $.UV$(this.u, this.v);
  }
};

$$.CylinderGeometry = {"": "Geometry;radiusTop,radiusBottom,height=,segmentsRadius,segmentsHeight,openEnded,id,name,vertices,colors,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
  CylinderGeometry$6: function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
    var t1, vertices, uvs, t2, t4, t6, y, verticesRow, uvsRow, v, radius, t3, t5, x, u, vertex, t7, t8, x0, na, t9, nb, t10, y0, t11, t13, n1, n2, n3, n4, t15, uv1, t17, uv2, t19, uv3, t21, uv4;
    if (typeof segmentsRadius !== "number")
      return this.CylinderGeometry$6$bailout(1, segmentsRadius, segmentsHeight, openEnded);
    if (typeof segmentsHeight !== "number")
      return this.CylinderGeometry$6$bailout(1, segmentsRadius, segmentsHeight, openEnded);
    t1 = $.$$div(this.height, 2);
    if (typeof t1 !== "number")
      return this.CylinderGeometry$6$bailout(2, segmentsRadius, segmentsHeight, openEnded, t1);
    vertices = [];
    uvs = [];
    t2 = this.radiusBottom;
    if (typeof t2 !== "number")
      return this.CylinderGeometry$6$bailout(3, segmentsRadius, segmentsHeight, openEnded, t1, t2, vertices, uvs);
    t4 = this.radiusTop;
    if (typeof t4 !== "number")
      return this.CylinderGeometry$6$bailout(4, segmentsRadius, segmentsHeight, openEnded, t1, t2, vertices, uvs, t4);
    t6 = t2 - t4;
    y = 0;
    for (; y <= segmentsHeight; ++y) {
      verticesRow = [];
      uvsRow = [];
      v = y / segmentsHeight;
      radius = v * t6 + t4;
      for (t3 = -v, t5 = 1 - v, x = 0; x <= segmentsRadius; ++x) {
        u = x / segmentsRadius;
        vertex = $.Vector3$(0, 0, 0);
        t7 = u * 3.141592653589793 * 2;
        vertex.x = radius * $.sin(t7);
        t8 = this.height;
        if (typeof t8 !== "number")
          throw $.iae(t8);
        vertex.y = t3 * t8 + t1;
        vertex.z = radius * $.cos(t7);
        $.add(this.vertices, vertex);
        verticesRow.push($.$$sub($.length(this.vertices), 1));
        uvsRow.push($.UV$(u, t5));
      }
      vertices.push(verticesRow);
      uvs.push(uvsRow);
    }
    t3 = this.height;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t3 = t6 / t3;
    for (t5 = this.faceVertexUvs, t6 = !(t4 === 0), x = 0; x < segmentsRadius; x = x0) {
      t7 = vertices.length;
      t8 = this.vertices;
      x0 = x + 1;
      if (t6) {
        if (0 >= t7)
          throw $.ioore(0);
        na = $.$$index(t8, $.$$index(vertices[0], x)).clone$0();
        t9 = this.vertices;
        if (0 >= vertices.length)
          throw $.ioore(0);
        nb = $.$$index(t9, $.$$index(vertices[0], x0)).clone$0();
      } else {
        if (1 >= t7)
          throw $.ioore(1);
        na = $.$$index(t8, $.$$index(vertices[1], x)).clone$0();
        t9 = this.vertices;
        if (1 >= vertices.length)
          throw $.ioore(1);
        nb = $.$$index(t9, $.$$index(vertices[1], x0)).clone$0();
      }
      t7 = na.get$x();
      t7 = $.$$mul(t7, t7);
      t8 = na.get$z();
      na.setY$1($.sqrt($.$$add(t7, $.$$mul(t8, t8))) * t3).normalize$0();
      t9 = nb.get$x();
      t9 = $.$$mul(t9, t9);
      t10 = nb.get$z();
      nb.setY$1($.sqrt($.$$add(t9, $.$$mul(t10, t10))) * t3).normalize$0();
      for (y = 0; y < segmentsHeight; y = y0) {
        t7 = vertices.length;
        if (y >= t7)
          throw $.ioore(y);
        t8 = vertices[y];
        if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
          return this.CylinderGeometry$6$bailout(7, segmentsRadius, null, openEnded, t1, t2, vertices, uvs, t4, null, null, null, $.CONSTANT3, null, segmentsHeight, y, t5, $.CONSTANT3, t8, x0, t3, na, nb, x);
        if (x >= t8.length)
          throw $.ioore(x);
        t10 = t8[x];
        y0 = y + 1;
        if (y0 >= t7)
          throw $.ioore(y0);
        t11 = vertices[y0];
        if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
          return this.CylinderGeometry$6$bailout(8, segmentsRadius, null, openEnded, t1, t2, vertices, uvs, t4, null, null, null, $.CONSTANT3, null, segmentsHeight, y, t5, $.CONSTANT3, t10, x0, t3, na, nb, x, y0, t11);
        if (x >= t11.length)
          throw $.ioore(x);
        t11 = t11[x];
        t13 = vertices[y0];
        if (typeof t13 !== "string" && (typeof t13 !== "object" || t13 === null || t13.constructor !== Array && !t13.$isJavaScriptIndexingBehavior()))
          return this.CylinderGeometry$6$bailout(9, segmentsRadius, null, openEnded, t1, t2, vertices, uvs, t4, null, null, null, $.CONSTANT3, null, segmentsHeight, y, t5, $.CONSTANT3, t10, x0, t3, na, nb, x, y0, t11, t13);
        if (x0 >= t13.length)
          throw $.ioore(x0);
        t13 = t13[x0];
        if (x0 >= t8.length)
          throw $.ioore(x0);
        t8 = t8[x0];
        n1 = na.clone$0();
        n2 = na.clone$0();
        n3 = nb.clone$0();
        n4 = nb.clone$0();
        if (y >= uvs.length)
          throw $.ioore(y);
        t15 = uvs[y];
        if (typeof t15 !== "string" && (typeof t15 !== "object" || t15 === null || t15.constructor !== Array && !t15.$isJavaScriptIndexingBehavior()))
          return this.CylinderGeometry$6$bailout(11, segmentsRadius, null, openEnded, t1, t2, vertices, uvs, t4, null, null, null, $.CONSTANT3, null, segmentsHeight, y, t5, $.CONSTANT3, t10, x0, t3, na, nb, x, y0, t11, t13, t8, t15, n1, n2, n3, n4);
        if (x >= t15.length)
          throw $.ioore(x);
        uv1 = t15[x].clone$0();
        if (y0 >= uvs.length)
          throw $.ioore(y0);
        t17 = uvs[y0];
        if (typeof t17 !== "string" && (typeof t17 !== "object" || t17 === null || t17.constructor !== Array && !t17.$isJavaScriptIndexingBehavior()))
          return this.CylinderGeometry$6$bailout(12, segmentsRadius, null, openEnded, t1, t2, vertices, uvs, t4, null, null, null, $.CONSTANT3, null, segmentsHeight, y, t5, $.CONSTANT3, t10, x0, t3, na, nb, x, y0, t11, t13, t8, null, n1, n2, n3, n4, t17, uv1);
        if (x >= t17.length)
          throw $.ioore(x);
        uv2 = t17[x].clone$0();
        if (y0 >= uvs.length)
          throw $.ioore(y0);
        t19 = uvs[y0];
        if (typeof t19 !== "string" && (typeof t19 !== "object" || t19 === null || t19.constructor !== Array && !t19.$isJavaScriptIndexingBehavior()))
          return this.CylinderGeometry$6$bailout(13, segmentsRadius, null, openEnded, t1, t2, vertices, uvs, t4, null, null, null, $.CONSTANT3, null, segmentsHeight, y, t5, $.CONSTANT3, t10, x0, t3, na, nb, x, y0, t11, t13, t8, null, n1, n2, n3, n4, null, uv1, t19, uv2);
        if (x0 >= t19.length)
          throw $.ioore(x0);
        uv3 = t19[x0].clone$0();
        if (y >= uvs.length)
          throw $.ioore(y);
        t21 = uvs[y];
        if (typeof t21 !== "string" && (typeof t21 !== "object" || t21 === null || t21.constructor !== Array && !t21.$isJavaScriptIndexingBehavior()))
          return this.CylinderGeometry$6$bailout(14, segmentsRadius, null, openEnded, t1, t2, vertices, uvs, t4, null, null, null, $.CONSTANT3, null, segmentsHeight, null, t5, $.CONSTANT3, t10, x0, t3, na, nb, x, y0, t11, t13, t8, null, n1, n2, n3, n4, null, uv1, null, uv2, t21, uv3);
        if (x0 >= t21.length)
          throw $.ioore(x0);
        uv4 = t21[x0].clone$0();
        $.add(this.faces, $.Face4$(t10, t11, t13, t8, [n1, n2, n3, n4], null, null));
        if (0 >= t5.length)
          throw $.ioore(0);
        $.add(t5[0], [uv1, uv2, uv3, uv4]);
      }
    }
    t3 = openEnded !== true;
    if (t3 && t4 > 0) {
      $.add(this.vertices, $.Vector3$(0, t1, 0));
      for (x = 0; x < segmentsRadius; x = x0) {
        if (0 >= vertices.length)
          throw $.ioore(0);
        t4 = $.$$index(vertices[0], x);
        if (0 >= vertices.length)
          throw $.ioore(0);
        x0 = x + 1;
        t6 = $.$$index(vertices[0], x0);
        t7 = $.$$sub($.length(this.vertices), 1);
        n1 = $.Vector3$(0, 1, 0);
        n2 = $.Vector3$(0, 1, 0);
        n3 = $.Vector3$(0, 1, 0);
        if (0 >= uvs.length)
          throw $.ioore(0);
        uv1 = $.$$index(uvs[0], x).clone$0();
        if (0 >= uvs.length)
          throw $.ioore(0);
        uv2 = $.$$index(uvs[0], x0).clone$0();
        uv3 = $.UV$(uv2.get$u(), 0);
        $.add(this.faces, $.Face3$(t4, t6, t7, [n1, n2, n3], null, null));
        if (0 >= t5.length)
          throw $.ioore(0);
        $.add(t5[0], [uv1, uv2, uv3]);
      }
    }
    if (t3 && t2 > 0) {
      $.add(this.vertices, $.Vector3$(0, -t1, 0));
      for (x = 0; x < segmentsRadius; x = x0) {
        if (y < 0 || y >= vertices.length)
          throw $.ioore(y);
        x0 = x + 1;
        t1 = $.$$index(vertices[y], x0);
        if (y >= vertices.length)
          throw $.ioore(y);
        t2 = $.$$index(vertices[y], x);
        t3 = $.$$sub($.length(this.vertices), 1);
        n1 = $.Vector3$(0, -1, 0);
        n2 = $.Vector3$(0, -1, 0);
        n3 = $.Vector3$(0, -1, 0);
        if (y >= uvs.length)
          throw $.ioore(y);
        uv1 = $.$$index(uvs[y], x0).clone$0();
        if (y >= uvs.length)
          throw $.ioore(y);
        uv2 = $.$$index(uvs[y], x).clone$0();
        uv3 = $.UV$(uv2.get$u(), 1);
        $.add(this.faces, $.Face3$(t1, t2, t3, [n1, n2, n3], null, null));
        if (0 >= t5.length)
          throw $.ioore(0);
        $.add(t5[0], [uv1, uv2, uv3]);
      }
    }
    this.computeCentroids$0();
    this.computeFaceNormals$0();
  },
  CylinderGeometry$6$bailout: function(state0, segmentsRadius, segmentsHeight, openEnded, t1, t2, vertices, uvs, t4, verticesRow, uvsRow, v, t6, radius, segmentsY, y, t3, t5, t7, x0, tanTheta, na, nb, x, y0, t9, t11, t13, t15, n1, n2, n3, n4, t17, uv1, t19, uv2, t21, uv3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.$$div(this.height, 2);
      case 2:
        state0 = 0;
        vertices = [];
        uvs = [];
        t2 = this.radiusBottom;
      case 3:
        state0 = 0;
        t4 = this.radiusTop;
      case 4:
        state0 = 0;
        t6 = $.getInterceptor$JSNumber(t2);
        segmentsY = segmentsHeight;
        y = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT1.$le(y, segmentsY))
                  break L0;
                verticesRow = [];
                uvsRow = [];
                if (typeof segmentsY !== "number")
                  throw $.iae(segmentsY);
                v = y / segmentsY;
                t3 = t6.$sub(t2, t4);
                if (typeof t3 !== "number")
                  throw $.iae(t3);
                if (typeof t4 !== "number")
                  throw $.iae(t4);
                radius = v * t3 + t4;
              case 5:
                state0 = 0;
                t3 = -v;
              case 6:
                state0 = 0;
                t7 = 1 - v;
                x = 0;
                for (; $.CONSTANT1.$le(x, segmentsRadius); ++x) {
                  if (typeof segmentsRadius !== "number")
                    throw $.iae(segmentsRadius);
                  u = x / segmentsRadius;
                  vertex = $.Vector3$(0, 0, 0);
                  t5 = u * 3.141592653589793 * 2;
                  vertex.x = radius * $.sin(t5);
                  t8 = this.height;
                  if (typeof t8 !== "number")
                    throw $.iae(t8);
                  if (typeof t1 !== "number")
                    throw $.iae(t1);
                  vertex.y = t3 * t8 + t1;
                  vertex.z = radius * $.cos(t5);
                  $.add(this.vertices, vertex);
                  verticesRow.push($.$$sub($.length(this.vertices), 1));
                  uvsRow.push($.UV$(u, t7));
                }
                vertices.push(verticesRow);
                uvs.push(uvsRow);
                ++y;
            }
        tanTheta = $.$$div(t6.$sub(t2, t4), this.height);
        t3 = this.faceVertexUvs;
        t5 = $.getInterceptor(t4);
        x = 0;
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        var u, vertex, t8, t10, uv4;
        L1:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT1.$lt(x, segmentsRadius))
                  break L1;
                t7 = t5.$eq(t4, 0);
                t8 = vertices.length;
                t9 = this.vertices;
                t10 = x + 1;
                if (t7 !== true) {
                  if (0 >= t8)
                    throw $.ioore(0);
                  na = $.$$index(t9, $.$$index(vertices[0], x)).clone$0();
                  t7 = this.vertices;
                  if (0 >= vertices.length)
                    throw $.ioore(0);
                  nb = $.$$index(t7, $.$$index(vertices[0], t10)).clone$0();
                } else {
                  if (1 >= t8)
                    throw $.ioore(1);
                  na = $.$$index(t9, $.$$index(vertices[1], x)).clone$0();
                  t7 = this.vertices;
                  if (1 >= vertices.length)
                    throw $.ioore(1);
                  nb = $.$$index(t7, $.$$index(vertices[1], t10)).clone$0();
                }
                t7 = na.get$x();
                t7 = $.$$mul(t7, t7);
                t8 = na.get$z();
                t9 = $.sqrt($.$$add(t7, $.$$mul(t8, t8)));
                if (typeof tanTheta !== "number")
                  throw $.iae(tanTheta);
                na.setY$1(t9 * tanTheta).normalize$0();
                t10 = nb.get$x();
                t10 = $.$$mul(t10, t10);
                t11 = nb.get$z();
                nb.setY$1($.sqrt($.$$add(t10, $.$$mul(t11, t11))) * tanTheta).normalize$0();
                x0 = x + 1;
                y = 0;
              default:
                L2:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT1.$lt(y, segmentsY))
                          break L2;
                        if (y >= vertices.length)
                          throw $.ioore(y);
                        t7 = vertices[y];
                      case 7:
                        state0 = 0;
                        t7 = $.$$index(t7, x);
                        y0 = y + 1;
                        if (y0 >= vertices.length)
                          throw $.ioore(y0);
                        t9 = vertices[y0];
                      case 8:
                        state0 = 0;
                        t9 = $.$$index(t9, x);
                        if (y0 >= vertices.length)
                          throw $.ioore(y0);
                        t11 = vertices[y0];
                      case 9:
                        state0 = 0;
                        t11 = $.$$index(t11, x0);
                        if (y >= vertices.length)
                          throw $.ioore(y);
                        t13 = vertices[y];
                      case 10:
                        state0 = 0;
                        t13 = $.$$index(t13, x0);
                        n1 = na.clone$0();
                        n2 = na.clone$0();
                        n3 = nb.clone$0();
                        n4 = nb.clone$0();
                        if (y >= uvs.length)
                          throw $.ioore(y);
                        t15 = uvs[y];
                      case 11:
                        state0 = 0;
                        uv1 = $.$$index(t15, x).clone$0();
                        if (y0 >= uvs.length)
                          throw $.ioore(y0);
                        t17 = uvs[y0];
                      case 12:
                        state0 = 0;
                        uv2 = $.$$index(t17, x).clone$0();
                        if (y0 >= uvs.length)
                          throw $.ioore(y0);
                        t19 = uvs[y0];
                      case 13:
                        state0 = 0;
                        uv3 = $.$$index(t19, x0).clone$0();
                        if (y >= uvs.length)
                          throw $.ioore(y);
                        t21 = uvs[y];
                      case 14:
                        state0 = 0;
                        uv4 = $.$$index(t21, x0).clone$0();
                        $.add(this.faces, $.Face4$(t7, t9, t11, t13, [n1, n2, n3, n4], null, null));
                        if (0 >= t3.length)
                          throw $.ioore(0);
                        $.add(t3[0], [uv1, uv2, uv3, uv4]);
                        y = y0;
                    }
                x = x0;
            }
        t5 = openEnded !== true;
        if (t5 && $.$$gt(t4, 0) === true) {
          $.add(this.vertices, $.Vector3$(0, t1, 0));
          for (x = 0; $.CONSTANT1.$lt(x, segmentsRadius); x = x0) {
            if (0 >= vertices.length)
              throw $.ioore(0);
            t4 = $.$$index(vertices[0], x);
            if (0 >= vertices.length)
              throw $.ioore(0);
            x0 = x + 1;
            t7 = $.$$index(vertices[0], x0);
            t8 = $.$$sub($.length(this.vertices), 1);
            n1 = $.Vector3$(0, 1, 0);
            n2 = $.Vector3$(0, 1, 0);
            n3 = $.Vector3$(0, 1, 0);
            if (0 >= uvs.length)
              throw $.ioore(0);
            uv1 = $.$$index(uvs[0], x).clone$0();
            if (0 >= uvs.length)
              throw $.ioore(0);
            uv2 = $.$$index(uvs[0], x0).clone$0();
            uv3 = $.UV$(uv2.get$u(), 0);
            $.add(this.faces, $.Face3$(t4, t7, t8, [n1, n2, n3], null, null));
            if (0 >= t3.length)
              throw $.ioore(0);
            $.add(t3[0], [uv1, uv2, uv3]);
          }
        }
        if (t5 && t6.$gt(t2, 0) === true) {
          $.add(this.vertices, $.Vector3$(0, $.$$negate(t1), 0));
          for (x = 0; $.CONSTANT1.$lt(x, segmentsRadius); x = x0) {
            if (y < 0 || y >= vertices.length)
              throw $.ioore(y);
            x0 = x + 1;
            t1 = $.$$index(vertices[y], x0);
            if (y >= vertices.length)
              throw $.ioore(y);
            t2 = $.$$index(vertices[y], x);
            t4 = $.$$sub($.length(this.vertices), 1);
            n1 = $.Vector3$(0, -1, 0);
            n2 = $.Vector3$(0, -1, 0);
            n3 = $.Vector3$(0, -1, 0);
            if (y >= uvs.length)
              throw $.ioore(y);
            uv1 = $.$$index(uvs[y], x0).clone$0();
            if (y >= uvs.length)
              throw $.ioore(y);
            uv2 = $.$$index(uvs[y], x).clone$0();
            uv3 = $.UV$(uv2.get$u(), 1);
            $.add(this.faces, $.Face3$(t1, t2, t4, [n1, n2, n3], null, null));
            if (0 >= t3.length)
              throw $.ioore(0);
            $.add(t3[0], [uv1, uv2, uv3]);
          }
        }
        this.computeCentroids$0();
        this.computeFaceNormals$0();
    }
  }
};

$$.ExtrudeGeometry = {"": "Geometry;shapes,shapebb,id,name,vertices,colors,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
  addShapeList$13: function(shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial) {
    var sl, s;
    if (typeof shapes !== "string" && (typeof shapes !== "object" || shapes === null || shapes.constructor !== Array && !shapes.$isJavaScriptIndexingBehavior()))
      return this.addShapeList$13$bailout(1, shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial);
    sl = shapes.length;
    for (s = 0; s < sl; ++s) {
      if (s >= shapes.length)
        throw $.ioore(s);
      this.addShape$13(shapes[s], amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial);
    }
  },
  addShapeList$13$bailout: function(state0, shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial, t1, sl) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(shapes);
        sl = t1.get$length(shapes);
      case 2:
        var s;
        state0 = 0;
        for (s = 0; $.CONSTANT1.$lt(s, sl); ++s)
          this.addShape$13(t1.$index(shapes, s), amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial);
    }
  },
  _scalePt2$3: function(pt, vec, size) {
    if (vec == null)
      $.print("die");
    return vec.clone$0().multiplyScalar$1(size).addSelf$1(pt);
  },
  _getBevelVec2$3: function(pt_i, pt_j, pt_k) {
    var a, b, v_hat, w_hat, p, q, t1, t3, t6, t9, t12, v, w, t15, t16, v_dot_w_hat, q_sub_p_dot_w_hat;
    a = $.ExtrudeGeometry____v1;
    if (a == null) {
      a = $.Vector2$(0, 0);
      $.ExtrudeGeometry____v1 = a;
    }
    b = $.ExtrudeGeometry____v2;
    if (b == null) {
      b = $.Vector2$(0, 0);
      $.ExtrudeGeometry____v2 = b;
    }
    v_hat = $.ExtrudeGeometry____v3;
    if (v_hat == null) {
      v_hat = $.Vector2$(0, 0);
      $.ExtrudeGeometry____v3 = v_hat;
    }
    w_hat = $.ExtrudeGeometry____v4;
    if (w_hat == null) {
      w_hat = $.Vector2$(0, 0);
      $.ExtrudeGeometry____v4 = w_hat;
    }
    p = $.ExtrudeGeometry____v5;
    if (p == null) {
      p = $.Vector2$(0, 0);
      $.ExtrudeGeometry____v5 = p;
    }
    q = $.ExtrudeGeometry____v6;
    if (q == null) {
      q = $.Vector2$(0, 0);
      $.ExtrudeGeometry____v6 = q;
    }
    t1 = pt_i.get$x();
    t3 = pt_j.get$x();
    if (typeof t1 !== "number")
      return this._getBevelVec2$3$bailout(1, pt_i, pt_j, pt_k, b, a, q, t1, p, w_hat, v_hat);
    if (typeof t3 !== "number")
      return this._getBevelVec2$3$bailout(2, pt_i, pt_j, pt_k, b, a, q, t1, p, w_hat, v_hat, t3);
    t3 = t1 - t3;
    t1 = pt_i.get$y();
    t6 = pt_j.get$y();
    if (typeof t1 !== "number")
      return this._getBevelVec2$3$bailout(3, pt_i, pt_j, pt_k, b, a, q, t1, p, w_hat, v_hat, t3);
    if (typeof t6 !== "number")
      return this._getBevelVec2$3$bailout(4, pt_i, pt_j, pt_k, b, a, q, t1, p, w_hat, v_hat, t3, t6);
    a.setValues$2(t3, t1 - t6);
    t3 = pt_i.get$x();
    t9 = pt_k.get$x();
    if (typeof t3 !== "number")
      return this._getBevelVec2$3$bailout(5, pt_i, pt_j, pt_k, b, a, q, null, p, w_hat, v_hat, t3);
    if (typeof t9 !== "number")
      return this._getBevelVec2$3$bailout(6, pt_i, pt_j, pt_k, b, a, q, null, p, w_hat, v_hat, t3, null, t9);
    t9 = t3 - t9;
    t3 = pt_i.get$y();
    t12 = pt_k.get$y();
    if (typeof t3 !== "number")
      return this._getBevelVec2$3$bailout(7, pt_i, pt_j, pt_k, b, a, q, null, p, w_hat, v_hat, t3, null, t9);
    if (typeof t12 !== "number")
      return this._getBevelVec2$3$bailout(8, pt_i, pt_j, pt_k, b, a, q, null, p, w_hat, v_hat, t3, null, t9, t12);
    b.setValues$2(t9, t3 - t12);
    v = a.normalize$0();
    w = b.normalize$0();
    t9 = v.get$y();
    if (typeof t9 !== "number")
      return this._getBevelVec2$3$bailout(9, pt_i, pt_j, pt_k, null, null, q, null, p, w_hat, v_hat, null, null, t9, null, v, w);
    v_hat.setValues$2(-t9, v.get$x());
    t15 = w.get$y();
    t16 = w.get$x();
    if (typeof t16 !== "number")
      return this._getBevelVec2$3$bailout(10, pt_i, pt_j, pt_k, null, null, q, null, p, w_hat, v_hat, null, null, null, null, v, null, t15, t16);
    w_hat.setValues$2(t15, -t16);
    p.copy$1(pt_i).addSelf$1(v_hat);
    q.copy$1(pt_i).addSelf$1(w_hat);
    if (p.equals$1(q) === true)
      return w_hat.clone$0();
    p.copy$1(pt_j).addSelf$1(v_hat);
    q.copy$1(pt_k).addSelf$1(w_hat);
    v_dot_w_hat = v.dot$1(w_hat);
    if (typeof v_dot_w_hat !== "number")
      return this._getBevelVec2$3$bailout(11, pt_i, pt_j, pt_k, null, null, q, null, p, w_hat, null, null, null, null, null, v, null, null, null, v_dot_w_hat);
    q_sub_p_dot_w_hat = q.subSelf$1(p).dot$1(w_hat);
    if (typeof q_sub_p_dot_w_hat !== "number")
      return this._getBevelVec2$3$bailout(12, pt_i, pt_j, pt_k, null, null, null, null, p, null, null, null, null, null, null, v, null, null, null, v_dot_w_hat, q_sub_p_dot_w_hat);
    if (v_dot_w_hat === 0) {
      $.print("Either infinite or no solutions!");
      if (q_sub_p_dot_w_hat === 0)
        $.print("Its finite solutions.");
      else
        $.print("Too bad, no solutions.");
    }
    t1 = q_sub_p_dot_w_hat / v_dot_w_hat;
    if (t1 < 0)
      return this._getBevelVec1$3(pt_i, pt_j, pt_k);
    return v.multiplyScalar$1(t1).addSelf$1(p).subSelf$1(pt_i).clone$0();
  },
  _getBevelVec2$3$bailout: function(state0, pt_i, pt_j, pt_k, b, a, q, t1, p, w_hat, v_hat, t3, t6, t9, t12, v, w, t15, t16, v_dot_w_hat, q_sub_p_dot_w_hat) {
    switch (state0) {
      case 0:
        a = $.ExtrudeGeometry____v1;
        if (a == null) {
          a = $.Vector2$(0, 0);
          $.ExtrudeGeometry____v1 = a;
        }
        b = $.ExtrudeGeometry____v2;
        if (b == null) {
          b = $.Vector2$(0, 0);
          $.ExtrudeGeometry____v2 = b;
        }
        v_hat = $.ExtrudeGeometry____v3;
        if (v_hat == null) {
          v_hat = $.Vector2$(0, 0);
          $.ExtrudeGeometry____v3 = v_hat;
        }
        w_hat = $.ExtrudeGeometry____v4;
        if (w_hat == null) {
          w_hat = $.Vector2$(0, 0);
          $.ExtrudeGeometry____v4 = w_hat;
        }
        p = $.ExtrudeGeometry____v5;
        if (p == null) {
          p = $.Vector2$(0, 0);
          $.ExtrudeGeometry____v5 = p;
        }
        q = $.ExtrudeGeometry____v6;
        if (q == null) {
          q = $.Vector2$(0, 0);
          $.ExtrudeGeometry____v6 = q;
        }
        t1 = pt_i.get$x();
      case 1:
        state0 = 0;
        t3 = pt_j.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$sub(t1, t3);
        t1 = pt_i.get$y();
      case 3:
        state0 = 0;
        t6 = pt_j.get$y();
      case 4:
        state0 = 0;
        a.setValues$2(t3, $.$$sub(t1, t6));
        t3 = pt_i.get$x();
      case 5:
        state0 = 0;
        t9 = pt_k.get$x();
      case 6:
        state0 = 0;
        t9 = $.$$sub(t3, t9);
        t3 = pt_i.get$y();
      case 7:
        state0 = 0;
        t12 = pt_k.get$y();
      case 8:
        state0 = 0;
        b.setValues$2(t9, $.$$sub(t3, t12));
        v = a.normalize$0();
        w = b.normalize$0();
        t9 = v.get$y();
      case 9:
        state0 = 0;
        v_hat.setValues$2($.$$negate(t9), v.get$x());
        t15 = w.get$y();
        t16 = w.get$x();
      case 10:
        state0 = 0;
        w_hat.setValues$2(t15, $.$$negate(t16));
        p.copy$1(pt_i).addSelf$1(v_hat);
        q.copy$1(pt_i).addSelf$1(w_hat);
        if (p.equals$1(q) === true)
          return w_hat.clone$0();
        p.copy$1(pt_j).addSelf$1(v_hat);
        q.copy$1(pt_k).addSelf$1(w_hat);
        v_dot_w_hat = v.dot$1(w_hat);
      case 11:
        state0 = 0;
        q_sub_p_dot_w_hat = q.subSelf$1(p).dot$1(w_hat);
      case 12:
        state0 = 0;
        if ($.$$eq(v_dot_w_hat, 0) === true) {
          $.print("Either infinite or no solutions!");
          if ($.$$eq(q_sub_p_dot_w_hat, 0) === true)
            $.print("Its finite solutions.");
          else
            $.print("Too bad, no solutions.");
        }
        t1 = $.$$div(q_sub_p_dot_w_hat, v_dot_w_hat);
        if ($.$$lt(t1, 0) === true)
          return this._getBevelVec1$3(pt_i, pt_j, pt_k);
        return v.multiplyScalar$1(t1).addSelf$1(p).subSelf$1(pt_i).clone$0();
    }
  },
  _getBevelVec1$3: function(pt_i, pt_j, pt_k) {
    var t1, t2, anglea, t3, t4, angleb, anglec;
    t1 = $.$$sub(pt_j.get$y(), pt_i.get$y());
    t2 = $.$$sub(pt_j.get$x(), pt_i.get$x());
    anglea = Math.atan2($.checkNum(t1), $.checkNum(t2));
    t3 = $.$$sub(pt_k.get$y(), pt_i.get$y());
    t4 = $.$$sub(pt_k.get$x(), pt_i.get$x());
    angleb = Math.atan2($.checkNum(t3), $.checkNum(t4));
    anglec = (anglea + (anglea > angleb ? angleb + 6.283185307179586 : angleb)) / 2;
    return $.Vector2$(-Math.cos($.checkNum(anglec)), -Math.sin($.checkNum(anglec)));
  },
  _reverse$1: function(list) {
    var reversed, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._reverse$1$bailout(1, list);
    reversed = [];
    i = list.length;
    for (; i > 0;) {
      --i;
      if (i >= list.length)
        throw $.ioore(i);
      reversed.push(list[i]);
    }
    return reversed;
  },
  _reverse$1$bailout: function(state0, list, reversed, t1, i) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        reversed = [];
        t1 = $.getInterceptor$JSStringJSArray(list);
        i = t1.get$length(list);
      case 2:
        var t2;
        state0 = 0;
        for (; t2 = $.getInterceptor$JSNumber(i), t2.$gt(i, 0) === true;) {
          i = t2.$sub(i, 1);
          reversed.push(t1.$index(list, i));
        }
        return reversed;
    }
  },
  addShape$14$UVGenerator: function(shape, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial, UVGenerator) {
    var t1, uvgen, t2, t3, nSteps, divisions, extrudePts, splineTube, binormal, normal, position2, extrudeByPath, shapePoints, vertices, holes, t5, ahole, h, faces, vertices0, vlen, flen, clen, contourMovements, il, j, i, k, t4, pt_i, pt_j, holesMovements, verticesMovements, oneHoleMovements, t6, t7, b, vert, t, z, bs, t8, t10, t11, t12, s, t9, t13, t14, offset, face, layeroffset;
    t1 = {};
    t1.bevelSegments_0 = bevelSegments;
    if (typeof amount !== "number")
      return this.addShape$14$UVGenerator$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames, material, extrudeMaterial, UVGenerator, t1);
    if (typeof bevelThickness !== "number")
      return this.addShape$14$UVGenerator$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames, material, extrudeMaterial, UVGenerator, t1);
    if (typeof bevelSize !== "number")
      return this.addShape$14$UVGenerator$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames, material, extrudeMaterial, UVGenerator, t1);
    if (typeof bevelEnabled !== "boolean")
      return this.addShape$14$UVGenerator$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames, material, extrudeMaterial, UVGenerator, t1);
    if (typeof steps !== "number")
      return this.addShape$14$UVGenerator$bailout(1, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames, material, extrudeMaterial, UVGenerator, t1);
    uvgen = !(UVGenerator == null) ? UVGenerator : $.ExtrudeGeometryWorldUVGenerator$();
    t2 = typeof steps === "object" && steps !== null && (steps.constructor === Array || steps.$isList());
    if (t2) {
      t3 = $.length(steps);
      if (typeof t3 !== "number")
        return this.addShape$14$UVGenerator$bailout(2, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames, material, extrudeMaterial, null, t1, t2, t3, uvgen);
      nSteps = t3;
    } else
      nSteps = steps;
    if (!(extrudePath == null)) {
      if (t2) {
        divisions = [0];
        $.CONSTANT0.addAll$1(divisions, steps);
        extrudePts = extrudePath.getUPoints$1(divisions);
      } else
        extrudePts = extrudePath.getSpacedPoints$1(steps);
      splineTube = !(frames == null) ? frames : $.TubeGeometry$FrenetFrames(extrudePath, steps, false);
      binormal = $.Vector3$(0, 0, 0);
      normal = $.Vector3$(0, 0, 0);
      position2 = $.Vector3$(0, 0, 0);
      bevelEnabled = false;
      extrudeByPath = true;
    } else {
      splineTube = null;
      binormal = null;
      normal = null;
      position2 = null;
      extrudePts = null;
      extrudeByPath = false;
    }
    if (!bevelEnabled) {
      t1.bevelSegments_0 = 0;
      bevelThickness = 0;
      bevelSize = 0;
    }
    t2 = $.length(this.vertices);
    if (!(bendPath == null))
      shape.addWrapPath$1(bendPath);
    shapePoints = shape.extractPoints$0();
    t3 = $.getInterceptor$JSStringJSArray(shapePoints);
    vertices = t3.$index(shapePoints, "shape");
    if (typeof vertices !== "object" || vertices === null || (vertices.constructor !== Array || !!vertices.immutable$list) && !vertices.$isJavaScriptIndexingBehavior())
      return this.addShape$14$UVGenerator$bailout(3, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, shapePoints, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, t3, vertices);
    holes = t3.$index(shapePoints, "holes");
    if (typeof holes !== "object" || holes === null || (holes.constructor !== Array || !!holes.immutable$list) && !holes.$isJavaScriptIndexingBehavior())
      return this.addShape$14$UVGenerator$bailout(4, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, null, vertices, holes);
    t5 = $.area(vertices);
    if (typeof t5 !== "number")
      return this.addShape$14$UVGenerator$bailout(5, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, null, vertices, holes, t5);
    if (!(t5 < 0)) {
      vertices = this._reverse$1(vertices);
      if (typeof vertices !== "object" || vertices === null || (vertices.constructor !== Array || !!vertices.immutable$list) && !vertices.$isJavaScriptIndexingBehavior())
        return this.addShape$14$UVGenerator$bailout(6, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, null, vertices, holes);
      for (ahole = null, h = 0; h < holes.length; ++h) {
        ahole = holes[h];
        t3 = $.area(ahole);
        if (typeof t3 !== "number")
          return this.addShape$14$UVGenerator$bailout(8, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, $.CONSTANT0, vertices, holes, null, t3, h, ahole);
        if (t3 < 0) {
          t3 = this._reverse$1(ahole);
          if (h >= holes.length)
            throw $.ioore(h);
          holes[h] = t3;
        }
      }
    } else
      ahole = null;
    faces = $.triangulateShape(vertices, holes);
    if (typeof faces !== "string" && (typeof faces !== "object" || faces === null || faces.constructor !== Array && !faces.$isJavaScriptIndexingBehavior()))
      return this.addShape$14$UVGenerator$bailout(9, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, null, vertices, holes, null, null, null, ahole, faces);
    for (vertices0 = vertices, h = 0; h < holes.length; ++h) {
      ahole = holes[h];
      vertices0 = $.List_List$from(vertices0);
      $.CONSTANT0.addAll$1(vertices0, ahole);
    }
    vlen = vertices0.length;
    t3 = $.getInterceptor$JSStringJSArray(faces);
    flen = faces.length;
    clen = vertices.length;
    contourMovements = $.List_List$fixedLength(clen, null);
    il = vertices.length;
    j = il - 1;
    for (i = 0, k = 1; i < il; ++i) {
      if (j === il)
        j = 0;
      if (k === il)
        k = 0;
      t4 = vertices.length;
      if (i >= t4)
        throw $.ioore(i);
      pt_i = vertices[i];
      if (j < 0 || j >= t4)
        throw $.ioore(j);
      pt_j = vertices[j];
      if (k < 0 || k >= t4)
        throw $.ioore(k);
      t5 = this._getBevelVec2$3(pt_i, pt_j, vertices[k]);
      if (i >= clen)
        throw $.ioore(i);
      contourMovements[i] = t5;
      ++j;
      ++k;
    }
    holesMovements = [];
    verticesMovements = $.List_List$from(contourMovements);
    for (h = 0, oneHoleMovements = null; h < holes.length; ++h) {
      ahole = holes[h];
      if (typeof ahole !== "string" && (typeof ahole !== "object" || ahole === null || ahole.constructor !== Array && !ahole.$isJavaScriptIndexingBehavior()))
        return this.addShape$14$UVGenerator$bailout(15, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, $.CONSTANT0, vertices, holes, null, $.CONSTANT0, h, ahole, faces, vertices0, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, verticesMovements);
      t5 = ahole.length;
      oneHoleMovements = $.List_List$fixedLength(t5, null);
      il = ahole.length;
      j = il - 1;
      for (i = 0, k = 1; i < il; ++i) {
        if (j === il)
          j = 0;
        if (k === il)
          k = 0;
        t4 = ahole.length;
        if (i >= t4)
          throw $.ioore(i);
        t6 = ahole[i];
        if (j < 0 || j >= t4)
          throw $.ioore(j);
        t7 = ahole[j];
        if (k < 0 || k >= t4)
          throw $.ioore(k);
        t7 = this._getBevelVec2$3(t6, t7, ahole[k]);
        if (i >= t5)
          throw $.ioore(i);
        oneHoleMovements[i] = t7;
        ++j;
        ++k;
      }
      holesMovements.push(oneHoleMovements);
      $.CONSTANT0.addAll$1(verticesMovements, oneHoleMovements);
    }
    b = 0;
    vert = null;
    while (true) {
      t4 = t1.bevelSegments_0;
      if (typeof t4 !== "number")
        return this.addShape$14$UVGenerator$bailout(17, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT0, null, ahole, faces, vertices0, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, verticesMovements, oneHoleMovements, $.CONSTANT3, b, vert, t4);
      if (!(b < t4))
        break;
      t = b / t4;
      z = bevelThickness * (1 - t);
      bs = bevelSize * Math.sin($.checkNum(t * 3.141592653589793 / 2));
      for (t4 = -z, i = 0; i < vertices.length; ++i) {
        t5 = vertices[i];
        if (i >= clen)
          throw $.ioore(i);
        vert = this._scalePt2$3(t5, contourMovements[i], bs);
        t5 = vert.get$x();
        t6 = vert.get$y();
        $.add(this.vertices, $.Vector3$(t5, t6, t4));
      }
      for (h = 0; h < holes.length; ++h) {
        ahole = holes[h];
        if (h >= holesMovements.length)
          throw $.ioore(h);
        oneHoleMovements = holesMovements[h];
        t5 = $.getInterceptor$JSStringJSArray(ahole);
        t6 = $.getInterceptor$JSStringJSArray(oneHoleMovements);
        i = 0;
        while (true) {
          t7 = t5.get$length(ahole);
          if (typeof t7 !== "number")
            return this.addShape$14$UVGenerator$bailout(21, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT0, h, ahole, faces, vertices0, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, verticesMovements, oneHoleMovements, $.CONSTANT3, b, vert, $.CONSTANT3, null, t5, bs, i, z, t7, t6);
          if (!(i < t7))
            break;
          vert = this._scalePt2$3(t5.$index(ahole, i), t6.$index(oneHoleMovements, i), bs);
          t7 = vert.get$x();
          t8 = vert.get$y();
          $.add(this.vertices, $.Vector3$(t7, t8, t4));
          ++i;
        }
      }
      ++b;
    }
    for (t4 = !extrudeByPath, t5 = $.getInterceptor$JSStringJSArray(extrudePts), i = 0; i < vlen; ++i) {
      t6 = vertices0.length;
      if (bevelEnabled) {
        if (i >= t6)
          throw $.ioore(i);
        t7 = vertices0[i];
        if (i >= verticesMovements.length)
          throw $.ioore(i);
        vert = this._scalePt2$3(t7, verticesMovements[i], bevelSize);
      } else {
        if (i >= t6)
          throw $.ioore(i);
        vert = vertices0[i];
      }
      if (t4) {
        t6 = vert.get$x();
        t7 = vert.get$y();
        $.add(this.vertices, $.Vector3$(t6, t7, 0));
      } else {
        t6 = splineTube.get$normals();
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
          return this.addShape$14$UVGenerator$bailout(22, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT0, null, ahole, faces, vertices0, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, verticesMovements, oneHoleMovements, $.CONSTANT3, null, vert, t4, null, t5, null, i, null, null, t6);
        if (0 >= t6.length)
          throw $.ioore(0);
        normal.copy$1(t6[0]).multiplyScalar$1(vert.get$x());
        t8 = splineTube.get$binormals();
        if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
          return this.addShape$14$UVGenerator$bailout(23, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT0, null, ahole, faces, vertices0, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, verticesMovements, oneHoleMovements, $.CONSTANT3, null, vert, t4, null, t5, null, i, null, null, null, t8);
        if (0 >= t8.length)
          throw $.ioore(0);
        binormal.copy$1(t8[0]).multiplyScalar$1(vert.get$y());
        position2.copy$1(t5.$index(extrudePts, 0)).addSelf$1(normal).addSelf$1(binormal);
        t10 = position2.get$x();
        t11 = position2.get$y();
        t12 = position2.get$z();
        $.add(this.vertices, $.Vector3$(t10, t11, t12));
      }
    }
    for (t6 = amount / nSteps, s = 1; s <= nSteps; ++s)
      for (t7 = t6 * s, i = 0; i < vlen; ++i) {
        t8 = vertices0.length;
        if (bevelEnabled) {
          if (i >= t8)
            throw $.ioore(i);
          t9 = vertices0[i];
          if (i >= verticesMovements.length)
            throw $.ioore(i);
          vert = this._scalePt2$3(t9, verticesMovements[i], bevelSize);
        } else {
          if (i >= t8)
            throw $.ioore(i);
          vert = vertices0[i];
        }
        if (t4) {
          t8 = vert.get$x();
          t9 = vert.get$y();
          $.add(this.vertices, $.Vector3$(t8, t9, t7));
        } else {
          t8 = splineTube.get$normals();
          if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
            return this.addShape$14$UVGenerator$bailout(24, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT0, null, ahole, faces, vertices0, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, verticesMovements, oneHoleMovements, $.CONSTANT3, null, vert, t4, null, t5, null, i, null, t8, $.CONSTANT3, null, s);
          if (s >= t8.length)
            throw $.ioore(s);
          normal.copy$1(t8[s]).multiplyScalar$1(vert.get$x());
          t10 = splineTube.get$binormals();
          if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !t10.$isJavaScriptIndexingBehavior()))
            return this.addShape$14$UVGenerator$bailout(25, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, splineTube, binormal, normal, position2, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT0, null, ahole, faces, vertices0, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, verticesMovements, oneHoleMovements, $.CONSTANT3, null, vert, t4, null, t5, null, i, null, null, $.CONSTANT3, null, s, t10);
          if (s >= t10.length)
            throw $.ioore(s);
          binormal.copy$1(t10[s]).multiplyScalar$1(vert.get$y());
          position2.copy$1(t5.$index(extrudePts, s)).addSelf$1(normal).addSelf$1(binormal);
          t12 = position2.get$x();
          t13 = position2.get$y();
          t14 = position2.get$z();
          $.add(this.vertices, $.Vector3$(t12, t13, t14));
        }
      }
    t6 = t1.bevelSegments_0;
    if (typeof t6 !== "number")
      return this.addShape$14$UVGenerator$bailout(26, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, null, null, null, null, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, t6, null, ahole, faces, null, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, null, oneHoleMovements, $.CONSTANT3, null, vert, t4, null, t5, null, null, null, null, $.CONSTANT3);
    b = t6 - 1;
    t6 = nSteps - 1;
    for (; b >= 0; --b) {
      t7 = t1.bevelSegments_0;
      if (typeof t7 !== "number")
        return this.addShape$14$UVGenerator$bailout(27, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, null, null, null, null, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT3, null, ahole, faces, null, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, null, oneHoleMovements, $.CONSTANT3, b, vert, t4, null, t5, null, null, null, $.CONSTANT3, $.CONSTANT3, t7);
      t = b / t7;
      z = bevelThickness * (1 - t);
      bs = bevelSize * Math.sin($.checkNum(t * 3.141592653589793 / 2));
      for (t7 = amount + z, i = 0; i < vertices.length; ++i) {
        t8 = vertices[i];
        if (i >= clen)
          throw $.ioore(i);
        vert = this._scalePt2$3(t8, contourMovements[i], bs);
        t8 = vert.get$x();
        t9 = vert.get$y();
        $.add(this.vertices, $.Vector3$(t8, t9, t7));
      }
      for (h = 0; h < holes.length; ++h) {
        ahole = holes[h];
        if (h >= holesMovements.length)
          throw $.ioore(h);
        oneHoleMovements = holesMovements[h];
        t8 = $.getInterceptor$JSStringJSArray(ahole);
        t9 = $.getInterceptor$JSStringJSArray(oneHoleMovements);
        i = 0;
        while (true) {
          t10 = t8.get$length(ahole);
          if (typeof t10 !== "number")
            return this.addShape$14$UVGenerator$bailout(31, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, null, null, null, null, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT3, h, ahole, faces, null, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, null, oneHoleMovements, $.CONSTANT3, b, vert, t4, null, t5, bs, i, z, $.CONSTANT3, $.CONSTANT3, t8, null, t9, t10);
          if (!(i < t10))
            break;
          vert = this._scalePt2$3(t8.$index(ahole, i), t9.$index(oneHoleMovements, i), bs);
          t10 = vert.get$x();
          t11 = vert.get$y();
          if (typeof t11 !== "number")
            return this.addShape$14$UVGenerator$bailout(32, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, null, null, null, null, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT3, h, ahole, faces, null, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, null, oneHoleMovements, $.CONSTANT3, b, vert, t4, null, t5, bs, i, z, $.CONSTANT3, $.CONSTANT3, t8, null, t9, t10, t11);
          if (t4)
            $.add(this.vertices, $.Vector3$(t10, t11, t7));
          else {
            t12 = t5.$index(extrudePts, t6).get$y();
            if (typeof t12 !== "number")
              return this.addShape$14$UVGenerator$bailout(33, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, null, null, null, null, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT3, h, ahole, faces, null, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, null, oneHoleMovements, $.CONSTANT3, b, vert, t4, null, t5, bs, i, z, $.CONSTANT3, $.CONSTANT3, t8, null, t9, t10, t11, t12);
            t12 = t11 + t12;
            t11 = t5.$index(extrudePts, t6).get$x();
            if (typeof t11 !== "number")
              return this.addShape$14$UVGenerator$bailout(34, shape, amount, bevelThickness, bevelSize, null, null, null, null, null, material, extrudeMaterial, null, t1, bevelEnabled, t2, uvgen, nSteps, null, null, null, null, null, extrudePts, null, $.CONSTANT0, vertices, holes, $.CONSTANT3, $.CONSTANT3, h, ahole, faces, null, vlen, t3, flen, $.CONSTANT0, contourMovements, null, holesMovements, null, oneHoleMovements, $.CONSTANT3, b, vert, t4, null, t5, bs, i, z, $.CONSTANT3, $.CONSTANT3, t8, null, t9, t10, t11, t12);
            $.add(this.vertices, $.Vector3$(t10, t12, t11 + z));
          }
          ++i;
        }
      }
    }
    t4 = new $.ExtrudeGeometry_addShape_f3(this, shape, material, uvgen, t2);
    t2 = new $.ExtrudeGeometry_addShape_f4(this, shape, extrudeMaterial, uvgen, t2);
    if (bevelEnabled) {
      offset = vlen * 0;
      for (i = 0; i < flen; ++i) {
        if (i >= faces.length)
          throw $.ioore(i);
        face = faces[i];
        if (typeof face !== "string" && (typeof face !== "object" || face === null || face.constructor !== Array && !face.$isJavaScriptIndexingBehavior()))
          return this.addShape$14$UVGenerator$bailout(35, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, $.CONSTANT3, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, null, null, offset, face);
        t6 = $.getInterceptor$JSStringJSArray(face);
        if (2 >= face.length)
          throw $.ioore(2);
        t7 = face[2];
        if (typeof t7 !== "number")
          return this.addShape$14$UVGenerator$bailout(36, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, $.CONSTANT3, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, null, null, null, t6, null, t7, null, i, null, null, null, null, null, null, null, null, null, offset, face);
        t7 += offset;
        t9 = face[1];
        if (typeof t9 !== "number")
          return this.addShape$14$UVGenerator$bailout(37, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, $.CONSTANT3, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, null, null, null, t6, null, t7, null, i, null, t9, null, null, null, null, null, null, null, offset, face);
        t9 += offset;
        t11 = face[0];
        if (typeof t11 !== "number")
          return this.addShape$14$UVGenerator$bailout(38, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, $.CONSTANT3, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, null, null, null, t11, null, t7, null, i, null, t9, null, null, null, null, null, null, null, offset);
        t4.call$4(t7, t9, t11 + offset, true);
      }
      t5 = t1.bevelSegments_0;
      if (typeof t5 !== "number")
        return this.addShape$14$UVGenerator$bailout(39, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, $.CONSTANT3, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, t5);
      offset = vlen * (nSteps + t5 * 2);
      for (i = 0; i < flen; ++i) {
        if (i >= faces.length)
          throw $.ioore(i);
        face = faces[i];
        if (typeof face !== "string" && (typeof face !== "object" || face === null || face.constructor !== Array && !face.$isJavaScriptIndexingBehavior()))
          return this.addShape$14$UVGenerator$bailout(40, null, null, null, null, null, null, null, null, null, null, null, null, t1, null, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, null, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, null, null, offset, face);
        t6 = $.getInterceptor$JSStringJSArray(face);
        t7 = face.length;
        if (0 >= t7)
          throw $.ioore(0);
        t8 = face[0];
        if (typeof t8 !== "number")
          return this.addShape$14$UVGenerator$bailout(41, null, null, null, null, null, null, null, null, null, null, null, null, t1, null, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, t6, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, t8, null, null, null, null, null, null, i, null, null, null, null, null, null, null, null, null, offset, face);
        t8 += offset;
        if (1 >= t7)
          throw $.ioore(1);
        t10 = face[1];
        if (typeof t10 !== "number")
          return this.addShape$14$UVGenerator$bailout(42, null, null, null, null, null, null, null, null, null, null, null, null, t1, null, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, t6, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, t8, null, null, null, null, t10, null, i, null, null, null, null, null, null, null, null, null, offset, face);
        t10 += offset;
        if (2 >= t7)
          throw $.ioore(2);
        t12 = face[2];
        if (typeof t12 !== "number")
          return this.addShape$14$UVGenerator$bailout(43, null, null, null, null, null, null, null, null, null, null, null, null, t1, null, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, t12, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, t8, null, null, null, null, t10, null, i, null, null, null, null, null, null, null, null, null, offset);
        t4.call$4(t8, t10, t12 + offset, false);
      }
    } else {
      for (i = 0; i < flen; ++i) {
        if (i >= faces.length)
          throw $.ioore(i);
        face = faces[i];
        if (typeof face !== "string" && (typeof face !== "object" || face === null || face.constructor !== Array && !face.$isJavaScriptIndexingBehavior()))
          return this.addShape$14$UVGenerator$bailout(44, null, null, null, null, null, null, null, null, null, null, null, null, t1, null, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, null, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, null, null, null, face);
        if (2 >= face.length)
          throw $.ioore(2);
        t4.call$4(face[2], face[1], face[0], true);
      }
      for (t5 = vlen * nSteps, i = 0; i < flen; ++i) {
        if (i >= faces.length)
          throw $.ioore(i);
        face = faces[i];
        if (typeof face !== "string" && (typeof face !== "object" || face === null || face.constructor !== Array && !face.$isJavaScriptIndexingBehavior()))
          return this.addShape$14$UVGenerator$bailout(45, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, null, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, null, null, null, face);
        t7 = $.getInterceptor$JSStringJSArray(face);
        t8 = face.length;
        if (0 >= t8)
          throw $.ioore(0);
        t9 = face[0];
        if (typeof t9 !== "number")
          return this.addShape$14$UVGenerator$bailout(46, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, null, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, t7, null, null, t9, null, null, null, i, null, null, null, null, null, null, null, null, null, null, face);
        t9 += t5;
        if (1 >= t8)
          throw $.ioore(1);
        t11 = face[1];
        if (typeof t11 !== "number")
          return this.addShape$14$UVGenerator$bailout(47, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, null, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, t7, null, null, t9, null, null, null, i, null, null, t11, null, null, null, null, null, null, null, face);
        t11 += t5;
        if (2 >= t8)
          throw $.ioore(2);
        t13 = face[2];
        if (typeof t13 !== "number")
          return this.addShape$14$UVGenerator$bailout(48, null, null, null, null, null, null, null, null, null, null, null, null, t1, $.CONSTANT1, t2, null, nSteps, null, null, null, null, null, null, null, $.CONSTANT0, vertices, holes, t4, null, null, null, faces, null, vlen, t3, flen, $.CONSTANT0, null, null, null, null, null, t13, null, null, t9, null, null, null, i, null, null, t11);
        t4.call$4(t9, t11, t13 + t5, false);
      }
    }
    t1 = new $.ExtrudeGeometry_addShape_sidewalls(t1, nSteps, vlen, t2);
    t1.call$2(vertices, 0);
    layeroffset = 0 + vertices.length;
    for (h = 0; h < holes.length; ++h) {
      ahole = holes[h];
      t1.call$2(ahole, layeroffset);
      t2 = $.length(ahole);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      layeroffset += t2;
    }
  },
  addShape$14$UVGenerator$bailout: function(state0, shape, amount, bevelThickness, bevelSize, bevelEnabled, steps, bendPath, extrudePath, frames, material, extrudeMaterial, UVGenerator, t1, t2, t3, uvgen, nSteps, shapePoints, splineTube, binormal, normal, position2, extrudePts, extrudeByPath, t4, vertices, holes, t6, t5, h, ahole, faces, vertices0, vlen, t7, flen, t9, contourMovements, il, holesMovements, verticesMovements, oneHoleMovements, t8, b, vert, t10, t, t11, bs, i, z, t13, t12, t14, s, t15, t16, t17, t18, offset, face, layeroffset) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.bevelSegments_0 = bevelSegments;
      case 1:
        state0 = 0;
        uvgen = !(UVGenerator == null) ? UVGenerator : $.ExtrudeGeometryWorldUVGenerator$();
        t2 = typeof steps === "object" && steps !== null && (steps.constructor === Array || steps.$isList());
      case 2:
        if (state0 === 2 || state0 === 0 && t2)
          switch (state0) {
            case 0:
              t3 = $.length(steps);
            case 2:
              state0 = 0;
              nSteps = t3;
          }
        else
          nSteps = steps;
        if (!(extrudePath == null)) {
          if (t2) {
            divisions = [0];
            $.CONSTANT0.addAll$1(divisions, steps);
            extrudePts = extrudePath.getUPoints$1(divisions);
          } else
            extrudePts = extrudePath.getSpacedPoints$1(steps);
          splineTube = !(frames == null) ? frames : $.TubeGeometry$FrenetFrames(extrudePath, steps, false);
          binormal = $.Vector3$(0, 0, 0);
          normal = $.Vector3$(0, 0, 0);
          position2 = $.Vector3$(0, 0, 0);
          bevelEnabled = false;
          extrudeByPath = true;
        } else {
          splineTube = null;
          binormal = null;
          normal = null;
          position2 = null;
          extrudePts = null;
          extrudeByPath = false;
        }
        t2 = bevelEnabled === true;
        if (!t2) {
          t1.bevelSegments_0 = 0;
          bevelThickness = 0;
          bevelSize = 0;
        }
        t3 = $.length(this.vertices);
        if (!(bendPath == null))
          shape.addWrapPath$1(bendPath);
        shapePoints = shape.extractPoints$0();
        t4 = $.getInterceptor$JSStringJSArray(shapePoints);
        vertices = t4.$index(shapePoints, "shape");
      case 3:
        state0 = 0;
        holes = t4.$index(shapePoints, "holes");
      case 4:
        state0 = 0;
        t6 = $.area(vertices);
      case 5:
        state0 = 0;
      default:
        if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && $.$$lt(t6, 0) !== true)
          switch (state0) {
            case 0:
              vertices = this._reverse$1(vertices);
            case 6:
              state0 = 0;
              t4 = $.getInterceptor$JSStringJSArray(holes);
              ahole = null;
              h = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t5 = t4.get$length(holes);
                    case 7:
                      state0 = 0;
                      if (!$.CONSTANT1.$lt(h, t5))
                        break L0;
                      ahole = t4.$index(holes, h);
                      t5 = $.area(ahole);
                    case 8:
                      state0 = 0;
                      if ($.$$lt(t5, 0) === true)
                        t4.$indexSet(holes, h, this._reverse$1(ahole));
                      ++h;
                  }
          }
        else
          ahole = null;
        faces = $.triangulateShape(vertices, holes);
      case 9:
        state0 = 0;
        t4 = $.getInterceptor$JSStringJSArray(holes);
        vertices0 = vertices;
        h = 0;
      case 10:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t5 = t4.get$length(holes);
              case 10:
                state0 = 0;
                if (!$.CONSTANT1.$lt(h, t5))
                  break L1;
                ahole = t4.$index(holes, h);
                vertices0 = $.List_List$from(vertices0);
                $.CONSTANT0.addAll$1(vertices0, ahole);
                ++h;
            }
        t5 = $.getInterceptor$JSStringJSArray(vertices0);
        vlen = t5.get$length(vertices0);
      case 11:
        state0 = 0;
        t7 = $.getInterceptor$JSStringJSArray(faces);
        flen = t7.get$length(faces);
      case 12:
        state0 = 0;
        t9 = $.getInterceptor$JSStringJSArray(vertices);
        t9.get$length(vertices);
        contourMovements = $.List_List$fixedLength(t9.get$length(vertices), null);
        il = t9.get$length(vertices);
      case 13:
        state0 = 0;
        j = $.$$sub(il, 1);
        for (i = 0, k = 1; $.CONSTANT1.$lt(i, il); ++i) {
          if ($.$$eq(j, il) === true)
            j = 0;
          if (k === il)
            k = 0;
          t9.$index(vertices, i);
          t9.$index(vertices, j);
          t9.$index(vertices, k);
          t6 = this._getBevelVec2$3(t9.$index(vertices, i), t9.$index(vertices, j), t9.$index(vertices, k));
          if (i >= contourMovements.length)
            throw $.ioore(i);
          contourMovements[i] = t6;
          j = $.$$add(j, 1);
          ++k;
        }
        holesMovements = [];
        verticesMovements = $.List_List$from(contourMovements);
        h = 0;
        oneHoleMovements = null;
      case 14:
      case 15:
      case 16:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t6 = t4.get$length(holes);
              case 14:
                state0 = 0;
                if (!$.CONSTANT1.$lt(h, t6))
                  break L2;
                ahole = t4.$index(holes, h);
              case 15:
                state0 = 0;
                t8 = $.getInterceptor$JSStringJSArray(ahole);
                oneHoleMovements = $.List_List$fixedLength(t8.get$length(ahole), null);
                il = t8.get$length(ahole);
              case 16:
                state0 = 0;
                j = $.$$sub(il, 1);
                for (i = 0, k = 1; $.CONSTANT1.$lt(i, il); ++i) {
                  if ($.$$eq(j, il) === true)
                    j = 0;
                  if (k === il)
                    k = 0;
                  t6 = this._getBevelVec2$3(t8.$index(ahole, i), t8.$index(ahole, j), t8.$index(ahole, k));
                  if (i >= oneHoleMovements.length)
                    throw $.ioore(i);
                  oneHoleMovements[i] = t6;
                  j = $.$$add(j, 1);
                  ++k;
                }
                holesMovements.push(oneHoleMovements);
                $.CONSTANT0.addAll$1(verticesMovements, oneHoleMovements);
                ++h;
            }
        t6 = $.getInterceptor$JSNumber(bevelThickness);
        t8 = $.getInterceptor$JSNumber(bevelSize);
        b = 0;
        vert = null;
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
        L3:
          while (true)
            switch (state0) {
              case 0:
                t10 = t1.bevelSegments_0;
              case 17:
                state0 = 0;
                if (!$.CONSTANT1.$lt(b, t10))
                  break L3;
                t10 = t1.bevelSegments_0;
                if (typeof t10 !== "number")
                  throw $.iae(t10);
                t = b / t10;
              case 18:
                state0 = 0;
                z = t6.$mul(bevelThickness, 1 - t);
                bs = t8.$mul(bevelSize, Math.sin($.checkNum(t * 3.141592653589793 / 2)));
                t10 = $.getInterceptor$JSNumber(z);
                i = 0;
              case 19:
                L4:
                  while (true)
                    switch (state0) {
                      case 0:
                        t11 = t9.get$length(vertices);
                      case 19:
                        state0 = 0;
                        if (!$.CONSTANT1.$lt(i, t11))
                          break L4;
                        t11 = t9.$index(vertices, i);
                        if (i >= contourMovements.length)
                          throw $.ioore(i);
                        vert = this._scalePt2$3(t11, contourMovements[i], bs);
                        t11 = vert.get$x();
                        t12 = vert.get$y();
                        t13 = t10.$negate(z);
                        $.add(this.vertices, $.Vector3$(t11, t12, t13));
                        ++i;
                    }
                h = 0;
              default:
                L5:
                  while (true)
                    switch (state0) {
                      case 0:
                        t11 = t4.get$length(holes);
                      case 20:
                        state0 = 0;
                        if (!$.CONSTANT1.$lt(h, t11))
                          break L5;
                        ahole = t4.$index(holes, h);
                        if (h >= holesMovements.length)
                          throw $.ioore(h);
                        oneHoleMovements = holesMovements[h];
                        t11 = $.getInterceptor$JSStringJSArray(ahole);
                        t12 = $.getInterceptor$JSStringJSArray(oneHoleMovements);
                        i = 0;
                      case 21:
                        L6:
                          while (true)
                            switch (state0) {
                              case 0:
                                t13 = t11.get$length(ahole);
                              case 21:
                                state0 = 0;
                                if (!$.CONSTANT1.$lt(i, t13))
                                  break L6;
                                vert = this._scalePt2$3(t11.$index(ahole, i), t12.$index(oneHoleMovements, i), bs);
                                t13 = vert.get$x();
                                t14 = vert.get$y();
                                t15 = t10.$negate(z);
                                $.add(this.vertices, $.Vector3$(t13, t14, t15));
                                ++i;
                            }
                        ++h;
                    }
                ++b;
            }
        t10 = !extrudeByPath;
        t11 = $.getInterceptor$JSStringJSArray(extrudePts);
        i = 0;
      case 22:
      case 23:
        L7:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT1.$lt(i, vlen))
                  break L7;
                if (t2) {
                  t12 = t5.$index(vertices0, i);
                  if (i >= verticesMovements.length)
                    throw $.ioore(i);
                  vert = this._scalePt2$3(t12, verticesMovements[i], bevelSize);
                } else
                  vert = t5.$index(vertices0, i);
              default:
                if (state0 === 0 && t10) {
                  t12 = vert.get$x();
                  t13 = vert.get$y();
                  $.add(this.vertices, $.Vector3$(t12, t13, 0));
                } else
                  switch (state0) {
                    case 0:
                      t12 = splineTube.get$normals();
                    case 22:
                      state0 = 0;
                      normal.copy$1($.$$index(t12, 0)).multiplyScalar$1(vert.get$x());
                      t14 = splineTube.get$binormals();
                    case 23:
                      state0 = 0;
                      binormal.copy$1($.$$index(t14, 0)).multiplyScalar$1(vert.get$y());
                      position2.copy$1(t11.$index(extrudePts, 0)).addSelf$1(normal).addSelf$1(binormal);
                      t16 = position2.get$x();
                      t17 = position2.get$y();
                      t18 = position2.get$z();
                      $.add(this.vertices, $.Vector3$(t16, t17, t18));
                  }
                ++i;
            }
        t12 = $.getInterceptor$JSNumber(amount);
        s = 1;
      case 24:
      case 25:
        L8:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT1.$le(s, nSteps))
                  break L8;
                i = 0;
              default:
                L9:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT1.$lt(i, vlen))
                          break L9;
                        if (t2) {
                          t13 = t5.$index(vertices0, i);
                          if (i >= verticesMovements.length)
                            throw $.ioore(i);
                          vert = this._scalePt2$3(t13, verticesMovements[i], bevelSize);
                        } else
                          vert = t5.$index(vertices0, i);
                      default:
                        if (state0 === 0 && t10) {
                          t13 = vert.get$x();
                          t14 = vert.get$y();
                          t15 = $.$$mul(t12.$div(amount, nSteps), s);
                          $.add(this.vertices, $.Vector3$(t13, t14, t15));
                        } else
                          switch (state0) {
                            case 0:
                              t13 = splineTube.get$normals();
                            case 24:
                              state0 = 0;
                              normal.copy$1($.$$index(t13, s)).multiplyScalar$1(vert.get$x());
                              t15 = splineTube.get$binormals();
                            case 25:
                              state0 = 0;
                              binormal.copy$1($.$$index(t15, s)).multiplyScalar$1(vert.get$y());
                              position2.copy$1(t11.$index(extrudePts, s)).addSelf$1(normal).addSelf$1(binormal);
                              t17 = position2.get$x();
                              t18 = position2.get$y();
                              t19 = position2.get$z();
                              $.add(this.vertices, $.Vector3$(t17, t18, t19));
                          }
                        ++i;
                    }
                ++s;
            }
        t5 = t1.bevelSegments_0;
      case 26:
        state0 = 0;
        b = $.$$sub(t5, 1);
        t5 = $.getInterceptor$JSNumber(nSteps);
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
        L10:
          while (true)
            switch (state0) {
              case 0:
                t13 = $.getInterceptor$JSNumber(b);
                if (!(t13.$ge(b, 0) === true))
                  break L10;
                t14 = t1.bevelSegments_0;
              case 27:
                state0 = 0;
                t = t13.$div(b, t14);
                if (typeof t !== "number")
                  throw $.iae(t);
                z = t6.$mul(bevelThickness, 1 - t);
                t14 = t * 3.141592653589793 / 2;
              case 28:
                state0 = 0;
                bs = t8.$mul(bevelSize, Math.sin($.checkNum(t14)));
                i = 0;
              case 29:
                L11:
                  while (true)
                    switch (state0) {
                      case 0:
                        t14 = t9.get$length(vertices);
                      case 29:
                        state0 = 0;
                        if (!$.CONSTANT1.$lt(i, t14))
                          break L11;
                        t14 = t9.$index(vertices, i);
                        if (i >= contourMovements.length)
                          throw $.ioore(i);
                        vert = this._scalePt2$3(t14, contourMovements[i], bs);
                        t14 = vert.get$x();
                        t15 = vert.get$y();
                        t16 = t12.$add(amount, z);
                        $.add(this.vertices, $.Vector3$(t14, t15, t16));
                        ++i;
                    }
                h = 0;
              default:
                L12:
                  while (true)
                    switch (state0) {
                      case 0:
                        t14 = t4.get$length(holes);
                      case 30:
                        state0 = 0;
                        if (!$.CONSTANT1.$lt(h, t14))
                          break L12;
                        ahole = t4.$index(holes, h);
                        if (h >= holesMovements.length)
                          throw $.ioore(h);
                        oneHoleMovements = holesMovements[h];
                        t14 = $.getInterceptor$JSStringJSArray(ahole);
                        t15 = $.getInterceptor$JSStringJSArray(oneHoleMovements);
                        i = 0;
                      default:
                        L13:
                          while (true)
                            switch (state0) {
                              case 0:
                                t16 = t14.get$length(ahole);
                              case 31:
                                state0 = 0;
                                if (!$.CONSTANT1.$lt(i, t16))
                                  break L13;
                                vert = this._scalePt2$3(t14.$index(ahole, i), t15.$index(oneHoleMovements, i), bs);
                                t16 = vert.get$x();
                                t17 = vert.get$y();
                              case 32:
                                state0 = 0;
                              default:
                                if (state0 === 0 && t10) {
                                  t18 = t12.$add(amount, z);
                                  $.add(this.vertices, $.Vector3$(t16, t17, t18));
                                } else
                                  switch (state0) {
                                    case 0:
                                      t18 = t11.$index(extrudePts, t5.$sub(nSteps, 1)).get$y();
                                    case 33:
                                      state0 = 0;
                                      t18 = $.$$add(t17, t18);
                                      t17 = t11.$index(extrudePts, t5.$sub(nSteps, 1)).get$x();
                                    case 34:
                                      state0 = 0;
                                      t17 = $.$$add(t17, z);
                                      $.add(this.vertices, $.Vector3$(t16, t18, t17));
                                  }
                                ++i;
                            }
                        ++h;
                    }
                b = t13.$sub(b, 1);
            }
        t6 = new $.ExtrudeGeometry_addShape_f3(this, shape, material, uvgen, t3);
        t3 = new $.ExtrudeGeometry_addShape_f4(this, shape, extrudeMaterial, uvgen, t3);
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
        if (state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 0 && t2)
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$JSNumber(vlen);
              offset = t2.$mul(vlen, 0);
              i = 0;
            default:
              L14:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(i, flen))
                        break L14;
                      face = t7.$index(faces, i);
                    case 35:
                      state0 = 0;
                      t10 = $.getInterceptor$JSStringJSArray(face);
                      t11 = t10.$index(face, 2);
                    case 36:
                      state0 = 0;
                      t11 = $.$$add(t11, offset);
                      t13 = t10.$index(face, 1);
                    case 37:
                      state0 = 0;
                      t13 = $.$$add(t13, offset);
                      t10 = t10.$index(face, 0);
                    case 38:
                      state0 = 0;
                      t6.call$4(t11, t13, $.$$add(t10, offset), true);
                      ++i;
                  }
              t8 = t1.bevelSegments_0;
            case 39:
              state0 = 0;
              offset = t2.$mul(vlen, t5.$add(nSteps, $.$$mul(t8, 2)));
              i = 0;
            case 40:
            case 41:
            case 42:
            case 43:
              L15:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(i, flen))
                        break L15;
                      face = t7.$index(faces, i);
                    case 40:
                      state0 = 0;
                      t5 = $.getInterceptor$JSStringJSArray(face);
                      t8 = t5.$index(face, 0);
                    case 41:
                      state0 = 0;
                      t8 = $.$$add(t8, offset);
                      t11 = t5.$index(face, 1);
                    case 42:
                      state0 = 0;
                      t11 = $.$$add(t11, offset);
                      t5 = t5.$index(face, 2);
                    case 43:
                      state0 = 0;
                      t6.call$4(t8, t11, $.$$add(t5, offset), false);
                      ++i;
                  }
          }
        else
          switch (state0) {
            case 0:
              i = 0;
            case 44:
              L16:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(i, flen))
                        break L16;
                      face = t7.$index(faces, i);
                    case 44:
                      state0 = 0;
                      t5 = $.getInterceptor$JSStringJSArray(face);
                      t6.call$4(t5.$index(face, 2), t5.$index(face, 1), t5.$index(face, 0), true);
                      ++i;
                  }
              t2 = $.getInterceptor$JSNumber(vlen);
              i = 0;
            default:
              L17:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(i, flen))
                        break L17;
                      face = t7.$index(faces, i);
                    case 45:
                      state0 = 0;
                      t8 = $.getInterceptor$JSStringJSArray(face);
                      t10 = t8.$index(face, 0);
                    case 46:
                      state0 = 0;
                      t10 = $.$$add(t10, t2.$mul(vlen, nSteps));
                      t12 = t8.$index(face, 1);
                    case 47:
                      state0 = 0;
                      t12 = $.$$add(t12, t2.$mul(vlen, nSteps));
                      t8 = t8.$index(face, 2);
                    case 48:
                      state0 = 0;
                      t6.call$4(t10, t12, $.$$add(t8, t2.$mul(vlen, nSteps)), false);
                      ++i;
                  }
          }
        t1 = new $.ExtrudeGeometry_addShape_sidewalls(t1, nSteps, vlen, t3);
        t1.call$2(vertices, 0);
        t9 = t9.get$length(vertices);
        if (typeof t9 !== "number")
          throw $.iae(t9);
        layeroffset = 0 + t9;
        h = 0;
      case 49:
        var divisions, j, k, t19;
        L18:
          while (true)
            switch (state0) {
              case 0:
                t2 = t4.get$length(holes);
              case 49:
                state0 = 0;
                if (!$.CONSTANT1.$lt(h, t2))
                  break L18;
                ahole = t4.$index(holes, h);
                t1.call$2(ahole, layeroffset);
                t2 = $.length(ahole);
                if (typeof t2 !== "number")
                  throw $.iae(t2);
                layeroffset += t2;
                ++h;
            }
    }
  },
  addShape$13: function(shape, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial) {
    return this.addShape$14$UVGenerator(shape, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial, null);
  },
  ExtrudeGeometry$13$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$frames$material$steps: function(shapes, amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, frames, material, steps) {
    var t1;
    if (bevelSize == null)
      bevelSize = $.$$sub(bevelThickness, 2);
    t1 = this.shapes;
    if (t1 == null) {
      this.shapes = [];
      return;
    }
    this.shapebb = $.last(t1).getBoundingBox$0();
    this.addShapeList$13(this.shapes, amount, bevelThickness, bevelSize, bevelSegments, bevelEnabled, curveSegments, steps, bendPath, extrudePath, frames, material, extrudeMaterial);
    this.computeCentroids$0();
    this.computeFaceNormals$0();
  }
};

$$.ExtrudeGeometryWorldUVGenerator = {"": "Object;",
  generateTopUV$6: function(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC) {
    var ax, ay, bx, by, cx, cy, t1, t2;
    ax = $.$$index(geometry.get$vertices(), indexA).get$x();
    ay = $.$$index(geometry.get$vertices(), indexA).get$y();
    bx = $.$$index(geometry.get$vertices(), indexB).get$x();
    by = $.$$index(geometry.get$vertices(), indexB).get$y();
    cx = $.$$index(geometry.get$vertices(), indexC).get$x();
    cy = $.$$index(geometry.get$vertices(), indexC).get$y();
    if (typeof ay !== "number")
      throw $.iae(ay);
    t1 = $.UV$(ax, 1 - ay);
    if (typeof by !== "number")
      throw $.iae(by);
    t2 = $.UV$(bx, 1 - by);
    if (typeof cy !== "number")
      throw $.iae(cy);
    return [t1, t2, $.UV$(cx, 1 - cy)];
  },
  generateBottomUV$6: function(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC) {
    return this.generateTopUV$6(geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC);
  },
  generateSideWallUV$10: function(geometry, extrudedShape, wallContour, extrudeOptions, indexA, indexB, indexC, indexD, stepIndex, stepsLength) {
    var ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz;
    ax = $.$$index(geometry.get$vertices(), indexA).get$x();
    ay = $.$$index(geometry.get$vertices(), indexA).get$y();
    az = $.$$index(geometry.get$vertices(), indexA).get$z();
    bx = $.$$index(geometry.get$vertices(), indexB).get$x();
    by = $.$$index(geometry.get$vertices(), indexB).get$y();
    bz = $.$$index(geometry.get$vertices(), indexB).get$z();
    cx = $.$$index(geometry.get$vertices(), indexC).get$x();
    cy = $.$$index(geometry.get$vertices(), indexC).get$y();
    cz = $.$$index(geometry.get$vertices(), indexC).get$z();
    dx = $.$$index(geometry.get$vertices(), indexD).get$x();
    dy = $.$$index(geometry.get$vertices(), indexD).get$y();
    dz = $.$$index(geometry.get$vertices(), indexD).get$z();
    if ($.$$lt($.abs($.$$sub(ay, by)), 0.01) === true)
      return [$.UV$(ax, az), $.UV$(bx, bz), $.UV$(cx, cz), $.UV$(dx, dz)];
    else
      return [$.UV$(ay, az), $.UV$(by, bz), $.UV$(cy, cz), $.UV$(dy, dz)];
  }
};

$$.TubeGeometry = {"": "Geometry;path>,segments,nSegments,radius>,segmentsRadius,closed,grid,tangents>,normals>,binormals>,debug,id,name,vertices,colors,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
  _vert$3: function(x, y, z) {
    var t1;
    $.add(this.vertices, $.Vector3$(x, y, z));
    t1 = $.length(this.vertices);
    if (typeof t1 !== "number")
      return this._vert$3$bailout(1, t1);
    return t1 - 1;
  },
  _vert$3$bailout: function(state0, t1) {
    return $.$$sub(t1, 1);
  },
  _frenetFrames$3: function(ppath, psegments, pclosed) {
    var t1, normal, vec, mat, t2, i, t3, t4, theta;
    t1 = {};
    this.path = ppath;
    this.segments = psegments;
    this.closed = pclosed;
    $.Vector3$(0, 0, 0);
    normal = $.Vector3$(0, 0, 0);
    $.Vector3$(0, 0, 0);
    vec = $.Vector3$(0, 0, 0);
    mat = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    t1.smallest_0 = null;
    t1.tx_1 = null;
    t1.ty_2 = null;
    t1.tz_3 = null;
    t2 = this.segments;
    if (typeof t2 !== "number")
      return this._frenetFrames$3$bailout(1, vec, t2, t1, mat, normal);
    this.segments = [];
    for (i = 1; i <= t2; ++i)
      $.add(this.segments, i / t2);
    this.nSegments = $.length(this.segments);
    t2 = $.$$add(this.nSegments, 1);
    if (typeof t2 !== "number")
      return this._frenetFrames$3$bailout(2, vec, t2, t1, mat, normal);
    this.tangents = $.List_List(t2);
    this.normals = $.List_List(t2);
    this.binormals = $.List_List(t2);
    for (i = 0; i < t2; ++i) {
      t3 = this.tangents;
      t4 = this.path;
      $.$$indexSet(t3, i, i === 0 ? t4.getTangentAt$1(0) : t4.getTangentAt$1($.$$index(this.segments, i - 1)));
      $.$$index(this.tangents, i).normalize$0();
    }
    new $.TubeGeometry__frenetFrames__initialNormal1(this);
    new $.TubeGeometry__frenetFrames__initialNormal2(this, 0.0001);
    new $.TubeGeometry__frenetFrames__initialNormal3(t1, this, normal, vec).call$0();
    for (theta = null, i = 1; i < t2; ++i) {
      t1 = this.normals;
      t3 = i - 1;
      $.$$indexSet(t1, i, $.$$index(t1, t3).clone$0());
      t1 = this.binormals;
      $.$$indexSet(t1, i, $.$$index(t1, t3).clone$0());
      vec.cross$2($.$$index(this.tangents, t3), $.$$index(this.tangents, i));
      if ($.$$gt(vec.length$0(), 0.0001) === true) {
        vec.normalize$0();
        theta = Math.acos($.checkNum($.$$index(this.tangents, t3).dot$1($.$$index(this.tangents, i))));
        mat.makeRotationAxis$2(vec, theta).multiplyVector3$1($.$$index(this.normals, i));
      }
      $.$$index(this.binormals, i).cross$2($.$$index(this.tangents, i), $.$$index(this.normals, i));
    }
    if (this.closed === true) {
      t1 = t2 - 1;
      theta = Math.acos($.checkNum($.$$index(this.normals, 0).dot$1($.$$index(this.normals, t1)))) / t1;
      if ($.$$gt($.$$index(this.tangents, 0).dot$1(vec.cross$2($.$$index(this.normals, 0), $.$$index(this.normals, t1))), 0) === true)
        theta = -theta;
      for (i = 1; i < t2; ++i) {
        mat.makeRotationAxis$2($.$$index(this.tangents, i), theta * i).multiplyVector3$1($.$$index(this.normals, i));
        $.$$index(this.binormals, i).cross$2($.$$index(this.tangents, i), $.$$index(this.normals, i));
      }
    }
  },
  _frenetFrames$3$bailout: function(state0, vec, t2, t1, mat, normal) {
    switch (state0) {
      case 0:
        t1 = {};
        this.path = ppath;
        this.segments = psegments;
        this.closed = pclosed;
        $.Vector3$(0, 0, 0);
        normal = $.Vector3$(0, 0, 0);
        $.Vector3$(0, 0, 0);
        vec = $.Vector3$(0, 0, 0);
        mat = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        t1.smallest_0 = null;
        t1.tx_1 = null;
        t1.ty_2 = null;
        t1.tz_3 = null;
        t2 = this.segments;
      case 1:
        state0 = 0;
        if (typeof t2 === "number") {
          this.segments = [];
          for (i = 1; $.CONSTANT1.$le(i, t2); ++i) {
            t3 = this.segments;
            if (typeof t2 !== "number")
              throw $.iae(t2);
            $.add(t3, i / t2);
          }
        }
        this.nSegments = $.length(this.segments);
        t2 = $.$$add(this.nSegments, 1);
      case 2:
        var i, t3, t4, theta;
        state0 = 0;
        this.tangents = $.List_List(t2);
        this.normals = $.List_List(t2);
        this.binormals = $.List_List(t2);
        for (i = 0; $.CONSTANT1.$lt(i, t2); ++i) {
          t3 = this.tangents;
          t4 = this.path;
          $.$$indexSet(t3, i, i === 0 ? t4.getTangentAt$1(0) : t4.getTangentAt$1($.$$index(this.segments, i - 1)));
          $.$$index(this.tangents, i).normalize$0();
        }
        new $.TubeGeometry__frenetFrames__initialNormal1(this);
        new $.TubeGeometry__frenetFrames__initialNormal2(this, 0.0001);
        new $.TubeGeometry__frenetFrames__initialNormal3(t1, this, normal, vec).call$0();
        for (theta = null, i = 1; $.CONSTANT1.$lt(i, t2); ++i) {
          t1 = this.normals;
          t3 = i - 1;
          $.$$indexSet(t1, i, $.$$index(t1, t3).clone$0());
          t1 = this.binormals;
          $.$$indexSet(t1, i, $.$$index(t1, t3).clone$0());
          vec.cross$2($.$$index(this.tangents, t3), $.$$index(this.tangents, i));
          if ($.$$gt(vec.length$0(), 0.0001) === true) {
            vec.normalize$0();
            theta = Math.acos($.checkNum($.$$index(this.tangents, t3).dot$1($.$$index(this.tangents, i))));
            mat.makeRotationAxis$2(vec, theta).multiplyVector3$1($.$$index(this.normals, i));
          }
          $.$$index(this.binormals, i).cross$2($.$$index(this.tangents, i), $.$$index(this.normals, i));
        }
        if (this.closed === true) {
          t1 = $.getInterceptor$JSNumber(t2);
          theta = Math.acos($.checkNum($.$$index(this.normals, 0).dot$1($.$$index(this.normals, t1.$sub(t2, 1)))));
          t3 = t1.$sub(t2, 1);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          theta /= t3;
          if ($.$$gt($.$$index(this.tangents, 0).dot$1(vec.cross$2($.$$index(this.normals, 0), $.$$index(this.normals, t1.$sub(t2, 1)))), 0) === true)
            theta = -theta;
          for (i = 1; $.CONSTANT1.$lt(i, t2); ++i) {
            mat.makeRotationAxis$2($.$$index(this.tangents, i), theta * i).multiplyVector3$1($.$$index(this.normals, i));
            $.$$index(this.binormals, i).cross$2($.$$index(this.tangents, i), $.$$index(this.normals, i));
          }
        }
    }
  },
  TubeGeometry$FrenetFrames$3: function(path, segments, closed) {
    this._frenetFrames$3(path, segments, closed);
  },
  TubeGeometry$6: function(path, segments, radius, segmentsRadius, closed, debug) {
    var t1, t2, pos2, t4, t3, t6, t8, t9, v, cx, cy, i, t5, pos, t7, t10, j, t11, t12, t13, t14, t15, t16, t17, t18, t19, t21, b, c, d, uva, uvb, uvc, uvd, ip, jp, a, ip0, j0;
    t1 = debug === true;
    if (t1)
      this.debug = $.Object3D$();
    t2 = $.$$add(segments, 1);
    if (typeof t2 !== "number")
      return this.TubeGeometry$6$bailout(1, path, segments, t1, t2, closed);
    pos2 = $.Vector3$(0, 0, 0);
    this._frenetFrames$3(path, segments, closed);
    t4 = this.grid;
    if (typeof t4 !== "object" || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.$isJavaScriptIndexingBehavior())
      return this.TubeGeometry$6$bailout(2, path, null, t1, t2, closed, t4, pos2);
    $.CONSTANT0.set$length(t4, t2);
    t3 = this.segmentsRadius;
    if (typeof t3 !== "number")
      return this.TubeGeometry$6$bailout(3, path, null, t1, t2, closed, t4, pos2, $.CONSTANT0, t3);
    t6 = this.radius;
    if (typeof t6 !== "number")
      return this.TubeGeometry$6$bailout(4, path, null, t1, t2, closed, t4, pos2, $.CONSTANT0, t3, t6);
    t8 = -t6;
    t9 = t2 - 1;
    v = null;
    cx = null;
    cy = null;
    i = 0;
    for (; i < t2; ++i) {
      t5 = $.List_List(t3);
      if (i >= t4.length)
        throw $.ioore(i);
      t4[i] = t5;
      pos = path.getPointAt$1(i / t9);
      t5 = $.$$index(this.tangents, i);
      t7 = $.$$index(this.normals, i);
      t10 = $.$$index(this.binormals, i);
      if (t1) {
        $.add(this.debug, $.ArrowHelper$(t5, pos, t6, 255));
        $.add(this.debug, $.ArrowHelper$(t7, pos, t6, 16711680));
        $.add(this.debug, $.ArrowHelper$(t10, pos, t6, 65280));
      }
      for (j = 0; j < t3; ++j) {
        v = j / t3 * 2 * 3.141592653589793;
        cx = t8 * $.cos(v);
        cy = t6 * $.sin(v);
        pos2.copy$1(pos);
        t5 = pos2.x;
        t11 = t7.get$x();
        if (typeof t11 !== "number")
          throw $.iae(t11);
        t12 = t10.get$x();
        if (typeof t12 !== "number")
          throw $.iae(t12);
        pos2.x = $.$$add(t5, cx * t11 + cy * t12);
        t13 = pos2.y;
        t14 = t7.get$y();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t15 = t10.get$y();
        if (typeof t15 !== "number")
          throw $.iae(t15);
        pos2.y = $.$$add(t13, cx * t14 + cy * t15);
        t16 = pos2.z;
        t17 = t7.get$z();
        if (typeof t17 !== "number")
          throw $.iae(t17);
        t18 = t10.get$z();
        if (typeof t18 !== "number")
          throw $.iae(t18);
        pos2.z = $.$$add(t16, cx * t17 + cy * t18);
        if (i >= t4.length)
          throw $.ioore(i);
        t19 = t4[i];
        t21 = this._vert$3(pos2.x, pos2.y, pos2.z);
        if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
          return this.TubeGeometry$6$bailout(5, path, null, t1, t2, closed, t4, pos2, $.CONSTANT0, t3, t6, $.CONSTANT3, $.CONSTANT3, pos, cy, j, $.CONSTANT0, v, t19, t7, i, t10, cx);
        if (j >= t19.length)
          throw $.ioore(j);
        t19[j] = t21;
      }
    }
    for (t1 = this.faceVertexUvs, t2 = closed === true, b = null, c = null, d = null, uva = null, uvb = null, uvc = null, uvd = null, i = 0, ip = null, jp = null, a = null; $.CONSTANT1.$lt(i, this.nSegments); i = ip0)
      for (ip0 = i + 1, j = 0; j < t3; j = j0) {
        if (t2) {
          t5 = this.nSegments;
          if (typeof t5 !== "number")
            throw $.iae(t5);
          ip = $.CONSTANT1.$mod(ip0, t5);
        } else
          ip = ip0;
        j0 = j + 1;
        jp = $.CONSTANT1.$mod(j0, t3);
        t5 = t4.length;
        if (i >= t5)
          throw $.ioore(i);
        t6 = t4[i];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
          return this.TubeGeometry$6$bailout(6, null, null, t1, t2, null, t4, null, null, t3, null, null, null, null, null, j, $.CONSTANT0, null, null, null, i, null, null, j0, ip, ip0, jp, t6);
        if (j >= t6.length)
          throw $.ioore(j);
        a = t6[j];
        if (ip !== (ip | 0))
          throw $.iae(ip);
        if (ip < 0 || ip >= t5)
          throw $.ioore(ip);
        t6 = t4[ip];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
          return this.TubeGeometry$6$bailout(7, null, null, t1, t2, null, t4, null, null, t3, null, null, null, null, null, j, $.CONSTANT0, null, null, null, i, null, null, j0, ip, ip0, jp, t6, a);
        if (j >= t6.length)
          throw $.ioore(j);
        b = t6[j];
        c = t6[jp];
        if (i >= t4.length)
          throw $.ioore(i);
        d = $.$$index(t4[i], jp);
        t6 = this.nSegments;
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t9 = j / t3;
        uva = $.UV$(i / t6, t9);
        t10 = this.nSegments;
        if (typeof t10 !== "number")
          throw $.iae(t10);
        uvb = $.UV$(ip0 / t10, t9);
        t9 = this.nSegments;
        if (typeof t9 !== "number")
          throw $.iae(t9);
        t11 = j0 / t3;
        uvc = $.UV$(ip0 / t9, t11);
        t12 = this.nSegments;
        if (typeof t12 !== "number")
          throw $.iae(t12);
        uvd = $.UV$(i / t12, t11);
        $.add(this.faces, $.Face4$(a, b, c, d, null, null, null));
        if (0 >= t1.length)
          throw $.ioore(0);
        $.add(t1[0], [uva, uvb, uvc, uvd]);
      }
    this.computeCentroids$0();
    this.computeFaceNormals$0();
    this.computeVertexNormals$0();
  },
  TubeGeometry$6$bailout: function(state0, path, segments, t1, t2, closed, t4, pos2, t6, t3, t7, t9, t11, pos, cy, j, t10, v, t14, t12, i, t13, cx, j0, ip, ip0, jp, t5, a) {
    switch (state0) {
      case 0:
        t1 = debug === true;
        if (t1)
          this.debug = $.Object3D$();
        t2 = $.$$add(segments, 1);
      case 1:
        state0 = 0;
        pos2 = $.Vector3$(0, 0, 0);
        this._frenetFrames$3(path, segments, closed);
        t4 = this.grid;
      case 2:
        state0 = 0;
        t6 = $.getInterceptor$JSArray(t4);
        t6.set$length(t4, t2);
        t3 = this.segmentsRadius;
      case 3:
        state0 = 0;
        t7 = this.radius;
      case 4:
        state0 = 0;
        t9 = $.getInterceptor$JSNumber(t7);
        t10 = $.getInterceptor$JSStringJSArray(t4);
        t11 = $.getInterceptor$JSNumber(t2);
        v = null;
        cx = null;
        cy = null;
        i = 0;
      case 5:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT1.$lt(i, t2))
                  break L0;
                t6.$indexSet(t4, i, $.List_List(t3));
                t5 = t11.$sub(t2, 1);
                if (typeof t5 !== "number")
                  throw $.iae(t5);
                pos = path.getPointAt$1(i / t5);
                t8 = $.$$index(this.tangents, i);
                t12 = $.$$index(this.normals, i);
                t13 = $.$$index(this.binormals, i);
                if (t1) {
                  $.add(this.debug, $.ArrowHelper$(t8, pos, t7, 255));
                  $.add(this.debug, $.ArrowHelper$(t12, pos, t7, 16711680));
                  $.add(this.debug, $.ArrowHelper$(t13, pos, t7, 65280));
                }
                j = 0;
              case 5:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT1.$lt(j, t3))
                          break L1;
                        if (typeof t3 !== "number")
                          throw $.iae(t3);
                        v = j / t3 * 2 * 3.141592653589793;
                        cx = $.$$mul(t9.$negate(t7), $.cos(v));
                        cy = t9.$mul(t7, $.sin(v));
                        pos2.copy$1(pos);
                        t5 = $.getInterceptor$JSNumber(cx);
                        t8 = $.getInterceptor$JSNumber(cy);
                        pos2.x = $.$$add(pos2.x, $.$$add(t5.$mul(cx, t12.get$x()), t8.$mul(cy, t13.get$x())));
                        pos2.y = $.$$add(pos2.y, $.$$add(t5.$mul(cx, t12.get$y()), t8.$mul(cy, t13.get$y())));
                        pos2.z = $.$$add(pos2.z, $.$$add(t5.$mul(cx, t12.get$z()), t8.$mul(cy, t13.get$z())));
                        t14 = t10.$index(t4, i);
                      case 5:
                        state0 = 0;
                        $.$$indexSet(t14, j, this._vert$3(pos2.x, pos2.y, pos2.z));
                        ++j;
                    }
                ++i;
            }
        t1 = this.faceVertexUvs;
        t2 = closed === true;
        b = null;
        c = null;
        d = null;
        uva = null;
        uvb = null;
        uvc = null;
        uvd = null;
        i = 0;
        ip = null;
        jp = null;
        a = null;
      default:
        var t8, b, c, d, uva, uvb, uvc, uvd;
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT1.$lt(i, this.nSegments))
                  break L2;
                ip0 = i + 1;
                j = 0;
              default:
                L3:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT1.$lt(j, t3))
                          break L3;
                        if (t2) {
                          t5 = this.nSegments;
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          ip = $.CONSTANT1.$mod(ip0, t5);
                        } else
                          ip = ip0;
                        j0 = j + 1;
                        if (typeof t3 !== "number")
                          throw $.iae(t3);
                        jp = $.CONSTANT1.$mod(j0, t3);
                        t5 = t10.$index(t4, i);
                      case 6:
                        state0 = 0;
                        a = $.$$index(t5, j);
                        t5 = t10.$index(t4, ip);
                      case 7:
                        state0 = 0;
                        b = $.$$index(t5, j);
                        c = $.$$index(t10.$index(t4, ip), jp);
                        d = $.$$index(t10.$index(t4, i), jp);
                        t5 = this.nSegments;
                        if (typeof t5 !== "number")
                          throw $.iae(t5);
                        t8 = j / t3;
                        uva = $.UV$(i / t5, t8);
                        t9 = this.nSegments;
                        if (typeof t9 !== "number")
                          throw $.iae(t9);
                        uvb = $.UV$(ip0 / t9, t8);
                        t8 = this.nSegments;
                        if (typeof t8 !== "number")
                          throw $.iae(t8);
                        t11 = j0 / t3;
                        uvc = $.UV$(ip0 / t8, t11);
                        t12 = this.nSegments;
                        if (typeof t12 !== "number")
                          throw $.iae(t12);
                        uvd = $.UV$(i / t12, t11);
                        $.add(this.faces, $.Face4$(a, b, c, d, null, null, null));
                        if (0 >= t1.length)
                          throw $.ioore(0);
                        $.add(t1[0], [uva, uvb, uvc, uvd]);
                        j = j0;
                    }
                i = ip0;
            }
        this.computeCentroids$0();
        this.computeFaceNormals$0();
        this.computeVertexNormals$0();
    }
  }
};

$$.Curve = {"": "Object;needsUpdate=",
  getPointAt$1: function(u) {
    return this.getPoint$1(this.getUtoTmapping$1(u));
  },
  getPoints$2: function(divisions, closedPath) {
    var pts, d;
    if (typeof divisions !== "number")
      return this.getPoints$2$bailout(1, divisions);
    pts = [];
    for (d = 0; d <= divisions; ++d)
      pts.push(this.getPoint$1(d / divisions));
    return pts;
  },
  getPoints$2$bailout: function(state0, divisions) {
    var pts, d;
    if (divisions == null)
      divisions = 5;
    pts = [];
    for (d = 0; $.CONSTANT1.$le(d, divisions); ++d) {
      if (typeof divisions !== "number")
        throw $.iae(divisions);
      pts.push(this.getPoint$1(d / divisions));
    }
    return pts;
  },
  getPoints$0: function() {
    return this.getPoints$2(null, false);
  },
  getPoints$1: function(divisions) {
    return this.getPoints$2(divisions, false);
  },
  getSpacedPoints$2: function(divisions, closedPath) {
    var pts, d;
    if (typeof divisions !== "number")
      return this.getSpacedPoints$2$bailout0(1, divisions);
    pts = [];
    for (d = 0; d <= divisions; ++d)
      pts.push(this.getPointAt$1(d / divisions));
    return pts;
  },
  getSpacedPoints$2$bailout0: function(state0, divisions) {
    var pts, d;
    pts = [];
    for (d = 0; $.CONSTANT1.$le(d, divisions); ++d) {
      if (typeof divisions !== "number")
        throw $.iae(divisions);
      pts.push(this.getPointAt$1(d / divisions));
    }
    return pts;
  },
  getSpacedPoints$1: function(divisions) {
    return this.getSpacedPoints$2(divisions, false);
  },
  getUPoints$2: function(uList, closedPath) {
    var pts, t1;
    pts = [];
    for (t1 = $.iterator(uList); t1.moveNext$0() === true;)
      pts.push(this.getPointAt$1(t1.get$current()));
    return pts;
  },
  getUPoints$1: function(uList) {
    return this.getUPoints$2(uList, false);
  },
  get$length: function() {
    return $.last(this.getLengths$0());
  },
  getLengths$1$divisions: function(divisions) {
    var t1, cache, last, sum, p, current, distance;
    if (typeof divisions !== "number")
      return this.getLengths$1$divisions$bailout(1, divisions);
    if (typeof divisions !== "number")
      return this.getLengths$1$divisions$bailout(2, divisions);
    t1 = this.cacheArcLengths;
    if (!(t1 == null) && $.$$eq($.length(t1), divisions + 1) === true && this.needsUpdate !== true)
      return this.cacheArcLengths;
    this.needsUpdate = false;
    cache = [];
    last = this.getPoint$1(0);
    cache.push(0);
    for (sum = 0, p = 1; p <= divisions; ++p, last = current) {
      current = this.getPoint$1(p / divisions);
      distance = typeof current === "object" && current !== null && !!current.$isVector3 ? current.distanceTo$1($.propertyTypeCast(last, "$isVector3")) : $.propertyTypeCast(current, "$isVector2").distanceTo$1($.propertyTypeCast(last, "$isVector2"));
      if (typeof distance !== "number")
        throw $.iae(distance);
      sum += distance;
      cache.push(sum);
    }
    this.cacheArcLengths = cache;
    return cache;
  },
  getLengths$1$divisions$bailout: function(state0, divisions) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (divisions == null) {
          divisions = this._arcLengthDivisions;
          divisions = !(divisions == null) ? divisions : 200;
        }
      case 2:
        var t1, cache, last, sum, p, current, distance;
        state0 = 0;
        t1 = this.cacheArcLengths;
        if (!(t1 == null) && $.$$eq($.length(t1), $.$$add(divisions, 1)) === true && this.needsUpdate !== true)
          return this.cacheArcLengths;
        this.needsUpdate = false;
        cache = [];
        last = this.getPoint$1(0);
        cache.push(0);
        for (sum = 0, p = 1; $.CONSTANT1.$le(p, divisions); ++p, last = current) {
          if (typeof divisions !== "number")
            throw $.iae(divisions);
          current = this.getPoint$1(p / divisions);
          distance = typeof current === "object" && current !== null && !!current.$isVector3 ? current.distanceTo$1($.propertyTypeCast(last, "$isVector3")) : $.propertyTypeCast(current, "$isVector2").distanceTo$1($.propertyTypeCast(last, "$isVector2"));
          if (typeof distance !== "number")
            throw $.iae(distance);
          sum += distance;
          cache.push(sum);
        }
        this.cacheArcLengths = cache;
        return cache;
    }
  },
  getLengths$0: function() {
    return this.getLengths$1$divisions(null);
  },
  getUtoTmapping$2$distance: function(u, distance) {
    var arcLengths, t2, il, targetArcLength, high, high0, low, high1, t1, lengthBefore, t3;
    if (typeof distance !== "number")
      return this.getUtoTmapping$2$distance$bailout(1, u, distance);
    arcLengths = this.getLengths$0();
    if (typeof arcLengths !== "string" && (typeof arcLengths !== "object" || arcLengths === null || arcLengths.constructor !== Array && !arcLengths.$isJavaScriptIndexingBehavior()))
      return this.getUtoTmapping$2$distance$bailout(2, u, distance, arcLengths);
    t2 = $.getInterceptor$JSStringJSArray(arcLengths);
    il = arcLengths.length;
    targetArcLength = distance;
    if (typeof targetArcLength !== "number")
      return this.getUtoTmapping$2$distance$bailout(3, null, null, arcLengths, targetArcLength, t2, il);
    high = il - 1;
    for (high0 = high, low = 0; low <= high0;) {
      high1 = $.toInt($.CONSTANT6.floor$0(low + (high0 - low) / 2));
      if (high1 !== (high1 | 0))
        throw $.iae(high1);
      if (high1 < 0 || high1 >= arcLengths.length)
        throw $.ioore(high1);
      t1 = $.$$sub(arcLengths[high1], targetArcLength);
      t2 = $.getInterceptor$JSNumber(t1);
      if (t2.$lt(t1, 0) === true) {
        low = high1 + 1;
        continue;
      } else if (t2.$gt(t1, 0) === true) {
        high0 = high1 - 1;
        continue;
      } else {
        high0 = high1;
        break;
      }
    }
    if (high0 !== (high0 | 0))
      throw $.iae(high0);
    if (high0 < 0 || high0 >= arcLengths.length)
      throw $.ioore(high0);
    if ($.$$eq(arcLengths[high0], targetArcLength) === true)
      return high0 / high;
    t1 = arcLengths.length;
    if (high0 >= t1)
      throw $.ioore(high0);
    lengthBefore = arcLengths[high0];
    t2 = high0 + 1;
    if (t2 >= t1)
      throw $.ioore(t2);
    t3 = $.$$sub(arcLengths[t2], lengthBefore);
    if (typeof lengthBefore !== "number")
      throw $.iae(lengthBefore);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (high0 + (targetArcLength - lengthBefore) / t3) / high;
  },
  getUtoTmapping$2$distance$bailout: function(state0, u, distance, arcLengths, targetArcLength, t2, il, t3, high) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        arcLengths = this.getLengths$0();
      case 2:
        state0 = 0;
        t2 = $.getInterceptor$JSStringJSArray(arcLengths);
        il = t2.get$length(arcLengths);
        targetArcLength = !(distance == null) ? distance : $.$$mul(u, t2.$index(arcLengths, $.$$sub(il, 1)));
      case 3:
        state0 = 0;
        t3 = $.getInterceptor$JSNumber(il);
        high = t3.$sub(il, 1);
      case 4:
        var low, t1, high0, t4, lengthBefore;
        state0 = 0;
        for (low = 0; t1 = $.getInterceptor$JSNumber(low), t1.$le(low, high) === true;) {
          high0 = $.toInt($.floor(t1.$add(low, $.$$div($.$$sub(high, low), 2))));
          t4 = $.$$sub(t2.$index(arcLengths, high0), targetArcLength);
          t1 = $.getInterceptor$JSNumber(t4);
          if (t1.$lt(t4, 0) === true) {
            low = $.$$add(high0, 1);
            continue;
          } else if (t1.$gt(t4, 0) === true) {
            high = $.$$sub(high0, 1);
            continue;
          } else {
            high = high0;
            break;
          }
        }
        if ($.$$eq(t2.$index(arcLengths, high), targetArcLength) === true)
          return $.$$div(high, t3.$sub(il, 1));
        lengthBefore = t2.$index(arcLengths, high);
        t1 = $.getInterceptor$JSNumber(high);
        t4 = $.$$sub(t2.$index(arcLengths, t1.$add(high, 1)), lengthBefore);
        return $.$$div(t1.$add(high, $.$$div($.$$sub(targetArcLength, lengthBefore), t4)), t3.$sub(il, 1));
    }
  },
  getUtoTmapping$1: function(u) {
    return this.getUtoTmapping$2$distance(u, null);
  },
  getTangent$1: function(t) {
    var t1, t10, t2, pt1;
    t1 = $.getInterceptor$JSNumber(t);
    t10 = t1.$sub(t, 0.0001);
    t2 = t1.$add(t, 0.0001);
    t1 = $.$$lt(t10, 0) === true ? 0 : t10;
    if ($.$$gt(t2, 1) === true)
      t2 = 1;
    pt1 = this.getPoint$1(t1);
    return this.getPoint$1(t2).clone$0().subSelf$1(pt1).normalize$0();
  },
  getTangentAt$1: function(u) {
    return this.getTangent$1(this.getUtoTmapping$1(u));
  }
};

$$.Curve2D = {"": "Curve;",
  getNormalVector$1: function(t) {
    var vec, t1;
    vec = this.getTangent$1(t);
    t1 = vec.get$y();
    if (typeof t1 !== "number")
      return this.getNormalVector$1$bailout(1, vec, t1);
    return $.Vector2$(-t1, vec.get$x());
  },
  getNormalVector$1$bailout: function(state0, vec, t1) {
    return $.Vector2$($.$$negate(t1), vec.get$x());
  }
};

$$.Curve3D = {"": "Curve;"};

$$.CurvePath = {"": "Curve;curves,_bends,autoClose,cacheLengths,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  add$1: function(curve) {
    return this.curves.push(curve);
  },
  getPoint$1: function(t) {
    var t1, curveLengths, i, t2, t3, curve;
    t1 = $.$$mul(t, $.length(this));
    if (typeof t1 !== "number")
      return this.getPoint$1$bailout(1, t1);
    curveLengths = this.getCurveLengths$0();
    if (typeof curveLengths !== "string" && (typeof curveLengths !== "object" || curveLengths === null || curveLengths.constructor !== Array && !curveLengths.$isJavaScriptIndexingBehavior()))
      return this.getPoint$1$bailout(2, t1, curveLengths);
    for (i = 0; i < curveLengths.length;) {
      if ($.$$ge(curveLengths[i], t1) === true) {
        if (i >= curveLengths.length)
          throw $.ioore(i);
        t2 = $.$$sub(curveLengths[i], t1);
        t3 = this.curves;
        if (i >= t3.length)
          throw $.ioore(i);
        curve = t3[i];
        t2 = $.$$div(t2, $.length(curve));
        if (typeof t2 !== "number")
          throw $.iae(t2);
        return curve.getPointAt$1(1 - t2);
      }
      ++i;
    }
    return;
  },
  getPoint$1$bailout: function(state0, t1, curveLengths) {
    switch (state0) {
      case 0:
        t1 = $.$$mul(t, $.length(this));
      case 1:
        state0 = 0;
        curveLengths = this.getCurveLengths$0();
      case 2:
        var t2, i, t3, t4, curve;
        state0 = 0;
        for (t2 = $.getInterceptor$JSStringJSArray(curveLengths), i = 0; $.CONSTANT1.$lt(i, t2.get$length(curveLengths));) {
          if ($.$$ge(t2.$index(curveLengths, i), t1) === true) {
            t3 = $.$$sub(t2.$index(curveLengths, i), t1);
            t4 = this.curves;
            if (i >= t4.length)
              throw $.ioore(i);
            curve = t4[i];
            t3 = $.$$div(t3, $.length(curve));
            if (typeof t3 !== "number")
              throw $.iae(t3);
            return curve.getPointAt$1(1 - t3);
          }
          ++i;
        }
        return;
    }
  },
  get$length: function() {
    return $.last(this.getCurveLengths$0());
  },
  getCurveLengths$0: function() {
    var t1, lengths, il, sums, i, t2;
    t1 = this.cacheLengths;
    if (!(t1 == null) && $.$$eq($.length(t1), this.curves.length) === true)
      return this.cacheLengths;
    lengths = [];
    t1 = this.curves;
    il = t1.length;
    for (sums = 0, i = 0; i < il; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = $.length(t1[i]);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      sums += t2;
      lengths.push(sums);
    }
    this.cacheLengths = lengths;
    return lengths;
  },
  getBoundingBox$0: function() {
    var points, t2, v3, sum, maxX, maxY, maxZ, minX, minY, minZ, i, p, ret, t1;
    points = this.getPoints$0();
    if (typeof points !== "string" && (typeof points !== "object" || points === null || points.constructor !== Array && !points.$isJavaScriptIndexingBehavior()))
      return this.getBoundingBox$0$bailout(1, points);
    if (0 >= points.length)
      throw $.ioore(0);
    t2 = points[0];
    v3 = typeof t2 === "object" && t2 !== null && !!t2.$isVector3;
    sum = v3 ? $.Vector3$(0, 0, 0) : $.Vector2$(0, 0);
    for (maxX = (-1/0), maxY = (-1/0), maxZ = null, minX = (1/0), minY = (1/0), minZ = null, i = 0; i < points.length; ++i) {
      p = points[i];
      if ($.$$gt(p.get$x(), maxX) === true)
        maxX = p.get$x();
      else if ($.$$lt(p.get$x(), minX) === true)
        minX = p.get$x();
      if ($.$$gt(p.get$y(), maxY) === true)
        maxY = p.get$y();
      else if ($.$$lt(p.get$y(), minY) === true)
        minY = p.get$y();
      if (v3) {
        $.propertyTypeCast(p, "$isVector3");
        if ($.$$gt(p.get$z(), maxZ) === true)
          maxZ = p.get$z();
        else if ($.$$lt(p.get$z(), minZ) === true)
          minZ = p.get$z();
        $.propertyTypeCast(sum, "$isVector3").addSelf$1(p);
      } else
        $.propertyTypeCast(sum, "$isVector2").addSelf$1(p);
    }
    ret = $.makeLiteralMap(["minX", minX, "minY", minY, "maxX", maxX, "maxY", maxY, "centroid", sum.divideScalar$1(null)]);
    if (v3) {
      t1 = $.getInterceptor$JSArray(ret);
      t1.$indexSet(ret, "maxZ", maxZ);
      t1.$indexSet(ret, "minZ", minZ);
    }
    return ret;
  },
  getBoundingBox$0$bailout: function(state0, points) {
    var t2, t3, v3, sum, maxX, maxY, maxZ, minX, minY, minZ, i, p, ret, t1;
    t2 = $.getInterceptor$JSStringJSArray(points);
    t3 = t2.$index(points, 0);
    v3 = typeof t3 === "object" && t3 !== null && !!t3.$isVector3;
    sum = v3 ? $.Vector3$(0, 0, 0) : $.Vector2$(0, 0);
    for (maxX = (-1/0), maxY = (-1/0), maxZ = null, minX = (1/0), minY = (1/0), minZ = null, i = 0; $.CONSTANT1.$lt(i, t2.get$length(points)); ++i) {
      p = t2.$index(points, i);
      if ($.$$gt(p.get$x(), maxX) === true)
        maxX = p.get$x();
      else if ($.$$lt(p.get$x(), minX) === true)
        minX = p.get$x();
      if ($.$$gt(p.get$y(), maxY) === true)
        maxY = p.get$y();
      else if ($.$$lt(p.get$y(), minY) === true)
        minY = p.get$y();
      if (v3) {
        $.propertyTypeCast(p, "$isVector3");
        if ($.$$gt(p.get$z(), maxZ) === true)
          maxZ = p.get$z();
        else if ($.$$lt(p.get$z(), minZ) === true)
          minZ = p.get$z();
        $.propertyTypeCast(sum, "$isVector3").addSelf$1(p);
      } else
        $.propertyTypeCast(sum, "$isVector2").addSelf$1(p);
    }
    ret = $.makeLiteralMap(["minX", minX, "minY", minY, "maxX", maxX, "maxY", maxY, "centroid", sum.divideScalar$1(null)]);
    if (v3) {
      t1 = $.getInterceptor$JSArray(ret);
      t1.$indexSet(ret, "maxZ", maxZ);
      t1.$indexSet(ret, "minZ", minZ);
    }
    return ret;
  },
  addWrapPath$1: function(bendpath) {
    return this._bends.push(bendpath);
  },
  getTransformedPoints$2$bends: function(segments, bends) {
    var oldPts, i;
    if (typeof bends !== "object" || bends === null || bends.constructor !== Array || !!bends.fixed$length)
      return this.getTransformedPoints$2$bends$bailout(1, segments, bends);
    oldPts = this.getPoints$1(segments);
    for (i = 0; i < bends.length; ++i)
      oldPts = this.getWrapPoints$2(oldPts, bends[i]);
    return oldPts;
  },
  getTransformedPoints$2$bends$bailout: function(state0, segments, bends, t2, oldPts, i, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        oldPts = this.getPoints$1(segments);
        if (bends == null)
          bends = this._bends;
        t1 = $.getInterceptor$JSStringJSArray(bends);
        i = 0;
      case 2:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(bends);
              case 2:
                state0 = 0;
                if (!$.CONSTANT1.$lt(i, t2))
                  break L0;
                oldPts = this.getWrapPoints$2(oldPts, t1.$index(bends, i));
                ++i;
            }
        return oldPts;
    }
  },
  getTransformedPoints$1: function(segments) {
    return this.getTransformedPoints$2$bends(segments, null);
  },
  getTransformedSpacedPoints$2: function(segments, bends) {
    var oldPts, i;
    if (typeof bends !== "object" || bends === null || bends.constructor !== Array || !!bends.fixed$length)
      return this.getTransformedSpacedPoints$2$bailout(1, segments, bends);
    oldPts = this.getSpacedPoints$1(segments);
    for (i = 0; i < bends.length; ++i)
      oldPts = this.getWrapPoints$2(oldPts, bends[i]);
    return oldPts;
  },
  getTransformedSpacedPoints$2$bailout: function(state0, segments, bends, t2, i, oldPts, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        oldPts = this.getSpacedPoints$1(segments);
        if (bends == null)
          bends = this._bends;
        t1 = $.getInterceptor$JSStringJSArray(bends);
        i = 0;
      case 2:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(bends);
              case 2:
                state0 = 0;
                if (!$.CONSTANT1.$lt(i, t2))
                  break L0;
                oldPts = this.getWrapPoints$2(oldPts, t1.$index(bends, i));
                ++i;
            }
        return oldPts;
    }
  },
  getTransformedSpacedPoints$1: function(segments) {
    return this.getTransformedSpacedPoints$2(segments, null);
  },
  getWrapPoints$2: function(oldPts, path) {
    var bounds, t1, i, p, oldX, oldY, t3, xNorm, pathPt, normal, t5, t7, t9, t11;
    if (typeof oldPts !== "string" && (typeof oldPts !== "object" || oldPts === null || oldPts.constructor !== Array && !oldPts.$isJavaScriptIndexingBehavior()))
      return this.getWrapPoints$2$bailout(1, oldPts, path);
    bounds = this.getBoundingBox$0();
    for (t1 = $.getInterceptor$JSStringJSArray(oldPts), i = 0; i < oldPts.length; ++i) {
      p = oldPts[i];
      oldX = p.get$x();
      if (typeof oldX !== "number")
        return this.getWrapPoints$2$bailout(3, oldPts, path, null, bounds, t1, i, p, oldX);
      oldY = p.get$y();
      t3 = bounds.get$maxX();
      if (typeof t3 !== "number")
        return this.getWrapPoints$2$bailout(4, oldPts, path, null, bounds, t1, i, p, oldX, oldY, t3);
      xNorm = path.getUtoTmapping$2(oldX / t3, oldX);
      pathPt = path.getPoint$1(xNorm);
      normal = path.getNormalVector$1(xNorm).multiplyScalar$1(oldY);
      t5 = pathPt.get$x();
      t7 = normal.get$x();
      if (typeof t5 !== "number")
        return this.getWrapPoints$2$bailout(5, oldPts, path, null, bounds, t1, i, p, null, null, null, pathPt, normal, t5);
      if (typeof t7 !== "number")
        return this.getWrapPoints$2$bailout(6, oldPts, path, null, bounds, t1, i, p, null, null, null, pathPt, normal, t5, t7);
      p.set$x(t5 + t7);
      t9 = pathPt.get$y();
      t11 = normal.get$y();
      if (typeof t9 !== "number")
        return this.getWrapPoints$2$bailout(7, oldPts, path, null, bounds, t1, i, p, null, null, null, null, normal, null, null, t9);
      if (typeof t11 !== "number")
        return this.getWrapPoints$2$bailout(8, oldPts, path, null, bounds, t1, i, p, null, null, null, null, null, null, null, t9, t11);
      p.set$y(t9 + t11);
    }
    return oldPts;
  },
  getWrapPoints$2$bailout: function(state0, oldPts, path, t2, bounds, t1, i, p, oldX, oldY, t3, pathPt, normal, t5, t7, t9, t11) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        bounds = this.getBoundingBox$0();
        t1 = $.getInterceptor$JSStringJSArray(oldPts);
        i = 0;
      default:
        var xNorm;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(oldPts);
              case 2:
                state0 = 0;
                if (!$.CONSTANT1.$lt(i, t2))
                  break L0;
                p = t1.$index(oldPts, i);
                oldX = p.get$x();
              case 3:
                state0 = 0;
                oldY = p.get$y();
                t3 = bounds.get$maxX();
              case 4:
                state0 = 0;
                xNorm = path.getUtoTmapping$2($.$$div(oldX, t3), oldX);
                pathPt = path.getPoint$1(xNorm);
                normal = path.getNormalVector$1(xNorm).multiplyScalar$1(oldY);
                t5 = pathPt.get$x();
              case 5:
                state0 = 0;
                t7 = normal.get$x();
              case 6:
                state0 = 0;
                p.set$x($.$$add(t5, t7));
                t9 = pathPt.get$y();
              case 7:
                state0 = 0;
                t11 = normal.get$y();
              case 8:
                state0 = 0;
                p.set$y($.$$add(t9, t11));
                ++i;
            }
        return oldPts;
    }
  }
};

$$.PathAction = {"": "Object;action>,args>"};

$$.Path = {"": "CurvePath;useSpacedPoints,_points,actions,curves,_bends,autoClose,cacheLengths,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  _fromPoints$1: function(vectors) {
    var t1, vlen, v;
    if (typeof vectors !== "string" && (typeof vectors !== "object" || vectors === null || vectors.constructor !== Array && !vectors.$isJavaScriptIndexingBehavior()))
      return this._fromPoints$1$bailout(1, vectors);
    if (0 >= vectors.length)
      throw $.ioore(0);
    t1 = vectors[0];
    this.moveTo$2(t1.get$x(), t1.get$y());
    for (vlen = vectors.length, v = 1; v < vlen; ++v) {
      if (v >= vectors.length)
        throw $.ioore(v);
      t1 = vectors[v];
      this.lineTo$2(t1.get$x(), t1.get$y());
    }
  },
  _fromPoints$1$bailout: function(state0, vectors, t1, vlen) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(vectors);
        this.moveTo$2(t1.$index(vectors, 0).get$x(), t1.$index(vectors, 0).get$y());
        vlen = t1.get$length(vectors);
      case 2:
        var v;
        state0 = 0;
        v = 1;
        for (; $.CONSTANT1.$lt(v, vlen); ++v)
          this.lineTo$2(t1.$index(vectors, v).get$x(), t1.$index(vectors, v).get$y());
    }
  },
  addAction$2: function(action, args) {
    return this.actions.push($.PathAction$(action, args));
  },
  moveTo$2: function(x, y) {
    return this.addAction$2("moveTo", [x, y]);
  },
  lineTo$2: function(x, y) {
    var args, lastargs, t2, t3, x0, curve;
    args = [x, y];
    lastargs = $.CONSTANT0.get$last(this.actions).get$args();
    if (typeof lastargs !== "string" && (typeof lastargs !== "object" || lastargs === null || lastargs.constructor !== Array && !lastargs.$isJavaScriptIndexingBehavior()))
      return this.lineTo$2$bailout(1, x, y, lastargs, args);
    t2 = lastargs.length;
    t3 = t2 - 2;
    if (t3 < 0)
      throw $.ioore(t3);
    x0 = lastargs[t3];
    t3 = t2 - 1;
    if (t3 < 0)
      throw $.ioore(t3);
    curve = $.LineCurve$($.Vector2$(x0, lastargs[t3]), $.Vector2$(x, y));
    this.curves.push(curve);
    this.addAction$2("lineTo", args);
  },
  lineTo$2$bailout: function(state0, x, y, lastargs, args, t2, t3, t5, x0) {
    switch (state0) {
      case 0:
        args = [x, y];
        lastargs = $.CONSTANT0.get$last(this.actions).get$args();
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$JSStringJSArray(lastargs);
        t3 = t2.get$length(lastargs);
      case 2:
        state0 = 0;
        x0 = t2.$index(lastargs, $.$$sub(t3, 2));
        t5 = t2.get$length(lastargs);
      case 3:
        var curve;
        state0 = 0;
        curve = $.LineCurve$($.Vector2$(x0, t2.$index(lastargs, $.$$sub(t5, 1))), $.Vector2$(x, y));
        this.curves.push(curve);
        this.addAction$2("lineTo", args);
    }
  },
  quadraticCurveTo$4: function(aCPx, aCPy, aX, aY) {
    var lastargs, t1, curve;
    lastargs = $.CONSTANT0.get$last(this.actions).get$args();
    t1 = $.getInterceptor$JSStringJSArray(lastargs);
    curve = $.QuadraticBezierCurve$($.Vector2$(t1.$index(lastargs, $.$$sub(t1.get$length(lastargs), 2)), t1.$index(lastargs, $.$$sub(t1.get$length(lastargs), 1))), $.Vector2$(aCPx, aCPy), $.Vector2$(aX, aY));
    this.curves.push(curve);
    this.addAction$2("quadraticCurveTo", [aCPx, aCPy, aX, aY]);
  },
  bezierCurveTo$6: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    var lastargs, t1, curve;
    lastargs = $.CONSTANT0.get$last(this.actions).get$args();
    t1 = $.getInterceptor$JSStringJSArray(lastargs);
    curve = $.CubicBezierCurve$($.Vector2$(t1.$index(lastargs, $.$$sub(t1.get$length(lastargs), 2)), t1.$index(lastargs, $.$$sub(t1.get$length(lastargs), 1))), $.Vector2$(aCP1x, aCP1y), $.Vector2$(aCP2x, aCP2y), $.Vector2$(aX, aY));
    this.curves.push(curve);
    this.addAction$2("bezierCurveTo", [aCP1x, aCP1y, aCP2x, aCP2y, aX, aY]);
  },
  arc$6: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    var t1, t2, t3, lastargs, t4, x0, y0;
    t1 = this.actions;
    t2 = t1.length;
    t3 = t2 - 1;
    if (t3 < 0)
      throw $.ioore(t3);
    lastargs = t1[t3].get$args();
    t4 = $.getInterceptor$JSStringJSArray(lastargs);
    x0 = t4.$index(lastargs, $.$$sub(t4.get$length(lastargs), 2));
    y0 = t4.$index(lastargs, $.$$sub(t4.get$length(lastargs), 1));
    if (typeof x0 !== "number")
      throw $.iae(x0);
    if (typeof y0 !== "number")
      throw $.iae(y0);
    this.absarc$6(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
  },
  absarc$6: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    this.absellipse$7(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
  },
  absellipse$7: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise) {
    var args, curve, lastPoint;
    args = [aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise];
    curve = $.EllipseCurve$(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise);
    this.curves.push(curve);
    lastPoint = curve.getPoint$1(aClockwise ? 1 : 0);
    args.push(lastPoint.get$x());
    args.push(lastPoint.get$y());
    this.addAction$2("ellipse", args);
  },
  getSpacedPoints$2: function(divisions, closedPath) {
    var points, i;
    if (typeof divisions !== "number")
      return this.getSpacedPoints$2$bailout(1, divisions);
    points = [];
    for (i = 0; i < divisions; ++i)
      points.push(this.getPoint$1(i / divisions));
    return points;
  },
  getSpacedPoints$2$bailout: function(state0, divisions) {
    var points, i;
    if (divisions == null)
      divisions = 40;
    points = [];
    for (i = 0; $.CONSTANT1.$lt(i, divisions); ++i) {
      if (typeof divisions !== "number")
        throw $.iae(divisions);
      points.push(this.getPoint$1(i / divisions));
    }
    return points;
  },
  getSpacedPoints$1: function(divisions) {
    return this.getSpacedPoints$2(divisions, false);
  },
  getPoints$2: function(divisions, closedPath) {
    var points, t1, t2, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0, laste, j, t, tx, ty, i, cpx, t3, item, action, args, t4, k, t5, t6, t7, spts, n, spline, aX, aY, aRadius, aStartAngle, tdivisions, t8, angle, xRadius, yRadius, t9, lastPoint;
    if (this.useSpacedPoints)
      return this.getSpacedPoints$2(divisions, closedPath);
    if (divisions == null)
      divisions = 12;
    points = [];
    for (t1 = this.actions, t2 = $.getInterceptor$JSNumber(divisions), cpy = null, cpx2 = null, cpy2 = null, cpx1 = null, cpy1 = null, cpx0 = null, cpy0 = null, laste = null, j = null, t = null, tx = null, ty = null, i = 0, cpx = null; t3 = t1.length, i < t3; ++i) {
      item = t1[i];
      action = item.get$action();
      args = item.get$args();
      switch (action) {
        case "moveTo":
          t3 = $.getInterceptor$JSStringJSArray(args);
          points.push($.Vector2$(t3.$index(args, 0), t3.$index(args, 1)));
          break;
        case "lineTo":
          t3 = $.getInterceptor$JSStringJSArray(args);
          points.push($.Vector2$(t3.$index(args, 0), t3.$index(args, 1)));
          break;
        case "quadraticCurveTo":
          t3 = $.getInterceptor$JSStringJSArray(args);
          cpx = t3.$index(args, 2);
          cpy = t3.$index(args, 3);
          cpx1 = t3.$index(args, 0);
          cpy1 = t3.$index(args, 1);
          t3 = points.length;
          if (t3 > 0) {
            laste = points[t3 - 1];
            cpx0 = laste.get$x();
            cpy0 = laste.get$y();
          } else {
            t3 = i - 1;
            if (t3 < 0 || t3 >= t1.length)
              throw $.ioore(t3);
            laste = t1[t3].get$args();
            t4 = $.getInterceptor$JSStringJSArray(laste);
            cpx0 = t4.$index(laste, $.$$sub(t4.get$length(laste), 2));
            cpy0 = t4.$index(laste, $.$$sub(t4.get$length(laste), 1));
          }
          for (j = 1; $.CONSTANT1.$le(j, divisions); ++j) {
            if (typeof divisions !== "number")
              throw $.iae(divisions);
            t = j / divisions;
            k = 1 - t;
            t3 = k * k;
            if (typeof cpx0 !== "number")
              throw $.iae(cpx0);
            t4 = 2 * k * t;
            if (typeof cpx1 !== "number")
              throw $.iae(cpx1);
            t5 = t * t;
            if (typeof cpx !== "number")
              throw $.iae(cpx);
            tx = t3 * cpx0 + t4 * cpx1 + t5 * cpx;
            if (typeof cpy0 !== "number")
              throw $.iae(cpy0);
            if (typeof cpy1 !== "number")
              throw $.iae(cpy1);
            if (typeof cpy !== "number")
              throw $.iae(cpy);
            ty = t3 * cpy0 + t4 * cpy1 + t5 * cpy;
            points.push($.Vector2$(tx, ty));
          }
          break;
        case "bezierCurveTo":
          t3 = $.getInterceptor$JSStringJSArray(args);
          cpx = t3.$index(args, 4);
          cpy = t3.$index(args, 5);
          cpx1 = t3.$index(args, 0);
          cpy1 = t3.$index(args, 1);
          cpx2 = t3.$index(args, 2);
          cpy2 = t3.$index(args, 3);
          t3 = points.length;
          if (t3 > 0) {
            laste = points[t3 - 1];
            cpx0 = laste.get$x();
            cpy0 = laste.get$y();
          } else {
            t3 = i - 1;
            if (t3 < 0 || t3 >= t1.length)
              throw $.ioore(t3);
            laste = t1[t3].get$args();
            t4 = $.getInterceptor$JSStringJSArray(laste);
            cpx0 = t4.$index(laste, $.$$sub(t4.get$length(laste), 2));
            cpy0 = t4.$index(laste, $.$$sub(t4.get$length(laste), 1));
          }
          for (j = 1; $.CONSTANT1.$le(j, divisions); ++j) {
            if (typeof divisions !== "number")
              throw $.iae(divisions);
            t = j / divisions;
            k = 1 - t;
            t3 = k * k * k;
            if (typeof cpx0 !== "number")
              throw $.iae(cpx0);
            t4 = 3 * k;
            t5 = t4 * k * t;
            if (typeof cpx1 !== "number")
              throw $.iae(cpx1);
            t6 = t4 * t * t;
            if (typeof cpx2 !== "number")
              throw $.iae(cpx2);
            t7 = t * t * t;
            if (typeof cpx !== "number")
              throw $.iae(cpx);
            tx = t3 * cpx0 + t5 * cpx1 + t6 * cpx2 + t7 * cpx;
            if (typeof cpy0 !== "number")
              throw $.iae(cpy0);
            if (typeof cpy1 !== "number")
              throw $.iae(cpy1);
            if (typeof cpy2 !== "number")
              throw $.iae(cpy2);
            if (typeof cpy !== "number")
              throw $.iae(cpy);
            ty = t3 * cpy0 + t5 * cpy1 + t6 * cpy2 + t7 * cpy;
            points.push($.Vector2$(tx, ty));
          }
          break;
        case "splineThru":
          t4 = i - 1;
          if (t4 < 0)
            throw $.ioore(t4);
          laste = t1[t4].get$args();
          t5 = $.getInterceptor$JSStringJSArray(laste);
          spts = [$.Vector2$(t5.$index(laste, $.$$sub(t5.get$length(laste), 2)), t5.$index(laste, $.$$sub(t5.get$length(laste), 1)))];
          t6 = $.getInterceptor$JSStringJSArray(args);
          n = t2.$mul(divisions, $.length(t6.$index(args, 0)));
          $.CONSTANT0.addAll$1(spts, t6.$index(args, 0));
          spline = $.SplineCurve$(spts);
          for (j = 1; $.CONSTANT1.$le(j, n); ++j) {
            if (typeof n !== "number")
              throw $.iae(n);
            points.push(spline.getPointAt$1(j / n));
          }
          break;
        case "arc":
          t4 = i - 1;
          if (t4 < 0)
            throw $.ioore(t4);
          laste = t1[t4].get$args();
          t5 = $.getInterceptor$JSStringJSArray(args);
          aX = t5.$index(args, 0);
          aY = t5.$index(args, 1);
          aRadius = t5.$index(args, 2);
          aStartAngle = t5.$index(args, 3);
          t6 = t5.$index(args, 5) !== true;
          t7 = $.$$sub(t5.$index(args, 4), aStartAngle);
          tdivisions = t2.$mul(divisions, 2);
          for (t3 = $.getInterceptor$JSNumber(aStartAngle), t4 = $.getInterceptor$JSNumber(aRadius), t5 = $.getInterceptor$JSNumber(aX), t8 = $.getInterceptor$JSNumber(aY), j = 1; $.CONSTANT1.$le(j, tdivisions); ++j) {
            if (typeof tdivisions !== "number")
              throw $.iae(tdivisions);
            t = j / tdivisions;
            if (t6)
              t = 1 - t;
            if (typeof t7 !== "number")
              throw $.iae(t7);
            angle = t3.$add(aStartAngle, t * t7);
            tx = t5.$add(aX, t4.$mul(aRadius, Math.cos($.checkNum(angle))));
            ty = t8.$add(aY, t4.$mul(aRadius, Math.sin($.checkNum(angle))));
            points.push($.Vector2$(tx, ty));
          }
          break;
        case "ellipse":
          t3 = $.getInterceptor$JSStringJSArray(args);
          aX = t3.$index(args, 0);
          aY = t3.$index(args, 1);
          xRadius = t3.$index(args, 2);
          yRadius = t3.$index(args, 3);
          aStartAngle = t3.$index(args, 4);
          t4 = t3.$index(args, 6) !== true;
          t5 = $.$$sub(t3.$index(args, 5), aStartAngle);
          tdivisions = t2.$mul(divisions, 2);
          for (t3 = $.getInterceptor$JSNumber(aStartAngle), t6 = $.getInterceptor$JSNumber(xRadius), t7 = $.getInterceptor$JSNumber(aX), t8 = $.getInterceptor$JSNumber(yRadius), t9 = $.getInterceptor$JSNumber(aY), j = 1; $.CONSTANT1.$le(j, tdivisions); ++j) {
            if (typeof tdivisions !== "number")
              throw $.iae(tdivisions);
            t = j / tdivisions;
            if (t4)
              t = 1 - t;
            if (typeof t5 !== "number")
              throw $.iae(t5);
            angle = t3.$add(aStartAngle, t * t5);
            tx = t7.$add(aX, t6.$mul(xRadius, Math.cos($.checkNum(angle))));
            ty = t9.$add(aY, t8.$mul(yRadius, Math.sin($.checkNum(angle))));
            points.push($.Vector2$(tx, ty));
          }
          break;
      }
    }
    t1 = points.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw $.ioore(t2);
    lastPoint = points[t2];
    t2 = lastPoint.get$x();
    if (0 >= t1)
      throw $.ioore(0);
    if ($.$$lt($.abs($.$$sub(t2, points[0].get$x())), 1e-10) === true) {
      t1 = lastPoint.get$y();
      if (0 >= points.length)
        throw $.ioore(0);
      t2 = $.$$lt($.abs($.$$sub(t1, points[0].get$y())), 1e-10) === true;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      if (0 >= points.length)
        throw $.ioore(0);
      points.pop();
    }
    if (closedPath === true) {
      if (0 >= points.length)
        throw $.ioore(0);
      points.push(points[0]);
    }
    return points;
  },
  getPoints$0: function() {
    return this.getPoints$2(null, false);
  },
  getPoints$1: function(divisions) {
    return this.getPoints$2(divisions, false);
  },
  Path$1: function(points) {
    if (!(points == null))
      this._fromPoints$1(points);
  }
};

$$.Shape = {"": "Path;holes,useSpacedPoints,_points,actions,curves,_bends,autoClose,cacheLengths,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  extrude$11$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$material$steps: function(amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, material, steps) {
    if (bevelSize == null)
      bevelSize = $.$$sub(bevelThickness, 2);
    return $.ExtrudeGeometry$([this], amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, null, material, steps);
  },
  extrude$5$amount$bevelEnabled$bevelSegments$extrudePath$steps: function(amount, bevelEnabled, bevelSegments, extrudePath, steps) {
    return this.extrude$11$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$material$steps(amount, null, bevelEnabled, bevelSegments, null, 6, 12, null, extrudePath, null, steps);
  },
  getPointsHoles$1: function(divisions) {
    var t1, il, holesPts, t2, i;
    t1 = this.holes;
    il = t1.length;
    holesPts = $.List_List$fixedLength(il, null);
    for (t2 = this._bends, i = 0; i < il; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      holesPts[i] = t1[i].getTransformedPoints$2$bends(divisions, t2);
    }
    return holesPts;
  },
  getSpacedPointsHoles$1: function(divisions) {
    var t1, il, holesPts, t2, i;
    t1 = this.holes;
    il = t1.length;
    holesPts = $.List_List$fixedLength(il, null);
    for (t2 = this._bends, i = 0; i < il; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      holesPts[i] = t1[i].getTransformedSpacedPoints$2(divisions, t2);
    }
    return holesPts;
  },
  extractAllPoints$1: function(divisions) {
    return $.makeLiteralMap(["shape", this.getTransformedPoints$1(divisions), "holes", this.getPointsHoles$1(divisions)]);
  },
  extractPoints$1$divisions: function(divisions) {
    if (this.useSpacedPoints)
      return this.extractAllSpacedPoints$1(divisions);
    return this.extractAllPoints$1(divisions);
  },
  extractPoints$0: function() {
    return this.extractPoints$1$divisions(null);
  },
  extractAllSpacedPoints$1: function(divisions) {
    return $.makeLiteralMap(["shape", this.getTransformedSpacedPoints$1(divisions), "holes", this.getSpacedPointsHoles$1(divisions)]);
  }
};

$$.LineCurve = {"": "Curve2D;v1,v2,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  getPoint$1: function(t) {
    var t1, t2, point;
    t1 = this.v2.clone$0();
    t2 = this.v1;
    point = t1.subSelf$1(t2);
    point.multiplyScalar$1(t).addSelf$1(t2);
    return point;
  },
  getPointAt$1: function(u) {
    return this.getPoint$1(u);
  },
  getTangent$1: function(t) {
    return this.v2.clone$0().subSelf$1(this.v1).normalize$0();
  }
};

$$.QuadraticBezierCurve = {"": "Curve2D;v0,v1,v2,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  getPoint$1: function(t) {
    var t1, t2, t3, t4, t5, t6, k, t7, t8, t9;
    t1 = this.v0;
    t2 = t1.x;
    t3 = this.v1;
    t4 = t3.x;
    t5 = this.v2;
    t6 = t5.x;
    if (typeof t !== "number")
      throw $.iae(t);
    k = 1 - t;
    t7 = k * k;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t8 = 2 * k * t;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t9 = t * t;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1 = t1.y;
    t3 = t3.y;
    t5 = t5.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    return $.Vector2$(t7 * t2 + t8 * t4 + t9 * t6, t7 * t1 + t8 * t3 + t9 * t5);
  },
  getTangent$1: function(t) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.v0;
    t2 = t1.x;
    t3 = this.v1;
    t4 = t3.x;
    t5 = this.v2;
    t6 = t5.x;
    if (typeof t !== "number")
      throw $.iae(t);
    t7 = 2 * (1 - t);
    t2 = $.$$sub(t4, t2);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t8 = 2 * t;
    t4 = $.$$sub(t6, t4);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t1 = t1.y;
    t3 = t3.y;
    t5 = t5.y;
    t1 = $.$$sub(t3, t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t3 = $.$$sub(t5, t3);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return $.Vector2$(t7 * t2 + t8 * t4, t7 * t1 + t8 * t3).normalize$0();
  }
};

$$.CubicBezierCurve = {"": "Curve2D;v0,v1,v2,v3,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  getPoint$1: function(t) {
    var t1, t2, t3, t4, t5, t6, t7, t8, k, t9, t10, t11, t12, t13;
    t1 = this.v0;
    t2 = t1.x;
    t3 = this.v1;
    t4 = t3.x;
    t5 = this.v2;
    t6 = t5.x;
    t7 = this.v3;
    t8 = t7.x;
    if (typeof t !== "number")
      throw $.iae(t);
    k = 1 - t;
    t9 = k * k * k;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t10 = 3 * k;
    t11 = t10 * k * t;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t12 = t10 * t * t;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t13 = t * t * t;
    if (typeof t8 !== "number")
      throw $.iae(t8);
    t1 = t1.y;
    t3 = t3.y;
    t5 = t5.y;
    t7 = t7.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    return $.Vector2$(t9 * t2 + t11 * t4 + t12 * t6 + t13 * t8, t9 * t1 + t11 * t3 + t12 * t5 + t13 * t7);
  },
  getTangent$1: function(t) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.v0;
    t2 = t1.x;
    t3 = this.v1;
    t4 = t3.x;
    t5 = this.v2;
    t6 = t5.x;
    t7 = this.v3;
    return $.Vector2$($.tangentCubicBezier(t, t2, t4, t6, t7.x), $.tangentCubicBezier(t, t1.y, t3.y, t5.y, t7.y)).normalize$0();
  }
};

$$.SplineCurve = {"": "Curve2D;points=,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  getPoint$1: function(t) {
    var v, c, t2, t4, t5, weight, t1, t3, t6, t7, t8, t9, t10, t12, t13, t14, t15, t16, t17, t18;
    v = $.Vector2$(0, 0);
    c = $.List_List$fixedLength(4, null);
    t2 = $.length(this.points);
    if (typeof t2 !== "number")
      return this.getPoint$1$bailout1(2, t, c, t2, v);
    if (typeof t !== "number")
      return this.getPoint$1$bailout1(1, t);
    t4 = (t2 - 1) * t;
    t5 = $.toInt($.CONSTANT3.floor$0(t4));
    if (typeof t5 !== "number")
      return this.getPoint$1$bailout1(3, null, c, null, v, $.CONSTANT3, t4, t5);
    weight = t4 - t5;
    if (t5 === 0)
      t1 = t5;
    else
      t1 = t5 - 1;
    c[0] = t1;
    c[1] = t5;
    t1 = $.length(this.points);
    if (typeof t1 !== "number")
      return this.getPoint$1$bailout1(4, null, c, t1, v, null, null, t5, weight, $.CONSTANT3);
    if (t5 > t1 - 2) {
      t1 = $.length(this.points);
      if (typeof t1 !== "number")
        return this.getPoint$1$bailout1(5, null, c, t1, v, null, null, t5, weight, $.CONSTANT3);
      --t1;
    } else
      t1 = t5 + 1;
    c[2] = t1;
    t1 = $.length(this.points);
    if (typeof t1 !== "number")
      return this.getPoint$1$bailout1(6, null, c, t1, v, null, null, t5, weight, $.CONSTANT3);
    if (t5 > t1 - 3) {
      t1 = $.length(this.points);
      if (typeof t1 !== "number")
        return this.getPoint$1$bailout1(7, null, c, null, v, null, null, null, weight, t1);
      --t1;
    } else
      t1 = t5 + 2;
    c[3] = t1;
    t1 = this.points;
    t3 = c[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.getPoint$1$bailout1(8, null, c, null, v, null, null, null, weight, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t4 = t1[t3].get$x();
    t5 = c[1];
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t1.length)
      throw $.ioore(t5);
    t6 = t1[t5].get$x();
    t7 = c[2];
    if (t7 !== (t7 | 0))
      throw $.iae(t7);
    if (t7 < 0 || t7 >= t1.length)
      throw $.ioore(t7);
    t8 = t1[t7].get$x();
    t9 = c[3];
    if (t9 !== (t9 | 0))
      throw $.iae(t9);
    if (t9 < 0 || t9 >= t1.length)
      throw $.ioore(t9);
    v.x = $.interpolate(t4, t6, t8, t1[t9].get$x(), weight);
    t10 = this.points;
    t12 = c[0];
    if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !t10.$isJavaScriptIndexingBehavior()))
      return this.getPoint$1$bailout1(12, null, c, null, v, null, null, null, weight, null, null, null, null, null, t10);
    if (t12 !== (t12 | 0))
      throw $.iae(t12);
    if (t12 < 0 || t12 >= t10.length)
      throw $.ioore(t12);
    t13 = t10[t12].get$y();
    t14 = c[1];
    if (t14 !== (t14 | 0))
      throw $.iae(t14);
    if (t14 < 0 || t14 >= t10.length)
      throw $.ioore(t14);
    t15 = t10[t14].get$y();
    t16 = c[2];
    if (t16 !== (t16 | 0))
      throw $.iae(t16);
    if (t16 < 0 || t16 >= t10.length)
      throw $.ioore(t16);
    t17 = t10[t16].get$y();
    t18 = c[3];
    if (t18 !== (t18 | 0))
      throw $.iae(t18);
    if (t18 < 0 || t18 >= t10.length)
      throw $.ioore(t18);
    v.y = $.interpolate(t13, t15, t17, t10[t18].get$y(), weight);
    return v;
  },
  getPoint$1$bailout1: function(state0, t, c, t2, v, t5, t4, t6, weight, t1, t3, t7, t9, t10, t12, t15, t14, t18, t17, t20, t21) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        v = $.Vector2$(0, 0);
        c = $.List_List$fixedLength(4, null);
        t2 = $.length(this.points);
      case 2:
        state0 = 0;
        t4 = $.$$mul($.$$sub(t2, 1), t);
        t5 = $.getInterceptor$JSNumber(t4);
        t6 = $.toInt(t5.floor$0(t4));
      case 3:
        state0 = 0;
        weight = t5.$sub(t4, t6);
        t1 = $.getInterceptor(t6);
        c[0] = t1.$eq(t6, 0) === true ? t6 : t1.$sub(t6, 1);
        c[1] = t6;
        t2 = $.length(this.points);
      case 4:
        state0 = 0;
      case 5:
        if (state0 === 5 || state0 === 0 && t1.$gt(t6, $.$$sub(t2, 2)) === true)
          switch (state0) {
            case 0:
              t2 = $.length(this.points);
            case 5:
              state0 = 0;
              t2 = $.$$sub(t2, 1);
          }
        else
          t2 = t1.$add(t6, 1);
        c[2] = t2;
        t2 = $.length(this.points);
      case 6:
        state0 = 0;
      case 7:
        if (state0 === 7 || state0 === 0 && t1.$gt(t6, $.$$sub(t2, 3)) === true)
          switch (state0) {
            case 0:
              t1 = $.length(this.points);
            case 7:
              state0 = 0;
              t1 = $.$$sub(t1, 1);
          }
        else
          t1 = t1.$add(t6, 2);
        c[3] = t1;
        t1 = this.points;
      case 8:
        state0 = 0;
        t3 = $.$$index(t1, c[0]).get$x();
        t4 = this.points;
      case 9:
        state0 = 0;
        t6 = $.$$index(t4, c[1]).get$x();
        t7 = this.points;
      case 10:
        state0 = 0;
        t9 = $.$$index(t7, c[2]).get$x();
        t10 = this.points;
      case 11:
        state0 = 0;
        v.x = $.interpolate(t3, t6, t9, $.$$index(t10, c[3]).get$x(), weight);
        t12 = this.points;
      case 12:
        state0 = 0;
        t14 = $.$$index(t12, c[0]).get$y();
        t15 = this.points;
      case 13:
        state0 = 0;
        t17 = $.$$index(t15, c[1]).get$y();
        t18 = this.points;
      case 14:
        state0 = 0;
        t20 = $.$$index(t18, c[2]).get$y();
        t21 = this.points;
      case 15:
        state0 = 0;
        v.y = $.interpolate(t14, t17, t20, $.$$index(t21, c[3]).get$y(), weight);
        return v;
    }
  },
  SplineCurve$1: function(points) {
    if (this.points == null)
      this.points = [];
  }
};

$$.EllipseCurve = {"": "Curve2D;aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  getPoint$1: function(t) {
    var t1, t2, t3, angle;
    t1 = this.aEndAngle;
    t2 = this.aStartAngle;
    if (!this.aClockwise) {
      if (typeof t !== "number")
        throw $.iae(t);
      t = 1 - t;
    }
    t3 = $.$$mul(t, t1 - t2);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    angle = t2 + t3;
    return $.Vector2$(this.aX + this.xRadius * Math.cos($.checkNum(angle)), this.aY + this.yRadius * Math.sin($.checkNum(angle)));
  }
};

$$.LineCurve3 = {"": "Curve3D;v1,v2,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  getPoint$1: function(t) {
    var r, t1, t2;
    r = $.Vector3$(0, 0, 0);
    t1 = this.v2;
    t2 = this.v1;
    r.sub$2(t1, t2);
    r.multiplyScalar$1(t);
    r.addSelf$1(t2);
    return r;
  },
  $isLineCurve3: true
};

$$.SplineCurve3 = {"": "Curve3D;points=,_arcLengthDivisions,cacheArcLengths,needsUpdate",
  getPoint$1: function(t) {
    var v, c, t2, t4, t5, weight, t1, t3, t6;
    v = $.Vector3$(0, 0, 0);
    c = $.List_List$fixedLength(4, null);
    t2 = $.length(this.points);
    if (typeof t2 !== "number")
      return this.getPoint$1$bailout0(2, t, t2, c, v);
    if (typeof t !== "number")
      return this.getPoint$1$bailout0(1, t);
    t4 = (t2 - 1) * t;
    t5 = $.toInt($.CONSTANT3.floor$0(t4));
    if (typeof t5 !== "number")
      return this.getPoint$1$bailout0(3, null, null, c, v, $.CONSTANT3, t4, t5);
    weight = t4 - t5;
    if (t5 === 0)
      t1 = t5;
    else
      t1 = t5 - 1;
    c[0] = t1;
    c[1] = t5;
    t1 = $.length(this.points);
    if (typeof t1 !== "number")
      return this.getPoint$1$bailout0(4, null, t1, c, v, null, null, t5, weight, $.CONSTANT3);
    if (t5 > t1 - 2) {
      t1 = $.length(this.points);
      if (typeof t1 !== "number")
        return this.getPoint$1$bailout0(5, null, t1, c, v, null, null, t5, weight, $.CONSTANT3);
      --t1;
    } else
      t1 = t5 + 1;
    c[2] = t1;
    t1 = $.length(this.points);
    if (typeof t1 !== "number")
      return this.getPoint$1$bailout0(6, null, t1, c, v, null, null, t5, weight, $.CONSTANT3);
    if (t5 > t1 - 3) {
      t1 = $.length(this.points);
      if (typeof t1 !== "number")
        return this.getPoint$1$bailout0(7, null, null, c, v, null, null, null, weight, t1);
      --t1;
    } else
      t1 = t5 + 2;
    c[3] = t1;
    t1 = this.points;
    t3 = c[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.getPoint$1$bailout0(8, null, null, c, v, null, null, null, weight, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t3 = t1[t3];
    t4 = c[1];
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t1.length)
      throw $.ioore(t4);
    t4 = t1[t4];
    t5 = c[2];
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t1.length)
      throw $.ioore(t5);
    t5 = t1[t5];
    t6 = c[3];
    if (t6 !== (t6 | 0))
      throw $.iae(t6);
    if (t6 < 0 || t6 >= t1.length)
      throw $.ioore(t6);
    t6 = t1[t6];
    v.x = $.interpolate(t3.get$x(), t4.get$x(), t5.get$x(), t6.get$x(), weight);
    v.y = $.interpolate(t3.get$y(), t4.get$y(), t5.get$y(), t6.get$y(), weight);
    v.z = $.interpolate(t3.get$z(), t4.get$z(), t5.get$z(), t6.get$z(), weight);
    return v;
  },
  getPoint$1$bailout0: function(state0, t, t2, c, v, t5, t4, t6, weight, t1, t3, t7) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        v = $.Vector3$(0, 0, 0);
        c = $.List_List$fixedLength(4, null);
        t2 = $.length(this.points);
      case 2:
        state0 = 0;
        t4 = $.$$mul($.$$sub(t2, 1), t);
        t5 = $.getInterceptor$JSNumber(t4);
        t6 = $.toInt(t5.floor$0(t4));
      case 3:
        state0 = 0;
        weight = t5.$sub(t4, t6);
        t1 = $.getInterceptor(t6);
        c[0] = t1.$eq(t6, 0) === true ? t6 : t1.$sub(t6, 1);
        c[1] = t6;
        t2 = $.length(this.points);
      case 4:
        state0 = 0;
      case 5:
        if (state0 === 5 || state0 === 0 && t1.$gt(t6, $.$$sub(t2, 2)) === true)
          switch (state0) {
            case 0:
              t2 = $.length(this.points);
            case 5:
              state0 = 0;
              t2 = $.$$sub(t2, 1);
          }
        else
          t2 = t1.$add(t6, 1);
        c[2] = t2;
        t2 = $.length(this.points);
      case 6:
        state0 = 0;
      case 7:
        if (state0 === 7 || state0 === 0 && t1.$gt(t6, $.$$sub(t2, 3)) === true)
          switch (state0) {
            case 0:
              t1 = $.length(this.points);
            case 7:
              state0 = 0;
              t1 = $.$$sub(t1, 1);
          }
        else
          t1 = t1.$add(t6, 2);
        c[3] = t1;
        t1 = this.points;
      case 8:
        state0 = 0;
        t1 = $.$$index(t1, c[0]);
        t3 = this.points;
      case 9:
        state0 = 0;
        t3 = $.$$index(t3, c[1]);
        t5 = this.points;
      case 10:
        state0 = 0;
        t5 = $.$$index(t5, c[2]);
        t7 = this.points;
      case 11:
        state0 = 0;
        t7 = $.$$index(t7, c[3]);
        v.x = $.interpolate(t1.get$x(), t3.get$x(), t5.get$x(), t7.get$x(), weight);
        v.y = $.interpolate(t1.get$y(), t3.get$y(), t5.get$y(), t7.get$y(), weight);
        v.z = $.interpolate(t1.get$z(), t3.get$z(), t5.get$z(), t7.get$z(), weight);
        return v;
    }
  },
  SplineCurve3$1: function(points) {
    if (this.points == null)
      this.points = [];
  }
};

$$.ArrowHelper = {"": "Object3D;line,cone,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,__data",
  setDirection$1: function(dir) {
    var axis, radians;
    axis = $.Vector3$(0, 1, 0).crossSelf$1(dir);
    radians = Math.acos($.checkNum($.Vector3$(0, 1, 0).dot$1(dir.clone$0().normalize$0())));
    this.matrix = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1).makeRotationAxis$2(axis.normalize$0(), radians);
    this.rotation.setEulerFromRotationMatrix$2(this.matrix, this.eulerOrder);
  },
  setLength$1: function(length) {
    return this.scale.setValues$3(length, length, length);
  },
  ArrowHelper$4: function(dir, origin, length, hex) {
    var lineGeometry = $.Geometry$();
    $.add(lineGeometry.vertices, $.Vector3$(0, 0, 0));
    $.add(lineGeometry.vertices, $.Vector3$(0, 1, 0));
    this.line = $.Line$(lineGeometry, $.LineBasicMaterial$(0, 205, 100, 204, 1, hex, true, true, true, "round", "round", 1, "", 1, false, false, 0, 0, 0, false, 0, true), 0);
    this.add$1(this.line);
    this.cone = $.Mesh$($.CylinderGeometry$(0, 0.05, 0.25, 5, 1, false), $.MeshBasicMaterial$(0, 205, 100, 204, 1, hex, 0, true, true, null, true, null, null, false, "", 1, false, false, 0, 0, 1, 0.98, 2, 0, false, null, false, 0, true, false, "round", "round", 1));
    this.cone.get$position().setValues$3(0, 1, 0);
    this.add$1(this.cone);
    if (!(origin == null))
      this.position = origin;
    this.setDirection$1(dir);
    this.setLength$1(length);
  }
};

$$.DirectionalLight = {"": "Light;_liblib2$_position,target,intensity>,distance>,_castShadow,onlyShadow>,_shadowCameraLeft,_shadowCameraRight,_shadowCameraTop,_shadowCameraBottom,_shadowCameraVisible,_shadowBias,_shadowDarkness,_shadowMapWidth,_shadowMapHeight,_shadowMap,_shadowMapSize,_shadowCamera,_shadowMatrix,color,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,__data",
  DirectionalLight$3: function(hex, intensity, distance) {
    this._liblib2$_position = $.Vector3$(0, 1, 0);
    this.target = $.Object3D$();
    this._castShadow = false;
    this.onlyShadow = false;
    this._shadowCameraLeft = -500;
    this._shadowCameraRight = 500;
    this._shadowCameraTop = 500;
    this._shadowCameraBottom = -500;
    this._shadowCameraVisible = false;
    this._shadowBias = 0;
    this._shadowDarkness = 0.5;
    this._shadowMapWidth = 512;
    this._shadowMapHeight = 512;
    this._shadowMap = null;
    this._shadowMapSize = null;
    this._shadowCamera = null;
    this._shadowMatrix = null;
  },
  $isDirectionalLight: true
};

$$.Light = {"": "Object3D;color>", $isLight: true};

$$.Material = {"": "Object;name>,id=,side>,opacity>,blending>,blendSrc>,blendDst>,blendEquation>,alphaTest>,polygonOffset>,polygonOffsetFactor>,polygonOffsetUnits>,transparent=,depthTest>,depthWrite>,visible>,needsUpdate=",
  blendEquation$1: function(arg0) {
    return this.blendEquation.call$1(arg0);
  },
  polygonOffset$2: function(arg0, arg1) {
    return this.polygonOffset.call$2(arg0, arg1);
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = $.makeLiteralMap([]);
    return this.__data;
  },
  $index: function(key) {
    var t1 = this.get$_data();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout8(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    return t1[key];
  },
  $$index$bailout8: function(state0, key, t1) {
    return $.$$index(t1, key);
  },
  $indexSet: function(key, value) {
    var t1 = this.get$_data();
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout4(1, key, value, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = value;
    return value;
  },
  $$indexSet$bailout4: function(state0, key, value, t1) {
    $.$$indexSet(t1, key, value);
    return value;
  }
};

$$.MeshBasicMaterial = {"": "Material;color>,map>,lightMap>,specularMap>,envMap>,combine>,reflectivity>,refractionRatio>,shading>,wireframe>,wireframeLinewidth>,wireframeLinecap,wireframeLinejoin,skinning>,morphTargets>,vertexColors>,fog>,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data", $isMeshBasicMaterial: true};

$$.LineBasicMaterial = {"": "Material;color>,linewidth>,linecap,linejoin,fog>,vertexColors>,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data", $isLineBasicMaterial: true};

$$.MeshLambertMaterial = {"": "Material;_parameters,color>,ambient>,emissive>,wrapAround>,wrapRGB>,map>,lightMap>,specularMap>,envMap>,combine>,reflectivity>,refractionRatio>,shading>,wireframe>,wireframeLinewidth>,wireframeLinecap,wireframeLinejoin,skinning>,morphTargets>,morphNormals>,vertexColors>,fog>,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data", $isMeshLambertMaterial: true};

$$.Mesh = {"": "Object3D;geometry>,material>,morphTargetBase>,morphTargetForcedOrder>,morphTargetInfluences>,_morphTargetDictionary,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,__data",
  Mesh$2: function(geometry, material) {
    var t1, m;
    if (this.material == null)
      this.material = $.MeshBasicMaterial$(0, 205, 100, 204, 1, $.Random_Random(null).nextInt$1(16777215), 0, true, true, null, true, null, null, false, "", 1, false, false, 0, 0, 1, 0.98, 2, 0, false, null, false, 0, true, true, "round", "round", 1);
    t1 = this.geometry;
    if (!(t1 == null)) {
      if (t1.get$boundingSphere() == null)
        t1.computeBoundingSphere$0();
      this.boundRadius = t1.get$boundingSphere().get$radius();
      if ($.$$eq($.length(t1.get$morphTargets()), 0) !== true) {
        this.morphTargetBase = -1;
        this.morphTargetForcedOrder = [];
        this.morphTargetInfluences = [];
        this._morphTargetDictionary = $.makeLiteralMap([]);
        for (m = 0; $.CONSTANT1.$lt(m, $.length(t1.get$morphTargets())); ++m) {
          $.add(this.morphTargetInfluences, 0);
          $.$$indexSet(this._morphTargetDictionary, $.$$index(t1.get$morphTargets(), m).get$name(), m);
        }
      }
    }
  },
  $isMesh: true
};

$$.Line = {"": "Object3D;geometry>,material>,type>,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,__data",
  Line$3: function(geometry, material, type) {
    var t1;
    if (this.material == null)
      this.material = $.LineBasicMaterial$(0, 205, 100, 204, 1, $.Random_Random(null).nextInt$1(16777215), true, true, true, "round", "round", 1, "", 1, false, false, 0, 0, 0, false, 0, true);
    t1 = this.geometry;
    if (!(t1 == null))
      if (t1.get$boundingSphere() == null)
        t1.computeBoundingSphere$0();
  },
  $isLine: true
};

$$.WebGLRenderer = {"": "Object;canvas,_gl>,precision,clearColor,clearAlpha,maxLights,alpha,premultipliedAlpha,antialias,stencil,preserveDrawingBuffer,autoClear,autoClearColor,autoClearDepth,autoClearStencil,sortObjects<,autoUpdateObjects,autoUpdateScene,gammaInput,gammaOutput,physicallyBasedShading,shadowMapEnabled,shadowMapAutoUpdate,shadowMapSoft,shadowMapCullFrontFaces,shadowMapDebug,shadowMapCascade,maxMorphTargets,maxMorphNormals,autoScaleCubemaps,renderPluginsPre,renderPluginsPost,info,_programs,_programs_counter,_currentProgram,_currentFramebuffer,_currentMaterialId,_currentGeometryGroupHash,_currentCamera,_geometryGroupCounter=,_oldDoubleSided,_oldFlipSided,_oldBlending,_oldBlendEquation,_oldBlendSrc,_oldBlendDst,_oldDepthTest,_oldDepthWrite,_oldPolygonOffset,_oldPolygonOffsetFactor,_oldPolygonOffsetUnits,_oldLineWidth,_viewportX,_viewportY,_viewportWidth,_viewportHeight,_currentWidth,_currentHeight,_frustum,_projScreenMatrix,_projScreenMatrixPS,_vector3,_direction,_lights,_lightsNeedUpdate,_glExtensionTextureFloat,_glExtensionStandardDerivatives,_glExtensionTextureFilterAnisotropic,maxAnisotropy,supportsVertexTextures,supportsBoneTextures,shadowMapPlugin,maxVertexTextures,maxTextureSize,maxCubemapSize",
  clearColor$4: function(arg0, arg1, arg2, arg3) {
    return this.clearColor.call$4(arg0, arg1, arg2, arg3);
  },
  get$domElement: function() {
    return this.canvas;
  },
  setSize$2: function(width, height) {
    this.canvas.set$width(width);
    this.canvas.set$height(height);
    this.setViewport$4(0, 0, this.canvas.get$width(), this.canvas.get$height());
  },
  setViewport$4: function(x, y, width, height) {
    this._viewportX = x;
    this._viewportY = y;
    this._viewportWidth = $.$$eq(width, -1) !== true ? width : this.canvas.get$width();
    this._viewportHeight = $.$$eq(height, -1) !== true ? height : this.canvas.get$height();
    this._gl.viewport$4(this._viewportX, this._viewportY, this._viewportWidth, this._viewportHeight);
  },
  clear$3: function(color, depth, stencil) {
    var bits = color === true ? 16384 : 0;
    if (depth === true)
      bits = (bits | 256) >>> 0;
    if (stencil === true)
      bits = (bits | 1024) >>> 0;
    this._gl.clear$1(bits);
  },
  clear$1: function(color) {
    return this.clear$3(color, true, true);
  },
  deallocateMaterial$1: function(material) {
    var program, t1;
    program = material.get$program();
    if (program == null)
      return;
    material.set$program(null);
    program.set$usedTimes($.$$sub(program.get$usedTimes(), 1));
    if ($.$$eq(program.get$usedTimes(), 0) === true) {
      t1 = this._programs;
      $.CONSTANT0.removeRange$2(t1, $.CONSTANT0.indexOf$1(t1, program), 1);
      this._gl.deleteProgram$1(program.get$glProgram());
      t1 = this.info.memory;
      t1.programs = t1.programs - 1;
    }
  },
  createParticleBuffers$1: function(geometry) {
    var t1;
    geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
    geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
    t1 = this.info.memory;
    t1.geometries = t1.geometries + 1;
  },
  createLineBuffers$1: function(geometry) {
    var t1;
    geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
    geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
    t1 = this.info.memory;
    t1.geometries = t1.geometries + 1;
  },
  createRibbonBuffers$1: function(geometry) {
    var t1;
    geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
    geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
    t1 = this.info.memory;
    t1.geometries = t1.geometries + 1;
  },
  createMeshBuffers$1: function(geometryGroup) {
    var ml, m, t1;
    geometryGroup.set$__webglVertexBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglNormalBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglTangentBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglColorBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglUVBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglUV2Buffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglSkinVertexABuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglSkinVertexBBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglSkinIndicesBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglSkinWeightsBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglFaceBuffer(this._gl.createBuffer$0());
    geometryGroup.set$__webglLineBuffer(this._gl.createBuffer$0());
    if (!(geometryGroup.get$numMorphTargets() == null)) {
      geometryGroup.set$__webglMorphTargetsBuffers([]);
      ml = geometryGroup.get$numMorphTargets();
      if (typeof ml !== "number")
        return this.createMeshBuffers$1$bailout(1, geometryGroup, ml);
      for (m = 0; m < ml; ++m)
        $.add(geometryGroup.get$__webglMorphTargetsBuffers(), this._gl.createBuffer$0());
    }
    if (!(geometryGroup.get$numMorphNormals() == null)) {
      geometryGroup.set$__webglMorphNormalsBuffers([]);
      ml = geometryGroup.get$numMorphNormals();
      if (typeof ml !== "number")
        return this.createMeshBuffers$1$bailout(2, geometryGroup, ml);
      for (m = 0; m < ml; ++m)
        $.add(geometryGroup.get$__webglMorphNormalsBuffers(), this._gl.createBuffer$0());
    }
    t1 = this.info.memory;
    t1.geometries = t1.geometries + 1;
  },
  createMeshBuffers$1$bailout: function(state0, geometryGroup, ml) {
    switch (state0) {
      case 0:
        geometryGroup.set$__webglVertexBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglNormalBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglTangentBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglColorBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglUVBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglUV2Buffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglSkinVertexABuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglSkinVertexBBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglSkinIndicesBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglSkinWeightsBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglFaceBuffer(this._gl.createBuffer$0());
        geometryGroup.set$__webglLineBuffer(this._gl.createBuffer$0());
      case 1:
        if (state0 === 1 || state0 === 0 && !(geometryGroup.get$numMorphTargets() == null))
          switch (state0) {
            case 0:
              geometryGroup.set$__webglMorphTargetsBuffers([]);
              ml = geometryGroup.get$numMorphTargets();
            case 1:
              state0 = 0;
              for (m = 0; $.CONSTANT1.$lt(m, ml); ++m)
                $.add(geometryGroup.get$__webglMorphTargetsBuffers(), this._gl.createBuffer$0());
          }
      case 2:
        var m, t1;
        if (state0 === 2 || state0 === 0 && !(geometryGroup.get$numMorphNormals() == null))
          switch (state0) {
            case 0:
              geometryGroup.set$__webglMorphNormalsBuffers([]);
              ml = geometryGroup.get$numMorphNormals();
            case 2:
              state0 = 0;
              for (m = 0; $.CONSTANT1.$lt(m, ml); ++m)
                $.add(geometryGroup.get$__webglMorphNormalsBuffers(), this._gl.createBuffer$0());
          }
        t1 = this.info.memory;
        t1.geometries = t1.geometries + 1;
    }
  },
  initCustomAttributes$2: function(geometry, object) {
    var t1, material, t2, t3, t4, t5, size;
    t1 = $.length(geometry.get$vertices());
    if (typeof t1 !== "number")
      return this.initCustomAttributes$2$bailout(1, geometry, object, t1);
    material = object.get$webglmaterial();
    if (!(material.get$attributes() == null)) {
      if (geometry.get$__webglCustomAttributesList() == null)
        geometry.set$__webglCustomAttributesList([]);
      for (t2 = $.iterator(material.get$attributes()); t2.moveNext$0() === true;) {
        t3 = t2.get$current();
        t4 = $.$$index(material.get$attributes(), t3);
        t5 = $.getInterceptor$JSStringJSArray(t4);
        if (t5.$index(t4, "__webglInitialized") !== true || t4.get$createUniqueBuffers() === true) {
          t5.$indexSet(t4, "__webglInitialized", true);
          if ($.$$eq(t4.get$type(), "v2") === true)
            size = 2;
          else if ($.$$eq(t4.get$type(), "v3") === true)
            size = 3;
          else if ($.$$eq(t4.get$type(), "v4") === true)
            size = 4;
          else
            size = $.$$eq(t4.get$type(), "c") === true ? 3 : 1;
          t4.set$size(size);
          t4.set$array($.Float32Array_Float32Array(t1 * size));
          t4.set$buffer($.Buffer$(this._gl.createBuffer$0()));
          t4.get$buffer().set$belongsToAttribute(t3);
          t4.set$needsUpdate(true);
        }
        $.add(geometry.get$__webglCustomAttributesList(), t4);
      }
    }
  },
  initCustomAttributes$2$bailout: function(state0, geometry, object, t1) {
    var material, t2, t3, t4, t5, t6, size;
    material = object.get$webglmaterial();
    if (!(material.get$attributes() == null)) {
      if (geometry.get$__webglCustomAttributesList() == null)
        geometry.set$__webglCustomAttributesList([]);
      for (t2 = $.iterator(material.get$attributes()), t3 = $.getInterceptor$JSNumber(t1); t2.moveNext$0() === true;) {
        t4 = t2.get$current();
        t5 = $.$$index(material.get$attributes(), t4);
        t6 = $.getInterceptor$JSStringJSArray(t5);
        if (t6.$index(t5, "__webglInitialized") !== true || t5.get$createUniqueBuffers() === true) {
          t6.$indexSet(t5, "__webglInitialized", true);
          if ($.$$eq(t5.get$type(), "v2") === true)
            size = 2;
          else if ($.$$eq(t5.get$type(), "v3") === true)
            size = 3;
          else if ($.$$eq(t5.get$type(), "v4") === true)
            size = 4;
          else
            size = $.$$eq(t5.get$type(), "c") === true ? 3 : 1;
          t5.set$size(size);
          t5.set$array($.Float32Array_Float32Array(t3.$mul(t1, size)));
          t5.set$buffer($.Buffer$(this._gl.createBuffer$0()));
          t5.get$buffer().set$belongsToAttribute(t4);
          t5.set$needsUpdate(true);
        }
        $.add(geometry.get$__webglCustomAttributesList(), t5);
      }
    }
  },
  initParticleBuffers$2: function(geometry, object) {
    var t1, t2;
    t1 = $.length(geometry.get$vertices());
    t2 = $.getInterceptor$JSNumber(t1);
    geometry.set$__vertexArray($.Float32Array_Float32Array(t2.$mul(t1, 3)));
    geometry.set$__colorArray($.Float32Array_Float32Array(t2.$mul(t1, 3)));
    geometry.set$__sortArray([]);
    geometry.set$__webglParticleCount(t1);
    this.initCustomAttributes$2(geometry, object);
  },
  initLineBuffers$2: function(geometry, object) {
    var t1, t2;
    t1 = $.length(geometry.get$vertices());
    t2 = $.getInterceptor$JSNumber(t1);
    geometry.set$__vertexArray($.Float32Array_Float32Array(t2.$mul(t1, 3)));
    geometry.set$__colorArray($.Float32Array_Float32Array(t2.$mul(t1, 3)));
    geometry.set$__webglLineCount(t1);
    this.initCustomAttributes$2(geometry, object);
  },
  initRibbonBuffers$1: function(geometry) {
    var t1, t2;
    t1 = $.length(geometry.get$vertices());
    t2 = $.getInterceptor$JSNumber(t1);
    geometry.set$__vertexArray($.Float32Array_Float32Array(t2.$mul(t1, 3)));
    geometry.set$__colorArray($.Float32Array_Float32Array(t2.$mul(t1, 3)));
    geometry.set$__webglVertexCount(t1);
  },
  initMeshBuffers$2: function(geometryGroup, object) {
    var geometry, faces3, faces4, t1, t2, t3, t5, t6, material, uvType, normalType, vertexColorType, t7, ml, m;
    geometry = object.get$geometry();
    faces3 = geometryGroup.get$faces3();
    faces4 = geometryGroup.get$faces4();
    t1 = $.getInterceptor$JSStringJSArray(faces3);
    t2 = $.getInterceptor$JSStringJSArray(faces4);
    t3 = $.$$add($.$$mul(t1.get$length(faces3), 3), $.$$mul(t2.get$length(faces4), 4));
    if (typeof t3 !== "number")
      return this.initMeshBuffers$2$bailout(1, geometryGroup, object, geometry, faces3, faces4, t1, t2, t3);
    t5 = $.$$add($.$$mul(t1.get$length(faces3), 1), $.$$mul(t2.get$length(faces4), 2));
    t6 = $.$$add($.$$mul(t1.get$length(faces3), 3), $.$$mul(t2.get$length(faces4), 4));
    material = this.getBufferMaterial$2(object, geometryGroup);
    uvType = this.bufferGuessUVType$1(material);
    normalType = this.bufferGuessNormalType$1(material);
    vertexColorType = this.bufferGuessVertexColorType$1(material);
    t7 = t3 * 3;
    geometryGroup.set$__vertexArray($.Float32Array_Float32Array(t7));
    if ($.$$eq(normalType, 0) !== true)
      geometryGroup.set$__normalArray($.Float32Array_Float32Array(t7));
    if (geometry.get$hasTangents() === true)
      geometryGroup.set$__tangentArray($.Float32Array_Float32Array(t3 * 4));
    if (vertexColorType === true)
      geometryGroup.set$__colorArray($.Float32Array_Float32Array(t7));
    if (uvType === true) {
      if ($.$$gt($.length(geometry.get$faceUvs()), 0) === true || $.$$gt($.length(geometry.get$faceVertexUvs()), 0) === true)
        geometryGroup.set$__uvArray($.Float32Array_Float32Array(t3 * 2));
      if ($.$$gt($.length(geometry.get$faceUvs()), 1) === true || $.$$gt($.length(geometry.get$faceVertexUvs()), 1) === true)
        geometryGroup.set$__uv2Array($.Float32Array_Float32Array(t3 * 2));
    }
    if ($.isEmpty(object.get$geometry().get$skinWeights()) !== true && $.isEmpty(object.get$geometry().get$skinIndices()) !== true) {
      t1 = t3 * 4;
      geometryGroup.set$__skinVertexAArray($.Float32Array_Float32Array(t1));
      geometryGroup.set$__skinVertexBArray($.Float32Array_Float32Array(t1));
      geometryGroup.set$__skinIndexArray($.Float32Array_Float32Array(t1));
      geometryGroup.set$__skinWeightArray($.Float32Array_Float32Array(t1));
    }
    t1 = $.getInterceptor$JSNumber(t5);
    geometryGroup.set$__faceArray($.Uint16Array_Uint16Array(t1.$mul(t5, 3)));
    t2 = $.getInterceptor$JSNumber(t6);
    geometryGroup.set$__lineArray($.Uint16Array_Uint16Array(t2.$mul(t6, 2)));
    if (!(geometryGroup.get$numMorphTargets() == null)) {
      geometryGroup.set$__morphTargetsArrays([]);
      ml = geometryGroup.get$numMorphTargets();
      if (typeof ml !== "number")
        return this.initMeshBuffers$2$bailout(2, geometryGroup, null, null, null, null, t1, t2, t3, t5, t6, material, ml, $.CONSTANT3);
      for (m = 0; m < ml; ++m)
        $.add(geometryGroup.get$__morphTargetsArrays(), $.Float32Array_Float32Array(t7));
    }
    if (!(geometryGroup.get$numMorphNormals() == null)) {
      geometryGroup.set$__morphNormalsArrays([]);
      ml = geometryGroup.get$numMorphNormals();
      if (typeof ml !== "number")
        return this.initMeshBuffers$2$bailout(3, geometryGroup, null, null, null, null, t1, t2, t3, t5, t6, material, ml, $.CONSTANT3);
      for (m = 0; m < ml; ++m)
        $.add(geometryGroup.get$__morphNormalsArrays(), $.Float32Array_Float32Array(t7));
    }
    geometryGroup.set$__webglFaceCount(t1.$mul(t5, 3));
    geometryGroup.set$__webglLineCount(t2.$mul(t6, 2));
    if (!(material.get$attributes() == null)) {
      if (geometryGroup.get$__webglCustomAttributesList() == null)
        geometryGroup.set$__webglCustomAttributesList([]);
      $.forEach(material.get$attributes(), new $.WebGLRenderer_initMeshBuffers_anon(this, geometryGroup, t3, material));
    }
    geometryGroup.set$__inittedArrays(true);
  },
  initMeshBuffers$2$bailout: function(state0, geometryGroup, object, geometry, faces3, faces4, t1, t2, t3, t5, t6, material, ml, t7) {
    switch (state0) {
      case 0:
        geometry = object.get$geometry();
        faces3 = geometryGroup.get$faces3();
        faces4 = geometryGroup.get$faces4();
        t1 = $.getInterceptor$JSStringJSArray(faces3);
        t2 = $.getInterceptor$JSStringJSArray(faces4);
        t3 = $.$$add($.$$mul(t1.get$length(faces3), 3), $.$$mul(t2.get$length(faces4), 4));
      case 1:
        state0 = 0;
        t5 = $.$$add($.$$mul(t1.get$length(faces3), 1), $.$$mul(t2.get$length(faces4), 2));
        t6 = $.$$add($.$$mul(t1.get$length(faces3), 3), $.$$mul(t2.get$length(faces4), 4));
        material = this.getBufferMaterial$2(object, geometryGroup);
        uvType = this.bufferGuessUVType$1(material);
        normalType = this.bufferGuessNormalType$1(material);
        vertexColorType = this.bufferGuessVertexColorType$1(material);
        t7 = $.getInterceptor$JSNumber(t3);
        geometryGroup.set$__vertexArray($.Float32Array_Float32Array(t7.$mul(t3, 3)));
        if ($.$$eq(normalType, 0) !== true)
          geometryGroup.set$__normalArray($.Float32Array_Float32Array(t7.$mul(t3, 3)));
        if (geometry.get$hasTangents() === true)
          geometryGroup.set$__tangentArray($.Float32Array_Float32Array(t7.$mul(t3, 4)));
        if (vertexColorType === true)
          geometryGroup.set$__colorArray($.Float32Array_Float32Array(t7.$mul(t3, 3)));
        if (uvType === true) {
          if ($.$$gt($.length(geometry.get$faceUvs()), 0) === true || $.$$gt($.length(geometry.get$faceVertexUvs()), 0) === true)
            geometryGroup.set$__uvArray($.Float32Array_Float32Array(t7.$mul(t3, 2)));
          if ($.$$gt($.length(geometry.get$faceUvs()), 1) === true || $.$$gt($.length(geometry.get$faceVertexUvs()), 1) === true)
            geometryGroup.set$__uv2Array($.Float32Array_Float32Array(t7.$mul(t3, 2)));
        }
        if ($.isEmpty(object.get$geometry().get$skinWeights()) !== true && $.isEmpty(object.get$geometry().get$skinIndices()) !== true) {
          geometryGroup.set$__skinVertexAArray($.Float32Array_Float32Array(t7.$mul(t3, 4)));
          geometryGroup.set$__skinVertexBArray($.Float32Array_Float32Array(t7.$mul(t3, 4)));
          geometryGroup.set$__skinIndexArray($.Float32Array_Float32Array(t7.$mul(t3, 4)));
          geometryGroup.set$__skinWeightArray($.Float32Array_Float32Array(t7.$mul(t3, 4)));
        }
        t1 = $.getInterceptor$JSNumber(t5);
        geometryGroup.set$__faceArray($.Uint16Array_Uint16Array(t1.$mul(t5, 3)));
        t2 = $.getInterceptor$JSNumber(t6);
        geometryGroup.set$__lineArray($.Uint16Array_Uint16Array(t2.$mul(t6, 2)));
      case 2:
        if (state0 === 2 || state0 === 0 && !(geometryGroup.get$numMorphTargets() == null))
          switch (state0) {
            case 0:
              geometryGroup.set$__morphTargetsArrays([]);
              ml = geometryGroup.get$numMorphTargets();
            case 2:
              state0 = 0;
              for (m = 0; $.CONSTANT1.$lt(m, ml); ++m)
                $.add(geometryGroup.get$__morphTargetsArrays(), $.Float32Array_Float32Array(t7.$mul(t3, 3)));
          }
      case 3:
        var uvType, normalType, vertexColorType, m;
        if (state0 === 3 || state0 === 0 && !(geometryGroup.get$numMorphNormals() == null))
          switch (state0) {
            case 0:
              geometryGroup.set$__morphNormalsArrays([]);
              ml = geometryGroup.get$numMorphNormals();
            case 3:
              state0 = 0;
              for (m = 0; $.CONSTANT1.$lt(m, ml); ++m)
                $.add(geometryGroup.get$__morphNormalsArrays(), $.Float32Array_Float32Array(t7.$mul(t3, 3)));
          }
        geometryGroup.set$__webglFaceCount(t1.$mul(t5, 3));
        geometryGroup.set$__webglLineCount(t2.$mul(t6, 2));
        if (!(material.get$attributes() == null)) {
          if (geometryGroup.get$__webglCustomAttributesList() == null)
            geometryGroup.set$__webglCustomAttributesList([]);
          $.forEach(material.get$attributes(), new $.WebGLRenderer_initMeshBuffers_anon(this, geometryGroup, t3, material));
        }
        geometryGroup.set$__inittedArrays(true);
    }
  },
  getBufferMaterial$2: function(object, geometryGroup) {
    var t1, t2, material;
    if (!(object.get$material() == null)) {
      t1 = object.get$material();
      t2 = !(typeof t1 === "object" && t1 !== null && !!t1.$isMeshFaceMaterial);
      t1 = t2;
    } else
      t1 = false;
    if (t1)
      material = object.get$material();
    else
      material = $.$$ge(geometryGroup.get$materialIndex(), 0) === true ? $.$$index(object.get$geometry().get$materials(), geometryGroup.get$materialIndex()) : null;
    return $.WebGLMaterial_WebGLMaterial$from(material);
  },
  bufferGuessNormalType$1: function(material) {
    if (material.get$needsNormals() !== true)
      return 0;
    if (material.get$needsSmoothNormals() === true)
      return 2;
    else
      return 1;
  },
  bufferGuessVertexColorType$1: function(material) {
    if (!(material.get$vertexColors() == null) && $.$$eq(material.get$vertexColors(), 0) !== true)
      return material.get$vertexColors();
    return false;
  },
  bufferGuessUVType$1: function(material) {
    if (!(material.get$map() == null) || !(material.get$lightMap() == null) || !(material.get$bumpMap() == null) || !(material.get$specularMap() == null) || material.get$isShaderMaterial() === true)
      return true;
    return false;
  },
  initDirectBuffers$1: function(geometry) {
    var t1 = {};
    t1.attribute_0 = null;
    t1.type_1 = null;
    $.forEach(geometry.get$attributes(), new $.WebGLRenderer_initDirectBuffers_anon(t1, this));
  },
  setParticleBuffers$3: function(geometry, hint, object) {
    var vertices, t2, vl, colors, t4, cl, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, t1, t3, v, offset, vertex, c, color, il, index, i, ca, cal, value, customAttribute, t5;
    vertices = geometry.get$vertices();
    if (typeof vertices !== "string" && (typeof vertices !== "object" || vertices === null || vertices.constructor !== Array && !vertices.$isJavaScriptIndexingBehavior()))
      return this.setParticleBuffers$3$bailout(1, geometry, hint, object, vertices);
    t2 = $.getInterceptor$JSStringJSArray(vertices);
    vl = vertices.length;
    colors = geometry.get$colors();
    if (typeof colors !== "string" && (typeof colors !== "object" || colors === null || colors.constructor !== Array && !colors.$isJavaScriptIndexingBehavior()))
      return this.setParticleBuffers$3$bailout(3, geometry, hint, object, vertices, t2, vl, colors);
    t4 = $.getInterceptor$JSStringJSArray(colors);
    cl = colors.length;
    vertexArray = geometry.get$__vertexArray();
    if (typeof vertexArray !== "object" || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.$isJavaScriptIndexingBehavior())
      return this.setParticleBuffers$3$bailout(5, geometry, hint, object, vertices, t2, vl, colors, t4, cl, vertexArray);
    colorArray = geometry.get$__colorArray();
    if (typeof colorArray !== "object" || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.$isJavaScriptIndexingBehavior())
      return this.setParticleBuffers$3$bailout(6, geometry, hint, object, vertices, t2, vl, colors, t4, cl, vertexArray, colorArray);
    sortArray = geometry.get$__sortArray();
    if (typeof sortArray !== "object" || sortArray === null || (sortArray.constructor !== Array || !!sortArray.immutable$list) && !sortArray.$isJavaScriptIndexingBehavior())
      return this.setParticleBuffers$3$bailout(7, geometry, hint, object, vertices, t2, vl, colors, t4, cl, vertexArray, colorArray, sortArray);
    dirtyVertices = geometry.get$verticesNeedUpdate();
    geometry.get$elementsNeedUpdate();
    dirtyColors = geometry.get$colorsNeedUpdate();
    customAttributes = geometry.get$__webglCustomAttributesList();
    if (typeof customAttributes !== "string" && (typeof customAttributes !== "object" || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.$isJavaScriptIndexingBehavior()))
      return this.setParticleBuffers$3$bailout(8, geometry, hint, object, vertices, t2, vl, colors, t4, cl, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes);
    t1 = object.sortParticles === true;
    if (t1) {
      t2 = this._projScreenMatrixPS;
      t2.copy$1(this._projScreenMatrix);
      t2.multiplySelf$1(object.matrixWorld);
      for (t3 = this._vector3, v = 0; v < vl; ++v) {
        if (v >= vertices.length)
          throw $.ioore(v);
        t3.copy$1(vertices[v]);
        t2.multiplyVector3$1(t3);
        t4 = t3.z;
        if (v >= sortArray.length)
          throw $.ioore(v);
        sortArray[v] = [t4, v];
      }
      $.CONSTANT0.sort$1(sortArray, new $.WebGLRenderer_setParticleBuffers_anon());
      for (v = 0, offset = null; v < vl; ++v) {
        if (v >= sortArray.length)
          throw $.ioore(v);
        t2 = $.$$index(sortArray[v], 1);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= vertices.length)
          throw $.ioore(t2);
        vertex = vertices[t2];
        offset = v * 3;
        t2 = vertex.get$x();
        t3 = vertexArray.length;
        if (offset < 0 || offset >= t3)
          throw $.ioore(offset);
        vertexArray[offset] = t2;
        t2 = vertex.get$y();
        t4 = offset + 1;
        if (t4 >= t3)
          throw $.ioore(t4);
        vertexArray[t4] = t2;
        t2 = vertex.get$z();
        t4 = offset + 2;
        if (t4 >= t3)
          throw $.ioore(t4);
        vertexArray[t4] = t2;
      }
      for (c = 0; c < cl; ++c) {
        offset = c * 3;
        if (c >= sortArray.length)
          throw $.ioore(c);
        t2 = $.$$index(sortArray[c], 1);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= colors.length)
          throw $.ioore(t2);
        color = colors[t2];
        t2 = color.get$r();
        t3 = colorArray.length;
        if (offset < 0 || offset >= t3)
          throw $.ioore(offset);
        colorArray[offset] = t2;
        t2 = color.get$g();
        t4 = offset + 1;
        if (t4 >= t3)
          throw $.ioore(t4);
        colorArray[t4] = t2;
        t2 = color.get$b();
        t4 = offset + 2;
        if (t4 >= t3)
          throw $.ioore(t4);
        colorArray[t4] = t2;
      }
      t2 = $.getInterceptor(customAttributes);
      il = customAttributes.length;
      for (index = null, i = 0, ca = null, cal = null, value = null; i < il; ++i) {
        if (i >= customAttributes.length)
          throw $.ioore(i);
        customAttribute = customAttributes[i];
        t3 = customAttribute.get$boundTo();
        if (!(t3 == null || $.$$eq(t3, "vertices") === true))
          continue;
        cal = $.length(customAttribute.get$value());
        if ($.$$eq(customAttribute.get$size(), 1) === true) {
          for (ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
            if (ca >= sortArray.length)
              throw $.ioore(ca);
            t3 = sortArray[ca];
            if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
              return this.setParticleBuffers$3$bailout(10, geometry, hint, null, null, t2, null, null, null, null, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, $.CONSTANT0, il, t1, null, i, value, ca, customAttribute, t3, cal);
            if (1 >= t3.length)
              throw $.ioore(1);
            index = t3[1];
            $.$$indexSet(customAttribute.get$array(), ca, $.$$index(customAttribute.get$value(), index));
          }
          offset = 0;
        } else if ($.$$eq(customAttribute.get$size(), 2) === true)
          for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
            if (ca >= sortArray.length)
              throw $.ioore(ca);
            t3 = sortArray[ca];
            if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
              return this.setParticleBuffers$3$bailout(11, geometry, hint, null, null, t2, null, null, null, null, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, $.CONSTANT0, il, t1, offset, i, null, ca, customAttribute, t3, cal);
            if (1 >= t3.length)
              throw $.ioore(1);
            index = t3[1];
            value = $.$$index(customAttribute.get$value(), index);
            $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
            $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            offset += 2;
          }
        else if ($.$$eq(customAttribute.get$size(), 3) === true)
          if ($.$$eq(customAttribute.get$type(), "c") === true)
            for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
              if (ca >= sortArray.length)
                throw $.ioore(ca);
              t3 = sortArray[ca];
              if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
                return this.setParticleBuffers$3$bailout(12, geometry, hint, null, null, t2, null, null, null, null, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, $.CONSTANT0, il, t1, offset, i, null, ca, customAttribute, t3, cal);
              if (1 >= t3.length)
                throw $.ioore(1);
              index = t3[1];
              value = $.$$index(customAttribute.get$value(), index);
              $.$$indexSet(customAttribute.get$array(), offset, value.get$r());
              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$g());
              $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$b());
              offset += 3;
            }
          else
            for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
              if (ca >= sortArray.length)
                throw $.ioore(ca);
              t3 = sortArray[ca];
              if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
                return this.setParticleBuffers$3$bailout(13, geometry, hint, null, null, t2, null, null, null, null, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, $.CONSTANT0, il, t1, offset, i, null, ca, customAttribute, t3, cal);
              if (1 >= t3.length)
                throw $.ioore(1);
              index = t3[1];
              value = $.$$index(customAttribute.get$value(), index);
              $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
              $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
              offset += 3;
            }
        else if ($.$$eq(customAttribute.get$size(), 4) === true)
          for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
            if (ca >= sortArray.length)
              throw $.ioore(ca);
            t3 = sortArray[ca];
            if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
              return this.setParticleBuffers$3$bailout(14, geometry, hint, null, null, t2, null, null, null, null, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, $.CONSTANT0, il, t1, offset, i, null, ca, customAttribute, t3, cal);
            if (1 >= t3.length)
              throw $.ioore(1);
            index = t3[1];
            value = $.$$index(customAttribute.get$value(), index);
            $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
            $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            $.$$indexSet(customAttribute.get$array(), offset + 3, value.get$w());
            offset += 4;
          }
        else
          offset = 0;
      }
    } else {
      if (dirtyVertices === true)
        for (t2 = vertices.length, t3 = vertexArray.length, v = 0, offset = null; v < vl; ++v) {
          if (v >= t2)
            throw $.ioore(v);
          vertex = vertices[v];
          offset = v * 3;
          t4 = vertex.get$x();
          if (offset < 0 || offset >= t3)
            throw $.ioore(offset);
          vertexArray[offset] = t4;
          t4 = vertex.get$y();
          t5 = offset + 1;
          if (t5 >= t3)
            throw $.ioore(t5);
          vertexArray[t5] = t4;
          t4 = vertex.get$z();
          t5 = offset + 2;
          if (t5 >= t3)
            throw $.ioore(t5);
          vertexArray[t5] = t4;
        }
      else
        offset = null;
      if (dirtyColors === true)
        for (t2 = colorArray.length, c = 0; c < cl; ++c) {
          color = colors[c];
          offset = c * 3;
          t3 = color.get$r();
          if (offset < 0 || offset >= t2)
            throw $.ioore(offset);
          colorArray[offset] = t3;
          t3 = color.get$g();
          t4 = offset + 1;
          if (t4 >= t2)
            throw $.ioore(t4);
          colorArray[t4] = t3;
          t3 = color.get$b();
          t4 = offset + 2;
          if (t4 >= t2)
            throw $.ioore(t4);
          colorArray[t4] = t3;
        }
      il = customAttributes.length;
      for (i = 0, ca = null, cal = null, value = null; i < il; ++i) {
        if (i >= customAttributes.length)
          throw $.ioore(i);
        customAttribute = customAttributes[i];
        if (customAttribute.get$needsUpdate() === true) {
          t2 = customAttribute.get$boundTo();
          t2 = t2 == null || $.$$eq(t2, "vertices") === true;
        } else
          t2 = false;
        if (t2) {
          cal = $.length(customAttribute.get$value());
          if ($.$$eq(customAttribute.get$size(), 1) === true) {
            for (ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca)
              $.$$indexSet(customAttribute.get$array(), ca, $.$$index(customAttribute.get$value(), ca));
            offset = 0;
          } else if ($.$$eq(customAttribute.get$size(), 2) === true)
            for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
              value = $.$$index(customAttribute.get$value(), ca);
              $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
              offset += 2;
            }
          else if ($.$$eq(customAttribute.get$size(), 3) === true)
            if ($.$$eq(customAttribute.get$type(), "c") === true)
              for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                value = $.$$index(customAttribute.get$value(), ca);
                $.$$indexSet(customAttribute.get$array(), offset, value.get$r());
                $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                offset += 3;
              }
            else
              for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                value = $.$$index(customAttribute.get$value(), ca);
                $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                offset += 3;
              }
          else if ($.$$eq(customAttribute.get$size(), 4) === true)
            for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
              value = $.$$index(customAttribute.get$value(), ca);
              $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
              $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
              $.$$indexSet(customAttribute.get$array(), offset + 3, value.get$w());
              offset += 4;
            }
          else
            offset = 0;
        }
      }
    }
    if (dirtyVertices === true || t1) {
      this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
      this._gl.bufferData$3(34962, vertexArray, hint);
    }
    if (dirtyColors === true || t1) {
      this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
      this._gl.bufferData$3(34962, colorArray, hint);
    }
    il = customAttributes.length;
    for (i = 0; i < il; ++i) {
      if (i >= customAttributes.length)
        throw $.ioore(i);
      customAttribute = customAttributes[i];
      if (customAttribute.get$needsUpdate() === true || t1) {
        this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
        this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
      }
    }
  },
  setParticleBuffers$3$bailout: function(state0, geometry, hint, object, vertices, t2, vl, colors, t5, cl, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, t6, il, t1, offset, i, value, ca, customAttribute, t3, cal) {
    switch (state0) {
      case 0:
        vertices = geometry.get$vertices();
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$JSStringJSArray(vertices);
        vl = t2.get$length(vertices);
      case 2:
        state0 = 0;
        colors = geometry.get$colors();
      case 3:
        state0 = 0;
        t5 = $.getInterceptor$JSStringJSArray(colors);
        cl = t5.get$length(colors);
      case 4:
        state0 = 0;
        vertexArray = geometry.get$__vertexArray();
      case 5:
        state0 = 0;
        colorArray = geometry.get$__colorArray();
      case 6:
        state0 = 0;
        sortArray = geometry.get$__sortArray();
      case 7:
        state0 = 0;
        dirtyVertices = geometry.get$verticesNeedUpdate();
        geometry.get$elementsNeedUpdate();
        dirtyColors = geometry.get$colorsNeedUpdate();
        customAttributes = geometry.get$__webglCustomAttributesList();
      case 8:
        state0 = 0;
        t1 = object.sortParticles === true;
      default:
        if (state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              t3 = this._projScreenMatrixPS;
              t3.copy$1(this._projScreenMatrix);
              t3.multiplySelf$1(object.matrixWorld);
              for (t4 = this._vector3, t6 = $.getInterceptor$JSArray(sortArray), v = 0; $.CONSTANT1.$lt(v, vl); ++v) {
                t4.copy$1(t2.$index(vertices, v));
                t3.multiplyVector3$1(t4);
                t6.$indexSet(sortArray, v, [t4.z, v]);
              }
              t6.sort$1(sortArray, new $.WebGLRenderer_setParticleBuffers_anon());
              for (t3 = $.getInterceptor$JSArray(vertexArray), v = 0, offset = null; $.CONSTANT1.$lt(v, vl); ++v) {
                vertex = t2.$index(vertices, $.$$index(t6.$index(sortArray, v), 1));
                offset = v * 3;
                t3.$indexSet(vertexArray, offset, vertex.get$x());
                t3.$indexSet(vertexArray, offset + 1, vertex.get$y());
                t3.$indexSet(vertexArray, offset + 2, vertex.get$z());
              }
              for (t2 = $.getInterceptor$JSArray(colorArray), c = 0; $.CONSTANT1.$lt(c, cl); ++c) {
                offset = c * 3;
                color = t5.$index(colors, $.$$index(t6.$index(sortArray, c), 1));
                t2.$indexSet(colorArray, offset, color.get$r());
                t2.$indexSet(colorArray, offset + 1, color.get$g());
                t2.$indexSet(colorArray, offset + 2, color.get$b());
              }
              t2 = $.getInterceptor(customAttributes);
            default:
              if (state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && !(customAttributes == null))
                switch (state0) {
                  case 0:
                    il = t2.get$length(customAttributes);
                  case 9:
                    state0 = 0;
                    index = null;
                    i = 0;
                    ca = null;
                    cal = null;
                    value = null;
                  default:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.CONSTANT1.$lt(i, il))
                              break L0;
                          default:
                            c$0: {
                              switch (state0) {
                                case 0:
                                  customAttribute = t2.$index(customAttributes, i);
                                  t3 = customAttribute.get$boundTo();
                                  if (!(t3 == null || $.$$eq(t3, "vertices") === true))
                                    break c$0;
                                  cal = $.length(customAttribute.get$value());
                                default:
                                  if (state0 === 10 || state0 === 0 && $.$$eq(customAttribute.get$size(), 1) === true)
                                    switch (state0) {
                                      case 0:
                                        ca = 0;
                                      case 10:
                                        L1:
                                          while (true)
                                            switch (state0) {
                                              case 0:
                                                if (!$.CONSTANT1.$lt(ca, cal))
                                                  break L1;
                                                t3 = t6.$index(sortArray, ca);
                                              case 10:
                                                state0 = 0;
                                                index = $.$$index(t3, 1);
                                                $.$$indexSet(customAttribute.get$array(), ca, $.$$index(customAttribute.get$value(), index));
                                                ++ca;
                                            }
                                        offset = 0;
                                    }
                                  else
                                    switch (state0) {
                                      case 0:
                                      default:
                                        if (state0 === 11 || state0 === 0 && $.$$eq(customAttribute.get$size(), 2) === true)
                                          switch (state0) {
                                            case 0:
                                              offset = 0;
                                              ca = 0;
                                            case 11:
                                              L2:
                                                while (true)
                                                  switch (state0) {
                                                    case 0:
                                                      if (!$.CONSTANT1.$lt(ca, cal))
                                                        break L2;
                                                      t3 = t6.$index(sortArray, ca);
                                                    case 11:
                                                      state0 = 0;
                                                      index = $.$$index(t3, 1);
                                                      value = $.$$index(customAttribute.get$value(), index);
                                                      $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                                                      $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                      offset += 2;
                                                      ++ca;
                                                  }
                                          }
                                        else
                                          switch (state0) {
                                            case 0:
                                            default:
                                              if (state0 === 13 || state0 === 12 || state0 === 0 && $.$$eq(customAttribute.get$size(), 3) === true)
                                                switch (state0) {
                                                  case 0:
                                                  default:
                                                    if (state0 === 12 || state0 === 0 && $.$$eq(customAttribute.get$type(), "c") === true)
                                                      switch (state0) {
                                                        case 0:
                                                          offset = 0;
                                                          ca = 0;
                                                        case 12:
                                                          L3:
                                                            while (true)
                                                              switch (state0) {
                                                                case 0:
                                                                  if (!$.CONSTANT1.$lt(ca, cal))
                                                                    break L3;
                                                                  t3 = t6.$index(sortArray, ca);
                                                                case 12:
                                                                  state0 = 0;
                                                                  index = $.$$index(t3, 1);
                                                                  value = $.$$index(customAttribute.get$value(), index);
                                                                  $.$$indexSet(customAttribute.get$array(), offset, value.get$r());
                                                                  $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                                                                  $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                                                                  offset += 3;
                                                                  ++ca;
                                                              }
                                                      }
                                                    else
                                                      switch (state0) {
                                                        case 0:
                                                          offset = 0;
                                                          ca = 0;
                                                        case 13:
                                                          L4:
                                                            while (true)
                                                              switch (state0) {
                                                                case 0:
                                                                  if (!$.CONSTANT1.$lt(ca, cal))
                                                                    break L4;
                                                                  t3 = t6.$index(sortArray, ca);
                                                                case 13:
                                                                  state0 = 0;
                                                                  index = $.$$index(t3, 1);
                                                                  value = $.$$index(customAttribute.get$value(), index);
                                                                  $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                                                                  $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                                  $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                                                                  offset += 3;
                                                                  ++ca;
                                                              }
                                                      }
                                                }
                                              else
                                                switch (state0) {
                                                  case 0:
                                                  case 14:
                                                    if (state0 === 14 || state0 === 0 && $.$$eq(customAttribute.get$size(), 4) === true)
                                                      switch (state0) {
                                                        case 0:
                                                          offset = 0;
                                                          ca = 0;
                                                        case 14:
                                                          L5:
                                                            while (true)
                                                              switch (state0) {
                                                                case 0:
                                                                  if (!$.CONSTANT1.$lt(ca, cal))
                                                                    break L5;
                                                                  t3 = t6.$index(sortArray, ca);
                                                                case 14:
                                                                  state0 = 0;
                                                                  index = $.$$index(t3, 1);
                                                                  value = $.$$index(customAttribute.get$value(), index);
                                                                  $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                                                                  $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                                  $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                                                                  $.$$indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                                                                  offset += 4;
                                                                  ++ca;
                                                              }
                                                      }
                                                    else
                                                      offset = 0;
                                                }
                                          }
                                    }
                              }
                            }
                            ++i;
                        }
                }
          }
        else
          switch (state0) {
            case 0:
              if (dirtyVertices === true)
                for (t3 = $.getInterceptor$JSArray(vertexArray), v = 0, offset = null; $.CONSTANT1.$lt(v, vl); ++v) {
                  vertex = t2.$index(vertices, v);
                  offset = v * 3;
                  t3.$indexSet(vertexArray, offset, vertex.get$x());
                  t3.$indexSet(vertexArray, offset + 1, vertex.get$y());
                  t3.$indexSet(vertexArray, offset + 2, vertex.get$z());
                }
              else
                offset = null;
              if (dirtyColors === true)
                for (t2 = $.getInterceptor$JSArray(colorArray), c = 0; $.CONSTANT1.$lt(c, cl); ++c) {
                  color = t5.$index(colors, c);
                  offset = c * 3;
                  t2.$indexSet(colorArray, offset, color.get$r());
                  t2.$indexSet(colorArray, offset + 1, color.get$g());
                  t2.$indexSet(colorArray, offset + 2, color.get$b());
                }
              t2 = $.getInterceptor(customAttributes);
            case 15:
              if (state0 === 15 || state0 === 0 && !(customAttributes == null))
                switch (state0) {
                  case 0:
                    il = t2.get$length(customAttributes);
                  case 15:
                    state0 = 0;
                    for (i = 0, ca = null, cal = null, value = null; $.CONSTANT1.$lt(i, il); ++i) {
                      customAttribute = t2.$index(customAttributes, i);
                      if (customAttribute.get$needsUpdate() === true) {
                        t3 = customAttribute.get$boundTo();
                        t3 = t3 == null || $.$$eq(t3, "vertices") === true;
                      } else
                        t3 = false;
                      if (t3) {
                        cal = $.length(customAttribute.get$value());
                        if ($.$$eq(customAttribute.get$size(), 1) === true) {
                          for (ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca)
                            $.$$indexSet(customAttribute.get$array(), ca, $.$$index(customAttribute.get$value(), ca));
                          offset = 0;
                        } else if ($.$$eq(customAttribute.get$size(), 2) === true)
                          for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                            value = $.$$index(customAttribute.get$value(), ca);
                            $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                            $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                            offset += 2;
                          }
                        else if ($.$$eq(customAttribute.get$size(), 3) === true)
                          if ($.$$eq(customAttribute.get$type(), "c") === true)
                            for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                              value = $.$$index(customAttribute.get$value(), ca);
                              $.$$indexSet(customAttribute.get$array(), offset, value.get$r());
                              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                              $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                              offset += 3;
                            }
                          else
                            for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                              value = $.$$index(customAttribute.get$value(), ca);
                              $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                              $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                              offset += 3;
                            }
                        else if ($.$$eq(customAttribute.get$size(), 4) === true)
                          for (offset = 0, ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                            value = $.$$index(customAttribute.get$value(), ca);
                            $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                            $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                            $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                            $.$$indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                            offset += 4;
                          }
                        else
                          offset = 0;
                      }
                    }
                }
          }
        if (dirtyVertices === true || t1) {
          this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
          this._gl.bufferData$3(34962, vertexArray, hint);
        }
        if (dirtyColors === true || t1) {
          this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
          this._gl.bufferData$3(34962, colorArray, hint);
        }
        t2 = $.getInterceptor(customAttributes);
      case 16:
        var t4, v, vertex, c, color, index;
        if (state0 === 16 || state0 === 0 && !(customAttributes == null))
          switch (state0) {
            case 0:
              il = t2.get$length(customAttributes);
            case 16:
              state0 = 0;
              for (i = 0; $.CONSTANT1.$lt(i, il); ++i) {
                customAttribute = t2.$index(customAttributes, i);
                if (customAttribute.get$needsUpdate() === true || t1) {
                  this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
                  this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
                }
              }
          }
    }
  },
  setLineBuffers$2: function(geometry, hint) {
    var vertices, colors, t3, vl, t4, cl, vertexArray, colorArray, dirtyVertices, dirtyColors, customAttributes, t1, v, offset, vertex, t2, c, color, il, i, ca, cal, value, customAttribute;
    vertices = geometry.get$vertices();
    if (typeof vertices !== "string" && (typeof vertices !== "object" || vertices === null || vertices.constructor !== Array && !vertices.$isJavaScriptIndexingBehavior()))
      return this.setLineBuffers$2$bailout(1, geometry, hint, vertices);
    colors = geometry.get$colors();
    if (typeof colors !== "string" && (typeof colors !== "object" || colors === null || colors.constructor !== Array && !colors.$isJavaScriptIndexingBehavior()))
      return this.setLineBuffers$2$bailout(2, geometry, hint, vertices, colors);
    t3 = $.getInterceptor$JSStringJSArray(vertices);
    vl = vertices.length;
    t4 = $.getInterceptor$JSStringJSArray(colors);
    cl = colors.length;
    vertexArray = geometry.get$__vertexArray();
    if (typeof vertexArray !== "object" || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.$isJavaScriptIndexingBehavior())
      return this.setLineBuffers$2$bailout(5, geometry, hint, vertices, colors, t3, vl, t4, cl, vertexArray);
    colorArray = geometry.get$__colorArray();
    if (typeof colorArray !== "object" || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.$isJavaScriptIndexingBehavior())
      return this.setLineBuffers$2$bailout(6, geometry, hint, vertices, colors, t3, vl, t4, cl, vertexArray, colorArray);
    dirtyVertices = geometry.get$verticesNeedUpdate();
    dirtyColors = geometry.get$colorsNeedUpdate();
    customAttributes = geometry.get$__webglCustomAttributesList();
    if (typeof customAttributes !== "string" && (typeof customAttributes !== "object" || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.$isJavaScriptIndexingBehavior()))
      return this.setLineBuffers$2$bailout(7, geometry, hint, vertices, colors, t3, vl, t4, cl, vertexArray, colorArray, dirtyVertices, dirtyColors, customAttributes);
    if (dirtyVertices === true) {
      for (t1 = vertexArray.length, v = 0, offset = null; v < vl; ++v) {
        vertex = vertices[v];
        offset = v * 3;
        t2 = vertex.get$x();
        if (offset < 0 || offset >= t1)
          throw $.ioore(offset);
        vertexArray[offset] = t2;
        t2 = vertex.get$y();
        t3 = offset + 1;
        if (t3 >= t1)
          throw $.ioore(t3);
        vertexArray[t3] = t2;
        t2 = vertex.get$z();
        t3 = offset + 2;
        if (t3 >= t1)
          throw $.ioore(t3);
        vertexArray[t3] = t2;
      }
      this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
      this._gl.bufferData$3(34962, vertexArray, hint);
    } else
      offset = null;
    if (dirtyColors === true) {
      for (t1 = colors.length, t2 = colorArray.length, c = 0; c < cl; ++c) {
        if (c >= t1)
          throw $.ioore(c);
        color = colors[c];
        offset = c * 3;
        t3 = color.get$r();
        if (offset < 0 || offset >= t2)
          throw $.ioore(offset);
        colorArray[offset] = t3;
        t3 = color.get$g();
        t4 = offset + 1;
        if (t4 >= t2)
          throw $.ioore(t4);
        colorArray[t4] = t3;
        t3 = color.get$b();
        t4 = offset + 2;
        if (t4 >= t2)
          throw $.ioore(t4);
        colorArray[t4] = t3;
      }
      this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
      this._gl.bufferData$3(34962, colorArray, hint);
    }
    il = customAttributes.length;
    for (i = 0, ca = null, cal = null, value = null; i < il; ++i) {
      if (i >= customAttributes.length)
        throw $.ioore(i);
      customAttribute = customAttributes[i];
      if (customAttribute.get$needsUpdate() === true) {
        t1 = customAttribute.get$boundTo();
        t1 = t1 == null || $.$$eq(t1, "vertices") === true;
      } else
        t1 = false;
      if (t1) {
        cal = $.length(customAttribute.get$value());
        if ($.$$eq(customAttribute.get$size(), 1) === true) {
          for (ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca)
            $.$$indexSet(customAttribute.get$array(), ca, $.$$index(customAttribute.get$value(), ca));
          offset = 0;
        } else if ($.$$eq(customAttribute.get$size(), 2) === true)
          for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
            value = $.$$index(customAttribute.get$value(), ca);
            $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
            $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            offset += 2;
          }
        else if ($.$$eq(customAttribute.get$size(), 3) === true)
          if ($.$$eq(customAttribute.get$type(), "c") === true)
            for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
              value = $.$$index(customAttribute.get$value(), ca);
              $.$$indexSet(customAttribute.get$array(), offset, value.get$r());
              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$g());
              $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$b());
              offset += 3;
            }
          else
            for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
              value = $.$$index(customAttribute.get$value(), ca);
              $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
              $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
              $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
              offset += 3;
            }
        else if ($.$$eq(customAttribute.get$size(), 4) === true)
          for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
            value = $.$$index(customAttribute.get$value(), ca);
            $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
            $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            $.$$indexSet(customAttribute.get$array(), offset + 3, value.get$w());
            offset += 4;
          }
        else
          offset = 0;
        this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
        this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
      }
    }
  },
  setLineBuffers$2$bailout: function(state0, geometry, hint, vertices, colors, t3, vl, t5, cl, vertexArray, colorArray, dirtyVertices, dirtyColors, customAttributes, il, t1, offset) {
    switch (state0) {
      case 0:
        vertices = geometry.get$vertices();
      case 1:
        state0 = 0;
        colors = geometry.get$colors();
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(vertices);
        vl = t3.get$length(vertices);
      case 3:
        state0 = 0;
        t5 = $.getInterceptor$JSStringJSArray(colors);
        cl = t5.get$length(colors);
      case 4:
        state0 = 0;
        vertexArray = geometry.get$__vertexArray();
      case 5:
        state0 = 0;
        colorArray = geometry.get$__colorArray();
      case 6:
        state0 = 0;
        dirtyVertices = geometry.get$verticesNeedUpdate();
        dirtyColors = geometry.get$colorsNeedUpdate();
        customAttributes = geometry.get$__webglCustomAttributesList();
      case 7:
        state0 = 0;
        if (dirtyVertices === true) {
          for (t1 = $.getInterceptor$JSArray(vertexArray), v = 0, offset = null; $.CONSTANT1.$lt(v, vl); ++v) {
            vertex = t3.$index(vertices, v);
            offset = v * 3;
            t1.$indexSet(vertexArray, offset, vertex.get$x());
            t1.$indexSet(vertexArray, offset + 1, vertex.get$y());
            t1.$indexSet(vertexArray, offset + 2, vertex.get$z());
          }
          this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
          this._gl.bufferData$3(34962, vertexArray, hint);
        } else
          offset = null;
        if (dirtyColors === true) {
          for (t1 = $.getInterceptor$JSArray(colorArray), c = 0; $.CONSTANT1.$lt(c, cl); ++c) {
            color = t5.$index(colors, c);
            offset = c * 3;
            t1.$indexSet(colorArray, offset, color.get$r());
            t1.$indexSet(colorArray, offset + 1, color.get$g());
            t1.$indexSet(colorArray, offset + 2, color.get$b());
          }
          this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
          this._gl.bufferData$3(34962, colorArray, hint);
        }
        t1 = $.getInterceptor(customAttributes);
      case 8:
        var v, vertex, c, color, i, ca, cal, value, customAttribute, t2;
        if (state0 === 8 || state0 === 0 && !(customAttributes == null))
          switch (state0) {
            case 0:
              il = t1.get$length(customAttributes);
            case 8:
              state0 = 0;
              for (i = 0, ca = null, cal = null, value = null; $.CONSTANT1.$lt(i, il); ++i) {
                customAttribute = t1.$index(customAttributes, i);
                if (customAttribute.get$needsUpdate() === true) {
                  t2 = customAttribute.get$boundTo();
                  t2 = t2 == null || $.$$eq(t2, "vertices") === true;
                } else
                  t2 = false;
                if (t2) {
                  cal = $.length(customAttribute.get$value());
                  if ($.$$eq(customAttribute.get$size(), 1) === true) {
                    for (ca = 0; $.CONSTANT1.$lt(ca, cal); ++ca)
                      $.$$indexSet(customAttribute.get$array(), ca, $.$$index(customAttribute.get$value(), ca));
                    offset = 0;
                  } else if ($.$$eq(customAttribute.get$size(), 2) === true)
                    for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                      value = $.$$index(customAttribute.get$value(), ca);
                      $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                      $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                      offset += 2;
                    }
                  else if ($.$$eq(customAttribute.get$size(), 3) === true)
                    if ($.$$eq(customAttribute.get$type(), "c") === true)
                      for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                        value = $.$$index(customAttribute.get$value(), ca);
                        $.$$indexSet(customAttribute.get$array(), offset, value.get$r());
                        $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                        $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                        offset += 3;
                      }
                    else
                      for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                        value = $.$$index(customAttribute.get$value(), ca);
                        $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                        $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                        $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                        offset += 3;
                      }
                  else if ($.$$eq(customAttribute.get$size(), 4) === true)
                    for (ca = 0, offset = 0; $.CONSTANT1.$lt(ca, cal); ++ca) {
                      value = $.$$index(customAttribute.get$value(), ca);
                      $.$$indexSet(customAttribute.get$array(), offset, value.get$x());
                      $.$$indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                      $.$$indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                      $.$$indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                      offset += 4;
                    }
                  else
                    offset = 0;
                  this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
                  this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
                }
              }
          }
    }
  },
  setRibbonBuffers$2: function(geometry, hint) {
    var vertices, colors, t3, vl, t4, cl, vertexArray, colorArray, dirtyVertices, dirtyColors, t1, v, vertex, offset, t2, c, color;
    vertices = geometry.get$vertices();
    if (typeof vertices !== "string" && (typeof vertices !== "object" || vertices === null || vertices.constructor !== Array && !vertices.$isJavaScriptIndexingBehavior()))
      return this.setRibbonBuffers$2$bailout(1, geometry, hint, vertices);
    colors = geometry.get$colors();
    if (typeof colors !== "string" && (typeof colors !== "object" || colors === null || colors.constructor !== Array && !colors.$isJavaScriptIndexingBehavior()))
      return this.setRibbonBuffers$2$bailout(2, geometry, hint, vertices, colors);
    t3 = $.getInterceptor$JSStringJSArray(vertices);
    vl = vertices.length;
    t4 = $.getInterceptor$JSStringJSArray(colors);
    cl = colors.length;
    vertexArray = geometry.get$__vertexArray();
    if (typeof vertexArray !== "object" || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.$isJavaScriptIndexingBehavior())
      return this.setRibbonBuffers$2$bailout(5, geometry, hint, vertices, colors, t3, vl, t4, cl, vertexArray);
    colorArray = geometry.get$__colorArray();
    if (typeof colorArray !== "object" || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.$isJavaScriptIndexingBehavior())
      return this.setRibbonBuffers$2$bailout(6, geometry, hint, vertices, colors, t3, vl, t4, cl, vertexArray, colorArray);
    dirtyVertices = geometry.get$verticesNeedUpdate();
    dirtyColors = geometry.get$colorsNeedUpdate();
    if (dirtyVertices === true) {
      for (t1 = vertexArray.length, v = 0; v < vl; ++v) {
        vertex = vertices[v];
        offset = v * 3;
        t2 = vertex.get$x();
        if (offset < 0 || offset >= t1)
          throw $.ioore(offset);
        vertexArray[offset] = t2;
        t2 = vertex.get$y();
        t3 = offset + 1;
        if (t3 >= t1)
          throw $.ioore(t3);
        vertexArray[t3] = t2;
        t2 = vertex.get$z();
        t3 = offset + 2;
        if (t3 >= t1)
          throw $.ioore(t3);
        vertexArray[t3] = t2;
      }
      this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
      this._gl.bufferData$3(34962, vertexArray, hint);
    }
    if (dirtyColors === true) {
      for (t1 = colors.length, t2 = colorArray.length, c = 0; c < cl; ++c) {
        if (c >= t1)
          throw $.ioore(c);
        color = colors[c];
        offset = c * 3;
        t3 = color.get$r();
        if (offset < 0 || offset >= t2)
          throw $.ioore(offset);
        colorArray[offset] = t3;
        t3 = color.get$g();
        t4 = offset + 1;
        if (t4 >= t2)
          throw $.ioore(t4);
        colorArray[t4] = t3;
        t3 = color.get$b();
        t4 = offset + 2;
        if (t4 >= t2)
          throw $.ioore(t4);
        colorArray[t4] = t3;
      }
      this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
      this._gl.bufferData$3(34962, colorArray, hint);
    }
  },
  setRibbonBuffers$2$bailout: function(state0, geometry, hint, vertices, colors, t3, vl, t5, cl, vertexArray, colorArray) {
    switch (state0) {
      case 0:
        vertices = geometry.get$vertices();
      case 1:
        state0 = 0;
        colors = geometry.get$colors();
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(vertices);
        vl = t3.get$length(vertices);
      case 3:
        state0 = 0;
        t5 = $.getInterceptor$JSStringJSArray(colors);
        cl = t5.get$length(colors);
      case 4:
        state0 = 0;
        vertexArray = geometry.get$__vertexArray();
      case 5:
        state0 = 0;
        colorArray = geometry.get$__colorArray();
      case 6:
        var dirtyVertices, dirtyColors, t1, v, vertex, offset, c, color;
        state0 = 0;
        dirtyVertices = geometry.get$verticesNeedUpdate();
        dirtyColors = geometry.get$colorsNeedUpdate();
        if (dirtyVertices === true) {
          for (t1 = $.getInterceptor$JSArray(vertexArray), v = 0; $.CONSTANT1.$lt(v, vl); ++v) {
            vertex = t3.$index(vertices, v);
            offset = v * 3;
            t1.$indexSet(vertexArray, offset, vertex.get$x());
            t1.$indexSet(vertexArray, offset + 1, vertex.get$y());
            t1.$indexSet(vertexArray, offset + 2, vertex.get$z());
          }
          this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
          this._gl.bufferData$3(34962, vertexArray, hint);
        }
        if (dirtyColors === true) {
          for (t1 = $.getInterceptor$JSArray(colorArray), c = 0; $.CONSTANT1.$lt(c, cl); ++c) {
            color = t5.$index(colors, c);
            offset = c * 3;
            t1.$indexSet(colorArray, offset, color.get$r());
            t1.$indexSet(colorArray, offset + 1, color.get$g());
            t1.$indexSet(colorArray, offset + 2, color.get$b());
          }
          this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
          this._gl.bufferData$3(34962, colorArray, hint);
        }
    }
  },
  setMeshBuffers$5: function(geometryGroup, object, hint, dispose, material) {
    var normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, t2, t3, offset, f, face, v1, v2, v3, t4, t5, v4, vkl, t6, t7, n1, n2, n3, n4, vk, vka, nka, chf, faceVertexNormals, offset_morphTarget, t8, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t9, t23, t24, t25, t26, offset_skin, sw1, sw2, sw3, si1, si2, si3, sa1, sa2, sa3, sb1, sb2, sb3, sw4, si4, sa4, sb4, offset_tangent, vertexTangents, t30, t40, i, vn, offset_normal, vertexNormals, faceNormal, uvi, offset_uv, fi, uv, uv2i, offset_uv2, uv2, vertexIndex, offset_face, offset_line, il, offset_custom, offset_customSrc, value, customAttribute, pp, t27, t28, t29, t31, t32, t33, t34, t35, t36, t37, t38;
    if (geometryGroup.get$__inittedArrays() !== true)
      return;
    normalType = this.bufferGuessNormalType$1(material);
    if (typeof normalType !== "number")
      return this.setMeshBuffers$5$bailout(1, geometryGroup, object, hint, dispose, material, normalType);
    vertexColorType = this.bufferGuessVertexColorType$1(material);
    if (typeof vertexColorType !== "number")
      return this.setMeshBuffers$5$bailout(2, geometryGroup, object, hint, dispose, material, normalType, vertexColorType);
    uvType = this.bufferGuessUVType$1(material);
    needsSmoothNormals = normalType === 2;
    vertexArray = geometryGroup.get$__vertexArray();
    if (typeof vertexArray !== "object" || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(3, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray);
    uvArray = geometryGroup.get$__uvArray();
    if (typeof uvArray !== "object" || uvArray === null || (uvArray.constructor !== Array || !!uvArray.immutable$list) && !uvArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(4, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray);
    uv2Array = geometryGroup.get$__uv2Array();
    if (typeof uv2Array !== "object" || uv2Array === null || (uv2Array.constructor !== Array || !!uv2Array.immutable$list) && !uv2Array.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(5, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array);
    normalArray = geometryGroup.get$__normalArray();
    if (typeof normalArray !== "object" || normalArray === null || (normalArray.constructor !== Array || !!normalArray.immutable$list) && !normalArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(6, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray);
    tangentArray = geometryGroup.get$__tangentArray();
    if (typeof tangentArray !== "object" || tangentArray === null || (tangentArray.constructor !== Array || !!tangentArray.immutable$list) && !tangentArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(7, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray);
    colorArray = geometryGroup.get$__colorArray();
    if (typeof colorArray !== "object" || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(8, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray);
    skinVertexAArray = geometryGroup.get$__skinVertexAArray();
    if (typeof skinVertexAArray !== "object" || skinVertexAArray === null || (skinVertexAArray.constructor !== Array || !!skinVertexAArray.immutable$list) && !skinVertexAArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(9, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray);
    skinVertexBArray = geometryGroup.get$__skinVertexBArray();
    if (typeof skinVertexBArray !== "object" || skinVertexBArray === null || (skinVertexBArray.constructor !== Array || !!skinVertexBArray.immutable$list) && !skinVertexBArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(10, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray);
    skinIndexArray = geometryGroup.get$__skinIndexArray();
    if (typeof skinIndexArray !== "object" || skinIndexArray === null || (skinIndexArray.constructor !== Array || !!skinIndexArray.immutable$list) && !skinIndexArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(11, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray);
    skinWeightArray = geometryGroup.get$__skinWeightArray();
    if (typeof skinWeightArray !== "object" || skinWeightArray === null || (skinWeightArray.constructor !== Array || !!skinWeightArray.immutable$list) && !skinWeightArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(12, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray);
    morphTargetsArrays = geometryGroup.get$__morphTargetsArrays();
    if (typeof morphTargetsArrays !== "string" && (typeof morphTargetsArrays !== "object" || morphTargetsArrays === null || morphTargetsArrays.constructor !== Array && !morphTargetsArrays.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(13, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays);
    morphNormalsArrays = geometryGroup.get$__morphNormalsArrays();
    if (typeof morphNormalsArrays !== "string" && (typeof morphNormalsArrays !== "object" || morphNormalsArrays === null || morphNormalsArrays.constructor !== Array && !morphNormalsArrays.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(14, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays);
    customAttributes = geometryGroup.get$__webglCustomAttributesList();
    if (typeof customAttributes !== "string" && (typeof customAttributes !== "object" || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(15, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes);
    faceArray = geometryGroup.get$__faceArray();
    if (typeof faceArray !== "object" || faceArray === null || (faceArray.constructor !== Array || !!faceArray.immutable$list) && !faceArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(16, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray);
    lineArray = geometryGroup.get$__lineArray();
    if (typeof lineArray !== "object" || lineArray === null || (lineArray.constructor !== Array || !!lineArray.immutable$list) && !lineArray.$isJavaScriptIndexingBehavior())
      return this.setMeshBuffers$5$bailout(17, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray);
    geometry = object.get$webglgeometry();
    dirtyVertices = geometry.get$verticesNeedUpdate();
    dirtyElements = geometry.get$elementsNeedUpdate();
    dirtyUvs = geometry.get$uvsNeedUpdate();
    dirtyNormals = geometry.get$normalsNeedUpdate();
    dirtyTangents = geometry.get$tangentsNeedUpdate();
    dirtyColors = geometry.get$colorsNeedUpdate();
    dirtyMorphTargets = geometry.get$morphTargetsNeedUpdate();
    vertices = geometry.get$vertices();
    if (typeof vertices !== "string" && (typeof vertices !== "object" || vertices === null || vertices.constructor !== Array && !vertices.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(18, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices);
    chunk_faces3 = geometryGroup.get$faces3();
    if (typeof chunk_faces3 !== "string" && (typeof chunk_faces3 !== "object" || chunk_faces3 === null || chunk_faces3.constructor !== Array && !chunk_faces3.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(19, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3);
    chunk_faces4 = geometryGroup.get$faces4();
    if (typeof chunk_faces4 !== "string" && (typeof chunk_faces4 !== "object" || chunk_faces4 === null || chunk_faces4.constructor !== Array && !chunk_faces4.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(20, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4);
    obj_faces = geometry.get$faces();
    if (typeof obj_faces !== "string" && (typeof obj_faces !== "object" || obj_faces === null || obj_faces.constructor !== Array && !obj_faces.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(21, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces);
    t22 = geometry.get$faceVertexUvs();
    if (typeof t22 !== "string" && (typeof t22 !== "object" || t22 === null || t22.constructor !== Array && !t22.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(22, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22);
    if (0 >= t22.length)
      throw $.ioore(0);
    t22 = t22[0];
    if (typeof t22 !== "string" && (typeof t22 !== "object" || t22 === null || t22.constructor !== Array && !t22.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(23, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22);
    t1 = $.length(geometry.get$faceVertexUvs());
    if (typeof t1 !== "number")
      return this.setMeshBuffers$5$bailout(24, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, t1);
    if (t1 > 1) {
      t1 = geometry.get$faceVertexUvs();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(25, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, t1);
      if (1 >= t1.length)
        throw $.ioore(1);
      obj_uvs2 = t1[1];
    } else
      obj_uvs2 = null;
    geometry.get$colors();
    obj_skinVerticesA = geometry.get$skinVerticesA();
    if (typeof obj_skinVerticesA !== "string" && (typeof obj_skinVerticesA !== "object" || obj_skinVerticesA === null || obj_skinVerticesA.constructor !== Array && !obj_skinVerticesA.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(26, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, null, obj_skinVerticesA, obj_uvs2);
    obj_skinVerticesB = geometry.get$skinVerticesB();
    if (typeof obj_skinVerticesB !== "string" && (typeof obj_skinVerticesB !== "object" || obj_skinVerticesB === null || obj_skinVerticesB.constructor !== Array && !obj_skinVerticesB.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(27, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, null, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB);
    obj_skinIndices = geometry.get$skinIndices();
    if (typeof obj_skinIndices !== "string" && (typeof obj_skinIndices !== "object" || obj_skinIndices === null || obj_skinIndices.constructor !== Array && !obj_skinIndices.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(28, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, null, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices);
    obj_skinWeights = geometry.get$skinWeights();
    if (typeof obj_skinWeights !== "string" && (typeof obj_skinWeights !== "object" || obj_skinWeights === null || obj_skinWeights.constructor !== Array && !obj_skinWeights.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(29, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, null, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights);
    morphTargets = geometry.get$morphTargets();
    if (typeof morphTargets !== "string" && (typeof morphTargets !== "object" || morphTargets === null || morphTargets.constructor !== Array && !morphTargets.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(30, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, null, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets);
    morphNormals = geometry.get$morphNormals();
    if (typeof morphNormals !== "string" && (typeof morphNormals !== "object" || morphNormals === null || morphNormals.constructor !== Array && !morphNormals.$isJavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(31, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t22, null, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals);
    if (dirtyVertices === true) {
      fl = chunk_faces3.length;
      for (t1 = obj_faces.length, t2 = vertices.length, t3 = vertexArray.length, offset = 0, f = 0, face = null, v1 = null, v2 = null, v3 = null; f < fl; ++f) {
        t4 = chunk_faces3[f];
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t1)
          throw $.ioore(t4);
        face = obj_faces[t4];
        t4 = face.get$a();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t2)
          throw $.ioore(t4);
        v1 = vertices[t4];
        t4 = face.get$b();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t2)
          throw $.ioore(t4);
        v2 = vertices[t4];
        t4 = face.get$c();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t2)
          throw $.ioore(t4);
        v3 = vertices[t4];
        t4 = v1.get$x();
        if (offset >= t3)
          throw $.ioore(offset);
        vertexArray[offset] = t4;
        t4 = v1.get$y();
        t5 = offset + 1;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v1.get$z();
        t5 = offset + 2;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v2.get$x();
        t5 = offset + 3;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v2.get$y();
        t5 = offset + 4;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v2.get$z();
        t5 = offset + 5;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v3.get$x();
        t5 = offset + 6;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v3.get$y();
        t5 = offset + 7;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v3.get$z();
        t5 = offset + 8;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        offset += 9;
      }
      fl = chunk_faces4.length;
      for (f = 0, v4 = null; f < fl; ++f) {
        t4 = chunk_faces4[f];
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t1)
          throw $.ioore(t4);
        face = obj_faces[t4];
        t4 = face.get$a();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t2)
          throw $.ioore(t4);
        v1 = vertices[t4];
        t4 = face.get$b();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t2)
          throw $.ioore(t4);
        v2 = vertices[t4];
        t4 = face.get$c();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t2)
          throw $.ioore(t4);
        v3 = vertices[t4];
        t4 = face.get$d();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t2)
          throw $.ioore(t4);
        v4 = vertices[t4];
        t4 = v1.get$x();
        if (offset >= t3)
          throw $.ioore(offset);
        vertexArray[offset] = t4;
        t4 = v1.get$y();
        t5 = offset + 1;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v1.get$z();
        t5 = offset + 2;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v2.get$x();
        t5 = offset + 3;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v2.get$y();
        t5 = offset + 4;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v2.get$z();
        t5 = offset + 5;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v3.get$x();
        t5 = offset + 6;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v3.get$y();
        t5 = offset + 7;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v3.get$z();
        t5 = offset + 8;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v4.get$x();
        t5 = offset + 9;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v4.get$y();
        t5 = offset + 10;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        t4 = v4.get$z();
        t5 = offset + 11;
        if (t5 >= t3)
          throw $.ioore(t5);
        vertexArray[t5] = t4;
        offset += 12;
      }
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
      this._gl.bufferData$3(34962, vertexArray, hint);
    } else {
      f = null;
      fl = null;
      face = null;
      v1 = null;
      v2 = null;
      v3 = null;
      v4 = null;
    }
    if (typeof fl !== "number")
      return this.setMeshBuffers$5$bailout(34, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, null, chunk_faces3, chunk_faces4, obj_faces, t22, null, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, null, null, v2, null, null, f, v4);
    if (dirtyMorphTargets === true) {
      t1 = $.getInterceptor$JSStringJSArray(morphTargets);
      vkl = morphTargets.length;
      for (t2 = $.getInterceptor$JSStringJSArray(morphNormalsArrays), t3 = $.getInterceptor$JSStringJSArray(morphTargetsArrays), t4 = $.getInterceptor$JSStringJSArray(morphNormals), t5 = $.getInterceptor$JSStringJSArray(chunk_faces4), t6 = $.getInterceptor$JSStringJSArray(obj_faces), t7 = $.getInterceptor$JSStringJSArray(chunk_faces3), n1 = null, n2 = null, n3 = null, n4 = null, vk = 0, vka = null, nka = null, chf = null, faceVertexNormals = null; vk < vkl; ++vk) {
        fl = chunk_faces3.length;
        for (offset_morphTarget = 0, f = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            throw $.ioore(f);
          chf = chunk_faces3[f];
          if (chf !== (chf | 0))
            throw $.iae(chf);
          if (chf < 0 || chf >= obj_faces.length)
            throw $.ioore(chf);
          face = obj_faces[chf];
          if (vk >= morphTargets.length)
            throw $.ioore(vk);
          t8 = morphTargets[vk].get$vertices();
          t10 = face.get$a();
          if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(37, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, null, null, t2, t3, null, t4, null, f, v4, vkl, vk, null, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, t8);
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= t8.length)
            throw $.ioore(t10);
          v1 = t8[t10];
          if (vk >= morphTargets.length)
            throw $.ioore(vk);
          t10 = morphTargets[vk].get$vertices();
          t11 = face.get$b();
          if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !t10.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(38, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, null, t2, t3, null, t4, null, f, v4, vkl, vk, null, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, t10);
          if (t11 !== (t11 | 0))
            throw $.iae(t11);
          if (t11 < 0 || t11 >= t10.length)
            throw $.ioore(t11);
          v2 = t10[t11];
          if (vk >= morphTargets.length)
            throw $.ioore(vk);
          t11 = morphTargets[vk].get$vertices();
          t12 = face.get$c();
          if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(39, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, null, t2, t3, v2, t4, null, f, v4, vkl, vk, null, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, t11);
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= t11.length)
            throw $.ioore(t12);
          v3 = t11[t12];
          if (vk >= morphTargetsArrays.length)
            throw $.ioore(vk);
          vka = morphTargetsArrays[vk];
          if (typeof vka !== "object" || vka === null || (vka.constructor !== Array || !!vka.immutable$list) && !vka.$isJavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(40, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t3, v2, t4, null, f, v4, vkl, vk, vka, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget);
          t11 = v1.get$x();
          t13 = vka.length;
          if (offset_morphTarget >= t13)
            throw $.ioore(offset_morphTarget);
          vka[offset_morphTarget] = t11;
          t11 = offset_morphTarget + 1;
          t14 = v1.get$y();
          if (t11 >= t13)
            throw $.ioore(t11);
          vka[t11] = t14;
          t14 = offset_morphTarget + 2;
          t15 = v1.get$z();
          if (t14 >= t13)
            throw $.ioore(t14);
          vka[t14] = t15;
          t15 = offset_morphTarget + 3;
          t16 = v2.get$x();
          if (t15 >= t13)
            throw $.ioore(t15);
          vka[t15] = t16;
          t16 = offset_morphTarget + 4;
          t17 = v2.get$y();
          if (t16 >= t13)
            throw $.ioore(t16);
          vka[t16] = t17;
          t17 = offset_morphTarget + 5;
          t18 = v2.get$z();
          if (t17 >= t13)
            throw $.ioore(t17);
          vka[t17] = t18;
          t18 = offset_morphTarget + 6;
          t19 = v3.get$x();
          if (t18 >= t13)
            throw $.ioore(t18);
          vka[t18] = t19;
          t19 = offset_morphTarget + 7;
          t20 = v3.get$y();
          if (t19 >= t13)
            throw $.ioore(t19);
          vka[t19] = t20;
          t20 = offset_morphTarget + 8;
          t21 = v3.get$z();
          if (t20 >= t13)
            throw $.ioore(t20);
          vka[t20] = t21;
          if (material.get$morphNormals() === true) {
            t8 = morphNormals.length;
            if (needsSmoothNormals) {
              if (vk >= t8)
                throw $.ioore(vk);
              faceVertexNormals = $.$$index(morphNormals[vk].get$vertexNormals(), chf);
              n1 = faceVertexNormals.get$a();
              n2 = faceVertexNormals.get$b();
              n3 = faceVertexNormals.get$c();
            } else {
              if (vk >= t8)
                throw $.ioore(vk);
              n1 = $.$$index(morphNormals[vk].get$faceNormals(), chf);
              n3 = n1;
              n2 = n3;
            }
            if (vk >= morphNormalsArrays.length)
              throw $.ioore(vk);
            nka = morphNormalsArrays[vk];
            if (typeof nka !== "object" || nka === null || (nka.constructor !== Array || !!nka.immutable$list) && !nka.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(41, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t3, v2, t4, null, f, v4, vkl, vk, vka, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, null, t11, t14, t15, t16, t17, t18, t19, t20);
            t9 = n1.get$x();
            t10 = nka.length;
            if (offset_morphTarget >= t10)
              throw $.ioore(offset_morphTarget);
            nka[offset_morphTarget] = t9;
            t9 = n1.get$y();
            if (t11 >= t10)
              throw $.ioore(t11);
            nka[t11] = t9;
            t9 = n1.get$z();
            if (t14 >= t10)
              throw $.ioore(t14);
            nka[t14] = t9;
            t9 = n2.get$x();
            if (t15 >= t10)
              throw $.ioore(t15);
            nka[t15] = t9;
            t9 = n2.get$y();
            if (t16 >= t10)
              throw $.ioore(t16);
            nka[t16] = t9;
            t9 = n2.get$z();
            if (t17 >= t10)
              throw $.ioore(t17);
            nka[t17] = t9;
            t9 = n3.get$x();
            if (t18 >= t10)
              throw $.ioore(t18);
            nka[t18] = t9;
            t9 = n3.get$y();
            if (t19 >= t10)
              throw $.ioore(t19);
            nka[t19] = t9;
            t9 = n3.get$z();
            if (t20 >= t10)
              throw $.ioore(t20);
            nka[t20] = t9;
          }
          offset_morphTarget += 9;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            throw $.ioore(f);
          chf = chunk_faces4[f];
          if (chf !== (chf | 0))
            throw $.iae(chf);
          if (chf < 0 || chf >= obj_faces.length)
            throw $.ioore(chf);
          face = obj_faces[chf];
          if (vk >= morphTargets.length)
            throw $.ioore(vk);
          t8 = morphTargets[vk].get$vertices();
          t10 = face.get$a();
          if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(43, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, null, null, t2, t3, null, t4, null, f, null, vkl, vk, null, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, t8);
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= t8.length)
            throw $.ioore(t10);
          v1 = t8[t10];
          if (vk >= morphTargets.length)
            throw $.ioore(vk);
          t10 = morphTargets[vk].get$vertices();
          t11 = face.get$b();
          if (typeof t10 !== "string" && (typeof t10 !== "object" || t10 === null || t10.constructor !== Array && !t10.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(44, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, null, t2, t3, null, t4, null, f, null, vkl, vk, null, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, t10);
          if (t11 !== (t11 | 0))
            throw $.iae(t11);
          if (t11 < 0 || t11 >= t10.length)
            throw $.ioore(t11);
          v2 = t10[t11];
          if (vk >= morphTargets.length)
            throw $.ioore(vk);
          t11 = morphTargets[vk].get$vertices();
          t12 = face.get$c();
          if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(45, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, null, t2, t3, v2, t4, null, f, null, vkl, vk, null, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, t11);
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= t11.length)
            throw $.ioore(t12);
          v3 = t11[t12];
          if (vk >= morphTargets.length)
            throw $.ioore(vk);
          t12 = morphTargets[vk].get$vertices();
          t13 = face.get$d();
          if (typeof t12 !== "string" && (typeof t12 !== "object" || t12 === null || t12.constructor !== Array && !t12.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(46, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t3, v2, t4, null, f, null, vkl, vk, null, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, t12);
          if (t13 !== (t13 | 0))
            throw $.iae(t13);
          if (t13 < 0 || t13 >= t12.length)
            throw $.ioore(t13);
          v4 = t12[t13];
          if (vk >= morphTargetsArrays.length)
            throw $.ioore(vk);
          vka = morphTargetsArrays[vk];
          if (typeof vka !== "object" || vka === null || (vka.constructor !== Array || !!vka.immutable$list) && !vka.$isJavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(47, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t3, v2, t4, null, f, v4, vkl, vk, vka, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget);
          t12 = v1.get$x();
          t14 = vka.length;
          if (offset_morphTarget >= t14)
            throw $.ioore(offset_morphTarget);
          vka[offset_morphTarget] = t12;
          t12 = offset_morphTarget + 1;
          t15 = v1.get$y();
          if (t12 >= t14)
            throw $.ioore(t12);
          vka[t12] = t15;
          t15 = offset_morphTarget + 2;
          t16 = v1.get$z();
          if (t15 >= t14)
            throw $.ioore(t15);
          vka[t15] = t16;
          t16 = offset_morphTarget + 3;
          t17 = v2.get$x();
          if (t16 >= t14)
            throw $.ioore(t16);
          vka[t16] = t17;
          t17 = offset_morphTarget + 4;
          t18 = v2.get$y();
          if (t17 >= t14)
            throw $.ioore(t17);
          vka[t17] = t18;
          t18 = offset_morphTarget + 5;
          t19 = v2.get$z();
          if (t18 >= t14)
            throw $.ioore(t18);
          vka[t18] = t19;
          t19 = offset_morphTarget + 6;
          t20 = v3.get$x();
          if (t19 >= t14)
            throw $.ioore(t19);
          vka[t19] = t20;
          t20 = offset_morphTarget + 7;
          t21 = v3.get$y();
          if (t20 >= t14)
            throw $.ioore(t20);
          vka[t20] = t21;
          t21 = offset_morphTarget + 8;
          t23 = v3.get$z();
          if (t21 >= t14)
            throw $.ioore(t21);
          vka[t21] = t23;
          t23 = offset_morphTarget + 9;
          t24 = v4.get$x();
          if (t23 >= t14)
            throw $.ioore(t23);
          vka[t23] = t24;
          t24 = offset_morphTarget + 10;
          t25 = v4.get$y();
          if (t24 >= t14)
            throw $.ioore(t24);
          vka[t24] = t25;
          t25 = offset_morphTarget + 11;
          t26 = v4.get$z();
          if (t25 >= t14)
            throw $.ioore(t25);
          vka[t25] = t26;
          if (material.get$morphNormals() === true) {
            t8 = morphNormals.length;
            if (needsSmoothNormals) {
              if (vk >= t8)
                throw $.ioore(vk);
              faceVertexNormals = $.$$index(morphNormals[vk].get$vertexNormals(), chf);
              n1 = faceVertexNormals.get$a();
              n2 = faceVertexNormals.get$b();
              n3 = faceVertexNormals.get$c();
              n4 = faceVertexNormals.get$d();
            } else {
              if (vk >= t8)
                throw $.ioore(vk);
              n1 = $.$$index(morphNormals[vk].get$faceNormals(), chf);
              n4 = n1;
              n3 = n4;
              n2 = n3;
            }
            if (vk >= morphNormalsArrays.length)
              throw $.ioore(vk);
            nka = morphNormalsArrays[vk];
            if (typeof nka !== "object" || nka === null || (nka.constructor !== Array || !!nka.immutable$list) && !nka.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(48, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t3, v2, t4, null, f, v4, vkl, vk, vka, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, offset_morphTarget, null, null, t12, t15, t16, t17, t18, t19, t20, t21, t23, t24, t25);
            t9 = n1.get$x();
            t10 = nka.length;
            if (offset_morphTarget >= t10)
              throw $.ioore(offset_morphTarget);
            nka[offset_morphTarget] = t9;
            t9 = n1.get$y();
            if (t12 >= t10)
              throw $.ioore(t12);
            nka[t12] = t9;
            t9 = n1.get$z();
            if (t15 >= t10)
              throw $.ioore(t15);
            nka[t15] = t9;
            t9 = n2.get$x();
            if (t16 >= t10)
              throw $.ioore(t16);
            nka[t16] = t9;
            t9 = n2.get$y();
            if (t17 >= t10)
              throw $.ioore(t17);
            nka[t17] = t9;
            t9 = n2.get$z();
            if (t18 >= t10)
              throw $.ioore(t18);
            nka[t18] = t9;
            t9 = n3.get$x();
            if (t19 >= t10)
              throw $.ioore(t19);
            nka[t19] = t9;
            t9 = n3.get$y();
            if (t20 >= t10)
              throw $.ioore(t20);
            nka[t20] = t9;
            t9 = n3.get$z();
            if (t21 >= t10)
              throw $.ioore(t21);
            nka[t21] = t9;
            t9 = n4.get$x();
            if (t23 >= t10)
              throw $.ioore(t23);
            nka[t23] = t9;
            t9 = n4.get$y();
            if (t24 >= t10)
              throw $.ioore(t24);
            nka[t24] = t9;
            t9 = n4.get$z();
            if (t25 >= t10)
              throw $.ioore(t25);
            nka[t25] = t9;
          }
          offset_morphTarget += 12;
        }
        t8 = this._gl;
        t9 = geometryGroup.get$__webglMorphTargetsBuffers();
        if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !t9.$isJavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(49, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t3, v2, t4, null, f, v4, vkl, vk, vka, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, null, t8, null, null, null, null, null, null, null, null, null, null, null, null, t9);
        if (vk >= t9.length)
          throw $.ioore(vk);
        t8.bindBuffer$2(34962, t9[vk]);
        t8 = this._gl;
        if (vk >= morphTargetsArrays.length)
          throw $.ioore(vk);
        t8.bufferData$3(34962, morphTargetsArrays[vk], hint);
        if (material.get$morphNormals() === true) {
          t8 = this._gl;
          t9 = geometryGroup.get$__webglMorphNormalsBuffers();
          if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !t9.$isJavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(50, geometryGroup, null, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, null, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t3, v2, t4, null, f, v4, vkl, vk, vka, nka, chf, faceVertexNormals, needsSmoothNormals, t7, n1, n2, n3, n4, t5, t6, null, t8, null, null, null, null, null, null, null, null, null, null, null, null, t9);
          if (vk >= t9.length)
            throw $.ioore(vk);
          t8.bindBuffer$2(34962, t9[vk]);
          t8 = this._gl;
          if (vk >= morphNormalsArrays.length)
            throw $.ioore(vk);
          t8.bufferData$3(34962, morphNormalsArrays[vk], hint);
        }
      }
    }
    if ($.getInterceptor$JSStringJSArray(obj_skinWeights).get$isEmpty(obj_skinWeights) !== true) {
      fl = chunk_faces3.length;
      for (t1 = obj_faces.length, t2 = obj_skinWeights.length, t3 = skinWeightArray.length, t4 = obj_skinIndices.length, t5 = skinIndexArray.length, t6 = obj_skinVerticesA.length, t7 = skinVertexAArray.length, t8 = obj_skinVerticesB.length, t9 = skinVertexBArray.length, offset_skin = 0, f = 0; f < fl; ++f) {
        t10 = chunk_faces3[f];
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t1)
          throw $.ioore(t10);
        face = obj_faces[t10];
        t10 = face.get$a();
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t2)
          throw $.ioore(t10);
        sw1 = obj_skinWeights[t10];
        t10 = face.get$b();
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t2)
          throw $.ioore(t10);
        sw2 = obj_skinWeights[t10];
        t10 = face.get$c();
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t2)
          throw $.ioore(t10);
        sw3 = obj_skinWeights[t10];
        t10 = sw1.get$x();
        if (offset_skin >= t3)
          throw $.ioore(offset_skin);
        skinWeightArray[offset_skin] = t10;
        t10 = offset_skin + 1;
        t11 = sw1.get$y();
        if (t10 >= t3)
          throw $.ioore(t10);
        skinWeightArray[t10] = t11;
        t11 = offset_skin + 2;
        t12 = sw1.get$z();
        if (t11 >= t3)
          throw $.ioore(t11);
        skinWeightArray[t11] = t12;
        t12 = offset_skin + 3;
        t13 = sw1.get$w();
        if (t12 >= t3)
          throw $.ioore(t12);
        skinWeightArray[t12] = t13;
        t13 = offset_skin + 4;
        t14 = sw2.get$x();
        if (t13 >= t3)
          throw $.ioore(t13);
        skinWeightArray[t13] = t14;
        t14 = offset_skin + 5;
        t15 = sw2.get$y();
        if (t14 >= t3)
          throw $.ioore(t14);
        skinWeightArray[t14] = t15;
        t15 = offset_skin + 6;
        t16 = sw2.get$z();
        if (t15 >= t3)
          throw $.ioore(t15);
        skinWeightArray[t15] = t16;
        t16 = offset_skin + 7;
        t17 = sw2.get$w();
        if (t16 >= t3)
          throw $.ioore(t16);
        skinWeightArray[t16] = t17;
        t17 = offset_skin + 8;
        t18 = sw3.get$x();
        if (t17 >= t3)
          throw $.ioore(t17);
        skinWeightArray[t17] = t18;
        t18 = offset_skin + 9;
        t19 = sw3.get$y();
        if (t18 >= t3)
          throw $.ioore(t18);
        skinWeightArray[t18] = t19;
        t19 = offset_skin + 10;
        t20 = sw3.get$z();
        if (t19 >= t3)
          throw $.ioore(t19);
        skinWeightArray[t19] = t20;
        t20 = offset_skin + 11;
        t21 = sw3.get$w();
        if (t20 >= t3)
          throw $.ioore(t20);
        skinWeightArray[t20] = t21;
        t21 = face.get$a();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t4)
          throw $.ioore(t21);
        si1 = obj_skinIndices[t21];
        t21 = face.get$b();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t4)
          throw $.ioore(t21);
        si2 = obj_skinIndices[t21];
        t21 = face.get$c();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t4)
          throw $.ioore(t21);
        si3 = obj_skinIndices[t21];
        t21 = si1.get$x();
        if (offset_skin >= t5)
          throw $.ioore(offset_skin);
        skinIndexArray[offset_skin] = t21;
        t21 = si1.get$y();
        if (t10 >= t5)
          throw $.ioore(t10);
        skinIndexArray[t10] = t21;
        t21 = si1.get$z();
        if (t11 >= t5)
          throw $.ioore(t11);
        skinIndexArray[t11] = t21;
        t21 = si1.get$w();
        if (t12 >= t5)
          throw $.ioore(t12);
        skinIndexArray[t12] = t21;
        t21 = si2.get$x();
        if (t13 >= t5)
          throw $.ioore(t13);
        skinIndexArray[t13] = t21;
        t21 = si2.get$y();
        if (t14 >= t5)
          throw $.ioore(t14);
        skinIndexArray[t14] = t21;
        t21 = si2.get$z();
        if (t15 >= t5)
          throw $.ioore(t15);
        skinIndexArray[t15] = t21;
        t21 = si2.get$w();
        if (t16 >= t5)
          throw $.ioore(t16);
        skinIndexArray[t16] = t21;
        t21 = si3.get$x();
        if (t17 >= t5)
          throw $.ioore(t17);
        skinIndexArray[t17] = t21;
        t21 = si3.get$y();
        if (t18 >= t5)
          throw $.ioore(t18);
        skinIndexArray[t18] = t21;
        t21 = si3.get$z();
        if (t19 >= t5)
          throw $.ioore(t19);
        skinIndexArray[t19] = t21;
        t21 = si3.get$w();
        if (t20 >= t5)
          throw $.ioore(t20);
        skinIndexArray[t20] = t21;
        t21 = face.get$a();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t6)
          throw $.ioore(t21);
        sa1 = obj_skinVerticesA[t21];
        t21 = face.get$b();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t6)
          throw $.ioore(t21);
        sa2 = obj_skinVerticesA[t21];
        t21 = face.get$c();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t6)
          throw $.ioore(t21);
        sa3 = obj_skinVerticesA[t21];
        t21 = sa1.get$x();
        if (offset_skin >= t7)
          throw $.ioore(offset_skin);
        skinVertexAArray[offset_skin] = t21;
        t21 = sa1.get$y();
        if (t10 >= t7)
          throw $.ioore(t10);
        skinVertexAArray[t10] = t21;
        t21 = sa1.get$z();
        if (t11 >= t7)
          throw $.ioore(t11);
        skinVertexAArray[t11] = t21;
        if (t12 >= t7)
          throw $.ioore(t12);
        skinVertexAArray[t12] = 1;
        t21 = sa2.get$x();
        if (t13 >= t7)
          throw $.ioore(t13);
        skinVertexAArray[t13] = t21;
        t21 = sa2.get$y();
        if (t14 >= t7)
          throw $.ioore(t14);
        skinVertexAArray[t14] = t21;
        t21 = sa2.get$z();
        if (t15 >= t7)
          throw $.ioore(t15);
        skinVertexAArray[t15] = t21;
        if (t16 >= t7)
          throw $.ioore(t16);
        skinVertexAArray[t16] = 1;
        t21 = sa3.get$x();
        if (t17 >= t7)
          throw $.ioore(t17);
        skinVertexAArray[t17] = t21;
        t21 = sa3.get$y();
        if (t18 >= t7)
          throw $.ioore(t18);
        skinVertexAArray[t18] = t21;
        t21 = sa3.get$z();
        if (t19 >= t7)
          throw $.ioore(t19);
        skinVertexAArray[t19] = t21;
        if (t20 >= t7)
          throw $.ioore(t20);
        skinVertexAArray[t20] = 1;
        t21 = face.get$a();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t8)
          throw $.ioore(t21);
        sb1 = obj_skinVerticesB[t21];
        t21 = face.get$b();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t8)
          throw $.ioore(t21);
        sb2 = obj_skinVerticesB[t21];
        t21 = face.get$c();
        if (t21 !== (t21 | 0))
          throw $.iae(t21);
        if (t21 < 0 || t21 >= t8)
          throw $.ioore(t21);
        sb3 = obj_skinVerticesB[t21];
        t21 = sb1.get$x();
        if (offset_skin >= t9)
          throw $.ioore(offset_skin);
        skinVertexBArray[offset_skin] = t21;
        t21 = sb1.get$y();
        if (t10 >= t9)
          throw $.ioore(t10);
        skinVertexBArray[t10] = t21;
        t21 = sb1.get$z();
        if (t11 >= t9)
          throw $.ioore(t11);
        skinVertexBArray[t11] = t21;
        if (t12 >= t9)
          throw $.ioore(t12);
        skinVertexBArray[t12] = 1;
        t12 = sb2.get$x();
        if (t13 >= t9)
          throw $.ioore(t13);
        skinVertexBArray[t13] = t12;
        t12 = sb2.get$y();
        if (t14 >= t9)
          throw $.ioore(t14);
        skinVertexBArray[t14] = t12;
        t12 = sb2.get$z();
        if (t15 >= t9)
          throw $.ioore(t15);
        skinVertexBArray[t15] = t12;
        if (t16 >= t9)
          throw $.ioore(t16);
        skinVertexBArray[t16] = 1;
        t16 = sb3.get$x();
        if (t17 >= t9)
          throw $.ioore(t17);
        skinVertexBArray[t17] = t16;
        t16 = sb3.get$y();
        if (t18 >= t9)
          throw $.ioore(t18);
        skinVertexBArray[t18] = t16;
        t16 = sb3.get$z();
        if (t19 >= t9)
          throw $.ioore(t19);
        skinVertexBArray[t19] = t16;
        if (t20 >= t9)
          throw $.ioore(t20);
        skinVertexBArray[t20] = 1;
        offset_skin += 12;
      }
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        t10 = chunk_faces4[f];
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t1)
          throw $.ioore(t10);
        face = obj_faces[t10];
        t10 = face.get$a();
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t2)
          throw $.ioore(t10);
        sw1 = obj_skinWeights[t10];
        t10 = face.get$b();
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t2)
          throw $.ioore(t10);
        sw2 = obj_skinWeights[t10];
        t10 = face.get$c();
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t2)
          throw $.ioore(t10);
        sw3 = obj_skinWeights[t10];
        t10 = face.get$d();
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t2)
          throw $.ioore(t10);
        sw4 = obj_skinWeights[t10];
        t10 = sw1.get$x();
        if (offset_skin >= t3)
          throw $.ioore(offset_skin);
        skinWeightArray[offset_skin] = t10;
        t10 = offset_skin + 1;
        t11 = sw1.get$y();
        if (t10 >= t3)
          throw $.ioore(t10);
        skinWeightArray[t10] = t11;
        t11 = offset_skin + 2;
        t12 = sw1.get$z();
        if (t11 >= t3)
          throw $.ioore(t11);
        skinWeightArray[t11] = t12;
        t12 = offset_skin + 3;
        t13 = sw1.get$w();
        if (t12 >= t3)
          throw $.ioore(t12);
        skinWeightArray[t12] = t13;
        t13 = offset_skin + 4;
        t14 = sw2.get$x();
        if (t13 >= t3)
          throw $.ioore(t13);
        skinWeightArray[t13] = t14;
        t14 = offset_skin + 5;
        t15 = sw2.get$y();
        if (t14 >= t3)
          throw $.ioore(t14);
        skinWeightArray[t14] = t15;
        t15 = offset_skin + 6;
        t16 = sw2.get$z();
        if (t15 >= t3)
          throw $.ioore(t15);
        skinWeightArray[t15] = t16;
        t16 = offset_skin + 7;
        t17 = sw2.get$w();
        if (t16 >= t3)
          throw $.ioore(t16);
        skinWeightArray[t16] = t17;
        t17 = offset_skin + 8;
        t18 = sw3.get$x();
        if (t17 >= t3)
          throw $.ioore(t17);
        skinWeightArray[t17] = t18;
        t18 = offset_skin + 9;
        t19 = sw3.get$y();
        if (t18 >= t3)
          throw $.ioore(t18);
        skinWeightArray[t18] = t19;
        t19 = offset_skin + 10;
        t20 = sw3.get$z();
        if (t19 >= t3)
          throw $.ioore(t19);
        skinWeightArray[t19] = t20;
        t20 = offset_skin + 11;
        t21 = sw3.get$w();
        if (t20 >= t3)
          throw $.ioore(t20);
        skinWeightArray[t20] = t21;
        t21 = offset_skin + 12;
        t23 = sw4.get$x();
        if (t21 >= t3)
          throw $.ioore(t21);
        skinWeightArray[t21] = t23;
        t23 = offset_skin + 13;
        t24 = sw4.get$y();
        if (t23 >= t3)
          throw $.ioore(t23);
        skinWeightArray[t23] = t24;
        t24 = offset_skin + 14;
        t25 = sw4.get$z();
        if (t24 >= t3)
          throw $.ioore(t24);
        skinWeightArray[t24] = t25;
        t25 = offset_skin + 15;
        t26 = sw4.get$w();
        if (t25 >= t3)
          throw $.ioore(t25);
        skinWeightArray[t25] = t26;
        t26 = face.get$a();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t4)
          throw $.ioore(t26);
        si1 = obj_skinIndices[t26];
        t26 = face.get$b();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t4)
          throw $.ioore(t26);
        si2 = obj_skinIndices[t26];
        t26 = face.get$c();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t4)
          throw $.ioore(t26);
        si3 = obj_skinIndices[t26];
        t26 = face.get$d();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t4)
          throw $.ioore(t26);
        si4 = obj_skinIndices[t26];
        t26 = si1.get$x();
        if (offset_skin >= t5)
          throw $.ioore(offset_skin);
        skinIndexArray[offset_skin] = t26;
        t26 = si1.get$y();
        if (t10 >= t5)
          throw $.ioore(t10);
        skinIndexArray[t10] = t26;
        t26 = si1.get$z();
        if (t11 >= t5)
          throw $.ioore(t11);
        skinIndexArray[t11] = t26;
        t26 = si1.get$w();
        if (t12 >= t5)
          throw $.ioore(t12);
        skinIndexArray[t12] = t26;
        t26 = si2.get$x();
        if (t13 >= t5)
          throw $.ioore(t13);
        skinIndexArray[t13] = t26;
        t26 = si2.get$y();
        if (t14 >= t5)
          throw $.ioore(t14);
        skinIndexArray[t14] = t26;
        t26 = si2.get$z();
        if (t15 >= t5)
          throw $.ioore(t15);
        skinIndexArray[t15] = t26;
        t26 = si2.get$w();
        if (t16 >= t5)
          throw $.ioore(t16);
        skinIndexArray[t16] = t26;
        t26 = si3.get$x();
        if (t17 >= t5)
          throw $.ioore(t17);
        skinIndexArray[t17] = t26;
        t26 = si3.get$y();
        if (t18 >= t5)
          throw $.ioore(t18);
        skinIndexArray[t18] = t26;
        t26 = si3.get$z();
        if (t19 >= t5)
          throw $.ioore(t19);
        skinIndexArray[t19] = t26;
        t26 = si3.get$w();
        if (t20 >= t5)
          throw $.ioore(t20);
        skinIndexArray[t20] = t26;
        t26 = si4.get$x();
        if (t21 >= t5)
          throw $.ioore(t21);
        skinIndexArray[t21] = t26;
        t26 = si4.get$y();
        if (t23 >= t5)
          throw $.ioore(t23);
        skinIndexArray[t23] = t26;
        t26 = si4.get$z();
        if (t24 >= t5)
          throw $.ioore(t24);
        skinIndexArray[t24] = t26;
        t26 = si4.get$w();
        if (t25 >= t5)
          throw $.ioore(t25);
        skinIndexArray[t25] = t26;
        t26 = face.get$a();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t6)
          throw $.ioore(t26);
        sa1 = obj_skinVerticesA[t26];
        t26 = face.get$b();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t6)
          throw $.ioore(t26);
        sa2 = obj_skinVerticesA[t26];
        t26 = face.get$c();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t6)
          throw $.ioore(t26);
        sa3 = obj_skinVerticesA[t26];
        t26 = face.get$d();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t6)
          throw $.ioore(t26);
        sa4 = obj_skinVerticesA[t26];
        t26 = sa1.get$x();
        if (offset_skin >= t7)
          throw $.ioore(offset_skin);
        skinVertexAArray[offset_skin] = t26;
        t26 = sa1.get$y();
        if (t10 >= t7)
          throw $.ioore(t10);
        skinVertexAArray[t10] = t26;
        t26 = sa1.get$z();
        if (t11 >= t7)
          throw $.ioore(t11);
        skinVertexAArray[t11] = t26;
        if (t12 >= t7)
          throw $.ioore(t12);
        skinVertexAArray[t12] = 1;
        t26 = sa2.get$x();
        if (t13 >= t7)
          throw $.ioore(t13);
        skinVertexAArray[t13] = t26;
        t26 = sa2.get$y();
        if (t14 >= t7)
          throw $.ioore(t14);
        skinVertexAArray[t14] = t26;
        t26 = sa2.get$z();
        if (t15 >= t7)
          throw $.ioore(t15);
        skinVertexAArray[t15] = t26;
        if (t16 >= t7)
          throw $.ioore(t16);
        skinVertexAArray[t16] = 1;
        t26 = sa3.get$x();
        if (t17 >= t7)
          throw $.ioore(t17);
        skinVertexAArray[t17] = t26;
        t26 = sa3.get$y();
        if (t18 >= t7)
          throw $.ioore(t18);
        skinVertexAArray[t18] = t26;
        t26 = sa3.get$z();
        if (t19 >= t7)
          throw $.ioore(t19);
        skinVertexAArray[t19] = t26;
        if (t20 >= t7)
          throw $.ioore(t20);
        skinVertexAArray[t20] = 1;
        t26 = sa4.get$x();
        if (t21 >= t7)
          throw $.ioore(t21);
        skinVertexAArray[t21] = t26;
        t26 = sa4.get$y();
        if (t23 >= t7)
          throw $.ioore(t23);
        skinVertexAArray[t23] = t26;
        t26 = sa4.get$z();
        if (t24 >= t7)
          throw $.ioore(t24);
        skinVertexAArray[t24] = t26;
        if (t25 >= t7)
          throw $.ioore(t25);
        skinVertexAArray[t25] = 1;
        t26 = face.get$a();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t8)
          throw $.ioore(t26);
        sb1 = obj_skinVerticesB[t26];
        t26 = face.get$b();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t8)
          throw $.ioore(t26);
        sb2 = obj_skinVerticesB[t26];
        t26 = face.get$c();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t8)
          throw $.ioore(t26);
        sb3 = obj_skinVerticesB[t26];
        t26 = face.get$d();
        if (t26 !== (t26 | 0))
          throw $.iae(t26);
        if (t26 < 0 || t26 >= t8)
          throw $.ioore(t26);
        sb4 = obj_skinVerticesB[t26];
        t26 = sb1.get$x();
        if (offset_skin >= t9)
          throw $.ioore(offset_skin);
        skinVertexBArray[offset_skin] = t26;
        t26 = sb1.get$y();
        if (t10 >= t9)
          throw $.ioore(t10);
        skinVertexBArray[t10] = t26;
        t26 = sb1.get$z();
        if (t11 >= t9)
          throw $.ioore(t11);
        skinVertexBArray[t11] = t26;
        if (t12 >= t9)
          throw $.ioore(t12);
        skinVertexBArray[t12] = 1;
        t12 = sb2.get$x();
        if (t13 >= t9)
          throw $.ioore(t13);
        skinVertexBArray[t13] = t12;
        t12 = sb2.get$y();
        if (t14 >= t9)
          throw $.ioore(t14);
        skinVertexBArray[t14] = t12;
        t12 = sb2.get$z();
        if (t15 >= t9)
          throw $.ioore(t15);
        skinVertexBArray[t15] = t12;
        if (t16 >= t9)
          throw $.ioore(t16);
        skinVertexBArray[t16] = 1;
        t16 = sb3.get$x();
        if (t17 >= t9)
          throw $.ioore(t17);
        skinVertexBArray[t17] = t16;
        t16 = sb3.get$y();
        if (t18 >= t9)
          throw $.ioore(t18);
        skinVertexBArray[t18] = t16;
        t16 = sb3.get$z();
        if (t19 >= t9)
          throw $.ioore(t19);
        skinVertexBArray[t19] = t16;
        if (t20 >= t9)
          throw $.ioore(t20);
        skinVertexBArray[t20] = 1;
        t20 = sb4.get$x();
        if (t21 >= t9)
          throw $.ioore(t21);
        skinVertexBArray[t21] = t20;
        t20 = sb4.get$y();
        if (t23 >= t9)
          throw $.ioore(t23);
        skinVertexBArray[t23] = t20;
        t20 = sb4.get$z();
        if (t24 >= t9)
          throw $.ioore(t24);
        skinVertexBArray[t24] = t20;
        if (t25 >= t9)
          throw $.ioore(t25);
        skinVertexBArray[t25] = 1;
        offset_skin += 16;
      }
      if (offset_skin > 0) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
        this._gl.bufferData$3(34962, skinVertexAArray, hint);
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
        this._gl.bufferData$3(34962, skinVertexBArray, hint);
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
        this._gl.bufferData$3(34962, skinIndexArray, hint);
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
        this._gl.bufferData$3(34962, skinWeightArray, hint);
      }
    }
    if (dirtyColors === true)
      ;
    if (dirtyTangents === true && geometry.get$hasTangents() === true) {
      t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
      fl = chunk_faces3.length;
      for (t2 = $.getInterceptor$JSStringJSArray(obj_faces), t3 = obj_faces.length, t4 = tangentArray.length, offset_tangent = 0, f = 0; f < fl; ++f) {
        t5 = chunk_faces3[f];
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t3)
          throw $.ioore(t5);
        face = obj_faces[t5];
        vertexTangents = face.get$vertexTangents();
        if (typeof vertexTangents !== "string" && (typeof vertexTangents !== "object" || vertexTangents === null || vertexTangents.constructor !== Array && !vertexTangents.$isJavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(60, geometryGroup, null, hint, dispose, null, normalType, null, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, null, null, null, null, null, null, null, customAttributes, faceArray, lineArray, null, null, dirtyElements, dirtyUvs, dirtyNormals, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, null, obj_uvs2, null, null, null, null, null, fl, face, v1, v3, t2, $.CONSTANT0, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, offset_tangent, vertexTangents);
        t6 = vertexTangents.length;
        if (0 >= t6)
          throw $.ioore(0);
        t10 = vertexTangents[0];
        if (1 >= t6)
          throw $.ioore(1);
        t20 = vertexTangents[1];
        if (2 >= t6)
          throw $.ioore(2);
        t30 = vertexTangents[2];
        t7 = t10.get$x();
        if (offset_tangent >= t4)
          throw $.ioore(offset_tangent);
        tangentArray[offset_tangent] = t7;
        t7 = t10.get$y();
        t8 = offset_tangent + 1;
        if (t8 >= t4)
          throw $.ioore(t8);
        tangentArray[t8] = t7;
        t7 = t10.get$z();
        t8 = offset_tangent + 2;
        if (t8 >= t4)
          throw $.ioore(t8);
        tangentArray[t8] = t7;
        t10 = t10.get$w();
        t7 = offset_tangent + 3;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t10 = t20.get$x();
        t7 = offset_tangent + 4;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t10 = t20.get$y();
        t7 = offset_tangent + 5;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t10 = t20.get$z();
        t7 = offset_tangent + 6;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t20 = t20.get$w();
        t10 = offset_tangent + 7;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t20 = t30.get$x();
        t10 = offset_tangent + 8;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t20 = t30.get$y();
        t10 = offset_tangent + 9;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t20 = t30.get$z();
        t10 = offset_tangent + 10;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t30 = t30.get$w();
        t20 = offset_tangent + 11;
        if (t20 >= t4)
          throw $.ioore(t20);
        tangentArray[t20] = t30;
        offset_tangent += 12;
      }
      t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        t5 = chunk_faces4[f];
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t3)
          throw $.ioore(t5);
        face = obj_faces[t5];
        vertexTangents = face.get$vertexTangents();
        if (typeof vertexTangents !== "string" && (typeof vertexTangents !== "object" || vertexTangents === null || vertexTangents.constructor !== Array && !vertexTangents.$isJavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(62, geometryGroup, null, hint, dispose, null, normalType, null, uvType, needsSmoothNormals, $.CONSTANT3, null, uvArray, uv2Array, normalArray, tangentArray, null, null, null, null, null, null, null, customAttributes, faceArray, lineArray, null, null, dirtyElements, dirtyUvs, dirtyNormals, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, null, obj_uvs2, null, null, null, null, null, fl, face, v1, v3, t2, $.CONSTANT0, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, offset_tangent, vertexTangents);
        t6 = vertexTangents.length;
        if (0 >= t6)
          throw $.ioore(0);
        t10 = vertexTangents[0];
        if (1 >= t6)
          throw $.ioore(1);
        t20 = vertexTangents[1];
        if (2 >= t6)
          throw $.ioore(2);
        t30 = vertexTangents[2];
        if (3 >= t6)
          throw $.ioore(3);
        t40 = vertexTangents[3];
        t7 = t10.get$x();
        if (offset_tangent >= t4)
          throw $.ioore(offset_tangent);
        tangentArray[offset_tangent] = t7;
        t7 = t10.get$y();
        t8 = offset_tangent + 1;
        if (t8 >= t4)
          throw $.ioore(t8);
        tangentArray[t8] = t7;
        t7 = t10.get$z();
        t8 = offset_tangent + 2;
        if (t8 >= t4)
          throw $.ioore(t8);
        tangentArray[t8] = t7;
        t10 = t10.get$w();
        t7 = offset_tangent + 3;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t10 = t20.get$x();
        t7 = offset_tangent + 4;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t10 = t20.get$y();
        t7 = offset_tangent + 5;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t10 = t20.get$z();
        t7 = offset_tangent + 6;
        if (t7 >= t4)
          throw $.ioore(t7);
        tangentArray[t7] = t10;
        t20 = t20.get$w();
        t10 = offset_tangent + 7;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t20 = t30.get$x();
        t10 = offset_tangent + 8;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t20 = t30.get$y();
        t10 = offset_tangent + 9;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t20 = t30.get$z();
        t10 = offset_tangent + 10;
        if (t10 >= t4)
          throw $.ioore(t10);
        tangentArray[t10] = t20;
        t30 = t30.get$w();
        t20 = offset_tangent + 11;
        if (t20 >= t4)
          throw $.ioore(t20);
        tangentArray[t20] = t30;
        t30 = t40.get$x();
        t20 = offset_tangent + 12;
        if (t20 >= t4)
          throw $.ioore(t20);
        tangentArray[t20] = t30;
        t30 = t40.get$y();
        t20 = offset_tangent + 13;
        if (t20 >= t4)
          throw $.ioore(t20);
        tangentArray[t20] = t30;
        t30 = t40.get$z();
        t20 = offset_tangent + 14;
        if (t20 >= t4)
          throw $.ioore(t20);
        tangentArray[t20] = t30;
        t40 = t40.get$w();
        t30 = offset_tangent + 15;
        if (t30 >= t4)
          throw $.ioore(t30);
        tangentArray[t30] = t40;
        offset_tangent += 16;
      }
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
      this._gl.bufferData$3(34962, tangentArray, hint);
    }
    if (dirtyNormals === true && !(normalType === 0)) {
      t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
      fl = chunk_faces3.length;
      for (t2 = $.getInterceptor$JSStringJSArray(obj_faces), t3 = normalArray.length, t4 = obj_faces.length, i = null, vn = null, offset_normal = 0, f = 0; f < fl; ++f) {
        t5 = chunk_faces3[f];
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t4)
          throw $.ioore(t5);
        face = obj_faces[t5];
        vertexNormals = face.get$vertexNormals();
        if (typeof vertexNormals !== "string" && (typeof vertexNormals !== "object" || vertexNormals === null || vertexNormals.constructor !== Array && !vertexNormals.$isJavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(64, geometryGroup, null, hint, dispose, null, null, null, uvType, null, needsSmoothNormals, null, uvArray, uv2Array, normalArray, null, null, null, null, null, null, null, null, customAttributes, faceArray, lineArray, null, null, dirtyElements, dirtyUvs, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, null, obj_uvs2, null, null, null, null, null, fl, face, v1, v3, $.CONSTANT0, t2, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, vn, offset_normal, vertexNormals);
        faceNormal = face.get$normal();
        t5 = vertexNormals.length;
        if (t5 === 3 && needsSmoothNormals)
          for (i = 0; i < 3; ++i) {
            if (i >= t5)
              throw $.ioore(i);
            vn = vertexNormals[i];
            t6 = vn.get$x();
            if (offset_normal < 0 || offset_normal >= t3)
              throw $.ioore(offset_normal);
            normalArray[offset_normal] = t6;
            t6 = vn.get$y();
            t7 = offset_normal + 1;
            if (t7 >= t3)
              throw $.ioore(t7);
            normalArray[t7] = t6;
            t6 = vn.get$z();
            t7 = offset_normal + 2;
            if (t7 >= t3)
              throw $.ioore(t7);
            normalArray[t7] = t6;
            offset_normal += 3;
          }
        else
          for (i = 0; i < 3; ++i) {
            t5 = faceNormal.get$x();
            if (offset_normal < 0 || offset_normal >= t3)
              throw $.ioore(offset_normal);
            normalArray[offset_normal] = t5;
            t5 = faceNormal.get$y();
            t6 = offset_normal + 1;
            if (t6 >= t3)
              throw $.ioore(t6);
            normalArray[t6] = t5;
            t5 = faceNormal.get$z();
            t6 = offset_normal + 2;
            if (t6 >= t3)
              throw $.ioore(t6);
            normalArray[t6] = t5;
            offset_normal += 3;
          }
      }
      t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        t5 = chunk_faces4[f];
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t4)
          throw $.ioore(t5);
        face = obj_faces[t5];
        vertexNormals = face.get$vertexNormals();
        if (typeof vertexNormals !== "string" && (typeof vertexNormals !== "object" || vertexNormals === null || vertexNormals.constructor !== Array && !vertexNormals.$isJavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(67, geometryGroup, null, hint, dispose, null, null, null, uvType, null, needsSmoothNormals, null, uvArray, uv2Array, normalArray, null, null, null, null, null, null, null, null, customAttributes, faceArray, lineArray, null, null, dirtyElements, dirtyUvs, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, t22, t1, null, obj_uvs2, null, null, null, null, null, fl, face, v1, v3, $.CONSTANT0, t2, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, vn, offset_normal, vertexNormals);
        faceNormal = face.get$normal();
        t5 = vertexNormals.length;
        if (t5 === 4 && needsSmoothNormals)
          for (i = 0; i < 4; ++i) {
            if (i >= t5)
              throw $.ioore(i);
            vn = vertexNormals[i];
            t6 = vn.get$x();
            if (offset_normal < 0 || offset_normal >= t3)
              throw $.ioore(offset_normal);
            normalArray[offset_normal] = t6;
            t6 = vn.get$y();
            t7 = offset_normal + 1;
            if (t7 >= t3)
              throw $.ioore(t7);
            normalArray[t7] = t6;
            t6 = vn.get$z();
            t7 = offset_normal + 2;
            if (t7 >= t3)
              throw $.ioore(t7);
            normalArray[t7] = t6;
            offset_normal += 3;
          }
        else
          for (i = 0; i < 4; ++i) {
            t5 = faceNormal.get$x();
            if (offset_normal < 0 || offset_normal >= t3)
              throw $.ioore(offset_normal);
            normalArray[offset_normal] = t5;
            t5 = faceNormal.get$y();
            t6 = offset_normal + 1;
            if (t6 >= t3)
              throw $.ioore(t6);
            normalArray[t6] = t5;
            t5 = faceNormal.get$z();
            t6 = offset_normal + 2;
            if (t6 >= t3)
              throw $.ioore(t6);
            normalArray[t6] = t5;
            offset_normal += 3;
          }
      }
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
      this._gl.bufferData$3(34962, normalArray, hint);
    } else
      i = null;
    t1 = dirtyUvs === true;
    if (t1 && $.isEmpty(t22) !== true && uvType === true) {
      fl = chunk_faces3.length;
      for (uvi = null, offset_uv = 0, f = 0; f < fl; ++f) {
        if (f >= chunk_faces3.length)
          throw $.ioore(f);
        fi = chunk_faces3[f];
        if (fi !== (fi | 0))
          throw $.iae(fi);
        if (fi < 0 || fi >= obj_faces.length)
          throw $.ioore(fi);
        face = obj_faces[fi];
        if (fi >= t22.length)
          throw $.ioore(fi);
        uv = t22[fi];
        t2 = $.getInterceptor(uv);
        if (uv == null)
          continue;
        for (i = 0; i < 3; ++i) {
          uvi = t2.$index(uv, i);
          t3 = uvi.get$u();
          t4 = uvArray.length;
          if (offset_uv < 0 || offset_uv >= t4)
            throw $.ioore(offset_uv);
          uvArray[offset_uv] = t3;
          t3 = uvi.get$v();
          t5 = offset_uv + 1;
          if (t5 >= t4)
            throw $.ioore(t5);
          uvArray[t5] = t3;
          offset_uv += 2;
        }
      }
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        if (f >= chunk_faces4.length)
          throw $.ioore(f);
        fi = chunk_faces4[f];
        if (fi !== (fi | 0))
          throw $.iae(fi);
        if (fi < 0 || fi >= obj_faces.length)
          throw $.ioore(fi);
        face = obj_faces[fi];
        if (fi >= t22.length)
          throw $.ioore(fi);
        uv = t22[fi];
        t2 = $.getInterceptor(uv);
        if (uv == null)
          continue;
        for (i = 0; i < 4; ++i) {
          uvi = t2.$index(uv, i);
          t3 = uvi.get$u();
          t4 = uvArray.length;
          if (offset_uv < 0 || offset_uv >= t4)
            throw $.ioore(offset_uv);
          uvArray[offset_uv] = t3;
          t3 = uvi.get$v();
          t5 = offset_uv + 1;
          if (t5 >= t4)
            throw $.ioore(t5);
          uvArray[t5] = t3;
          offset_uv += 2;
        }
      }
      if (offset_uv > 0) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUVBuffer());
        this._gl.bufferData$3(34962, uvArray, hint);
      }
    }
    if (t1 && !(obj_uvs2 == null) && uvType === true) {
      fl = chunk_faces3.length;
      for (t1 = $.getInterceptor$JSStringJSArray(obj_uvs2), uv2i = null, offset_uv2 = 0, f = 0; f < fl; ++f) {
        if (f >= chunk_faces3.length)
          throw $.ioore(f);
        fi = chunk_faces3[f];
        if (fi !== (fi | 0))
          throw $.iae(fi);
        if (fi < 0 || fi >= obj_faces.length)
          throw $.ioore(fi);
        face = obj_faces[fi];
        uv2 = t1.$index(obj_uvs2, fi);
        t2 = $.getInterceptor(uv2);
        if (uv2 == null)
          continue;
        for (i = 0; i < 3; ++i) {
          uv2i = t2.$index(uv2, i);
          t3 = uv2i.get$u();
          t4 = uv2Array.length;
          if (offset_uv2 < 0 || offset_uv2 >= t4)
            throw $.ioore(offset_uv2);
          uv2Array[offset_uv2] = t3;
          t3 = uv2i.get$v();
          t5 = offset_uv2 + 1;
          if (t5 >= t4)
            throw $.ioore(t5);
          uv2Array[t5] = t3;
          offset_uv2 += 2;
        }
      }
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        if (f >= chunk_faces4.length)
          throw $.ioore(f);
        fi = chunk_faces4[f];
        if (fi !== (fi | 0))
          throw $.iae(fi);
        if (fi < 0 || fi >= obj_faces.length)
          throw $.ioore(fi);
        face = obj_faces[fi];
        uv2 = t1.$index(obj_uvs2, fi);
        t2 = $.getInterceptor(uv2);
        if (uv2 == null)
          continue;
        for (i = 0; i < 4; ++i) {
          uv2i = t2.$index(uv2, i);
          t3 = uv2i.get$u();
          t4 = uv2Array.length;
          if (offset_uv2 < 0 || offset_uv2 >= t4)
            throw $.ioore(offset_uv2);
          uv2Array[offset_uv2] = t3;
          t3 = uv2i.get$v();
          t5 = offset_uv2 + 1;
          if (t5 >= t4)
            throw $.ioore(t5);
          uv2Array[t5] = t3;
          offset_uv2 += 2;
        }
      }
      if (offset_uv2 > 0) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUV2Buffer());
        this._gl.bufferData$3(34962, uv2Array, hint);
      }
    }
    if (dirtyElements === true) {
      fl = chunk_faces3.length;
      for (t1 = obj_faces.length, t2 = faceArray.length, t3 = lineArray.length, vertexIndex = 0, offset_face = 0, offset_line = 0, f = 0; f < fl; ++f) {
        t4 = chunk_faces3[f];
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t1)
          throw $.ioore(t4);
        face = obj_faces[t4];
        if (offset_face >= t2)
          throw $.ioore(offset_face);
        faceArray[offset_face] = vertexIndex;
        t4 = vertexIndex + 1;
        t5 = offset_face + 1;
        if (t5 >= t2)
          throw $.ioore(t5);
        faceArray[t5] = t4;
        t5 = vertexIndex + 2;
        t6 = offset_face + 2;
        if (t6 >= t2)
          throw $.ioore(t6);
        faceArray[t6] = t5;
        offset_face += 3;
        if (offset_line >= t3)
          throw $.ioore(offset_line);
        lineArray[offset_line] = vertexIndex;
        t6 = offset_line + 1;
        if (t6 >= t3)
          throw $.ioore(t6);
        lineArray[t6] = t4;
        t6 = offset_line + 2;
        if (t6 >= t3)
          throw $.ioore(t6);
        lineArray[t6] = vertexIndex;
        t6 = offset_line + 3;
        if (t6 >= t3)
          throw $.ioore(t6);
        lineArray[t6] = t5;
        t6 = offset_line + 4;
        if (t6 >= t3)
          throw $.ioore(t6);
        lineArray[t6] = t4;
        t4 = offset_line + 5;
        if (t4 >= t3)
          throw $.ioore(t4);
        lineArray[t4] = t5;
        offset_line += 6;
        vertexIndex += 3;
      }
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        t4 = chunk_faces4[f];
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t1)
          throw $.ioore(t4);
        face = obj_faces[t4];
        if (offset_face >= t2)
          throw $.ioore(offset_face);
        faceArray[offset_face] = vertexIndex;
        t4 = vertexIndex + 1;
        t5 = offset_face + 1;
        if (t5 >= t2)
          throw $.ioore(t5);
        faceArray[t5] = t4;
        t5 = vertexIndex + 3;
        t6 = offset_face + 2;
        if (t6 >= t2)
          throw $.ioore(t6);
        faceArray[t6] = t5;
        t6 = offset_face + 3;
        if (t6 >= t2)
          throw $.ioore(t6);
        faceArray[t6] = t4;
        t6 = vertexIndex + 2;
        t7 = offset_face + 4;
        if (t7 >= t2)
          throw $.ioore(t7);
        faceArray[t7] = t6;
        t7 = offset_face + 5;
        if (t7 >= t2)
          throw $.ioore(t7);
        faceArray[t7] = t5;
        offset_face += 6;
        if (offset_line >= t3)
          throw $.ioore(offset_line);
        lineArray[offset_line] = vertexIndex;
        t7 = offset_line + 1;
        if (t7 >= t3)
          throw $.ioore(t7);
        lineArray[t7] = t4;
        t7 = offset_line + 2;
        if (t7 >= t3)
          throw $.ioore(t7);
        lineArray[t7] = vertexIndex;
        t7 = offset_line + 3;
        if (t7 >= t3)
          throw $.ioore(t7);
        lineArray[t7] = t5;
        t7 = offset_line + 4;
        if (t7 >= t3)
          throw $.ioore(t7);
        lineArray[t7] = t4;
        t4 = offset_line + 5;
        if (t4 >= t3)
          throw $.ioore(t4);
        lineArray[t4] = t6;
        t4 = offset_line + 6;
        if (t4 >= t3)
          throw $.ioore(t4);
        lineArray[t4] = t6;
        t6 = offset_line + 7;
        if (t6 >= t3)
          throw $.ioore(t6);
        lineArray[t6] = t5;
        offset_line += 8;
        vertexIndex += 4;
      }
      this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
      this._gl.bufferData$3(34963, faceArray, hint);
      this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
      this._gl.bufferData$3(34963, lineArray, hint);
    }
    t1 = $.getInterceptor(customAttributes);
    il = customAttributes.length;
    for (t2 = $.getInterceptor$JSStringJSArray(chunk_faces4), t3 = $.getInterceptor$JSStringJSArray(obj_faces), t4 = $.getInterceptor$JSStringJSArray(chunk_faces3), i = 0, offset_custom = 0, offset_customSrc = 0, value = null; i < il; ++i) {
      if (i >= customAttributes.length)
        throw $.ioore(i);
      customAttribute = customAttributes[i];
      if (customAttribute.get$__original().get$needsUpdate() !== true)
        continue;
      t5 = customAttribute.get$size();
      if (typeof t5 !== "number")
        return this.setMeshBuffers$5$bailout(76, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
      if (t5 === 1) {
        t5 = customAttribute.get$boundTo();
        if (typeof t5 !== "string")
          return this.setMeshBuffers$5$bailout(77, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
        if (t5 === "vertices") {
          fl = chunk_faces3.length;
          for (t5 = obj_faces.length, offset_custom = 0, f = 0; f < fl; ++f) {
            t6 = chunk_faces3[f];
            if (t6 !== (t6 | 0))
              throw $.iae(t6);
            if (t6 < 0 || t6 >= t5)
              throw $.ioore(t6);
            face = obj_faces[t6];
            t6 = customAttribute.get$array();
            t8 = customAttribute.get$value();
            t10 = face.get$a();
            if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(80, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, t8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t10 !== (t10 | 0))
              throw $.iae(t10);
            if (t10 < 0 || t10 >= t8.length)
              throw $.ioore(t10);
            t10 = t8[t10];
            if (typeof t6 !== "object" || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(79, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (offset_custom >= t6.length)
              throw $.ioore(offset_custom);
            t6[offset_custom] = t10;
            t10 = customAttribute.get$array();
            t8 = offset_custom + 1;
            t11 = customAttribute.get$value();
            t13 = face.get$b();
            if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(82, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t8, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t13 !== (t13 | 0))
              throw $.iae(t13);
            if (t13 < 0 || t13 >= t11.length)
              throw $.ioore(t13);
            t13 = t11[t13];
            if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(81, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t8 >= t10.length)
              throw $.ioore(t8);
            t10[t8] = t13;
            t13 = customAttribute.get$array();
            t10 = offset_custom + 2;
            t11 = customAttribute.get$value();
            t15 = face.get$c();
            if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(84, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t11, t10);
            if (t15 !== (t15 | 0))
              throw $.iae(t15);
            if (t15 < 0 || t15 >= t11.length)
              throw $.ioore(t15);
            t15 = t11[t15];
            if (typeof t13 !== "object" || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(83, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t10 >= t13.length)
              throw $.ioore(t10);
            t13[t10] = t15;
            offset_custom += 3;
          }
          fl = chunk_faces4.length;
          for (f = 0; f < fl; ++f) {
            t6 = chunk_faces4[f];
            if (t6 !== (t6 | 0))
              throw $.iae(t6);
            if (t6 < 0 || t6 >= t5)
              throw $.ioore(t6);
            face = obj_faces[t6];
            t6 = customAttribute.get$array();
            t8 = customAttribute.get$value();
            t10 = face.get$a();
            if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(87, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, t8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t10 !== (t10 | 0))
              throw $.iae(t10);
            if (t10 < 0 || t10 >= t8.length)
              throw $.ioore(t10);
            t10 = t8[t10];
            if (typeof t6 !== "object" || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(86, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (offset_custom >= t6.length)
              throw $.ioore(offset_custom);
            t6[offset_custom] = t10;
            t10 = customAttribute.get$array();
            t8 = offset_custom + 1;
            t11 = customAttribute.get$value();
            t13 = face.get$b();
            if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(89, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t8, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t13 !== (t13 | 0))
              throw $.iae(t13);
            if (t13 < 0 || t13 >= t11.length)
              throw $.ioore(t13);
            t13 = t11[t13];
            if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(88, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t8 >= t10.length)
              throw $.ioore(t8);
            t10[t8] = t13;
            t13 = customAttribute.get$array();
            t10 = offset_custom + 2;
            t11 = customAttribute.get$value();
            t15 = face.get$c();
            if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(91, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t11, t10);
            if (t15 !== (t15 | 0))
              throw $.iae(t15);
            if (t15 < 0 || t15 >= t11.length)
              throw $.ioore(t15);
            t15 = t11[t15];
            if (typeof t13 !== "object" || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(90, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (t10 >= t13.length)
              throw $.ioore(t10);
            t13[t10] = t15;
            t15 = customAttribute.get$array();
            t13 = offset_custom + 3;
            t11 = customAttribute.get$value();
            t17 = face.get$d();
            if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(93, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, t15);
            if (t17 !== (t17 | 0))
              throw $.iae(t17);
            if (t17 < 0 || t17 >= t11.length)
              throw $.ioore(t17);
            t17 = t11[t17];
            if (typeof t15 !== "object" || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(92, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, null, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, t15);
            if (t13 >= t15.length)
              throw $.ioore(t13);
            t15[t13] = t17;
            offset_custom += 4;
          }
        } else if (t5 === "faces") {
          fl = chunk_faces3.length;
          for (offset_custom = 0, f = 0; f < fl; ++f) {
            t5 = customAttribute.get$value();
            t7 = chunk_faces3[f];
            if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(96, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
            if (t7 !== (t7 | 0))
              throw $.iae(t7);
            if (t7 < 0 || t7 >= t5.length)
              throw $.ioore(t7);
            value = t5[t7];
            t7 = customAttribute.get$array();
            if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(97, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (offset_custom >= t7.length)
              throw $.ioore(offset_custom);
            t7[offset_custom] = value;
            t7 = customAttribute.get$array();
            if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(98, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            t9 = offset_custom + 1;
            if (t9 >= t7.length)
              throw $.ioore(t9);
            t7[t9] = value;
            t9 = customAttribute.get$array();
            if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(99, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            t10 = offset_custom + 2;
            if (t10 >= t9.length)
              throw $.ioore(t10);
            t9[t10] = value;
            offset_custom += 3;
          }
          fl = chunk_faces4.length;
          for (f = 0; f < fl; ++f) {
            t5 = customAttribute.get$value();
            t7 = chunk_faces4[f];
            if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
              return this.setMeshBuffers$5$bailout(101, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
            if (t7 !== (t7 | 0))
              throw $.iae(t7);
            if (t7 < 0 || t7 >= t5.length)
              throw $.ioore(t7);
            value = t5[t7];
            t7 = customAttribute.get$array();
            if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(102, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            if (offset_custom >= t7.length)
              throw $.ioore(offset_custom);
            t7[offset_custom] = value;
            t7 = customAttribute.get$array();
            if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(103, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            t9 = offset_custom + 1;
            if (t9 >= t7.length)
              throw $.ioore(t9);
            t7[t9] = value;
            t9 = customAttribute.get$array();
            if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(104, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            t10 = offset_custom + 2;
            if (t10 >= t9.length)
              throw $.ioore(t10);
            t9[t10] = value;
            t10 = customAttribute.get$array();
            if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
              return this.setMeshBuffers$5$bailout(105, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
            t11 = offset_custom + 3;
            if (t11 >= t10.length)
              throw $.ioore(t11);
            t10[t11] = value;
            offset_custom += 4;
          }
        } else
          offset_custom = 0;
      } else {
        t5 = customAttribute.get$size();
        if (typeof t5 !== "number")
          return this.setMeshBuffers$5$bailout(106, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
        if (t5 === 2) {
          t5 = customAttribute.get$boundTo();
          if (typeof t5 !== "string")
            return this.setMeshBuffers$5$bailout(107, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
          if (t5 === "vertices") {
            fl = chunk_faces3.length;
            for (t5 = obj_faces.length, offset_custom = 0, f = 0; f < fl; ++f) {
              t6 = chunk_faces3[f];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t5)
                throw $.ioore(t6);
              face = obj_faces[t6];
              t6 = customAttribute.get$value();
              t8 = face.get$a();
              if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(109, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t6.length)
                throw $.ioore(t8);
              v1 = t6[t8];
              t8 = face.get$b();
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t6.length)
                throw $.ioore(t8);
              v2 = t6[t8];
              t8 = face.get$c();
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t6.length)
                throw $.ioore(t8);
              v3 = t6[t8];
              t8 = customAttribute.get$array();
              t9 = v1.get$x();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(112, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              if (offset_custom >= t8.length)
                throw $.ioore(offset_custom);
              t8[offset_custom] = t9;
              t9 = customAttribute.get$array();
              t10 = v1.get$y();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(113, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t11 = offset_custom + 1;
              if (t11 >= t9.length)
                throw $.ioore(t11);
              t9[t11] = t10;
              t10 = customAttribute.get$array();
              t9 = v2.get$x();
              if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(114, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t12 = offset_custom + 2;
              if (t12 >= t10.length)
                throw $.ioore(t12);
              t10[t12] = t9;
              t9 = customAttribute.get$array();
              t10 = v2.get$y();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(115, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t13 = offset_custom + 3;
              if (t13 >= t9.length)
                throw $.ioore(t13);
              t9[t13] = t10;
              t10 = customAttribute.get$array();
              t9 = v3.get$x();
              if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(116, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t14 = offset_custom + 4;
              if (t14 >= t10.length)
                throw $.ioore(t14);
              t10[t14] = t9;
              t9 = customAttribute.get$array();
              t10 = v3.get$y();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(117, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t15 = offset_custom + 5;
              if (t15 >= t9.length)
                throw $.ioore(t15);
              t9[t15] = t10;
              offset_custom += 6;
            }
            fl = chunk_faces4.length;
            for (f = 0; f < fl; ++f) {
              t6 = chunk_faces4[f];
              if (t6 !== (t6 | 0))
                throw $.iae(t6);
              if (t6 < 0 || t6 >= t5)
                throw $.ioore(t6);
              face = obj_faces[t6];
              t6 = customAttribute.get$value();
              t8 = face.get$a();
              if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(119, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t6.length)
                throw $.ioore(t8);
              v1 = t6[t8];
              t8 = face.get$b();
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t6.length)
                throw $.ioore(t8);
              v2 = t6[t8];
              t8 = face.get$c();
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t6.length)
                throw $.ioore(t8);
              v3 = t6[t8];
              t8 = face.get$d();
              if (t8 !== (t8 | 0))
                throw $.iae(t8);
              if (t8 < 0 || t8 >= t6.length)
                throw $.ioore(t8);
              v4 = t6[t8];
              t8 = customAttribute.get$array();
              t9 = v1.get$x();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(123, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              if (offset_custom >= t8.length)
                throw $.ioore(offset_custom);
              t8[offset_custom] = t9;
              t9 = customAttribute.get$array();
              t10 = v1.get$y();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(124, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t11 = offset_custom + 1;
              if (t11 >= t9.length)
                throw $.ioore(t11);
              t9[t11] = t10;
              t10 = customAttribute.get$array();
              t9 = v2.get$x();
              if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(125, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t12 = offset_custom + 2;
              if (t12 >= t10.length)
                throw $.ioore(t12);
              t10[t12] = t9;
              t9 = customAttribute.get$array();
              t10 = v2.get$y();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(126, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t13 = offset_custom + 3;
              if (t13 >= t9.length)
                throw $.ioore(t13);
              t9[t13] = t10;
              t10 = customAttribute.get$array();
              t9 = v3.get$x();
              if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(127, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t14 = offset_custom + 4;
              if (t14 >= t10.length)
                throw $.ioore(t14);
              t10[t14] = t9;
              t9 = customAttribute.get$array();
              t10 = v3.get$y();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(128, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t15 = offset_custom + 5;
              if (t15 >= t9.length)
                throw $.ioore(t15);
              t9[t15] = t10;
              t10 = customAttribute.get$array();
              t9 = v4.get$x();
              if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(129, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t16 = offset_custom + 6;
              if (t16 >= t10.length)
                throw $.ioore(t16);
              t10[t16] = t9;
              t9 = customAttribute.get$array();
              t10 = v4.get$y();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(130, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t17 = offset_custom + 7;
              if (t17 >= t9.length)
                throw $.ioore(t17);
              t9[t17] = t10;
              offset_custom += 8;
            }
          } else if (t5 === "faces") {
            fl = chunk_faces3.length;
            for (offset_custom = 0, f = 0; f < fl; ++f, v3 = value, v2 = v3, v1 = v2) {
              t5 = customAttribute.get$value();
              t7 = chunk_faces3[f];
              if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(133, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
              if (t7 !== (t7 | 0))
                throw $.iae(t7);
              if (t7 < 0 || t7 >= t5.length)
                throw $.ioore(t7);
              value = t5[t7];
              t7 = customAttribute.get$array();
              t8 = value.get$x();
              if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(134, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              if (offset_custom >= t7.length)
                throw $.ioore(offset_custom);
              t7[offset_custom] = t8;
              t8 = customAttribute.get$array();
              t9 = value.get$y();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(135, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t10 = offset_custom + 1;
              if (t10 >= t8.length)
                throw $.ioore(t10);
              t8[t10] = t9;
              t9 = customAttribute.get$array();
              t8 = value.get$x();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(136, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t11 = offset_custom + 2;
              if (t11 >= t9.length)
                throw $.ioore(t11);
              t9[t11] = t8;
              t8 = customAttribute.get$array();
              t9 = value.get$y();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(137, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t12 = offset_custom + 3;
              if (t12 >= t8.length)
                throw $.ioore(t12);
              t8[t12] = t9;
              t9 = customAttribute.get$array();
              t8 = value.get$x();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(138, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t13 = offset_custom + 4;
              if (t13 >= t9.length)
                throw $.ioore(t13);
              t9[t13] = t8;
              t8 = customAttribute.get$array();
              t9 = value.get$y();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(139, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t14 = offset_custom + 5;
              if (t14 >= t8.length)
                throw $.ioore(t14);
              t8[t14] = t9;
              offset_custom += 6;
            }
            fl = chunk_faces4.length;
            for (f = 0; f < fl; ++f, v4 = value, v3 = v4, v2 = v3, v1 = v2) {
              t5 = customAttribute.get$value();
              t7 = chunk_faces4[f];
              if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
                return this.setMeshBuffers$5$bailout(141, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t5, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
              if (t7 !== (t7 | 0))
                throw $.iae(t7);
              if (t7 < 0 || t7 >= t5.length)
                throw $.ioore(t7);
              value = t5[t7];
              t7 = customAttribute.get$array();
              t8 = value.get$x();
              if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(142, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              if (offset_custom >= t7.length)
                throw $.ioore(offset_custom);
              t7[offset_custom] = t8;
              t8 = customAttribute.get$array();
              t9 = value.get$y();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(143, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t10 = offset_custom + 1;
              if (t10 >= t8.length)
                throw $.ioore(t10);
              t8[t10] = t9;
              t9 = customAttribute.get$array();
              t8 = value.get$x();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(144, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t11 = offset_custom + 2;
              if (t11 >= t9.length)
                throw $.ioore(t11);
              t9[t11] = t8;
              t8 = customAttribute.get$array();
              t9 = value.get$y();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(145, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t12 = offset_custom + 3;
              if (t12 >= t8.length)
                throw $.ioore(t12);
              t8[t12] = t9;
              t9 = customAttribute.get$array();
              t8 = value.get$x();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(146, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t13 = offset_custom + 4;
              if (t13 >= t9.length)
                throw $.ioore(t13);
              t9[t13] = t8;
              t8 = customAttribute.get$array();
              t9 = value.get$y();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(147, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t14 = offset_custom + 5;
              if (t14 >= t8.length)
                throw $.ioore(t14);
              t8[t14] = t9;
              t9 = customAttribute.get$array();
              t8 = value.get$x();
              if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(148, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t15 = offset_custom + 6;
              if (t15 >= t9.length)
                throw $.ioore(t15);
              t9[t15] = t8;
              t8 = customAttribute.get$array();
              t9 = value.get$y();
              if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                return this.setMeshBuffers$5$bailout(149, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
              t16 = offset_custom + 7;
              if (t16 >= t8.length)
                throw $.ioore(t16);
              t8[t16] = t9;
              offset_custom += 8;
            }
          } else
            offset_custom = 0;
        } else {
          t5 = customAttribute.get$size();
          if (typeof t5 !== "number")
            return this.setMeshBuffers$5$bailout(150, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
          if (t5 === 3) {
            t5 = customAttribute.get$type();
            if (typeof t5 !== "string")
              return this.setMeshBuffers$5$bailout(151, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
            pp = t5 === "c" ? ["r", "g", "b"] : ["x", "y", "z"];
            t5 = customAttribute.get$boundTo();
            if (typeof t5 !== "string")
              return this.setMeshBuffers$5$bailout(152, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, null, null, null, pp);
            if (t5 === "vertices") {
              fl = chunk_faces3.length;
              for (t5 = obj_faces.length, t6 = pp.length, offset_custom = 0, f = 0; f < fl; ++f, v3 = t13, v2 = t11, v1 = t9) {
                t7 = chunk_faces3[f];
                if (t7 !== (t7 | 0))
                  throw $.iae(t7);
                if (t7 < 0 || t7 >= t5)
                  throw $.ioore(t7);
                face = obj_faces[t7];
                t7 = customAttribute.get$value();
                t9 = face.get$a();
                if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !t7.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(154, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                if (t9 !== (t9 | 0))
                  throw $.iae(t9);
                if (t9 < 0 || t9 >= t7.length)
                  throw $.ioore(t9);
                t9 = t7[t9];
                if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !t9.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(155, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                t11 = face.get$b();
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t7.length)
                  throw $.ioore(t11);
                t11 = t7[t11];
                if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(157, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                t13 = face.get$c();
                if (t13 !== (t13 | 0))
                  throw $.iae(t13);
                if (t13 < 0 || t13 >= t7.length)
                  throw $.ioore(t13);
                t13 = t7[t13];
                if (typeof t13 !== "string" && (typeof t13 !== "object" || t13 === null || t13.constructor !== Array && !t13.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(159, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                t14 = customAttribute.get$array();
                if (0 >= t6)
                  throw $.ioore(0);
                t16 = pp[0];
                t17 = $.getInterceptor$JSStringJSArray(t9);
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                t18 = t9.length;
                if (t16 < 0 || t16 >= t18)
                  throw $.ioore(t16);
                t16 = t9[t16];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(160, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t14, null, pp);
                if (offset_custom >= t14.length)
                  throw $.ioore(offset_custom);
                t14[offset_custom] = t16;
                t16 = customAttribute.get$array();
                if (1 >= t6)
                  throw $.ioore(1);
                t19 = pp[1];
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                if (t19 < 0 || t19 >= t18)
                  throw $.ioore(t19);
                t19 = t9[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(161, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, t17, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t16, null, pp);
                t20 = offset_custom + 1;
                if (t20 >= t16.length)
                  throw $.ioore(t20);
                t16[t20] = t19;
                t19 = customAttribute.get$array();
                if (2 >= t6)
                  throw $.ioore(2);
                t16 = pp[2];
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                if (t16 < 0 || t16 >= t18)
                  throw $.ioore(t16);
                t16 = t9[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(162, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, t17, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t19, null, pp);
                t21 = offset_custom + 2;
                if (t21 >= t19.length)
                  throw $.ioore(t21);
                t19[t21] = t16;
                t16 = customAttribute.get$array();
                t19 = pp[0];
                t22 = $.getInterceptor$JSStringJSArray(t11);
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                t23 = t11.length;
                if (t19 < 0 || t19 >= t23)
                  throw $.ioore(t19);
                t19 = t11[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(163, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t16, null, pp);
                t24 = offset_custom + 3;
                if (t24 >= t16.length)
                  throw $.ioore(t24);
                t16[t24] = t19;
                t19 = customAttribute.get$array();
                t16 = pp[1];
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                if (t16 < 0 || t16 >= t23)
                  throw $.ioore(t16);
                t16 = t11[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(164, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, t22, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t19, null, pp);
                t25 = offset_custom + 4;
                if (t25 >= t19.length)
                  throw $.ioore(t25);
                t19[t25] = t16;
                t16 = customAttribute.get$array();
                t19 = pp[2];
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                if (t19 < 0 || t19 >= t23)
                  throw $.ioore(t19);
                t19 = t11[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(165, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, t22, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t16, null, pp);
                t26 = offset_custom + 5;
                if (t26 >= t16.length)
                  throw $.ioore(t26);
                t16[t26] = t19;
                t19 = customAttribute.get$array();
                t16 = pp[0];
                t27 = $.getInterceptor$JSStringJSArray(t13);
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                t28 = t13.length;
                if (t16 < 0 || t16 >= t28)
                  throw $.ioore(t16);
                t16 = t13[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(166, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t19, null, pp);
                t29 = offset_custom + 6;
                if (t29 >= t19.length)
                  throw $.ioore(t29);
                t19[t29] = t16;
                t16 = customAttribute.get$array();
                t19 = pp[1];
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                if (t19 < 0 || t19 >= t28)
                  throw $.ioore(t19);
                t19 = t13[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(167, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, t27, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t16, null, pp);
                t30 = offset_custom + 7;
                if (t30 >= t16.length)
                  throw $.ioore(t30);
                t16[t30] = t19;
                t19 = customAttribute.get$array();
                t16 = pp[2];
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                if (t16 < 0 || t16 >= t28)
                  throw $.ioore(t16);
                t16 = t13[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(168, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, t27, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t19, null, pp);
                t31 = offset_custom + 8;
                if (t31 >= t19.length)
                  throw $.ioore(t31);
                t19[t31] = t16;
                offset_custom += 9;
              }
              fl = chunk_faces4.length;
              for (f = 0; f < fl; ++f, v4 = t15, v3 = t13, v2 = t11, v1 = t9) {
                t7 = chunk_faces4[f];
                if (t7 !== (t7 | 0))
                  throw $.iae(t7);
                if (t7 < 0 || t7 >= t5)
                  throw $.ioore(t7);
                face = obj_faces[t7];
                t7 = customAttribute.get$value();
                t9 = face.get$a();
                if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !t7.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(170, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                if (t9 !== (t9 | 0))
                  throw $.iae(t9);
                if (t9 < 0 || t9 >= t7.length)
                  throw $.ioore(t9);
                t9 = t7[t9];
                if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !t9.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(171, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                t11 = face.get$b();
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t7.length)
                  throw $.ioore(t11);
                t11 = t7[t11];
                if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(173, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                t13 = face.get$c();
                if (t13 !== (t13 | 0))
                  throw $.iae(t13);
                if (t13 < 0 || t13 >= t7.length)
                  throw $.ioore(t13);
                t13 = t7[t13];
                if (typeof t13 !== "string" && (typeof t13 !== "object" || t13 === null || t13.constructor !== Array && !t13.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(175, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, null, null, pp);
                t15 = face.get$d();
                if (t15 !== (t15 | 0))
                  throw $.iae(t15);
                if (t15 < 0 || t15 >= t7.length)
                  throw $.ioore(t15);
                t15 = t7[t15];
                if (typeof t15 !== "string" && (typeof t15 !== "object" || t15 === null || t15.constructor !== Array && !t15.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(177, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t16 = customAttribute.get$array();
                if (0 >= t6)
                  throw $.ioore(0);
                t18 = pp[0];
                t19 = $.getInterceptor$JSStringJSArray(t9);
                if (t18 !== (t18 | 0))
                  throw $.iae(t18);
                t20 = t9.length;
                if (t18 < 0 || t18 >= t20)
                  throw $.ioore(t18);
                t18 = t9[t18];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(178, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t16, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                if (offset_custom >= t16.length)
                  throw $.ioore(offset_custom);
                t16[offset_custom] = t18;
                t18 = customAttribute.get$array();
                if (1 >= t6)
                  throw $.ioore(1);
                t21 = pp[1];
                if (t21 !== (t21 | 0))
                  throw $.iae(t21);
                if (t21 < 0 || t21 >= t20)
                  throw $.ioore(t21);
                t21 = t9[t21];
                if (typeof t18 !== "object" || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(179, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t18, null, t19, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t22 = offset_custom + 1;
                if (t22 >= t18.length)
                  throw $.ioore(t22);
                t18[t22] = t21;
                t21 = customAttribute.get$array();
                if (2 >= t6)
                  throw $.ioore(2);
                t18 = pp[2];
                if (t18 !== (t18 | 0))
                  throw $.iae(t18);
                if (t18 < 0 || t18 >= t20)
                  throw $.ioore(t18);
                t18 = t9[t18];
                if (typeof t21 !== "object" || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(180, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t21, null, t19, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t23 = offset_custom + 2;
                if (t23 >= t21.length)
                  throw $.ioore(t23);
                t21[t23] = t18;
                t18 = customAttribute.get$array();
                t21 = pp[0];
                t24 = $.getInterceptor$JSStringJSArray(t11);
                if (t21 !== (t21 | 0))
                  throw $.iae(t21);
                t25 = t11.length;
                if (t21 < 0 || t21 >= t25)
                  throw $.ioore(t21);
                t21 = t11[t21];
                if (typeof t18 !== "object" || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(181, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t18, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t26 = offset_custom + 3;
                if (t26 >= t18.length)
                  throw $.ioore(t26);
                t18[t26] = t21;
                t21 = customAttribute.get$array();
                t18 = pp[1];
                if (t18 !== (t18 | 0))
                  throw $.iae(t18);
                if (t18 < 0 || t18 >= t25)
                  throw $.ioore(t18);
                t18 = t11[t18];
                if (typeof t21 !== "object" || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(182, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, t24, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t21, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t27 = offset_custom + 4;
                if (t27 >= t21.length)
                  throw $.ioore(t27);
                t21[t27] = t18;
                t18 = customAttribute.get$array();
                t21 = pp[2];
                if (t21 !== (t21 | 0))
                  throw $.iae(t21);
                if (t21 < 0 || t21 >= t25)
                  throw $.ioore(t21);
                t21 = t11[t21];
                if (typeof t18 !== "object" || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(183, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, t24, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t18, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t28 = offset_custom + 5;
                if (t28 >= t18.length)
                  throw $.ioore(t28);
                t18[t28] = t21;
                t21 = customAttribute.get$array();
                t18 = pp[0];
                t29 = $.getInterceptor$JSStringJSArray(t13);
                if (t18 !== (t18 | 0))
                  throw $.iae(t18);
                t30 = t13.length;
                if (t18 < 0 || t18 >= t30)
                  throw $.ioore(t18);
                t18 = t13[t18];
                if (typeof t21 !== "object" || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(184, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t21, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t31 = offset_custom + 6;
                if (t31 >= t21.length)
                  throw $.ioore(t31);
                t21[t31] = t18;
                t18 = customAttribute.get$array();
                t21 = pp[1];
                if (t21 !== (t21 | 0))
                  throw $.iae(t21);
                if (t21 < 0 || t21 >= t30)
                  throw $.ioore(t21);
                t21 = t13[t21];
                if (typeof t18 !== "object" || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(185, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t18, null, null, null, null, null, null, null, null, t29, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t32 = offset_custom + 7;
                if (t32 >= t18.length)
                  throw $.ioore(t32);
                t18[t32] = t21;
                t21 = customAttribute.get$array();
                t18 = pp[2];
                if (t18 !== (t18 | 0))
                  throw $.iae(t18);
                if (t18 < 0 || t18 >= t30)
                  throw $.ioore(t18);
                t18 = t13[t18];
                if (typeof t21 !== "object" || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(186, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t21, null, null, null, null, null, null, null, null, t29, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t33 = offset_custom + 8;
                if (t33 >= t21.length)
                  throw $.ioore(t33);
                t21[t33] = t18;
                t18 = customAttribute.get$array();
                t21 = pp[0];
                t34 = $.getInterceptor$JSStringJSArray(t15);
                if (t21 !== (t21 | 0))
                  throw $.iae(t21);
                t35 = t15.length;
                if (t21 < 0 || t21 >= t35)
                  throw $.ioore(t21);
                t21 = t15[t21];
                if (typeof t18 !== "object" || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(187, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t18, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp);
                t36 = offset_custom + 9;
                if (t36 >= t18.length)
                  throw $.ioore(t36);
                t18[t36] = t21;
                t21 = customAttribute.get$array();
                t18 = pp[1];
                if (t18 !== (t18 | 0))
                  throw $.iae(t18);
                if (t18 < 0 || t18 >= t35)
                  throw $.ioore(t18);
                t18 = t15[t18];
                if (typeof t21 !== "object" || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(188, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t21, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp, t34);
                t37 = offset_custom + 10;
                if (t37 >= t21.length)
                  throw $.ioore(t37);
                t21[t37] = t18;
                t18 = customAttribute.get$array();
                t21 = pp[2];
                if (t21 !== (t21 | 0))
                  throw $.iae(t21);
                if (t21 < 0 || t21 >= t35)
                  throw $.ioore(t21);
                t21 = t15[t21];
                if (typeof t18 !== "object" || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(189, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, t18, null, null, null, null, null, null, null, null, null, t13, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom, t15, null, pp, t34);
                t38 = offset_custom + 11;
                if (t38 >= t18.length)
                  throw $.ioore(t38);
                t18[t38] = t21;
                offset_custom += 12;
              }
            } else if (t5 === "faces") {
              fl = chunk_faces3.length;
              for (t5 = pp.length, offset_custom = 0, f = 0; f < fl; ++f, v3 = t8, v2 = v3, v1 = v2, value = v1) {
                t6 = customAttribute.get$value();
                t8 = chunk_faces3[f];
                if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(192, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (t8 !== (t8 | 0))
                  throw $.iae(t8);
                if (t8 < 0 || t8 >= t6.length)
                  throw $.ioore(t8);
                t8 = t6[t8];
                if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(193, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t9 = customAttribute.get$array();
                if (0 >= t5)
                  throw $.ioore(0);
                t11 = pp[0];
                t12 = $.getInterceptor$JSStringJSArray(t8);
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                t13 = t8.length;
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(194, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (offset_custom >= t9.length)
                  throw $.ioore(offset_custom);
                t9[offset_custom] = t11;
                t11 = customAttribute.get$array();
                if (1 >= t5)
                  throw $.ioore(1);
                t14 = pp[1];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(195, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t15 = offset_custom + 1;
                if (t15 >= t11.length)
                  throw $.ioore(t15);
                t11[t15] = t14;
                t14 = customAttribute.get$array();
                if (2 >= t5)
                  throw $.ioore(2);
                t11 = pp[2];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(196, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t16 = offset_custom + 2;
                if (t16 >= t14.length)
                  throw $.ioore(t16);
                t14[t16] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[0];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(197, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t17 = offset_custom + 3;
                if (t17 >= t11.length)
                  throw $.ioore(t17);
                t11[t17] = t14;
                t14 = customAttribute.get$array();
                t11 = pp[1];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(198, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t18 = offset_custom + 4;
                if (t18 >= t14.length)
                  throw $.ioore(t18);
                t14[t18] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[2];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(199, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t19 = offset_custom + 5;
                if (t19 >= t11.length)
                  throw $.ioore(t19);
                t11[t19] = t14;
                t14 = customAttribute.get$array();
                t11 = pp[0];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(200, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t20 = offset_custom + 6;
                if (t20 >= t14.length)
                  throw $.ioore(t20);
                t14[t20] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[1];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(201, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t21 = offset_custom + 7;
                if (t21 >= t11.length)
                  throw $.ioore(t21);
                t11[t21] = t14;
                t14 = customAttribute.get$array();
                t11 = pp[2];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(202, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t22 = offset_custom + 8;
                if (t22 >= t14.length)
                  throw $.ioore(t22);
                t14[t22] = t11;
                offset_custom += 9;
              }
              fl = chunk_faces4.length;
              for (f = 0; f < fl; ++f, v4 = t8, v3 = v4, v2 = v3, v1 = v2, value = v1) {
                t6 = customAttribute.get$value();
                t8 = chunk_faces4[f];
                if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(204, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (t8 !== (t8 | 0))
                  throw $.iae(t8);
                if (t8 < 0 || t8 >= t6.length)
                  throw $.ioore(t8);
                t8 = t6[t8];
                if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(205, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t9 = customAttribute.get$array();
                if (0 >= t5)
                  throw $.ioore(0);
                t11 = pp[0];
                t12 = $.getInterceptor$JSStringJSArray(t8);
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                t13 = t8.length;
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(206, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (offset_custom >= t9.length)
                  throw $.ioore(offset_custom);
                t9[offset_custom] = t11;
                t11 = customAttribute.get$array();
                if (1 >= t5)
                  throw $.ioore(1);
                t14 = pp[1];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(207, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t15 = offset_custom + 1;
                if (t15 >= t11.length)
                  throw $.ioore(t15);
                t11[t15] = t14;
                t14 = customAttribute.get$array();
                if (2 >= t5)
                  throw $.ioore(2);
                t11 = pp[2];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(208, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t16 = offset_custom + 2;
                if (t16 >= t14.length)
                  throw $.ioore(t16);
                t14[t16] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[0];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(209, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t17 = offset_custom + 3;
                if (t17 >= t11.length)
                  throw $.ioore(t17);
                t11[t17] = t14;
                t14 = customAttribute.get$array();
                t11 = pp[1];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(210, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t18 = offset_custom + 4;
                if (t18 >= t14.length)
                  throw $.ioore(t18);
                t14[t18] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[2];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(211, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t19 = offset_custom + 5;
                if (t19 >= t11.length)
                  throw $.ioore(t19);
                t11[t19] = t14;
                t14 = customAttribute.get$array();
                t11 = pp[0];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(212, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t20 = offset_custom + 6;
                if (t20 >= t14.length)
                  throw $.ioore(t20);
                t14[t20] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[1];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(213, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t21 = offset_custom + 7;
                if (t21 >= t11.length)
                  throw $.ioore(t21);
                t11[t21] = t14;
                t14 = customAttribute.get$array();
                t11 = pp[2];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(214, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t22 = offset_custom + 8;
                if (t22 >= t14.length)
                  throw $.ioore(t22);
                t14[t22] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[0];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(215, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t23 = offset_custom + 9;
                if (t23 >= t11.length)
                  throw $.ioore(t23);
                t11[t23] = t14;
                t14 = customAttribute.get$array();
                t11 = pp[1];
                if (t11 !== (t11 | 0))
                  throw $.iae(t11);
                if (t11 < 0 || t11 >= t13)
                  throw $.ioore(t11);
                t11 = t8[t11];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(216, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t24 = offset_custom + 10;
                if (t24 >= t14.length)
                  throw $.ioore(t24);
                t14[t24] = t11;
                t11 = customAttribute.get$array();
                t14 = pp[2];
                if (t14 !== (t14 | 0))
                  throw $.iae(t14);
                if (t14 < 0 || t14 >= t13)
                  throw $.ioore(t14);
                t14 = t8[t14];
                if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(217, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t25 = offset_custom + 11;
                if (t25 >= t11.length)
                  throw $.ioore(t25);
                t11[t25] = t14;
                offset_custom += 12;
              }
            } else if (t5 === "faceVertices") {
              fl = chunk_faces3.length;
              for (t5 = pp.length, offset_custom = 0, f = 0; f < fl; ++f, value = t8) {
                t6 = customAttribute.get$value();
                t8 = chunk_faces3[f];
                if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(220, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (t8 !== (t8 | 0))
                  throw $.iae(t8);
                if (t8 < 0 || t8 >= t6.length)
                  throw $.ioore(t8);
                t8 = t6[t8];
                if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(221, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t9 = $.getInterceptor$JSStringJSArray(t8);
                t10 = t8.length;
                if (0 >= t10)
                  throw $.ioore(0);
                v1 = t8[0];
                if (typeof v1 !== "string" && (typeof v1 !== "object" || v1 === null || v1.constructor !== Array && !v1.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(222, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (1 >= t10)
                  throw $.ioore(1);
                v2 = t8[1];
                if (typeof v2 !== "string" && (typeof v2 !== "object" || v2 === null || v2.constructor !== Array && !v2.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(223, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, null, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (2 >= t10)
                  throw $.ioore(2);
                v3 = t8[2];
                if (typeof v3 !== "string" && (typeof v3 !== "object" || v3 === null || v3.constructor !== Array && !v3.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(224, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t14 = customAttribute.get$array();
                if (0 >= t5)
                  throw $.ioore(0);
                t16 = pp[0];
                t17 = $.getInterceptor$JSStringJSArray(v1);
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                t18 = v1.length;
                if (t16 < 0 || t16 >= t18)
                  throw $.ioore(t16);
                t16 = v1[t16];
                if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(225, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t14, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (offset_custom >= t14.length)
                  throw $.ioore(offset_custom);
                t14[offset_custom] = t16;
                t16 = customAttribute.get$array();
                if (1 >= t5)
                  throw $.ioore(1);
                t19 = pp[1];
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                if (t19 < 0 || t19 >= t18)
                  throw $.ioore(t19);
                t19 = v1[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(226, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t16, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, t17, pp);
                t20 = offset_custom + 1;
                if (t20 >= t16.length)
                  throw $.ioore(t20);
                t16[t20] = t19;
                t19 = customAttribute.get$array();
                if (2 >= t5)
                  throw $.ioore(2);
                t16 = pp[2];
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                if (t16 < 0 || t16 >= t18)
                  throw $.ioore(t16);
                t16 = v1[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(227, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t19, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, t17, pp);
                t21 = offset_custom + 2;
                if (t21 >= t19.length)
                  throw $.ioore(t21);
                t19[t21] = t16;
                t16 = customAttribute.get$array();
                t19 = pp[0];
                t22 = $.getInterceptor$JSStringJSArray(v2);
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                t23 = v2.length;
                if (t19 < 0 || t19 >= t23)
                  throw $.ioore(t19);
                t19 = v2[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(228, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t16, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t24 = offset_custom + 3;
                if (t24 >= t16.length)
                  throw $.ioore(t24);
                t16[t24] = t19;
                t19 = customAttribute.get$array();
                t16 = pp[1];
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                if (t16 < 0 || t16 >= t23)
                  throw $.ioore(t16);
                t16 = v2[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(229, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t22, null, null, null, null, null, null, null, null, null, t19, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t25 = offset_custom + 4;
                if (t25 >= t19.length)
                  throw $.ioore(t25);
                t19[t25] = t16;
                t16 = customAttribute.get$array();
                t19 = pp[2];
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                if (t19 < 0 || t19 >= t23)
                  throw $.ioore(t19);
                t19 = v2[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(230, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t22, null, null, null, null, null, null, null, null, null, t16, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t26 = offset_custom + 5;
                if (t26 >= t16.length)
                  throw $.ioore(t26);
                t16[t26] = t19;
                t19 = customAttribute.get$array();
                t16 = pp[0];
                t27 = $.getInterceptor$JSStringJSArray(v3);
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                t28 = v3.length;
                if (t16 < 0 || t16 >= t28)
                  throw $.ioore(t16);
                t16 = v3[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(231, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t19, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t29 = offset_custom + 6;
                if (t29 >= t19.length)
                  throw $.ioore(t29);
                t19[t29] = t16;
                t16 = customAttribute.get$array();
                t19 = pp[1];
                if (t19 !== (t19 | 0))
                  throw $.iae(t19);
                if (t19 < 0 || t19 >= t28)
                  throw $.ioore(t19);
                t19 = v3[t19];
                if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(232, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t27, null, null, null, null, null, t16, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t30 = offset_custom + 7;
                if (t30 >= t16.length)
                  throw $.ioore(t30);
                t16[t30] = t19;
                t19 = customAttribute.get$array();
                t16 = pp[2];
                if (t16 !== (t16 | 0))
                  throw $.iae(t16);
                if (t16 < 0 || t16 >= t28)
                  throw $.ioore(t16);
                t16 = v3[t16];
                if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(233, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t27, null, null, null, null, null, t19, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t31 = offset_custom + 8;
                if (t31 >= t19.length)
                  throw $.ioore(t31);
                t19[t31] = t16;
                offset_custom += 9;
              }
              fl = chunk_faces4.length;
              for (f = 0; f < fl; ++f, value = t8) {
                t6 = customAttribute.get$value();
                t8 = chunk_faces4[f];
                if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(235, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (t8 !== (t8 | 0))
                  throw $.iae(t8);
                if (t8 < 0 || t8 >= t6.length)
                  throw $.ioore(t8);
                t8 = t6[t8];
                if (typeof t8 !== "string" && (typeof t8 !== "object" || t8 === null || t8.constructor !== Array && !t8.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(236, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t9 = $.getInterceptor$JSStringJSArray(t8);
                t10 = t8.length;
                if (0 >= t10)
                  throw $.ioore(0);
                v1 = t8[0];
                if (typeof v1 !== "string" && (typeof v1 !== "object" || v1 === null || v1.constructor !== Array && !v1.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(237, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (1 >= t10)
                  throw $.ioore(1);
                v2 = t8[1];
                if (typeof v2 !== "string" && (typeof v2 !== "object" || v2 === null || v2.constructor !== Array && !v2.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(238, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, null, t2, t4, v2, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (2 >= t10)
                  throw $.ioore(2);
                v3 = t8[2];
                if (typeof v3 !== "string" && (typeof v3 !== "object" || v3 === null || v3.constructor !== Array && !v3.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(239, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                if (3 >= t10)
                  throw $.ioore(3);
                v4 = t8[3];
                if (typeof v4 !== "string" && (typeof v4 !== "object" || v4 === null || v4.constructor !== Array && !v4.$isJavaScriptIndexingBehavior()))
                  return this.setMeshBuffers$5$bailout(240, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp);
                t15 = customAttribute.get$array();
                if (0 >= t5)
                  throw $.ioore(0);
                t17 = pp[0];
                t18 = $.getInterceptor$JSStringJSArray(v1);
                if (t17 !== (t17 | 0))
                  throw $.iae(t17);
                t19 = v1.length;
                if (t17 < 0 || t17 >= t19)
                  throw $.ioore(t17);
                t17 = v1[t17];
                if (typeof t15 !== "object" || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(241, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t15);
                if (offset_custom >= t15.length)
                  throw $.ioore(offset_custom);
                t15[offset_custom] = t17;
                t17 = customAttribute.get$array();
                if (1 >= t5)
                  throw $.ioore(1);
                t20 = pp[1];
                if (t20 !== (t20 | 0))
                  throw $.iae(t20);
                if (t20 < 0 || t20 >= t19)
                  throw $.ioore(t20);
                t20 = v1[t20];
                if (typeof t17 !== "object" || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(242, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, t18, null, pp, null, t17);
                t21 = offset_custom + 1;
                if (t21 >= t17.length)
                  throw $.ioore(t21);
                t17[t21] = t20;
                t20 = customAttribute.get$array();
                if (2 >= t5)
                  throw $.ioore(2);
                t17 = pp[2];
                if (t17 !== (t17 | 0))
                  throw $.iae(t17);
                if (t17 < 0 || t17 >= t19)
                  throw $.ioore(t17);
                t17 = v1[t17];
                if (typeof t20 !== "object" || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(243, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, t18, null, pp, null, t20);
                t22 = offset_custom + 2;
                if (t22 >= t20.length)
                  throw $.ioore(t22);
                t20[t22] = t17;
                t17 = customAttribute.get$array();
                t20 = pp[0];
                t23 = $.getInterceptor$JSStringJSArray(v2);
                if (t20 !== (t20 | 0))
                  throw $.iae(t20);
                t24 = v2.length;
                if (t20 < 0 || t20 >= t24)
                  throw $.ioore(t20);
                t20 = v2[t20];
                if (typeof t17 !== "object" || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(244, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t17);
                t25 = offset_custom + 3;
                if (t25 >= t17.length)
                  throw $.ioore(t25);
                t17[t25] = t20;
                t20 = customAttribute.get$array();
                t17 = pp[1];
                if (t17 !== (t17 | 0))
                  throw $.iae(t17);
                if (t17 < 0 || t17 >= t24)
                  throw $.ioore(t17);
                t17 = v2[t17];
                if (typeof t20 !== "object" || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(245, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t23, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t20);
                t26 = offset_custom + 4;
                if (t26 >= t20.length)
                  throw $.ioore(t26);
                t20[t26] = t17;
                t17 = customAttribute.get$array();
                t20 = pp[2];
                if (t20 !== (t20 | 0))
                  throw $.iae(t20);
                if (t20 < 0 || t20 >= t24)
                  throw $.ioore(t20);
                t20 = v2[t20];
                if (typeof t17 !== "object" || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(246, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t23, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t17);
                t27 = offset_custom + 5;
                if (t27 >= t17.length)
                  throw $.ioore(t27);
                t17[t27] = t20;
                t20 = customAttribute.get$array();
                t17 = pp[0];
                t28 = $.getInterceptor$JSStringJSArray(v3);
                if (t17 !== (t17 | 0))
                  throw $.iae(t17);
                t29 = v3.length;
                if (t17 < 0 || t17 >= t29)
                  throw $.ioore(t17);
                t17 = v3[t17];
                if (typeof t20 !== "object" || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(247, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t20);
                t30 = offset_custom + 6;
                if (t30 >= t20.length)
                  throw $.ioore(t30);
                t20[t30] = t17;
                t17 = customAttribute.get$array();
                t20 = pp[1];
                if (t20 !== (t20 | 0))
                  throw $.iae(t20);
                if (t20 < 0 || t20 >= t29)
                  throw $.ioore(t20);
                t20 = v3[t20];
                if (typeof t17 !== "object" || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(248, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t28, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t17);
                t31 = offset_custom + 7;
                if (t31 >= t17.length)
                  throw $.ioore(t31);
                t17[t31] = t20;
                t20 = customAttribute.get$array();
                t17 = pp[2];
                if (t17 !== (t17 | 0))
                  throw $.iae(t17);
                if (t17 < 0 || t17 >= t29)
                  throw $.ioore(t17);
                t17 = v3[t17];
                if (typeof t20 !== "object" || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(249, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t28, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t20);
                t32 = offset_custom + 8;
                if (t32 >= t20.length)
                  throw $.ioore(t32);
                t20[t32] = t17;
                t17 = customAttribute.get$array();
                t20 = pp[0];
                t33 = $.getInterceptor$JSStringJSArray(v4);
                if (t20 !== (t20 | 0))
                  throw $.iae(t20);
                t34 = v4.length;
                if (t20 < 0 || t20 >= t34)
                  throw $.ioore(t20);
                t20 = v4[t20];
                if (typeof t17 !== "object" || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(250, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t17);
                t35 = offset_custom + 9;
                if (t35 >= t17.length)
                  throw $.ioore(t35);
                t17[t35] = t20;
                t20 = customAttribute.get$array();
                t17 = pp[1];
                if (t17 !== (t17 | 0))
                  throw $.iae(t17);
                if (t17 < 0 || t17 >= t34)
                  throw $.ioore(t17);
                t17 = v4[t17];
                if (typeof t20 !== "object" || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(251, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t33, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t20);
                t36 = offset_custom + 10;
                if (t36 >= t20.length)
                  throw $.ioore(t36);
                t20[t36] = t17;
                t17 = customAttribute.get$array();
                t20 = pp[2];
                if (t20 !== (t20 | 0))
                  throw $.iae(t20);
                if (t20 < 0 || t20 >= t34)
                  throw $.ioore(t20);
                t20 = v4[t20];
                if (typeof t17 !== "object" || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.$isJavaScriptIndexingBehavior())
                  return this.setMeshBuffers$5$bailout(252, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t33, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom, null, null, pp, null, t17);
                t37 = offset_custom + 11;
                if (t37 >= t17.length)
                  throw $.ioore(t37);
                t17[t37] = t20;
                offset_custom += 12;
              }
            } else
              offset_custom = 0;
          } else {
            t5 = customAttribute.get$size();
            if (typeof t5 !== "number")
              return this.setMeshBuffers$5$bailout(253, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
            if (t5 === 4) {
              t5 = customAttribute.get$boundTo();
              if (typeof t5 !== "string")
                return this.setMeshBuffers$5$bailout(254, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute);
              if (t5 === "vertices") {
                fl = chunk_faces3.length;
                for (t5 = obj_faces.length, offset_custom = 0, f = 0; f < fl; ++f) {
                  t6 = chunk_faces3[f];
                  if (t6 !== (t6 | 0))
                    throw $.iae(t6);
                  if (t6 < 0 || t6 >= t5)
                    throw $.ioore(t6);
                  face = obj_faces[t6];
                  t6 = customAttribute.get$value();
                  t8 = face.get$a();
                  if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(256, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  if (t8 !== (t8 | 0))
                    throw $.iae(t8);
                  if (t8 < 0 || t8 >= t6.length)
                    throw $.ioore(t8);
                  v1 = t6[t8];
                  t8 = face.get$b();
                  if (t8 !== (t8 | 0))
                    throw $.iae(t8);
                  if (t8 < 0 || t8 >= t6.length)
                    throw $.ioore(t8);
                  v2 = t6[t8];
                  t8 = face.get$c();
                  if (t8 !== (t8 | 0))
                    throw $.iae(t8);
                  if (t8 < 0 || t8 >= t6.length)
                    throw $.ioore(t8);
                  v3 = t6[t8];
                  t8 = customAttribute.get$array();
                  t9 = v1.get$x();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(259, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  if (offset_custom >= t8.length)
                    throw $.ioore(offset_custom);
                  t8[offset_custom] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v1.get$y();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(260, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t11 = offset_custom + 1;
                  if (t11 >= t9.length)
                    throw $.ioore(t11);
                  t9[t11] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v1.get$z();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(261, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t12 = offset_custom + 2;
                  if (t12 >= t10.length)
                    throw $.ioore(t12);
                  t10[t12] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v1.get$w();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(262, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t13 = offset_custom + 3;
                  if (t13 >= t9.length)
                    throw $.ioore(t13);
                  t9[t13] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v2.get$x();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(263, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t14 = offset_custom + 4;
                  if (t14 >= t10.length)
                    throw $.ioore(t14);
                  t10[t14] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v2.get$y();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(264, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t15 = offset_custom + 5;
                  if (t15 >= t9.length)
                    throw $.ioore(t15);
                  t9[t15] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v2.get$z();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(265, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t16 = offset_custom + 6;
                  if (t16 >= t10.length)
                    throw $.ioore(t16);
                  t10[t16] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v2.get$w();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(266, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t17 = offset_custom + 7;
                  if (t17 >= t9.length)
                    throw $.ioore(t17);
                  t9[t17] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v3.get$x();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(267, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t18 = offset_custom + 8;
                  if (t18 >= t10.length)
                    throw $.ioore(t18);
                  t10[t18] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v3.get$y();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(268, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t19 = offset_custom + 9;
                  if (t19 >= t9.length)
                    throw $.ioore(t19);
                  t9[t19] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v3.get$z();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(269, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t20 = offset_custom + 10;
                  if (t20 >= t10.length)
                    throw $.ioore(t20);
                  t10[t20] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v3.get$w();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(270, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t21 = offset_custom + 11;
                  if (t21 >= t9.length)
                    throw $.ioore(t21);
                  t9[t21] = t10;
                  offset_custom += 12;
                }
                fl = chunk_faces4.length;
                for (f = 0; f < fl; ++f) {
                  t6 = chunk_faces4[f];
                  if (t6 !== (t6 | 0))
                    throw $.iae(t6);
                  if (t6 < 0 || t6 >= t5)
                    throw $.ioore(t6);
                  face = obj_faces[t6];
                  t6 = customAttribute.get$value();
                  t8 = face.get$a();
                  if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(272, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t6, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  if (t8 !== (t8 | 0))
                    throw $.iae(t8);
                  if (t8 < 0 || t8 >= t6.length)
                    throw $.ioore(t8);
                  v1 = t6[t8];
                  t8 = face.get$b();
                  if (t8 !== (t8 | 0))
                    throw $.iae(t8);
                  if (t8 < 0 || t8 >= t6.length)
                    throw $.ioore(t8);
                  v2 = t6[t8];
                  t8 = face.get$c();
                  if (t8 !== (t8 | 0))
                    throw $.iae(t8);
                  if (t8 < 0 || t8 >= t6.length)
                    throw $.ioore(t8);
                  v3 = t6[t8];
                  t8 = face.get$d();
                  if (t8 !== (t8 | 0))
                    throw $.iae(t8);
                  if (t8 < 0 || t8 >= t6.length)
                    throw $.ioore(t8);
                  v4 = t6[t8];
                  t8 = customAttribute.get$array();
                  t9 = v1.get$x();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(276, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  if (offset_custom >= t8.length)
                    throw $.ioore(offset_custom);
                  t8[offset_custom] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v1.get$y();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(277, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t11 = offset_custom + 1;
                  if (t11 >= t9.length)
                    throw $.ioore(t11);
                  t9[t11] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v1.get$z();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(278, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t12 = offset_custom + 2;
                  if (t12 >= t10.length)
                    throw $.ioore(t12);
                  t10[t12] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v1.get$w();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(279, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t13 = offset_custom + 3;
                  if (t13 >= t9.length)
                    throw $.ioore(t13);
                  t9[t13] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v2.get$x();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(280, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t14 = offset_custom + 4;
                  if (t14 >= t10.length)
                    throw $.ioore(t14);
                  t10[t14] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v2.get$y();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(281, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t15 = offset_custom + 5;
                  if (t15 >= t9.length)
                    throw $.ioore(t15);
                  t9[t15] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v2.get$z();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(282, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t16 = offset_custom + 6;
                  if (t16 >= t10.length)
                    throw $.ioore(t16);
                  t10[t16] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v2.get$w();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(283, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t17 = offset_custom + 7;
                  if (t17 >= t9.length)
                    throw $.ioore(t17);
                  t9[t17] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v3.get$x();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(284, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t18 = offset_custom + 8;
                  if (t18 >= t10.length)
                    throw $.ioore(t18);
                  t10[t18] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v3.get$y();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(285, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t19 = offset_custom + 9;
                  if (t19 >= t9.length)
                    throw $.ioore(t19);
                  t9[t19] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v3.get$z();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(286, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t20 = offset_custom + 10;
                  if (t20 >= t10.length)
                    throw $.ioore(t20);
                  t10[t20] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v3.get$w();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(287, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t21 = offset_custom + 11;
                  if (t21 >= t9.length)
                    throw $.ioore(t21);
                  t9[t21] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v4.get$x();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(288, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t22 = offset_custom + 12;
                  if (t22 >= t10.length)
                    throw $.ioore(t22);
                  t10[t22] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v4.get$y();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(289, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t23 = offset_custom + 13;
                  if (t23 >= t9.length)
                    throw $.ioore(t23);
                  t9[t23] = t10;
                  t10 = customAttribute.get$array();
                  t9 = v4.get$z();
                  if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(290, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t10, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t24 = offset_custom + 14;
                  if (t24 >= t10.length)
                    throw $.ioore(t24);
                  t10[t24] = t9;
                  t9 = customAttribute.get$array();
                  t10 = v4.get$w();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(291, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t25 = offset_custom + 15;
                  if (t25 >= t9.length)
                    throw $.ioore(t25);
                  t9[t25] = t10;
                  offset_custom += 16;
                }
              } else if (t5 === "faces") {
                fl = chunk_faces3.length;
                for (offset_custom = 0, f = 0; f < fl; ++f, v3 = value, v2 = v3, v1 = v2) {
                  t5 = customAttribute.get$value();
                  t7 = chunk_faces3[f];
                  if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(294, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  if (t7 !== (t7 | 0))
                    throw $.iae(t7);
                  if (t7 < 0 || t7 >= t5.length)
                    throw $.ioore(t7);
                  value = t5[t7];
                  t7 = customAttribute.get$array();
                  t8 = value.get$x();
                  if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(295, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  if (offset_custom >= t7.length)
                    throw $.ioore(offset_custom);
                  t7[offset_custom] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$y();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(296, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t10 = offset_custom + 1;
                  if (t10 >= t8.length)
                    throw $.ioore(t10);
                  t8[t10] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$z();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(297, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t11 = offset_custom + 2;
                  if (t11 >= t9.length)
                    throw $.ioore(t11);
                  t9[t11] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$w();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(298, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t12 = offset_custom + 3;
                  if (t12 >= t8.length)
                    throw $.ioore(t12);
                  t8[t12] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$x();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(299, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t13 = offset_custom + 4;
                  if (t13 >= t9.length)
                    throw $.ioore(t13);
                  t9[t13] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$y();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(300, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t14 = offset_custom + 5;
                  if (t14 >= t8.length)
                    throw $.ioore(t14);
                  t8[t14] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$z();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(301, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t15 = offset_custom + 6;
                  if (t15 >= t9.length)
                    throw $.ioore(t15);
                  t9[t15] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$w();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(302, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t16 = offset_custom + 7;
                  if (t16 >= t8.length)
                    throw $.ioore(t16);
                  t8[t16] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$x();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(303, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t17 = offset_custom + 8;
                  if (t17 >= t9.length)
                    throw $.ioore(t17);
                  t9[t17] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$y();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(304, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t18 = offset_custom + 9;
                  if (t18 >= t8.length)
                    throw $.ioore(t18);
                  t8[t18] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$z();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(305, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t19 = offset_custom + 10;
                  if (t19 >= t9.length)
                    throw $.ioore(t19);
                  t9[t19] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$w();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(306, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t20 = offset_custom + 11;
                  if (t20 >= t8.length)
                    throw $.ioore(t20);
                  t8[t20] = t9;
                  offset_custom += 12;
                }
                fl = chunk_faces4.length;
                for (f = 0; f < fl; ++f, v4 = value, v3 = v4, v2 = v3, v1 = v2) {
                  t5 = customAttribute.get$value();
                  t7 = chunk_faces4[f];
                  if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(308, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t5, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  if (t7 !== (t7 | 0))
                    throw $.iae(t7);
                  if (t7 < 0 || t7 >= t5.length)
                    throw $.ioore(t7);
                  value = t5[t7];
                  t7 = customAttribute.get$array();
                  t8 = value.get$x();
                  if (typeof t7 !== "object" || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(309, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  if (offset_custom >= t7.length)
                    throw $.ioore(offset_custom);
                  t7[offset_custom] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$y();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(310, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t10 = offset_custom + 1;
                  if (t10 >= t8.length)
                    throw $.ioore(t10);
                  t8[t10] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$z();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(311, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t11 = offset_custom + 2;
                  if (t11 >= t9.length)
                    throw $.ioore(t11);
                  t9[t11] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$w();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(312, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t12 = offset_custom + 3;
                  if (t12 >= t8.length)
                    throw $.ioore(t12);
                  t8[t12] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$x();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(313, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t13 = offset_custom + 4;
                  if (t13 >= t9.length)
                    throw $.ioore(t13);
                  t9[t13] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$y();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(314, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t14 = offset_custom + 5;
                  if (t14 >= t8.length)
                    throw $.ioore(t14);
                  t8[t14] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$z();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(315, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t15 = offset_custom + 6;
                  if (t15 >= t9.length)
                    throw $.ioore(t15);
                  t9[t15] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$w();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(316, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t16 = offset_custom + 7;
                  if (t16 >= t8.length)
                    throw $.ioore(t16);
                  t8[t16] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$x();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(317, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t17 = offset_custom + 8;
                  if (t17 >= t9.length)
                    throw $.ioore(t17);
                  t9[t17] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$y();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(318, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t18 = offset_custom + 9;
                  if (t18 >= t8.length)
                    throw $.ioore(t18);
                  t8[t18] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$z();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(319, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t19 = offset_custom + 10;
                  if (t19 >= t9.length)
                    throw $.ioore(t19);
                  t9[t19] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$w();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(320, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t20 = offset_custom + 11;
                  if (t20 >= t8.length)
                    throw $.ioore(t20);
                  t8[t20] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$x();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(321, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t21 = offset_custom + 12;
                  if (t21 >= t9.length)
                    throw $.ioore(t21);
                  t9[t21] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$y();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(322, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t22 = offset_custom + 13;
                  if (t22 >= t8.length)
                    throw $.ioore(t22);
                  t8[t22] = t9;
                  t9 = customAttribute.get$array();
                  t8 = value.get$z();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(323, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t9, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t23 = offset_custom + 14;
                  if (t23 >= t9.length)
                    throw $.ioore(t23);
                  t9[t23] = t8;
                  t8 = customAttribute.get$array();
                  t9 = value.get$w();
                  if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(324, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t8, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, value, customAttribute, offset_custom);
                  t24 = offset_custom + 15;
                  if (t24 >= t8.length)
                    throw $.ioore(t24);
                  t8[t24] = t9;
                  offset_custom += 16;
                }
              } else if (t5 === "faceVertices") {
                fl = chunk_faces3.length;
                for (offset_custom = 0, f = 0; f < fl; ++f, value = t7) {
                  t5 = customAttribute.get$value();
                  t7 = chunk_faces3[f];
                  if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(327, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t5, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  if (t7 !== (t7 | 0))
                    throw $.iae(t7);
                  if (t7 < 0 || t7 >= t5.length)
                    throw $.ioore(t7);
                  t7 = t5[t7];
                  if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !t7.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(328, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t8 = t7.length;
                  if (0 >= t8)
                    throw $.ioore(0);
                  v1 = t7[0];
                  if (1 >= t8)
                    throw $.ioore(1);
                  v2 = t7[1];
                  if (2 >= t8)
                    throw $.ioore(2);
                  v3 = t7[2];
                  t9 = customAttribute.get$array();
                  t11 = v1.get$x();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(329, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  if (offset_custom >= t9.length)
                    throw $.ioore(offset_custom);
                  t9[offset_custom] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v1.get$y();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(330, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t13 = offset_custom + 1;
                  if (t13 >= t11.length)
                    throw $.ioore(t13);
                  t11[t13] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v1.get$z();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(331, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t14 = offset_custom + 2;
                  if (t14 >= t12.length)
                    throw $.ioore(t14);
                  t12[t14] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v1.get$w();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(332, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t15 = offset_custom + 3;
                  if (t15 >= t11.length)
                    throw $.ioore(t15);
                  t11[t15] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v2.get$x();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(333, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t16 = offset_custom + 4;
                  if (t16 >= t12.length)
                    throw $.ioore(t16);
                  t12[t16] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v2.get$y();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(334, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t17 = offset_custom + 5;
                  if (t17 >= t11.length)
                    throw $.ioore(t17);
                  t11[t17] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v2.get$z();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(335, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t18 = offset_custom + 6;
                  if (t18 >= t12.length)
                    throw $.ioore(t18);
                  t12[t18] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v2.get$w();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(336, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t19 = offset_custom + 7;
                  if (t19 >= t11.length)
                    throw $.ioore(t19);
                  t11[t19] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v3.get$x();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(337, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t20 = offset_custom + 8;
                  if (t20 >= t12.length)
                    throw $.ioore(t20);
                  t12[t20] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v3.get$y();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(338, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t21 = offset_custom + 9;
                  if (t21 >= t11.length)
                    throw $.ioore(t21);
                  t11[t21] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v3.get$z();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(339, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t22 = offset_custom + 10;
                  if (t22 >= t12.length)
                    throw $.ioore(t22);
                  t12[t22] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v3.get$w();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(340, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t23 = offset_custom + 11;
                  if (t23 >= t11.length)
                    throw $.ioore(t23);
                  t11[t23] = t12;
                  offset_custom += 12;
                }
                fl = chunk_faces4.length;
                for (f = 0; f < fl; ++f, value = t7) {
                  t5 = customAttribute.get$value();
                  t7 = chunk_faces4[f];
                  if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(342, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t5, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  if (t7 !== (t7 | 0))
                    throw $.iae(t7);
                  if (t7 < 0 || t7 >= t5.length)
                    throw $.ioore(t7);
                  t7 = t5[t7];
                  if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !t7.$isJavaScriptIndexingBehavior()))
                    return this.setMeshBuffers$5$bailout(343, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, null, null, t2, t4, null, t7, null, f, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t8 = t7.length;
                  if (0 >= t8)
                    throw $.ioore(0);
                  v1 = t7[0];
                  if (1 >= t8)
                    throw $.ioore(1);
                  v2 = t7[1];
                  if (2 >= t8)
                    throw $.ioore(2);
                  v3 = t7[2];
                  if (3 >= t8)
                    throw $.ioore(3);
                  v4 = t7[3];
                  t9 = customAttribute.get$array();
                  t11 = v1.get$x();
                  if (typeof t9 !== "object" || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(344, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  if (offset_custom >= t9.length)
                    throw $.ioore(offset_custom);
                  t9[offset_custom] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v1.get$y();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(345, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t13 = offset_custom + 1;
                  if (t13 >= t11.length)
                    throw $.ioore(t13);
                  t11[t13] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v1.get$z();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(346, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t14 = offset_custom + 2;
                  if (t14 >= t12.length)
                    throw $.ioore(t14);
                  t12[t14] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v1.get$w();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(347, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t15 = offset_custom + 3;
                  if (t15 >= t11.length)
                    throw $.ioore(t15);
                  t11[t15] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v2.get$x();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(348, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t16 = offset_custom + 4;
                  if (t16 >= t12.length)
                    throw $.ioore(t16);
                  t12[t16] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v2.get$y();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(349, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t17 = offset_custom + 5;
                  if (t17 >= t11.length)
                    throw $.ioore(t17);
                  t11[t17] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v2.get$z();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(350, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t18 = offset_custom + 6;
                  if (t18 >= t12.length)
                    throw $.ioore(t18);
                  t12[t18] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v2.get$w();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(351, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t19 = offset_custom + 7;
                  if (t19 >= t11.length)
                    throw $.ioore(t19);
                  t11[t19] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v3.get$x();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(352, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t20 = offset_custom + 8;
                  if (t20 >= t12.length)
                    throw $.ioore(t20);
                  t12[t20] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v3.get$y();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(353, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t21 = offset_custom + 9;
                  if (t21 >= t11.length)
                    throw $.ioore(t21);
                  t11[t21] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v3.get$z();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(354, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t22 = offset_custom + 10;
                  if (t22 >= t12.length)
                    throw $.ioore(t22);
                  t12[t22] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v3.get$w();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(355, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t23 = offset_custom + 11;
                  if (t23 >= t11.length)
                    throw $.ioore(t23);
                  t11[t23] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v4.get$x();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(356, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t24 = offset_custom + 12;
                  if (t24 >= t12.length)
                    throw $.ioore(t24);
                  t12[t24] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v4.get$y();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(357, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t25 = offset_custom + 13;
                  if (t25 >= t11.length)
                    throw $.ioore(t25);
                  t11[t25] = t12;
                  t12 = customAttribute.get$array();
                  t11 = v4.get$z();
                  if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(358, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t12, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t26 = offset_custom + 14;
                  if (t26 >= t12.length)
                    throw $.ioore(t26);
                  t12[t26] = t11;
                  t11 = customAttribute.get$array();
                  t12 = v4.get$w();
                  if (typeof t11 !== "object" || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.$isJavaScriptIndexingBehavior())
                    return this.setMeshBuffers$5$bailout(359, geometryGroup, null, hint, dispose, null, null, null, null, null, t3, null, null, null, null, null, null, null, null, null, null, null, null, customAttributes, null, null, null, null, null, null, null, null, null, null, null, chunk_faces3, chunk_faces4, obj_faces, null, t1, null, null, null, null, null, null, null, fl, face, v1, v3, t2, t4, v2, t7, null, f, v4, null, null, null, null, null, null, null, null, null, null, null, null, null, t11, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, i, null, null, null, null, null, null, null, il, null, customAttribute, offset_custom);
                  t27 = offset_custom + 15;
                  if (t27 >= t11.length)
                    throw $.ioore(t27);
                  t11[t27] = t12;
                  offset_custom += 16;
                }
              } else
                offset_custom = 0;
            } else
              offset_custom = 0;
          }
        }
      }
      this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
      this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
      offset_customSrc = 0;
    }
    if (dispose) {
      geometryGroup.set$__inittedArrays(null);
      geometryGroup.set$__colorArray(null);
      geometryGroup.set$__normalArray(null);
      geometryGroup.set$__tangentArray(null);
      geometryGroup.set$__uvArray(null);
      geometryGroup.set$__uv2Array(null);
      geometryGroup.set$__faceArray(null);
      geometryGroup.set$__vertexArray(null);
      geometryGroup.set$__lineArray(null);
      geometryGroup.set$__skinVertexAArray(null);
      geometryGroup.set$__skinVertexBArray(null);
      geometryGroup.set$__skinIndexArray(null);
      geometryGroup.set$__skinWeightArray(null);
    }
  },
  setMeshBuffers$5$bailout: function(state0, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, t3, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t23, t1, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, fl, face, v1, v3, t2, t4, v2, t5, offset, f, v4, vkl, vk, vka, nka, chf, faceVertexNormals, t6, t9, n1, n2, n3, n4, t7, t8, offset_morphTarget, t10, t15, t16, t17, t18, t19, t20, t21, t22, t24, t25, t26, t27, t11, offset_skin, offset_color, vertexColors, faceColor, offset_tangent, vertexTangents, vn, offset_normal, vertexNormals, faceNormal, i, uvi, offset_uv, uv2i, offset_uv2, offset_face, vertexIndex, offset_line, il, value, customAttribute, offset_custom, t14, t13, pp, t31, t12) {
    switch (state0) {
      case 0:
        if (geometryGroup.get$__inittedArrays() !== true)
          return;
        normalType = this.bufferGuessNormalType$1(material);
      case 1:
        state0 = 0;
        vertexColorType = this.bufferGuessVertexColorType$1(material);
      case 2:
        state0 = 0;
        uvType = this.bufferGuessUVType$1(material);
        t3 = $.getInterceptor(normalType);
        needsSmoothNormals = t3.$eq(normalType, 2);
        vertexArray = geometryGroup.get$__vertexArray();
      case 3:
        state0 = 0;
        uvArray = geometryGroup.get$__uvArray();
      case 4:
        state0 = 0;
        uv2Array = geometryGroup.get$__uv2Array();
      case 5:
        state0 = 0;
        normalArray = geometryGroup.get$__normalArray();
      case 6:
        state0 = 0;
        tangentArray = geometryGroup.get$__tangentArray();
      case 7:
        state0 = 0;
        colorArray = geometryGroup.get$__colorArray();
      case 8:
        state0 = 0;
        skinVertexAArray = geometryGroup.get$__skinVertexAArray();
      case 9:
        state0 = 0;
        skinVertexBArray = geometryGroup.get$__skinVertexBArray();
      case 10:
        state0 = 0;
        skinIndexArray = geometryGroup.get$__skinIndexArray();
      case 11:
        state0 = 0;
        skinWeightArray = geometryGroup.get$__skinWeightArray();
      case 12:
        state0 = 0;
        morphTargetsArrays = geometryGroup.get$__morphTargetsArrays();
      case 13:
        state0 = 0;
        morphNormalsArrays = geometryGroup.get$__morphNormalsArrays();
      case 14:
        state0 = 0;
        customAttributes = geometryGroup.get$__webglCustomAttributesList();
      case 15:
        state0 = 0;
        faceArray = geometryGroup.get$__faceArray();
      case 16:
        state0 = 0;
        lineArray = geometryGroup.get$__lineArray();
      case 17:
        state0 = 0;
        geometry = object.get$webglgeometry();
        dirtyVertices = geometry.get$verticesNeedUpdate();
        dirtyElements = geometry.get$elementsNeedUpdate();
        dirtyUvs = geometry.get$uvsNeedUpdate();
        dirtyNormals = geometry.get$normalsNeedUpdate();
        dirtyTangents = geometry.get$tangentsNeedUpdate();
        dirtyColors = geometry.get$colorsNeedUpdate();
        dirtyMorphTargets = geometry.get$morphTargetsNeedUpdate();
        vertices = geometry.get$vertices();
      case 18:
        state0 = 0;
        chunk_faces3 = geometryGroup.get$faces3();
      case 19:
        state0 = 0;
        chunk_faces4 = geometryGroup.get$faces4();
      case 20:
        state0 = 0;
        obj_faces = geometry.get$faces();
      case 21:
        state0 = 0;
        t23 = geometry.get$faceVertexUvs();
      case 22:
        state0 = 0;
        t23 = $.$$index(t23, 0);
      case 23:
        state0 = 0;
        t1 = $.length(geometry.get$faceVertexUvs());
      case 24:
        state0 = 0;
      case 25:
        if (state0 === 25 || state0 === 0 && $.$$gt(t1, 1) === true)
          switch (state0) {
            case 0:
              t1 = geometry.get$faceVertexUvs();
            case 25:
              state0 = 0;
              obj_uvs2 = $.$$index(t1, 1);
          }
        else
          obj_uvs2 = null;
        geometry.get$colors();
        obj_skinVerticesA = geometry.get$skinVerticesA();
      case 26:
        state0 = 0;
        obj_skinVerticesB = geometry.get$skinVerticesB();
      case 27:
        state0 = 0;
        obj_skinIndices = geometry.get$skinIndices();
      case 28:
        state0 = 0;
        obj_skinWeights = geometry.get$skinWeights();
      case 29:
        state0 = 0;
        morphTargets = geometry.get$morphTargets();
      case 30:
        state0 = 0;
        morphNormals = geometry.get$morphNormals();
      case 31:
        state0 = 0;
      default:
        if (state0 === 33 || state0 === 32 || state0 === 0 && dirtyVertices === true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t1.get$length(chunk_faces3);
            case 32:
              state0 = 0;
              for (t2 = $.getInterceptor$JSStringJSArray(obj_faces), t4 = $.getInterceptor$JSStringJSArray(vertices), t5 = $.getInterceptor$JSArray(vertexArray), offset = 0, f = 0, face = null, v1 = null, v2 = null, v3 = null; $.CONSTANT1.$lt(f, fl); ++f) {
                face = t2.$index(obj_faces, t1.$index(chunk_faces3, f));
                v1 = t4.$index(vertices, face.get$a());
                v2 = t4.$index(vertices, face.get$b());
                v3 = t4.$index(vertices, face.get$c());
                t5.$indexSet(vertexArray, offset, v1.get$x());
                t5.$indexSet(vertexArray, offset + 1, v1.get$y());
                t5.$indexSet(vertexArray, offset + 2, v1.get$z());
                t5.$indexSet(vertexArray, offset + 3, v2.get$x());
                t5.$indexSet(vertexArray, offset + 4, v2.get$y());
                t5.$indexSet(vertexArray, offset + 5, v2.get$z());
                t5.$indexSet(vertexArray, offset + 6, v3.get$x());
                t5.$indexSet(vertexArray, offset + 7, v3.get$y());
                t5.$indexSet(vertexArray, offset + 8, v3.get$z());
                offset += 9;
              }
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t1.get$length(chunk_faces4);
            case 33:
              state0 = 0;
              for (f = 0, v4 = null; $.CONSTANT1.$lt(f, fl); ++f) {
                face = t2.$index(obj_faces, t1.$index(chunk_faces4, f));
                v1 = t4.$index(vertices, face.get$a());
                v2 = t4.$index(vertices, face.get$b());
                v3 = t4.$index(vertices, face.get$c());
                v4 = t4.$index(vertices, face.get$d());
                t5.$indexSet(vertexArray, offset, v1.get$x());
                t5.$indexSet(vertexArray, offset + 1, v1.get$y());
                t5.$indexSet(vertexArray, offset + 2, v1.get$z());
                t5.$indexSet(vertexArray, offset + 3, v2.get$x());
                t5.$indexSet(vertexArray, offset + 4, v2.get$y());
                t5.$indexSet(vertexArray, offset + 5, v2.get$z());
                t5.$indexSet(vertexArray, offset + 6, v3.get$x());
                t5.$indexSet(vertexArray, offset + 7, v3.get$y());
                t5.$indexSet(vertexArray, offset + 8, v3.get$z());
                t5.$indexSet(vertexArray, offset + 9, v4.get$x());
                t5.$indexSet(vertexArray, offset + 10, v4.get$y());
                t5.$indexSet(vertexArray, offset + 11, v4.get$z());
                offset += 12;
              }
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
              this._gl.bufferData$3(34962, vertexArray, hint);
          }
        else {
          f = null;
          fl = null;
          face = null;
          v1 = null;
          v2 = null;
          v3 = null;
          v4 = null;
        }
      case 34:
        state0 = 0;
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
        if (state0 === 50 || state0 === 49 || state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 0 && dirtyMorphTargets === true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(morphTargets);
              vkl = t1.get$length(morphTargets);
            case 35:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(morphNormalsArrays);
              t4 = $.getInterceptor$JSStringJSArray(morphTargetsArrays);
              t5 = $.getInterceptor$JSStringJSArray(morphNormals);
              t6 = needsSmoothNormals === true;
              t7 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              t8 = $.getInterceptor$JSStringJSArray(obj_faces);
              t9 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              n1 = null;
              n2 = null;
              n3 = null;
              n4 = null;
              vk = 0;
              vka = null;
              nka = null;
              chf = null;
              faceVertexNormals = null;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(vk, vkl))
                        break L0;
                      fl = t9.get$length(chunk_faces3);
                    case 36:
                      state0 = 0;
                      offset_morphTarget = 0;
                      f = 0;
                    default:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              if (!$.CONSTANT1.$lt(f, fl))
                                break L1;
                              chf = t9.$index(chunk_faces3, f);
                              face = t8.$index(obj_faces, chf);
                              t10 = t1.$index(morphTargets, vk).get$vertices();
                            case 37:
                              state0 = 0;
                              v1 = $.$$index(t10, face.get$a());
                              t10 = t1.$index(morphTargets, vk).get$vertices();
                            case 38:
                              state0 = 0;
                              v2 = $.$$index(t10, face.get$b());
                              t10 = t1.$index(morphTargets, vk).get$vertices();
                            case 39:
                              state0 = 0;
                              v3 = $.$$index(t10, face.get$c());
                              vka = t4.$index(morphTargetsArrays, vk);
                            case 40:
                              state0 = 0;
                              t14 = $.getInterceptor$JSArray(vka);
                              t14.$indexSet(vka, offset_morphTarget, v1.get$x());
                              t15 = offset_morphTarget + 1;
                              t14.$indexSet(vka, t15, v1.get$y());
                              t16 = offset_morphTarget + 2;
                              t14.$indexSet(vka, t16, v1.get$z());
                              t17 = offset_morphTarget + 3;
                              t14.$indexSet(vka, t17, v2.get$x());
                              t18 = offset_morphTarget + 4;
                              t14.$indexSet(vka, t18, v2.get$y());
                              t19 = offset_morphTarget + 5;
                              t14.$indexSet(vka, t19, v2.get$z());
                              t20 = offset_morphTarget + 6;
                              t14.$indexSet(vka, t20, v3.get$x());
                              t21 = offset_morphTarget + 7;
                              t14.$indexSet(vka, t21, v3.get$y());
                              t22 = offset_morphTarget + 8;
                              t14.$indexSet(vka, t22, v3.get$z());
                            case 41:
                              if (state0 === 41 || state0 === 0 && material.get$morphNormals() === true)
                                switch (state0) {
                                  case 0:
                                    if (t6) {
                                      faceVertexNormals = $.$$index(t5.$index(morphNormals, vk).get$vertexNormals(), chf);
                                      n1 = faceVertexNormals.get$a();
                                      n2 = faceVertexNormals.get$b();
                                      n3 = faceVertexNormals.get$c();
                                    } else {
                                      n1 = $.$$index(t5.$index(morphNormals, vk).get$faceNormals(), chf);
                                      n3 = n1;
                                      n2 = n3;
                                    }
                                    nka = t2.$index(morphNormalsArrays, vk);
                                  case 41:
                                    state0 = 0;
                                    t11 = $.getInterceptor$JSArray(nka);
                                    t11.$indexSet(nka, offset_morphTarget, n1.get$x());
                                    t11.$indexSet(nka, t15, n1.get$y());
                                    t11.$indexSet(nka, t16, n1.get$z());
                                    t11.$indexSet(nka, t17, n2.get$x());
                                    t11.$indexSet(nka, t18, n2.get$y());
                                    t11.$indexSet(nka, t19, n2.get$z());
                                    t11.$indexSet(nka, t20, n3.get$x());
                                    t11.$indexSet(nka, t21, n3.get$y());
                                    t11.$indexSet(nka, t22, n3.get$z());
                                }
                              offset_morphTarget += 9;
                              ++f;
                          }
                      fl = t7.get$length(chunk_faces4);
                    case 42:
                      state0 = 0;
                      f = 0;
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                      L2:
                        while (true)
                          switch (state0) {
                            case 0:
                              if (!$.CONSTANT1.$lt(f, fl))
                                break L2;
                              chf = t7.$index(chunk_faces4, f);
                              face = t8.$index(obj_faces, chf);
                              t10 = t1.$index(morphTargets, vk).get$vertices();
                            case 43:
                              state0 = 0;
                              v1 = $.$$index(t10, face.get$a());
                              t10 = t1.$index(morphTargets, vk).get$vertices();
                            case 44:
                              state0 = 0;
                              v2 = $.$$index(t10, face.get$b());
                              t10 = t1.$index(morphTargets, vk).get$vertices();
                            case 45:
                              state0 = 0;
                              v3 = $.$$index(t10, face.get$c());
                              t10 = t1.$index(morphTargets, vk).get$vertices();
                            case 46:
                              state0 = 0;
                              v4 = $.$$index(t10, face.get$d());
                              vka = t4.$index(morphTargetsArrays, vk);
                            case 47:
                              state0 = 0;
                              t15 = $.getInterceptor$JSArray(vka);
                              t15.$indexSet(vka, offset_morphTarget, v1.get$x());
                              t16 = offset_morphTarget + 1;
                              t15.$indexSet(vka, t16, v1.get$y());
                              t17 = offset_morphTarget + 2;
                              t15.$indexSet(vka, t17, v1.get$z());
                              t18 = offset_morphTarget + 3;
                              t15.$indexSet(vka, t18, v2.get$x());
                              t19 = offset_morphTarget + 4;
                              t15.$indexSet(vka, t19, v2.get$y());
                              t20 = offset_morphTarget + 5;
                              t15.$indexSet(vka, t20, v2.get$z());
                              t21 = offset_morphTarget + 6;
                              t15.$indexSet(vka, t21, v3.get$x());
                              t22 = offset_morphTarget + 7;
                              t15.$indexSet(vka, t22, v3.get$y());
                              t24 = offset_morphTarget + 8;
                              t15.$indexSet(vka, t24, v3.get$z());
                              t25 = offset_morphTarget + 9;
                              t15.$indexSet(vka, t25, v4.get$x());
                              t26 = offset_morphTarget + 10;
                              t15.$indexSet(vka, t26, v4.get$y());
                              t27 = offset_morphTarget + 11;
                              t15.$indexSet(vka, t27, v4.get$z());
                            case 48:
                              if (state0 === 48 || state0 === 0 && material.get$morphNormals() === true)
                                switch (state0) {
                                  case 0:
                                    if (t6) {
                                      faceVertexNormals = $.$$index(t5.$index(morphNormals, vk).get$vertexNormals(), chf);
                                      n1 = faceVertexNormals.get$a();
                                      n2 = faceVertexNormals.get$b();
                                      n3 = faceVertexNormals.get$c();
                                      n4 = faceVertexNormals.get$d();
                                    } else {
                                      n1 = $.$$index(t5.$index(morphNormals, vk).get$faceNormals(), chf);
                                      n4 = n1;
                                      n3 = n4;
                                      n2 = n3;
                                    }
                                    nka = t2.$index(morphNormalsArrays, vk);
                                  case 48:
                                    state0 = 0;
                                    t11 = $.getInterceptor$JSArray(nka);
                                    t11.$indexSet(nka, offset_morphTarget, n1.get$x());
                                    t11.$indexSet(nka, t16, n1.get$y());
                                    t11.$indexSet(nka, t17, n1.get$z());
                                    t11.$indexSet(nka, t18, n2.get$x());
                                    t11.$indexSet(nka, t19, n2.get$y());
                                    t11.$indexSet(nka, t20, n2.get$z());
                                    t11.$indexSet(nka, t21, n3.get$x());
                                    t11.$indexSet(nka, t22, n3.get$y());
                                    t11.$indexSet(nka, t24, n3.get$z());
                                    t11.$indexSet(nka, t25, n4.get$x());
                                    t11.$indexSet(nka, t26, n4.get$y());
                                    t11.$indexSet(nka, t27, n4.get$z());
                                }
                              offset_morphTarget += 12;
                              ++f;
                          }
                      t10 = this._gl;
                      t11 = geometryGroup.get$__webglMorphTargetsBuffers();
                    case 49:
                      state0 = 0;
                      t10.bindBuffer$2(34962, $.$$index(t11, vk));
                      this._gl.bufferData$3(34962, t4.$index(morphTargetsArrays, vk), hint);
                    case 50:
                      if (state0 === 50 || state0 === 0 && material.get$morphNormals() === true)
                        switch (state0) {
                          case 0:
                            t10 = this._gl;
                            t11 = geometryGroup.get$__webglMorphNormalsBuffers();
                          case 50:
                            state0 = 0;
                            t10.bindBuffer$2(34962, $.$$index(t11, vk));
                            this._gl.bufferData$3(34962, t2.$index(morphNormalsArrays, vk), hint);
                        }
                      ++vk;
                  }
          }
        t1 = $.getInterceptor$JSStringJSArray(obj_skinWeights);
      case 51:
      case 52:
        if (state0 === 52 || state0 === 51 || state0 === 0 && t1.get$isEmpty(obj_skinWeights) !== true)
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t2.get$length(chunk_faces3);
            case 51:
              state0 = 0;
              for (t4 = $.getInterceptor$JSStringJSArray(obj_faces), t5 = $.getInterceptor$JSArray(skinWeightArray), t6 = $.getInterceptor$JSStringJSArray(obj_skinIndices), t7 = $.getInterceptor$JSArray(skinIndexArray), t8 = $.getInterceptor$JSStringJSArray(obj_skinVerticesA), t9 = $.getInterceptor$JSArray(skinVertexAArray), t10 = $.getInterceptor$JSStringJSArray(obj_skinVerticesB), t11 = $.getInterceptor$JSArray(skinVertexBArray), offset_skin = 0, f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                face = t4.$index(obj_faces, t2.$index(chunk_faces3, f));
                sw1 = t1.$index(obj_skinWeights, face.get$a());
                sw2 = t1.$index(obj_skinWeights, face.get$b());
                sw3 = t1.$index(obj_skinWeights, face.get$c());
                t5.$indexSet(skinWeightArray, offset_skin, sw1.get$x());
                t12 = offset_skin + 1;
                t5.$indexSet(skinWeightArray, t12, sw1.get$y());
                t13 = offset_skin + 2;
                t5.$indexSet(skinWeightArray, t13, sw1.get$z());
                t14 = offset_skin + 3;
                t5.$indexSet(skinWeightArray, t14, sw1.get$w());
                t15 = offset_skin + 4;
                t5.$indexSet(skinWeightArray, t15, sw2.get$x());
                t16 = offset_skin + 5;
                t5.$indexSet(skinWeightArray, t16, sw2.get$y());
                t17 = offset_skin + 6;
                t5.$indexSet(skinWeightArray, t17, sw2.get$z());
                t18 = offset_skin + 7;
                t5.$indexSet(skinWeightArray, t18, sw2.get$w());
                t19 = offset_skin + 8;
                t5.$indexSet(skinWeightArray, t19, sw3.get$x());
                t20 = offset_skin + 9;
                t5.$indexSet(skinWeightArray, t20, sw3.get$y());
                t21 = offset_skin + 10;
                t5.$indexSet(skinWeightArray, t21, sw3.get$z());
                t22 = offset_skin + 11;
                t5.$indexSet(skinWeightArray, t22, sw3.get$w());
                si1 = t6.$index(obj_skinIndices, face.get$a());
                si2 = t6.$index(obj_skinIndices, face.get$b());
                si3 = t6.$index(obj_skinIndices, face.get$c());
                t7.$indexSet(skinIndexArray, offset_skin, si1.get$x());
                t7.$indexSet(skinIndexArray, t12, si1.get$y());
                t7.$indexSet(skinIndexArray, t13, si1.get$z());
                t7.$indexSet(skinIndexArray, t14, si1.get$w());
                t7.$indexSet(skinIndexArray, t15, si2.get$x());
                t7.$indexSet(skinIndexArray, t16, si2.get$y());
                t7.$indexSet(skinIndexArray, t17, si2.get$z());
                t7.$indexSet(skinIndexArray, t18, si2.get$w());
                t7.$indexSet(skinIndexArray, t19, si3.get$x());
                t7.$indexSet(skinIndexArray, t20, si3.get$y());
                t7.$indexSet(skinIndexArray, t21, si3.get$z());
                t7.$indexSet(skinIndexArray, t22, si3.get$w());
                sa1 = t8.$index(obj_skinVerticesA, face.get$a());
                sa2 = t8.$index(obj_skinVerticesA, face.get$b());
                sa3 = t8.$index(obj_skinVerticesA, face.get$c());
                t9.$indexSet(skinVertexAArray, offset_skin, sa1.get$x());
                t9.$indexSet(skinVertexAArray, t12, sa1.get$y());
                t9.$indexSet(skinVertexAArray, t13, sa1.get$z());
                t9.$indexSet(skinVertexAArray, t14, 1);
                t9.$indexSet(skinVertexAArray, t15, sa2.get$x());
                t9.$indexSet(skinVertexAArray, t16, sa2.get$y());
                t9.$indexSet(skinVertexAArray, t17, sa2.get$z());
                t9.$indexSet(skinVertexAArray, t18, 1);
                t9.$indexSet(skinVertexAArray, t19, sa3.get$x());
                t9.$indexSet(skinVertexAArray, t20, sa3.get$y());
                t9.$indexSet(skinVertexAArray, t21, sa3.get$z());
                t9.$indexSet(skinVertexAArray, t22, 1);
                sb1 = t10.$index(obj_skinVerticesB, face.get$a());
                sb2 = t10.$index(obj_skinVerticesB, face.get$b());
                sb3 = t10.$index(obj_skinVerticesB, face.get$c());
                t11.$indexSet(skinVertexBArray, offset_skin, sb1.get$x());
                t11.$indexSet(skinVertexBArray, t12, sb1.get$y());
                t11.$indexSet(skinVertexBArray, t13, sb1.get$z());
                t11.$indexSet(skinVertexBArray, t14, 1);
                t11.$indexSet(skinVertexBArray, t15, sb2.get$x());
                t11.$indexSet(skinVertexBArray, t16, sb2.get$y());
                t11.$indexSet(skinVertexBArray, t17, sb2.get$z());
                t11.$indexSet(skinVertexBArray, t18, 1);
                t11.$indexSet(skinVertexBArray, t19, sb3.get$x());
                t11.$indexSet(skinVertexBArray, t20, sb3.get$y());
                t11.$indexSet(skinVertexBArray, t21, sb3.get$z());
                t11.$indexSet(skinVertexBArray, t22, 1);
                offset_skin += 12;
              }
              t2 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t2.get$length(chunk_faces4);
            case 52:
              state0 = 0;
              for (f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                face = t4.$index(obj_faces, t2.$index(chunk_faces4, f));
                sw1 = t1.$index(obj_skinWeights, face.get$a());
                sw2 = t1.$index(obj_skinWeights, face.get$b());
                sw3 = t1.$index(obj_skinWeights, face.get$c());
                sw4 = t1.$index(obj_skinWeights, face.get$d());
                t5.$indexSet(skinWeightArray, offset_skin, sw1.get$x());
                t12 = offset_skin + 1;
                t5.$indexSet(skinWeightArray, t12, sw1.get$y());
                t13 = offset_skin + 2;
                t5.$indexSet(skinWeightArray, t13, sw1.get$z());
                t14 = offset_skin + 3;
                t5.$indexSet(skinWeightArray, t14, sw1.get$w());
                t15 = offset_skin + 4;
                t5.$indexSet(skinWeightArray, t15, sw2.get$x());
                t16 = offset_skin + 5;
                t5.$indexSet(skinWeightArray, t16, sw2.get$y());
                t17 = offset_skin + 6;
                t5.$indexSet(skinWeightArray, t17, sw2.get$z());
                t18 = offset_skin + 7;
                t5.$indexSet(skinWeightArray, t18, sw2.get$w());
                t19 = offset_skin + 8;
                t5.$indexSet(skinWeightArray, t19, sw3.get$x());
                t20 = offset_skin + 9;
                t5.$indexSet(skinWeightArray, t20, sw3.get$y());
                t21 = offset_skin + 10;
                t5.$indexSet(skinWeightArray, t21, sw3.get$z());
                t22 = offset_skin + 11;
                t5.$indexSet(skinWeightArray, t22, sw3.get$w());
                t24 = offset_skin + 12;
                t5.$indexSet(skinWeightArray, t24, sw4.get$x());
                t25 = offset_skin + 13;
                t5.$indexSet(skinWeightArray, t25, sw4.get$y());
                t26 = offset_skin + 14;
                t5.$indexSet(skinWeightArray, t26, sw4.get$z());
                t27 = offset_skin + 15;
                t5.$indexSet(skinWeightArray, t27, sw4.get$w());
                si1 = t6.$index(obj_skinIndices, face.get$a());
                si2 = t6.$index(obj_skinIndices, face.get$b());
                si3 = t6.$index(obj_skinIndices, face.get$c());
                si4 = t6.$index(obj_skinIndices, face.get$d());
                t7.$indexSet(skinIndexArray, offset_skin, si1.get$x());
                t7.$indexSet(skinIndexArray, t12, si1.get$y());
                t7.$indexSet(skinIndexArray, t13, si1.get$z());
                t7.$indexSet(skinIndexArray, t14, si1.get$w());
                t7.$indexSet(skinIndexArray, t15, si2.get$x());
                t7.$indexSet(skinIndexArray, t16, si2.get$y());
                t7.$indexSet(skinIndexArray, t17, si2.get$z());
                t7.$indexSet(skinIndexArray, t18, si2.get$w());
                t7.$indexSet(skinIndexArray, t19, si3.get$x());
                t7.$indexSet(skinIndexArray, t20, si3.get$y());
                t7.$indexSet(skinIndexArray, t21, si3.get$z());
                t7.$indexSet(skinIndexArray, t22, si3.get$w());
                t7.$indexSet(skinIndexArray, t24, si4.get$x());
                t7.$indexSet(skinIndexArray, t25, si4.get$y());
                t7.$indexSet(skinIndexArray, t26, si4.get$z());
                t7.$indexSet(skinIndexArray, t27, si4.get$w());
                sa1 = t8.$index(obj_skinVerticesA, face.get$a());
                sa2 = t8.$index(obj_skinVerticesA, face.get$b());
                sa3 = t8.$index(obj_skinVerticesA, face.get$c());
                sa4 = t8.$index(obj_skinVerticesA, face.get$d());
                t9.$indexSet(skinVertexAArray, offset_skin, sa1.get$x());
                t9.$indexSet(skinVertexAArray, t12, sa1.get$y());
                t9.$indexSet(skinVertexAArray, t13, sa1.get$z());
                t9.$indexSet(skinVertexAArray, t14, 1);
                t9.$indexSet(skinVertexAArray, t15, sa2.get$x());
                t9.$indexSet(skinVertexAArray, t16, sa2.get$y());
                t9.$indexSet(skinVertexAArray, t17, sa2.get$z());
                t9.$indexSet(skinVertexAArray, t18, 1);
                t9.$indexSet(skinVertexAArray, t19, sa3.get$x());
                t9.$indexSet(skinVertexAArray, t20, sa3.get$y());
                t9.$indexSet(skinVertexAArray, t21, sa3.get$z());
                t9.$indexSet(skinVertexAArray, t22, 1);
                t9.$indexSet(skinVertexAArray, t24, sa4.get$x());
                t9.$indexSet(skinVertexAArray, t25, sa4.get$y());
                t9.$indexSet(skinVertexAArray, t26, sa4.get$z());
                t9.$indexSet(skinVertexAArray, t27, 1);
                sb1 = t10.$index(obj_skinVerticesB, face.get$a());
                sb2 = t10.$index(obj_skinVerticesB, face.get$b());
                sb3 = t10.$index(obj_skinVerticesB, face.get$c());
                sb4 = t10.$index(obj_skinVerticesB, face.get$d());
                t11.$indexSet(skinVertexBArray, offset_skin, sb1.get$x());
                t11.$indexSet(skinVertexBArray, t12, sb1.get$y());
                t11.$indexSet(skinVertexBArray, t13, sb1.get$z());
                t11.$indexSet(skinVertexBArray, t14, 1);
                t11.$indexSet(skinVertexBArray, t15, sb2.get$x());
                t11.$indexSet(skinVertexBArray, t16, sb2.get$y());
                t11.$indexSet(skinVertexBArray, t17, sb2.get$z());
                t11.$indexSet(skinVertexBArray, t18, 1);
                t11.$indexSet(skinVertexBArray, t19, sb3.get$x());
                t11.$indexSet(skinVertexBArray, t20, sb3.get$y());
                t11.$indexSet(skinVertexBArray, t21, sb3.get$z());
                t11.$indexSet(skinVertexBArray, t22, 1);
                t11.$indexSet(skinVertexBArray, t24, sb4.get$x());
                t11.$indexSet(skinVertexBArray, t25, sb4.get$y());
                t11.$indexSet(skinVertexBArray, t26, sb4.get$z());
                t11.$indexSet(skinVertexBArray, t27, 1);
                offset_skin += 16;
              }
              if (offset_skin > 0) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
                this._gl.bufferData$3(34962, skinVertexAArray, hint);
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
                this._gl.bufferData$3(34962, skinVertexBArray, hint);
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
                this._gl.bufferData$3(34962, skinIndexArray, hint);
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
                this._gl.bufferData$3(34962, skinWeightArray, hint);
              }
          }
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
        if (state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 0 && dirtyColors === true && vertexColorType === true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t1.get$length(chunk_faces3);
            case 53:
              state0 = 0;
              t2 = $.getInterceptor$JSArray(colorArray);
              t4 = $.getInterceptor(vertexColorType);
              t5 = $.getInterceptor$JSStringJSArray(obj_faces);
              offset_color = 0;
              f = 0;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(f, fl))
                        break L3;
                      face = t5.$index(obj_faces, t1.$index(chunk_faces3, f));
                      vertexColors = face.get$vertexColors();
                    case 54:
                      state0 = 0;
                      faceColor = face.get$color();
                      t6 = $.getInterceptor$JSStringJSArray(vertexColors);
                      t7 = t6.get$length(vertexColors);
                    case 55:
                      state0 = 0;
                      if ($.$$eq(t7, 3) === true && t4.$eq(vertexColorType, 2) === true) {
                        c1 = t6.$index(vertexColors, 0);
                        c2 = t6.$index(vertexColors, 1);
                        c3 = t6.$index(vertexColors, 2);
                      } else {
                        c3 = faceColor;
                        c2 = c3;
                        c1 = c2;
                      }
                      t2.$indexSet(colorArray, offset_color, c1.get$r());
                      t2.$indexSet(colorArray, offset_color + 1, c1.get$g());
                      t2.$indexSet(colorArray, offset_color + 2, c1.get$b());
                      t2.$indexSet(colorArray, offset_color + 3, c2.get$r());
                      t2.$indexSet(colorArray, offset_color + 4, c2.get$g());
                      t2.$indexSet(colorArray, offset_color + 5, c2.get$b());
                      t2.$indexSet(colorArray, offset_color + 6, c3.get$r());
                      t2.$indexSet(colorArray, offset_color + 7, c3.get$g());
                      t2.$indexSet(colorArray, offset_color + 8, c3.get$b());
                      offset_color += 9;
                      ++f;
                  }
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t1.get$length(chunk_faces4);
            case 56:
              state0 = 0;
              f = 0;
            case 57:
            case 58:
              L4:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(f, fl))
                        break L4;
                      face = t5.$index(obj_faces, t1.$index(chunk_faces4, f));
                      vertexColors = face.get$vertexColors();
                    case 57:
                      state0 = 0;
                      faceColor = face.get$color();
                      t6 = $.getInterceptor$JSStringJSArray(vertexColors);
                      t7 = t6.get$length(vertexColors);
                    case 58:
                      state0 = 0;
                      if ($.$$eq(t7, 4) === true && t4.$eq(vertexColorType, 2) === true) {
                        c1 = t6.$index(vertexColors, 0);
                        c2 = t6.$index(vertexColors, 1);
                        c3 = t6.$index(vertexColors, 2);
                        c4 = t6.$index(vertexColors, 3);
                      } else {
                        c4 = faceColor;
                        c3 = c4;
                        c2 = c3;
                        c1 = c2;
                      }
                      t2.$indexSet(colorArray, offset_color, c1.get$r());
                      t2.$indexSet(colorArray, offset_color + 1, c1.get$g());
                      t2.$indexSet(colorArray, offset_color + 2, c1.get$b());
                      t2.$indexSet(colorArray, offset_color + 3, c2.get$r());
                      t2.$indexSet(colorArray, offset_color + 4, c2.get$g());
                      t2.$indexSet(colorArray, offset_color + 5, c2.get$b());
                      t2.$indexSet(colorArray, offset_color + 6, c3.get$r());
                      t2.$indexSet(colorArray, offset_color + 7, c3.get$g());
                      t2.$indexSet(colorArray, offset_color + 8, c3.get$b());
                      t2.$indexSet(colorArray, offset_color + 9, c4.get$r());
                      t2.$indexSet(colorArray, offset_color + 10, c4.get$g());
                      t2.$indexSet(colorArray, offset_color + 11, c4.get$b());
                      offset_color += 12;
                      ++f;
                  }
              if (offset_color > 0) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
                this._gl.bufferData$3(34962, colorArray, hint);
              }
          }
      case 59:
      case 60:
      case 61:
      case 62:
        if (state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 0 && dirtyTangents === true && geometry.get$hasTangents() === true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t1.get$length(chunk_faces3);
            case 59:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(obj_faces);
              t4 = $.getInterceptor$JSArray(tangentArray);
              offset_tangent = 0;
              f = 0;
            case 60:
              L5:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(f, fl))
                        break L5;
                      face = t2.$index(obj_faces, t1.$index(chunk_faces3, f));
                      vertexTangents = face.get$vertexTangents();
                    case 60:
                      state0 = 0;
                      t6 = $.getInterceptor$JSStringJSArray(vertexTangents);
                      t10 = t6.$index(vertexTangents, 0);
                      t20 = t6.$index(vertexTangents, 1);
                      t30 = t6.$index(vertexTangents, 2);
                      t4.$indexSet(tangentArray, offset_tangent, t10.get$x());
                      t4.$indexSet(tangentArray, offset_tangent + 1, t10.get$y());
                      t4.$indexSet(tangentArray, offset_tangent + 2, t10.get$z());
                      t4.$indexSet(tangentArray, offset_tangent + 3, t10.get$w());
                      t4.$indexSet(tangentArray, offset_tangent + 4, t20.get$x());
                      t4.$indexSet(tangentArray, offset_tangent + 5, t20.get$y());
                      t4.$indexSet(tangentArray, offset_tangent + 6, t20.get$z());
                      t4.$indexSet(tangentArray, offset_tangent + 7, t20.get$w());
                      t4.$indexSet(tangentArray, offset_tangent + 8, t30.get$x());
                      t4.$indexSet(tangentArray, offset_tangent + 9, t30.get$y());
                      t4.$indexSet(tangentArray, offset_tangent + 10, t30.get$z());
                      t4.$indexSet(tangentArray, offset_tangent + 11, t30.get$w());
                      offset_tangent += 12;
                      ++f;
                  }
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t1.get$length(chunk_faces4);
            case 61:
              state0 = 0;
              f = 0;
            case 62:
              L6:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(f, fl))
                        break L6;
                      face = t2.$index(obj_faces, t1.$index(chunk_faces4, f));
                      vertexTangents = face.get$vertexTangents();
                    case 62:
                      state0 = 0;
                      t6 = $.getInterceptor$JSStringJSArray(vertexTangents);
                      t10 = t6.$index(vertexTangents, 0);
                      t20 = t6.$index(vertexTangents, 1);
                      t30 = t6.$index(vertexTangents, 2);
                      t40 = t6.$index(vertexTangents, 3);
                      t4.$indexSet(tangentArray, offset_tangent, t10.get$x());
                      t4.$indexSet(tangentArray, offset_tangent + 1, t10.get$y());
                      t4.$indexSet(tangentArray, offset_tangent + 2, t10.get$z());
                      t4.$indexSet(tangentArray, offset_tangent + 3, t10.get$w());
                      t4.$indexSet(tangentArray, offset_tangent + 4, t20.get$x());
                      t4.$indexSet(tangentArray, offset_tangent + 5, t20.get$y());
                      t4.$indexSet(tangentArray, offset_tangent + 6, t20.get$z());
                      t4.$indexSet(tangentArray, offset_tangent + 7, t20.get$w());
                      t4.$indexSet(tangentArray, offset_tangent + 8, t30.get$x());
                      t4.$indexSet(tangentArray, offset_tangent + 9, t30.get$y());
                      t4.$indexSet(tangentArray, offset_tangent + 10, t30.get$z());
                      t4.$indexSet(tangentArray, offset_tangent + 11, t30.get$w());
                      t4.$indexSet(tangentArray, offset_tangent + 12, t40.get$x());
                      t4.$indexSet(tangentArray, offset_tangent + 13, t40.get$y());
                      t4.$indexSet(tangentArray, offset_tangent + 14, t40.get$z());
                      t4.$indexSet(tangentArray, offset_tangent + 15, t40.get$w());
                      offset_tangent += 16;
                      ++f;
                  }
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
              this._gl.bufferData$3(34962, tangentArray, hint);
          }
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        if (state0 === 68 || state0 === 67 || state0 === 66 || state0 === 65 || state0 === 64 || state0 === 63 || state0 === 0 && dirtyNormals === true && t3.$eq(normalType, 0) !== true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t1.get$length(chunk_faces3);
            case 63:
              state0 = 0;
              t2 = $.getInterceptor$JSArray(normalArray);
              t3 = needsSmoothNormals === true;
              t4 = $.getInterceptor$JSStringJSArray(obj_faces);
              i = null;
              vn = null;
              offset_normal = 0;
              f = 0;
            default:
              L7:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(f, fl))
                        break L7;
                      face = t4.$index(obj_faces, t1.$index(chunk_faces3, f));
                      vertexNormals = face.get$vertexNormals();
                    case 64:
                      state0 = 0;
                      faceNormal = face.get$normal();
                      t5 = $.getInterceptor$JSStringJSArray(vertexNormals);
                      t6 = t5.get$length(vertexNormals);
                    case 65:
                      state0 = 0;
                      if ($.$$eq(t6, 3) === true && t3)
                        for (i = 0; i < 3; ++i) {
                          vn = t5.$index(vertexNormals, i);
                          t2.$indexSet(normalArray, offset_normal, vn.get$x());
                          t2.$indexSet(normalArray, offset_normal + 1, vn.get$y());
                          t2.$indexSet(normalArray, offset_normal + 2, vn.get$z());
                          offset_normal += 3;
                        }
                      else
                        for (i = 0; i < 3; ++i) {
                          t2.$indexSet(normalArray, offset_normal, faceNormal.get$x());
                          t2.$indexSet(normalArray, offset_normal + 1, faceNormal.get$y());
                          t2.$indexSet(normalArray, offset_normal + 2, faceNormal.get$z());
                          offset_normal += 3;
                        }
                      ++f;
                  }
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t1.get$length(chunk_faces4);
            case 66:
              state0 = 0;
              f = 0;
            case 67:
            case 68:
              L8:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(f, fl))
                        break L8;
                      face = t4.$index(obj_faces, t1.$index(chunk_faces4, f));
                      vertexNormals = face.get$vertexNormals();
                    case 67:
                      state0 = 0;
                      faceNormal = face.get$normal();
                      t5 = $.getInterceptor$JSStringJSArray(vertexNormals);
                      t6 = t5.get$length(vertexNormals);
                    case 68:
                      state0 = 0;
                      if ($.$$eq(t6, 4) === true && t3)
                        for (i = 0; i < 4; ++i) {
                          vn = t5.$index(vertexNormals, i);
                          t2.$indexSet(normalArray, offset_normal, vn.get$x());
                          t2.$indexSet(normalArray, offset_normal + 1, vn.get$y());
                          t2.$indexSet(normalArray, offset_normal + 2, vn.get$z());
                          offset_normal += 3;
                        }
                      else
                        for (i = 0; i < 4; ++i) {
                          t2.$indexSet(normalArray, offset_normal, faceNormal.get$x());
                          t2.$indexSet(normalArray, offset_normal + 1, faceNormal.get$y());
                          t2.$indexSet(normalArray, offset_normal + 2, faceNormal.get$z());
                          offset_normal += 3;
                        }
                      ++f;
                  }
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
              this._gl.bufferData$3(34962, normalArray, hint);
          }
        else
          i = null;
        t1 = dirtyUvs === true;
      case 69:
      case 70:
        if (state0 === 70 || state0 === 69 || state0 === 0 && t1 && $.isEmpty(t23) !== true && uvType === true)
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t2.get$length(chunk_faces3);
            case 69:
              state0 = 0;
              for (t3 = $.getInterceptor$JSStringJSArray(obj_faces), t4 = $.getInterceptor$JSStringJSArray(t23), t5 = $.getInterceptor$JSArray(uvArray), uvi = null, offset_uv = 0, f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                fi = t2.$index(chunk_faces3, f);
                face = t3.$index(obj_faces, fi);
                uv = t4.$index(t23, fi);
                t6 = $.getInterceptor(uv);
                if (uv == null)
                  continue;
                for (i = 0; i < 3; ++i) {
                  uvi = t6.$index(uv, i);
                  t5.$indexSet(uvArray, offset_uv, uvi.get$u());
                  t5.$indexSet(uvArray, offset_uv + 1, uvi.get$v());
                  offset_uv += 2;
                }
              }
              t2 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t2.get$length(chunk_faces4);
            case 70:
              state0 = 0;
              for (f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                fi = t2.$index(chunk_faces4, f);
                face = t3.$index(obj_faces, fi);
                uv = t4.$index(t23, fi);
                t6 = $.getInterceptor(uv);
                if (uv == null)
                  continue;
                for (i = 0; i < 4; ++i) {
                  uvi = t6.$index(uv, i);
                  t5.$indexSet(uvArray, offset_uv, uvi.get$u());
                  t5.$indexSet(uvArray, offset_uv + 1, uvi.get$v());
                  offset_uv += 2;
                }
              }
              if (offset_uv > 0) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUVBuffer());
                this._gl.bufferData$3(34962, uvArray, hint);
              }
          }
      case 71:
      case 72:
        if (state0 === 72 || state0 === 71 || state0 === 0 && t1 && !(obj_uvs2 == null) && uvType === true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t1.get$length(chunk_faces3);
            case 71:
              state0 = 0;
              for (t2 = $.getInterceptor$JSStringJSArray(obj_faces), t3 = $.getInterceptor$JSStringJSArray(obj_uvs2), t4 = $.getInterceptor$JSArray(uv2Array), uv2i = null, offset_uv2 = 0, f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                fi = t1.$index(chunk_faces3, f);
                face = t2.$index(obj_faces, fi);
                uv2 = t3.$index(obj_uvs2, fi);
                t5 = $.getInterceptor(uv2);
                if (uv2 == null)
                  continue;
                for (i = 0; i < 3; ++i) {
                  uv2i = t5.$index(uv2, i);
                  t4.$indexSet(uv2Array, offset_uv2, uv2i.get$u());
                  t4.$indexSet(uv2Array, offset_uv2 + 1, uv2i.get$v());
                  offset_uv2 += 2;
                }
              }
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t1.get$length(chunk_faces4);
            case 72:
              state0 = 0;
              for (f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                fi = t1.$index(chunk_faces4, f);
                face = t2.$index(obj_faces, fi);
                uv2 = t3.$index(obj_uvs2, fi);
                t5 = $.getInterceptor(uv2);
                if (uv2 == null)
                  continue;
                for (i = 0; i < 4; ++i) {
                  uv2i = t5.$index(uv2, i);
                  t4.$indexSet(uv2Array, offset_uv2, uv2i.get$u());
                  t4.$indexSet(uv2Array, offset_uv2 + 1, uv2i.get$v());
                  offset_uv2 += 2;
                }
              }
              if (offset_uv2 > 0) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUV2Buffer());
                this._gl.bufferData$3(34962, uv2Array, hint);
              }
          }
      case 73:
      case 74:
        if (state0 === 74 || state0 === 73 || state0 === 0 && dirtyElements === true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              fl = t1.get$length(chunk_faces3);
            case 73:
              state0 = 0;
              for (t2 = $.getInterceptor$JSStringJSArray(obj_faces), t3 = $.getInterceptor$JSArray(faceArray), t4 = $.getInterceptor$JSArray(lineArray), vertexIndex = 0, offset_face = 0, offset_line = 0, f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                face = t2.$index(obj_faces, t1.$index(chunk_faces3, f));
                t3.$indexSet(faceArray, offset_face, vertexIndex);
                t5 = vertexIndex + 1;
                t3.$indexSet(faceArray, offset_face + 1, t5);
                t6 = vertexIndex + 2;
                t3.$indexSet(faceArray, offset_face + 2, t6);
                offset_face += 3;
                t4.$indexSet(lineArray, offset_line, vertexIndex);
                t4.$indexSet(lineArray, offset_line + 1, t5);
                t4.$indexSet(lineArray, offset_line + 2, vertexIndex);
                t4.$indexSet(lineArray, offset_line + 3, t6);
                t4.$indexSet(lineArray, offset_line + 4, t5);
                t4.$indexSet(lineArray, offset_line + 5, t6);
                offset_line += 6;
                vertexIndex += 3;
              }
              t1 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              fl = t1.get$length(chunk_faces4);
            case 74:
              state0 = 0;
              for (f = 0; $.CONSTANT1.$lt(f, fl); ++f) {
                face = t2.$index(obj_faces, t1.$index(chunk_faces4, f));
                t3.$indexSet(faceArray, offset_face, vertexIndex);
                t5 = vertexIndex + 1;
                t3.$indexSet(faceArray, offset_face + 1, t5);
                t6 = vertexIndex + 3;
                t3.$indexSet(faceArray, offset_face + 2, t6);
                t3.$indexSet(faceArray, offset_face + 3, t5);
                t7 = vertexIndex + 2;
                t3.$indexSet(faceArray, offset_face + 4, t7);
                t3.$indexSet(faceArray, offset_face + 5, t6);
                offset_face += 6;
                t4.$indexSet(lineArray, offset_line, vertexIndex);
                t4.$indexSet(lineArray, offset_line + 1, t5);
                t4.$indexSet(lineArray, offset_line + 2, vertexIndex);
                t4.$indexSet(lineArray, offset_line + 3, t6);
                t4.$indexSet(lineArray, offset_line + 4, t5);
                t4.$indexSet(lineArray, offset_line + 5, t7);
                t4.$indexSet(lineArray, offset_line + 6, t7);
                t4.$indexSet(lineArray, offset_line + 7, t6);
                offset_line += 8;
                vertexIndex += 4;
              }
              this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
              this._gl.bufferData$3(34963, faceArray, hint);
              this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
              this._gl.bufferData$3(34963, lineArray, hint);
          }
        t1 = $.getInterceptor(customAttributes);
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 254:
      case 255:
      case 256:
      case 257:
      case 258:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
      case 292:
      case 293:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
        var sw1, sw2, sw3, si1, si2, si3, sa1, sa2, sa3, sb1, sb2, sb3, sw4, si4, sa4, sb4, c1, c2, c3, c4, t30, t40, fi, uv, uv2, offset_customSrc;
        if (state0 === 359 || state0 === 358 || state0 === 357 || state0 === 356 || state0 === 355 || state0 === 354 || state0 === 353 || state0 === 352 || state0 === 351 || state0 === 350 || state0 === 349 || state0 === 348 || state0 === 347 || state0 === 346 || state0 === 345 || state0 === 344 || state0 === 343 || state0 === 342 || state0 === 341 || state0 === 340 || state0 === 339 || state0 === 338 || state0 === 337 || state0 === 336 || state0 === 335 || state0 === 334 || state0 === 333 || state0 === 332 || state0 === 331 || state0 === 330 || state0 === 329 || state0 === 328 || state0 === 327 || state0 === 326 || state0 === 325 || state0 === 324 || state0 === 323 || state0 === 322 || state0 === 321 || state0 === 320 || state0 === 319 || state0 === 318 || state0 === 317 || state0 === 316 || state0 === 315 || state0 === 314 || state0 === 313 || state0 === 312 || state0 === 311 || state0 === 310 || state0 === 309 || state0 === 308 || state0 === 307 || state0 === 306 || state0 === 305 || state0 === 304 || state0 === 303 || state0 === 302 || state0 === 301 || state0 === 300 || state0 === 299 || state0 === 298 || state0 === 297 || state0 === 296 || state0 === 295 || state0 === 294 || state0 === 293 || state0 === 292 || state0 === 291 || state0 === 290 || state0 === 289 || state0 === 288 || state0 === 287 || state0 === 286 || state0 === 285 || state0 === 284 || state0 === 283 || state0 === 282 || state0 === 281 || state0 === 280 || state0 === 279 || state0 === 278 || state0 === 277 || state0 === 276 || state0 === 275 || state0 === 274 || state0 === 273 || state0 === 272 || state0 === 271 || state0 === 270 || state0 === 269 || state0 === 268 || state0 === 267 || state0 === 266 || state0 === 265 || state0 === 264 || state0 === 263 || state0 === 262 || state0 === 261 || state0 === 260 || state0 === 259 || state0 === 258 || state0 === 257 || state0 === 256 || state0 === 255 || state0 === 254 || state0 === 253 || state0 === 252 || state0 === 251 || state0 === 250 || state0 === 249 || state0 === 248 || state0 === 247 || state0 === 246 || state0 === 245 || state0 === 244 || state0 === 243 || state0 === 242 || state0 === 241 || state0 === 240 || state0 === 239 || state0 === 238 || state0 === 237 || state0 === 236 || state0 === 235 || state0 === 234 || state0 === 233 || state0 === 232 || state0 === 231 || state0 === 230 || state0 === 229 || state0 === 228 || state0 === 227 || state0 === 226 || state0 === 225 || state0 === 224 || state0 === 223 || state0 === 222 || state0 === 221 || state0 === 220 || state0 === 219 || state0 === 218 || state0 === 217 || state0 === 216 || state0 === 215 || state0 === 214 || state0 === 213 || state0 === 212 || state0 === 211 || state0 === 210 || state0 === 209 || state0 === 208 || state0 === 207 || state0 === 206 || state0 === 205 || state0 === 204 || state0 === 203 || state0 === 202 || state0 === 201 || state0 === 200 || state0 === 199 || state0 === 198 || state0 === 197 || state0 === 196 || state0 === 195 || state0 === 194 || state0 === 193 || state0 === 192 || state0 === 191 || state0 === 190 || state0 === 189 || state0 === 188 || state0 === 187 || state0 === 186 || state0 === 185 || state0 === 184 || state0 === 183 || state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 166 || state0 === 165 || state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 154 || state0 === 153 || state0 === 152 || state0 === 151 || state0 === 150 || state0 === 149 || state0 === 148 || state0 === 147 || state0 === 146 || state0 === 145 || state0 === 144 || state0 === 143 || state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 122 || state0 === 121 || state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 116 || state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 99 || state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 94 || state0 === 93 || state0 === 92 || state0 === 91 || state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 77 || state0 === 76 || state0 === 75 || state0 === 0 && !(customAttributes == null))
          switch (state0) {
            case 0:
              il = t1.get$length(customAttributes);
            case 75:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(chunk_faces4);
              t3 = $.getInterceptor$JSStringJSArray(obj_faces);
              t4 = $.getInterceptor$JSStringJSArray(chunk_faces3);
              i = 0;
              offset_custom = 0;
              offset_customSrc = 0;
              value = null;
            default:
              L9:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(i, il))
                        break L9;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            customAttribute = t1.$index(customAttributes, i);
                            if (customAttribute.get$__original().get$needsUpdate() !== true)
                              break c$0;
                            t5 = customAttribute.get$size();
                          case 76:
                            state0 = 0;
                          default:
                            if (state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 99 || state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 94 || state0 === 93 || state0 === 92 || state0 === 91 || state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 77 || state0 === 0 && $.$$eq(t5, 1) === true)
                              switch (state0) {
                                case 0:
                                  t5 = customAttribute.get$boundTo();
                                case 77:
                                  state0 = 0;
                                default:
                                  if (state0 === 93 || state0 === 92 || state0 === 91 || state0 === 90 || state0 === 89 || state0 === 88 || state0 === 87 || state0 === 86 || state0 === 85 || state0 === 84 || state0 === 83 || state0 === 82 || state0 === 81 || state0 === 80 || state0 === 79 || state0 === 78 || state0 === 0 && (t5 == null || $.$$eq(t5, "vertices") === true))
                                    switch (state0) {
                                      case 0:
                                        fl = t4.get$length(chunk_faces3);
                                      case 78:
                                        state0 = 0;
                                        offset_custom = 0;
                                        f = 0;
                                      default:
                                        L10:
                                          while (true)
                                            switch (state0) {
                                              case 0:
                                                if (!$.CONSTANT1.$lt(f, fl))
                                                  break L10;
                                                face = t3.$index(obj_faces, t4.$index(chunk_faces3, f));
                                                t5 = customAttribute.get$array();
                                              case 79:
                                                state0 = 0;
                                                t7 = customAttribute.get$value();
                                              case 80:
                                                state0 = 0;
                                                $.$$indexSet(t5, offset_custom, $.$$index(t7, face.get$a()));
                                                t5 = customAttribute.get$array();
                                              case 81:
                                                state0 = 0;
                                                t10 = offset_custom + 1;
                                                t11 = customAttribute.get$value();
                                              case 82:
                                                state0 = 0;
                                                $.$$indexSet(t5, t10, $.$$index(t11, face.get$b()));
                                                t10 = customAttribute.get$array();
                                              case 83:
                                                state0 = 0;
                                                t13 = offset_custom + 2;
                                                t14 = customAttribute.get$value();
                                              case 84:
                                                state0 = 0;
                                                $.$$indexSet(t10, t13, $.$$index(t14, face.get$c()));
                                                offset_custom += 3;
                                                ++f;
                                            }
                                        fl = t2.get$length(chunk_faces4);
                                      case 85:
                                        state0 = 0;
                                        f = 0;
                                      case 86:
                                      case 87:
                                      case 88:
                                      case 89:
                                      case 90:
                                      case 91:
                                      case 92:
                                      case 93:
                                        L11:
                                          while (true)
                                            switch (state0) {
                                              case 0:
                                                if (!$.CONSTANT1.$lt(f, fl))
                                                  break L11;
                                                face = t3.$index(obj_faces, t2.$index(chunk_faces4, f));
                                                t5 = customAttribute.get$array();
                                              case 86:
                                                state0 = 0;
                                                t7 = customAttribute.get$value();
                                              case 87:
                                                state0 = 0;
                                                $.$$indexSet(t5, offset_custom, $.$$index(t7, face.get$a()));
                                                t5 = customAttribute.get$array();
                                              case 88:
                                                state0 = 0;
                                                t10 = offset_custom + 1;
                                                t11 = customAttribute.get$value();
                                              case 89:
                                                state0 = 0;
                                                $.$$indexSet(t5, t10, $.$$index(t11, face.get$b()));
                                                t10 = customAttribute.get$array();
                                              case 90:
                                                state0 = 0;
                                                t13 = offset_custom + 2;
                                                t14 = customAttribute.get$value();
                                              case 91:
                                                state0 = 0;
                                                $.$$indexSet(t10, t13, $.$$index(t14, face.get$c()));
                                                t13 = customAttribute.get$array();
                                              case 92:
                                                state0 = 0;
                                                t16 = offset_custom + 3;
                                                t17 = customAttribute.get$value();
                                              case 93:
                                                state0 = 0;
                                                $.$$indexSet(t13, t16, $.$$index(t17, face.get$d()));
                                                offset_custom += 4;
                                                ++f;
                                            }
                                    }
                                  else
                                    switch (state0) {
                                      case 0:
                                        t5 = customAttribute.get$boundTo();
                                      case 94:
                                        state0 = 0;
                                      default:
                                        if (state0 === 105 || state0 === 104 || state0 === 103 || state0 === 102 || state0 === 101 || state0 === 100 || state0 === 99 || state0 === 98 || state0 === 97 || state0 === 96 || state0 === 95 || state0 === 0 && $.$$eq(t5, "faces") === true)
                                          switch (state0) {
                                            case 0:
                                              fl = t4.get$length(chunk_faces3);
                                            case 95:
                                              state0 = 0;
                                              offset_custom = 0;
                                              f = 0;
                                            default:
                                              L12:
                                                while (true)
                                                  switch (state0) {
                                                    case 0:
                                                      if (!$.CONSTANT1.$lt(f, fl))
                                                        break L12;
                                                      t5 = customAttribute.get$value();
                                                    case 96:
                                                      state0 = 0;
                                                      value = $.$$index(t5, t4.$index(chunk_faces3, f));
                                                      t5 = customAttribute.get$array();
                                                    case 97:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom, value);
                                                      t5 = customAttribute.get$array();
                                                    case 98:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 1, value);
                                                      t5 = customAttribute.get$array();
                                                    case 99:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 2, value);
                                                      offset_custom += 3;
                                                      ++f;
                                                  }
                                              fl = t2.get$length(chunk_faces4);
                                            case 100:
                                              state0 = 0;
                                              f = 0;
                                            case 101:
                                            case 102:
                                            case 103:
                                            case 104:
                                            case 105:
                                              L13:
                                                while (true)
                                                  switch (state0) {
                                                    case 0:
                                                      if (!$.CONSTANT1.$lt(f, fl))
                                                        break L13;
                                                      t5 = customAttribute.get$value();
                                                    case 101:
                                                      state0 = 0;
                                                      value = $.$$index(t5, t2.$index(chunk_faces4, f));
                                                      t5 = customAttribute.get$array();
                                                    case 102:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom, value);
                                                      t5 = customAttribute.get$array();
                                                    case 103:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 1, value);
                                                      t5 = customAttribute.get$array();
                                                    case 104:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 2, value);
                                                      t5 = customAttribute.get$array();
                                                    case 105:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 3, value);
                                                      offset_custom += 4;
                                                      ++f;
                                                  }
                                          }
                                        else
                                          offset_custom = 0;
                                    }
                              }
                            else
                              switch (state0) {
                                case 0:
                                  t5 = customAttribute.get$size();
                                case 106:
                                  state0 = 0;
                                default:
                                  if (state0 === 149 || state0 === 148 || state0 === 147 || state0 === 146 || state0 === 145 || state0 === 144 || state0 === 143 || state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 122 || state0 === 121 || state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 116 || state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 0 && $.$$eq(t5, 2) === true)
                                    switch (state0) {
                                      case 0:
                                        t5 = customAttribute.get$boundTo();
                                      case 107:
                                        state0 = 0;
                                      default:
                                        if (state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 126 || state0 === 125 || state0 === 124 || state0 === 123 || state0 === 122 || state0 === 121 || state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 116 || state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 0 && (t5 == null || $.$$eq(t5, "vertices") === true))
                                          switch (state0) {
                                            case 0:
                                              fl = t4.get$length(chunk_faces3);
                                            case 108:
                                              state0 = 0;
                                              offset_custom = 0;
                                              f = 0;
                                            default:
                                              L14:
                                                while (true)
                                                  switch (state0) {
                                                    case 0:
                                                      if (!$.CONSTANT1.$lt(f, fl))
                                                        break L14;
                                                      face = t3.$index(obj_faces, t4.$index(chunk_faces3, f));
                                                      t5 = customAttribute.get$value();
                                                    case 109:
                                                      state0 = 0;
                                                      v1 = $.$$index(t5, face.get$a());
                                                      t5 = customAttribute.get$value();
                                                    case 110:
                                                      state0 = 0;
                                                      v2 = $.$$index(t5, face.get$b());
                                                      t5 = customAttribute.get$value();
                                                    case 111:
                                                      state0 = 0;
                                                      v3 = $.$$index(t5, face.get$c());
                                                      t5 = customAttribute.get$array();
                                                    case 112:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom, v1.get$x());
                                                      t5 = customAttribute.get$array();
                                                    case 113:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 1, v1.get$y());
                                                      t5 = customAttribute.get$array();
                                                    case 114:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 2, v2.get$x());
                                                      t5 = customAttribute.get$array();
                                                    case 115:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 3, v2.get$y());
                                                      t5 = customAttribute.get$array();
                                                    case 116:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 4, v3.get$x());
                                                      t5 = customAttribute.get$array();
                                                    case 117:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 5, v3.get$y());
                                                      offset_custom += 6;
                                                      ++f;
                                                  }
                                              fl = t2.get$length(chunk_faces4);
                                            case 118:
                                              state0 = 0;
                                              f = 0;
                                            case 119:
                                            case 120:
                                            case 121:
                                            case 122:
                                            case 123:
                                            case 124:
                                            case 125:
                                            case 126:
                                            case 127:
                                            case 128:
                                            case 129:
                                            case 130:
                                              L15:
                                                while (true)
                                                  switch (state0) {
                                                    case 0:
                                                      if (!$.CONSTANT1.$lt(f, fl))
                                                        break L15;
                                                      face = t3.$index(obj_faces, t2.$index(chunk_faces4, f));
                                                      t5 = customAttribute.get$value();
                                                    case 119:
                                                      state0 = 0;
                                                      v1 = $.$$index(t5, face.get$a());
                                                      t5 = customAttribute.get$value();
                                                    case 120:
                                                      state0 = 0;
                                                      v2 = $.$$index(t5, face.get$b());
                                                      t5 = customAttribute.get$value();
                                                    case 121:
                                                      state0 = 0;
                                                      v3 = $.$$index(t5, face.get$c());
                                                      t5 = customAttribute.get$value();
                                                    case 122:
                                                      state0 = 0;
                                                      v4 = $.$$index(t5, face.get$d());
                                                      t5 = customAttribute.get$array();
                                                    case 123:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom, v1.get$x());
                                                      t5 = customAttribute.get$array();
                                                    case 124:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 1, v1.get$y());
                                                      t5 = customAttribute.get$array();
                                                    case 125:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 2, v2.get$x());
                                                      t5 = customAttribute.get$array();
                                                    case 126:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 3, v2.get$y());
                                                      t5 = customAttribute.get$array();
                                                    case 127:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 4, v3.get$x());
                                                      t5 = customAttribute.get$array();
                                                    case 128:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 5, v3.get$y());
                                                      t5 = customAttribute.get$array();
                                                    case 129:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 6, v4.get$x());
                                                      t5 = customAttribute.get$array();
                                                    case 130:
                                                      state0 = 0;
                                                      $.$$indexSet(t5, offset_custom + 7, v4.get$y());
                                                      offset_custom += 8;
                                                      ++f;
                                                  }
                                          }
                                        else
                                          switch (state0) {
                                            case 0:
                                              t5 = customAttribute.get$boundTo();
                                            case 131:
                                              state0 = 0;
                                            default:
                                              if (state0 === 149 || state0 === 148 || state0 === 147 || state0 === 146 || state0 === 145 || state0 === 144 || state0 === 143 || state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 0 && $.$$eq(t5, "faces") === true)
                                                switch (state0) {
                                                  case 0:
                                                    fl = t4.get$length(chunk_faces3);
                                                  case 132:
                                                    state0 = 0;
                                                    offset_custom = 0;
                                                    f = 0;
                                                  default:
                                                    L16:
                                                      while (true)
                                                        switch (state0) {
                                                          case 0:
                                                            if (!$.CONSTANT1.$lt(f, fl))
                                                              break L16;
                                                            t5 = customAttribute.get$value();
                                                          case 133:
                                                            state0 = 0;
                                                            value = $.$$index(t5, t4.$index(chunk_faces3, f));
                                                            t5 = customAttribute.get$array();
                                                          case 134:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom, value.get$x());
                                                            t5 = customAttribute.get$array();
                                                          case 135:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 1, value.get$y());
                                                            t5 = customAttribute.get$array();
                                                          case 136:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 2, value.get$x());
                                                            t5 = customAttribute.get$array();
                                                          case 137:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 3, value.get$y());
                                                            t5 = customAttribute.get$array();
                                                          case 138:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 4, value.get$x());
                                                            t5 = customAttribute.get$array();
                                                          case 139:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 5, value.get$y());
                                                            offset_custom += 6;
                                                            ++f;
                                                            v3 = value;
                                                            v2 = v3;
                                                            v1 = v2;
                                                        }
                                                    fl = t2.get$length(chunk_faces4);
                                                  case 140:
                                                    state0 = 0;
                                                    f = 0;
                                                  case 141:
                                                  case 142:
                                                  case 143:
                                                  case 144:
                                                  case 145:
                                                  case 146:
                                                  case 147:
                                                  case 148:
                                                  case 149:
                                                    L17:
                                                      while (true)
                                                        switch (state0) {
                                                          case 0:
                                                            if (!$.CONSTANT1.$lt(f, fl))
                                                              break L17;
                                                            t5 = customAttribute.get$value();
                                                          case 141:
                                                            state0 = 0;
                                                            value = $.$$index(t5, t2.$index(chunk_faces4, f));
                                                            t5 = customAttribute.get$array();
                                                          case 142:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom, value.get$x());
                                                            t5 = customAttribute.get$array();
                                                          case 143:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 1, value.get$y());
                                                            t5 = customAttribute.get$array();
                                                          case 144:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 2, value.get$x());
                                                            t5 = customAttribute.get$array();
                                                          case 145:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 3, value.get$y());
                                                            t5 = customAttribute.get$array();
                                                          case 146:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 4, value.get$x());
                                                            t5 = customAttribute.get$array();
                                                          case 147:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 5, value.get$y());
                                                            t5 = customAttribute.get$array();
                                                          case 148:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 6, value.get$x());
                                                            t5 = customAttribute.get$array();
                                                          case 149:
                                                            state0 = 0;
                                                            $.$$indexSet(t5, offset_custom + 7, value.get$y());
                                                            offset_custom += 8;
                                                            ++f;
                                                            v4 = value;
                                                            v3 = v4;
                                                            v2 = v3;
                                                            v1 = v2;
                                                        }
                                                }
                                              else
                                                offset_custom = 0;
                                          }
                                    }
                                  else
                                    switch (state0) {
                                      case 0:
                                        t5 = customAttribute.get$size();
                                      case 150:
                                        state0 = 0;
                                      default:
                                        if (state0 === 252 || state0 === 251 || state0 === 250 || state0 === 249 || state0 === 248 || state0 === 247 || state0 === 246 || state0 === 245 || state0 === 244 || state0 === 243 || state0 === 242 || state0 === 241 || state0 === 240 || state0 === 239 || state0 === 238 || state0 === 237 || state0 === 236 || state0 === 235 || state0 === 234 || state0 === 233 || state0 === 232 || state0 === 231 || state0 === 230 || state0 === 229 || state0 === 228 || state0 === 227 || state0 === 226 || state0 === 225 || state0 === 224 || state0 === 223 || state0 === 222 || state0 === 221 || state0 === 220 || state0 === 219 || state0 === 218 || state0 === 217 || state0 === 216 || state0 === 215 || state0 === 214 || state0 === 213 || state0 === 212 || state0 === 211 || state0 === 210 || state0 === 209 || state0 === 208 || state0 === 207 || state0 === 206 || state0 === 205 || state0 === 204 || state0 === 203 || state0 === 202 || state0 === 201 || state0 === 200 || state0 === 199 || state0 === 198 || state0 === 197 || state0 === 196 || state0 === 195 || state0 === 194 || state0 === 193 || state0 === 192 || state0 === 191 || state0 === 190 || state0 === 189 || state0 === 188 || state0 === 187 || state0 === 186 || state0 === 185 || state0 === 184 || state0 === 183 || state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 166 || state0 === 165 || state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 154 || state0 === 153 || state0 === 152 || state0 === 151 || state0 === 0 && $.$$eq(t5, 3) === true)
                                          switch (state0) {
                                            case 0:
                                              t5 = customAttribute.get$type();
                                            case 151:
                                              state0 = 0;
                                              pp = $.$$eq(t5, "c") === true ? ["r", "g", "b"] : ["x", "y", "z"];
                                              t5 = customAttribute.get$boundTo();
                                            case 152:
                                              state0 = 0;
                                            default:
                                              if (state0 === 189 || state0 === 188 || state0 === 187 || state0 === 186 || state0 === 185 || state0 === 184 || state0 === 183 || state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 166 || state0 === 165 || state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 154 || state0 === 153 || state0 === 0 && (t5 == null || $.$$eq(t5, "vertices") === true))
                                                switch (state0) {
                                                  case 0:
                                                    fl = t4.get$length(chunk_faces3);
                                                  case 153:
                                                    state0 = 0;
                                                    offset_custom = 0;
                                                    f = 0;
                                                  default:
                                                    L18:
                                                      while (true)
                                                        switch (state0) {
                                                          case 0:
                                                            if (!$.CONSTANT1.$lt(f, fl))
                                                              break L18;
                                                            face = t3.$index(obj_faces, t4.$index(chunk_faces3, f));
                                                            t5 = customAttribute.get$value();
                                                          case 154:
                                                            state0 = 0;
                                                            t5 = $.$$index(t5, face.get$a());
                                                          case 155:
                                                            state0 = 0;
                                                            t8 = customAttribute.get$value();
                                                          case 156:
                                                            state0 = 0;
                                                            t8 = $.$$index(t8, face.get$b());
                                                          case 157:
                                                            state0 = 0;
                                                            t11 = customAttribute.get$value();
                                                          case 158:
                                                            state0 = 0;
                                                            t11 = $.$$index(t11, face.get$c());
                                                          case 159:
                                                            state0 = 0;
                                                            t14 = customAttribute.get$array();
                                                          case 160:
                                                            state0 = 0;
                                                            if (0 >= pp.length)
                                                              throw $.ioore(0);
                                                            t16 = $.getInterceptor$JSStringJSArray(t5);
                                                            $.$$indexSet(t14, offset_custom, t16.$index(t5, pp[0]));
                                                            t14 = customAttribute.get$array();
                                                          case 161:
                                                            state0 = 0;
                                                            if (1 >= pp.length)
                                                              throw $.ioore(1);
                                                            $.$$indexSet(t14, offset_custom + 1, t16.$index(t5, pp[1]));
                                                            t14 = customAttribute.get$array();
                                                          case 162:
                                                            state0 = 0;
                                                            if (2 >= pp.length)
                                                              throw $.ioore(2);
                                                            $.$$indexSet(t14, offset_custom + 2, t16.$index(t5, pp[2]));
                                                            t14 = customAttribute.get$array();
                                                          case 163:
                                                            state0 = 0;
                                                            if (0 >= pp.length)
                                                              throw $.ioore(0);
                                                            t20 = $.getInterceptor$JSStringJSArray(t8);
                                                            $.$$indexSet(t14, offset_custom + 3, t20.$index(t8, pp[0]));
                                                            t14 = customAttribute.get$array();
                                                          case 164:
                                                            state0 = 0;
                                                            if (1 >= pp.length)
                                                              throw $.ioore(1);
                                                            $.$$indexSet(t14, offset_custom + 4, t20.$index(t8, pp[1]));
                                                            t14 = customAttribute.get$array();
                                                          case 165:
                                                            state0 = 0;
                                                            if (2 >= pp.length)
                                                              throw $.ioore(2);
                                                            $.$$indexSet(t14, offset_custom + 5, t20.$index(t8, pp[2]));
                                                            t14 = customAttribute.get$array();
                                                          case 166:
                                                            state0 = 0;
                                                            if (0 >= pp.length)
                                                              throw $.ioore(0);
                                                            t24 = $.getInterceptor$JSStringJSArray(t11);
                                                            $.$$indexSet(t14, offset_custom + 6, t24.$index(t11, pp[0]));
                                                            t14 = customAttribute.get$array();
                                                          case 167:
                                                            state0 = 0;
                                                            if (1 >= pp.length)
                                                              throw $.ioore(1);
                                                            $.$$indexSet(t14, offset_custom + 7, t24.$index(t11, pp[1]));
                                                            t14 = customAttribute.get$array();
                                                          case 168:
                                                            state0 = 0;
                                                            if (2 >= pp.length)
                                                              throw $.ioore(2);
                                                            $.$$indexSet(t14, offset_custom + 8, t24.$index(t11, pp[2]));
                                                            offset_custom += 9;
                                                            ++f;
                                                            v3 = t11;
                                                            v2 = t8;
                                                            v1 = t5;
                                                        }
                                                    fl = t2.get$length(chunk_faces4);
                                                  case 169:
                                                    state0 = 0;
                                                    f = 0;
                                                  case 170:
                                                  case 171:
                                                  case 172:
                                                  case 173:
                                                  case 174:
                                                  case 175:
                                                  case 176:
                                                  case 177:
                                                  case 178:
                                                  case 179:
                                                  case 180:
                                                  case 181:
                                                  case 182:
                                                  case 183:
                                                  case 184:
                                                  case 185:
                                                  case 186:
                                                  case 187:
                                                  case 188:
                                                  case 189:
                                                    L19:
                                                      while (true)
                                                        switch (state0) {
                                                          case 0:
                                                            if (!$.CONSTANT1.$lt(f, fl))
                                                              break L19;
                                                            face = t3.$index(obj_faces, t2.$index(chunk_faces4, f));
                                                            t5 = customAttribute.get$value();
                                                          case 170:
                                                            state0 = 0;
                                                            t5 = $.$$index(t5, face.get$a());
                                                          case 171:
                                                            state0 = 0;
                                                            t8 = customAttribute.get$value();
                                                          case 172:
                                                            state0 = 0;
                                                            t8 = $.$$index(t8, face.get$b());
                                                          case 173:
                                                            state0 = 0;
                                                            t11 = customAttribute.get$value();
                                                          case 174:
                                                            state0 = 0;
                                                            t11 = $.$$index(t11, face.get$c());
                                                          case 175:
                                                            state0 = 0;
                                                            t14 = customAttribute.get$value();
                                                          case 176:
                                                            state0 = 0;
                                                            t14 = $.$$index(t14, face.get$d());
                                                          case 177:
                                                            state0 = 0;
                                                            t17 = customAttribute.get$array();
                                                          case 178:
                                                            state0 = 0;
                                                            if (0 >= pp.length)
                                                              throw $.ioore(0);
                                                            t19 = $.getInterceptor$JSStringJSArray(t5);
                                                            $.$$indexSet(t17, offset_custom, t19.$index(t5, pp[0]));
                                                            t17 = customAttribute.get$array();
                                                          case 179:
                                                            state0 = 0;
                                                            if (1 >= pp.length)
                                                              throw $.ioore(1);
                                                            $.$$indexSet(t17, offset_custom + 1, t19.$index(t5, pp[1]));
                                                            t17 = customAttribute.get$array();
                                                          case 180:
                                                            state0 = 0;
                                                            if (2 >= pp.length)
                                                              throw $.ioore(2);
                                                            $.$$indexSet(t17, offset_custom + 2, t19.$index(t5, pp[2]));
                                                            t17 = customAttribute.get$array();
                                                          case 181:
                                                            state0 = 0;
                                                            if (0 >= pp.length)
                                                              throw $.ioore(0);
                                                            t23 = $.getInterceptor$JSStringJSArray(t8);
                                                            $.$$indexSet(t17, offset_custom + 3, t23.$index(t8, pp[0]));
                                                            t17 = customAttribute.get$array();
                                                          case 182:
                                                            state0 = 0;
                                                            if (1 >= pp.length)
                                                              throw $.ioore(1);
                                                            $.$$indexSet(t17, offset_custom + 4, t23.$index(t8, pp[1]));
                                                            t17 = customAttribute.get$array();
                                                          case 183:
                                                            state0 = 0;
                                                            if (2 >= pp.length)
                                                              throw $.ioore(2);
                                                            $.$$indexSet(t17, offset_custom + 5, t23.$index(t8, pp[2]));
                                                            t17 = customAttribute.get$array();
                                                          case 184:
                                                            state0 = 0;
                                                            if (0 >= pp.length)
                                                              throw $.ioore(0);
                                                            t27 = $.getInterceptor$JSStringJSArray(t11);
                                                            $.$$indexSet(t17, offset_custom + 6, t27.$index(t11, pp[0]));
                                                            t17 = customAttribute.get$array();
                                                          case 185:
                                                            state0 = 0;
                                                            if (1 >= pp.length)
                                                              throw $.ioore(1);
                                                            $.$$indexSet(t17, offset_custom + 7, t27.$index(t11, pp[1]));
                                                            t17 = customAttribute.get$array();
                                                          case 186:
                                                            state0 = 0;
                                                            if (2 >= pp.length)
                                                              throw $.ioore(2);
                                                            $.$$indexSet(t17, offset_custom + 8, t27.$index(t11, pp[2]));
                                                            t17 = customAttribute.get$array();
                                                          case 187:
                                                            state0 = 0;
                                                            if (0 >= pp.length)
                                                              throw $.ioore(0);
                                                            t31 = $.getInterceptor$JSStringJSArray(t14);
                                                            $.$$indexSet(t17, offset_custom + 9, t31.$index(t14, pp[0]));
                                                            t17 = customAttribute.get$array();
                                                          case 188:
                                                            state0 = 0;
                                                            if (1 >= pp.length)
                                                              throw $.ioore(1);
                                                            $.$$indexSet(t17, offset_custom + 10, t31.$index(t14, pp[1]));
                                                            t17 = customAttribute.get$array();
                                                          case 189:
                                                            state0 = 0;
                                                            if (2 >= pp.length)
                                                              throw $.ioore(2);
                                                            $.$$indexSet(t17, offset_custom + 11, t31.$index(t14, pp[2]));
                                                            offset_custom += 12;
                                                            ++f;
                                                            v4 = t14;
                                                            v3 = t11;
                                                            v2 = t8;
                                                            v1 = t5;
                                                        }
                                                }
                                              else
                                                switch (state0) {
                                                  case 0:
                                                    t5 = customAttribute.get$boundTo();
                                                  case 190:
                                                    state0 = 0;
                                                  default:
                                                    if (state0 === 217 || state0 === 216 || state0 === 215 || state0 === 214 || state0 === 213 || state0 === 212 || state0 === 211 || state0 === 210 || state0 === 209 || state0 === 208 || state0 === 207 || state0 === 206 || state0 === 205 || state0 === 204 || state0 === 203 || state0 === 202 || state0 === 201 || state0 === 200 || state0 === 199 || state0 === 198 || state0 === 197 || state0 === 196 || state0 === 195 || state0 === 194 || state0 === 193 || state0 === 192 || state0 === 191 || state0 === 0 && $.$$eq(t5, "faces") === true)
                                                      switch (state0) {
                                                        case 0:
                                                          fl = t4.get$length(chunk_faces3);
                                                        case 191:
                                                          state0 = 0;
                                                          offset_custom = 0;
                                                          f = 0;
                                                        default:
                                                          L20:
                                                            while (true)
                                                              switch (state0) {
                                                                case 0:
                                                                  if (!$.CONSTANT1.$lt(f, fl))
                                                                    break L20;
                                                                  t5 = customAttribute.get$value();
                                                                case 192:
                                                                  state0 = 0;
                                                                  t5 = $.$$index(t5, t4.$index(chunk_faces3, f));
                                                                case 193:
                                                                  state0 = 0;
                                                                  t8 = customAttribute.get$array();
                                                                case 194:
                                                                  state0 = 0;
                                                                  if (0 >= pp.length)
                                                                    throw $.ioore(0);
                                                                  t10 = $.getInterceptor$JSStringJSArray(t5);
                                                                  $.$$indexSet(t8, offset_custom, t10.$index(t5, pp[0]));
                                                                  t8 = customAttribute.get$array();
                                                                case 195:
                                                                  state0 = 0;
                                                                  if (1 >= pp.length)
                                                                    throw $.ioore(1);
                                                                  $.$$indexSet(t8, offset_custom + 1, t10.$index(t5, pp[1]));
                                                                  t8 = customAttribute.get$array();
                                                                case 196:
                                                                  state0 = 0;
                                                                  if (2 >= pp.length)
                                                                    throw $.ioore(2);
                                                                  $.$$indexSet(t8, offset_custom + 2, t10.$index(t5, pp[2]));
                                                                  t8 = customAttribute.get$array();
                                                                case 197:
                                                                  state0 = 0;
                                                                  if (0 >= pp.length)
                                                                    throw $.ioore(0);
                                                                  $.$$indexSet(t8, offset_custom + 3, t10.$index(t5, pp[0]));
                                                                  t8 = customAttribute.get$array();
                                                                case 198:
                                                                  state0 = 0;
                                                                  if (1 >= pp.length)
                                                                    throw $.ioore(1);
                                                                  $.$$indexSet(t8, offset_custom + 4, t10.$index(t5, pp[1]));
                                                                  t8 = customAttribute.get$array();
                                                                case 199:
                                                                  state0 = 0;
                                                                  if (2 >= pp.length)
                                                                    throw $.ioore(2);
                                                                  $.$$indexSet(t8, offset_custom + 5, t10.$index(t5, pp[2]));
                                                                  t8 = customAttribute.get$array();
                                                                case 200:
                                                                  state0 = 0;
                                                                  if (0 >= pp.length)
                                                                    throw $.ioore(0);
                                                                  $.$$indexSet(t8, offset_custom + 6, t10.$index(t5, pp[0]));
                                                                  t8 = customAttribute.get$array();
                                                                case 201:
                                                                  state0 = 0;
                                                                  if (1 >= pp.length)
                                                                    throw $.ioore(1);
                                                                  $.$$indexSet(t8, offset_custom + 7, t10.$index(t5, pp[1]));
                                                                  t8 = customAttribute.get$array();
                                                                case 202:
                                                                  state0 = 0;
                                                                  if (2 >= pp.length)
                                                                    throw $.ioore(2);
                                                                  $.$$indexSet(t8, offset_custom + 8, t10.$index(t5, pp[2]));
                                                                  offset_custom += 9;
                                                                  ++f;
                                                                  v3 = t5;
                                                                  v2 = v3;
                                                                  v1 = v2;
                                                                  value = v1;
                                                              }
                                                          fl = t2.get$length(chunk_faces4);
                                                        case 203:
                                                          state0 = 0;
                                                          f = 0;
                                                        case 204:
                                                        case 205:
                                                        case 206:
                                                        case 207:
                                                        case 208:
                                                        case 209:
                                                        case 210:
                                                        case 211:
                                                        case 212:
                                                        case 213:
                                                        case 214:
                                                        case 215:
                                                        case 216:
                                                        case 217:
                                                          L21:
                                                            while (true)
                                                              switch (state0) {
                                                                case 0:
                                                                  if (!$.CONSTANT1.$lt(f, fl))
                                                                    break L21;
                                                                  t5 = customAttribute.get$value();
                                                                case 204:
                                                                  state0 = 0;
                                                                  t5 = $.$$index(t5, t2.$index(chunk_faces4, f));
                                                                case 205:
                                                                  state0 = 0;
                                                                  t8 = customAttribute.get$array();
                                                                case 206:
                                                                  state0 = 0;
                                                                  if (0 >= pp.length)
                                                                    throw $.ioore(0);
                                                                  t10 = $.getInterceptor$JSStringJSArray(t5);
                                                                  $.$$indexSet(t8, offset_custom, t10.$index(t5, pp[0]));
                                                                  t8 = customAttribute.get$array();
                                                                case 207:
                                                                  state0 = 0;
                                                                  if (1 >= pp.length)
                                                                    throw $.ioore(1);
                                                                  $.$$indexSet(t8, offset_custom + 1, t10.$index(t5, pp[1]));
                                                                  t8 = customAttribute.get$array();
                                                                case 208:
                                                                  state0 = 0;
                                                                  if (2 >= pp.length)
                                                                    throw $.ioore(2);
                                                                  $.$$indexSet(t8, offset_custom + 2, t10.$index(t5, pp[2]));
                                                                  t8 = customAttribute.get$array();
                                                                case 209:
                                                                  state0 = 0;
                                                                  if (0 >= pp.length)
                                                                    throw $.ioore(0);
                                                                  $.$$indexSet(t8, offset_custom + 3, t10.$index(t5, pp[0]));
                                                                  t8 = customAttribute.get$array();
                                                                case 210:
                                                                  state0 = 0;
                                                                  if (1 >= pp.length)
                                                                    throw $.ioore(1);
                                                                  $.$$indexSet(t8, offset_custom + 4, t10.$index(t5, pp[1]));
                                                                  t8 = customAttribute.get$array();
                                                                case 211:
                                                                  state0 = 0;
                                                                  if (2 >= pp.length)
                                                                    throw $.ioore(2);
                                                                  $.$$indexSet(t8, offset_custom + 5, t10.$index(t5, pp[2]));
                                                                  t8 = customAttribute.get$array();
                                                                case 212:
                                                                  state0 = 0;
                                                                  if (0 >= pp.length)
                                                                    throw $.ioore(0);
                                                                  $.$$indexSet(t8, offset_custom + 6, t10.$index(t5, pp[0]));
                                                                  t8 = customAttribute.get$array();
                                                                case 213:
                                                                  state0 = 0;
                                                                  if (1 >= pp.length)
                                                                    throw $.ioore(1);
                                                                  $.$$indexSet(t8, offset_custom + 7, t10.$index(t5, pp[1]));
                                                                  t8 = customAttribute.get$array();
                                                                case 214:
                                                                  state0 = 0;
                                                                  if (2 >= pp.length)
                                                                    throw $.ioore(2);
                                                                  $.$$indexSet(t8, offset_custom + 8, t10.$index(t5, pp[2]));
                                                                  t8 = customAttribute.get$array();
                                                                case 215:
                                                                  state0 = 0;
                                                                  if (0 >= pp.length)
                                                                    throw $.ioore(0);
                                                                  $.$$indexSet(t8, offset_custom + 9, t10.$index(t5, pp[0]));
                                                                  t8 = customAttribute.get$array();
                                                                case 216:
                                                                  state0 = 0;
                                                                  if (1 >= pp.length)
                                                                    throw $.ioore(1);
                                                                  $.$$indexSet(t8, offset_custom + 10, t10.$index(t5, pp[1]));
                                                                  t8 = customAttribute.get$array();
                                                                case 217:
                                                                  state0 = 0;
                                                                  if (2 >= pp.length)
                                                                    throw $.ioore(2);
                                                                  $.$$indexSet(t8, offset_custom + 11, t10.$index(t5, pp[2]));
                                                                  offset_custom += 12;
                                                                  ++f;
                                                                  v4 = t5;
                                                                  v3 = v4;
                                                                  v2 = v3;
                                                                  v1 = v2;
                                                                  value = v1;
                                                              }
                                                      }
                                                    else
                                                      switch (state0) {
                                                        case 0:
                                                          t5 = customAttribute.get$boundTo();
                                                        case 218:
                                                          state0 = 0;
                                                        default:
                                                          if (state0 === 252 || state0 === 251 || state0 === 250 || state0 === 249 || state0 === 248 || state0 === 247 || state0 === 246 || state0 === 245 || state0 === 244 || state0 === 243 || state0 === 242 || state0 === 241 || state0 === 240 || state0 === 239 || state0 === 238 || state0 === 237 || state0 === 236 || state0 === 235 || state0 === 234 || state0 === 233 || state0 === 232 || state0 === 231 || state0 === 230 || state0 === 229 || state0 === 228 || state0 === 227 || state0 === 226 || state0 === 225 || state0 === 224 || state0 === 223 || state0 === 222 || state0 === 221 || state0 === 220 || state0 === 219 || state0 === 0 && $.$$eq(t5, "faceVertices") === true)
                                                            switch (state0) {
                                                              case 0:
                                                                fl = t4.get$length(chunk_faces3);
                                                              case 219:
                                                                state0 = 0;
                                                                offset_custom = 0;
                                                                f = 0;
                                                              default:
                                                                L22:
                                                                  while (true)
                                                                    switch (state0) {
                                                                      case 0:
                                                                        if (!$.CONSTANT1.$lt(f, fl))
                                                                          break L22;
                                                                        t5 = customAttribute.get$value();
                                                                      case 220:
                                                                        state0 = 0;
                                                                        t5 = $.$$index(t5, t4.$index(chunk_faces3, f));
                                                                      case 221:
                                                                        state0 = 0;
                                                                        t8 = $.getInterceptor$JSStringJSArray(t5);
                                                                        v1 = t8.$index(t5, 0);
                                                                      case 222:
                                                                        state0 = 0;
                                                                        v2 = t8.$index(t5, 1);
                                                                      case 223:
                                                                        state0 = 0;
                                                                        v3 = t8.$index(t5, 2);
                                                                      case 224:
                                                                        state0 = 0;
                                                                        t11 = customAttribute.get$array();
                                                                      case 225:
                                                                        state0 = 0;
                                                                        if (0 >= pp.length)
                                                                          throw $.ioore(0);
                                                                        t13 = $.getInterceptor$JSStringJSArray(v1);
                                                                        $.$$indexSet(t11, offset_custom, t13.$index(v1, pp[0]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 226:
                                                                        state0 = 0;
                                                                        if (1 >= pp.length)
                                                                          throw $.ioore(1);
                                                                        $.$$indexSet(t11, offset_custom + 1, t13.$index(v1, pp[1]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 227:
                                                                        state0 = 0;
                                                                        if (2 >= pp.length)
                                                                          throw $.ioore(2);
                                                                        $.$$indexSet(t11, offset_custom + 2, t13.$index(v1, pp[2]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 228:
                                                                        state0 = 0;
                                                                        if (0 >= pp.length)
                                                                          throw $.ioore(0);
                                                                        t17 = $.getInterceptor$JSStringJSArray(v2);
                                                                        $.$$indexSet(t11, offset_custom + 3, t17.$index(v2, pp[0]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 229:
                                                                        state0 = 0;
                                                                        if (1 >= pp.length)
                                                                          throw $.ioore(1);
                                                                        $.$$indexSet(t11, offset_custom + 4, t17.$index(v2, pp[1]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 230:
                                                                        state0 = 0;
                                                                        if (2 >= pp.length)
                                                                          throw $.ioore(2);
                                                                        $.$$indexSet(t11, offset_custom + 5, t17.$index(v2, pp[2]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 231:
                                                                        state0 = 0;
                                                                        if (0 >= pp.length)
                                                                          throw $.ioore(0);
                                                                        t21 = $.getInterceptor$JSStringJSArray(v3);
                                                                        $.$$indexSet(t11, offset_custom + 6, t21.$index(v3, pp[0]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 232:
                                                                        state0 = 0;
                                                                        if (1 >= pp.length)
                                                                          throw $.ioore(1);
                                                                        $.$$indexSet(t11, offset_custom + 7, t21.$index(v3, pp[1]));
                                                                        t11 = customAttribute.get$array();
                                                                      case 233:
                                                                        state0 = 0;
                                                                        if (2 >= pp.length)
                                                                          throw $.ioore(2);
                                                                        $.$$indexSet(t11, offset_custom + 8, t21.$index(v3, pp[2]));
                                                                        offset_custom += 9;
                                                                        ++f;
                                                                        value = t5;
                                                                    }
                                                                fl = t2.get$length(chunk_faces4);
                                                              case 234:
                                                                state0 = 0;
                                                                f = 0;
                                                              case 235:
                                                              case 236:
                                                              case 237:
                                                              case 238:
                                                              case 239:
                                                              case 240:
                                                              case 241:
                                                              case 242:
                                                              case 243:
                                                              case 244:
                                                              case 245:
                                                              case 246:
                                                              case 247:
                                                              case 248:
                                                              case 249:
                                                              case 250:
                                                              case 251:
                                                              case 252:
                                                                L23:
                                                                  while (true)
                                                                    switch (state0) {
                                                                      case 0:
                                                                        if (!$.CONSTANT1.$lt(f, fl))
                                                                          break L23;
                                                                        t5 = customAttribute.get$value();
                                                                      case 235:
                                                                        state0 = 0;
                                                                        t5 = $.$$index(t5, t2.$index(chunk_faces4, f));
                                                                      case 236:
                                                                        state0 = 0;
                                                                        t8 = $.getInterceptor$JSStringJSArray(t5);
                                                                        v1 = t8.$index(t5, 0);
                                                                      case 237:
                                                                        state0 = 0;
                                                                        v2 = t8.$index(t5, 1);
                                                                      case 238:
                                                                        state0 = 0;
                                                                        v3 = t8.$index(t5, 2);
                                                                      case 239:
                                                                        state0 = 0;
                                                                        v4 = t8.$index(t5, 3);
                                                                      case 240:
                                                                        state0 = 0;
                                                                        t12 = customAttribute.get$array();
                                                                      case 241:
                                                                        state0 = 0;
                                                                        if (0 >= pp.length)
                                                                          throw $.ioore(0);
                                                                        t14 = $.getInterceptor$JSStringJSArray(v1);
                                                                        $.$$indexSet(t12, offset_custom, t14.$index(v1, pp[0]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 242:
                                                                        state0 = 0;
                                                                        if (1 >= pp.length)
                                                                          throw $.ioore(1);
                                                                        $.$$indexSet(t12, offset_custom + 1, t14.$index(v1, pp[1]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 243:
                                                                        state0 = 0;
                                                                        if (2 >= pp.length)
                                                                          throw $.ioore(2);
                                                                        $.$$indexSet(t12, offset_custom + 2, t14.$index(v1, pp[2]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 244:
                                                                        state0 = 0;
                                                                        if (0 >= pp.length)
                                                                          throw $.ioore(0);
                                                                        t18 = $.getInterceptor$JSStringJSArray(v2);
                                                                        $.$$indexSet(t12, offset_custom + 3, t18.$index(v2, pp[0]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 245:
                                                                        state0 = 0;
                                                                        if (1 >= pp.length)
                                                                          throw $.ioore(1);
                                                                        $.$$indexSet(t12, offset_custom + 4, t18.$index(v2, pp[1]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 246:
                                                                        state0 = 0;
                                                                        if (2 >= pp.length)
                                                                          throw $.ioore(2);
                                                                        $.$$indexSet(t12, offset_custom + 5, t18.$index(v2, pp[2]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 247:
                                                                        state0 = 0;
                                                                        if (0 >= pp.length)
                                                                          throw $.ioore(0);
                                                                        t22 = $.getInterceptor$JSStringJSArray(v3);
                                                                        $.$$indexSet(t12, offset_custom + 6, t22.$index(v3, pp[0]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 248:
                                                                        state0 = 0;
                                                                        if (1 >= pp.length)
                                                                          throw $.ioore(1);
                                                                        $.$$indexSet(t12, offset_custom + 7, t22.$index(v3, pp[1]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 249:
                                                                        state0 = 0;
                                                                        if (2 >= pp.length)
                                                                          throw $.ioore(2);
                                                                        $.$$indexSet(t12, offset_custom + 8, t22.$index(v3, pp[2]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 250:
                                                                        state0 = 0;
                                                                        if (0 >= pp.length)
                                                                          throw $.ioore(0);
                                                                        t26 = $.getInterceptor$JSStringJSArray(v4);
                                                                        $.$$indexSet(t12, offset_custom + 9, t26.$index(v4, pp[0]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 251:
                                                                        state0 = 0;
                                                                        if (1 >= pp.length)
                                                                          throw $.ioore(1);
                                                                        $.$$indexSet(t12, offset_custom + 10, t26.$index(v4, pp[1]));
                                                                        t12 = customAttribute.get$array();
                                                                      case 252:
                                                                        state0 = 0;
                                                                        if (2 >= pp.length)
                                                                          throw $.ioore(2);
                                                                        $.$$indexSet(t12, offset_custom + 11, t26.$index(v4, pp[2]));
                                                                        offset_custom += 12;
                                                                        ++f;
                                                                        value = t5;
                                                                    }
                                                            }
                                                          else
                                                            offset_custom = 0;
                                                      }
                                                }
                                          }
                                        else
                                          switch (state0) {
                                            case 0:
                                              t5 = customAttribute.get$size();
                                            case 253:
                                              state0 = 0;
                                            default:
                                              if (state0 === 359 || state0 === 358 || state0 === 357 || state0 === 356 || state0 === 355 || state0 === 354 || state0 === 353 || state0 === 352 || state0 === 351 || state0 === 350 || state0 === 349 || state0 === 348 || state0 === 347 || state0 === 346 || state0 === 345 || state0 === 344 || state0 === 343 || state0 === 342 || state0 === 341 || state0 === 340 || state0 === 339 || state0 === 338 || state0 === 337 || state0 === 336 || state0 === 335 || state0 === 334 || state0 === 333 || state0 === 332 || state0 === 331 || state0 === 330 || state0 === 329 || state0 === 328 || state0 === 327 || state0 === 326 || state0 === 325 || state0 === 324 || state0 === 323 || state0 === 322 || state0 === 321 || state0 === 320 || state0 === 319 || state0 === 318 || state0 === 317 || state0 === 316 || state0 === 315 || state0 === 314 || state0 === 313 || state0 === 312 || state0 === 311 || state0 === 310 || state0 === 309 || state0 === 308 || state0 === 307 || state0 === 306 || state0 === 305 || state0 === 304 || state0 === 303 || state0 === 302 || state0 === 301 || state0 === 300 || state0 === 299 || state0 === 298 || state0 === 297 || state0 === 296 || state0 === 295 || state0 === 294 || state0 === 293 || state0 === 292 || state0 === 291 || state0 === 290 || state0 === 289 || state0 === 288 || state0 === 287 || state0 === 286 || state0 === 285 || state0 === 284 || state0 === 283 || state0 === 282 || state0 === 281 || state0 === 280 || state0 === 279 || state0 === 278 || state0 === 277 || state0 === 276 || state0 === 275 || state0 === 274 || state0 === 273 || state0 === 272 || state0 === 271 || state0 === 270 || state0 === 269 || state0 === 268 || state0 === 267 || state0 === 266 || state0 === 265 || state0 === 264 || state0 === 263 || state0 === 262 || state0 === 261 || state0 === 260 || state0 === 259 || state0 === 258 || state0 === 257 || state0 === 256 || state0 === 255 || state0 === 254 || state0 === 0 && $.$$eq(t5, 4) === true)
                                                switch (state0) {
                                                  case 0:
                                                    t5 = customAttribute.get$boundTo();
                                                  case 254:
                                                    state0 = 0;
                                                  default:
                                                    if (state0 === 291 || state0 === 290 || state0 === 289 || state0 === 288 || state0 === 287 || state0 === 286 || state0 === 285 || state0 === 284 || state0 === 283 || state0 === 282 || state0 === 281 || state0 === 280 || state0 === 279 || state0 === 278 || state0 === 277 || state0 === 276 || state0 === 275 || state0 === 274 || state0 === 273 || state0 === 272 || state0 === 271 || state0 === 270 || state0 === 269 || state0 === 268 || state0 === 267 || state0 === 266 || state0 === 265 || state0 === 264 || state0 === 263 || state0 === 262 || state0 === 261 || state0 === 260 || state0 === 259 || state0 === 258 || state0 === 257 || state0 === 256 || state0 === 255 || state0 === 0 && (t5 == null || $.$$eq(t5, "vertices") === true))
                                                      switch (state0) {
                                                        case 0:
                                                          fl = t4.get$length(chunk_faces3);
                                                        case 255:
                                                          state0 = 0;
                                                          offset_custom = 0;
                                                          f = 0;
                                                        default:
                                                          L24:
                                                            while (true)
                                                              switch (state0) {
                                                                case 0:
                                                                  if (!$.CONSTANT1.$lt(f, fl))
                                                                    break L24;
                                                                  face = t3.$index(obj_faces, t4.$index(chunk_faces3, f));
                                                                  t5 = customAttribute.get$value();
                                                                case 256:
                                                                  state0 = 0;
                                                                  v1 = $.$$index(t5, face.get$a());
                                                                  t5 = customAttribute.get$value();
                                                                case 257:
                                                                  state0 = 0;
                                                                  v2 = $.$$index(t5, face.get$b());
                                                                  t5 = customAttribute.get$value();
                                                                case 258:
                                                                  state0 = 0;
                                                                  v3 = $.$$index(t5, face.get$c());
                                                                  t5 = customAttribute.get$array();
                                                                case 259:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom, v1.get$x());
                                                                  t5 = customAttribute.get$array();
                                                                case 260:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 1, v1.get$y());
                                                                  t5 = customAttribute.get$array();
                                                                case 261:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 2, v1.get$z());
                                                                  t5 = customAttribute.get$array();
                                                                case 262:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 3, v1.get$w());
                                                                  t5 = customAttribute.get$array();
                                                                case 263:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 4, v2.get$x());
                                                                  t5 = customAttribute.get$array();
                                                                case 264:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 5, v2.get$y());
                                                                  t5 = customAttribute.get$array();
                                                                case 265:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 6, v2.get$z());
                                                                  t5 = customAttribute.get$array();
                                                                case 266:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 7, v2.get$w());
                                                                  t5 = customAttribute.get$array();
                                                                case 267:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 8, v3.get$x());
                                                                  t5 = customAttribute.get$array();
                                                                case 268:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 9, v3.get$y());
                                                                  t5 = customAttribute.get$array();
                                                                case 269:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 10, v3.get$z());
                                                                  t5 = customAttribute.get$array();
                                                                case 270:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 11, v3.get$w());
                                                                  offset_custom += 12;
                                                                  ++f;
                                                              }
                                                          fl = t2.get$length(chunk_faces4);
                                                        case 271:
                                                          state0 = 0;
                                                          f = 0;
                                                        case 272:
                                                        case 273:
                                                        case 274:
                                                        case 275:
                                                        case 276:
                                                        case 277:
                                                        case 278:
                                                        case 279:
                                                        case 280:
                                                        case 281:
                                                        case 282:
                                                        case 283:
                                                        case 284:
                                                        case 285:
                                                        case 286:
                                                        case 287:
                                                        case 288:
                                                        case 289:
                                                        case 290:
                                                        case 291:
                                                          L25:
                                                            while (true)
                                                              switch (state0) {
                                                                case 0:
                                                                  if (!$.CONSTANT1.$lt(f, fl))
                                                                    break L25;
                                                                  face = t3.$index(obj_faces, t2.$index(chunk_faces4, f));
                                                                  t5 = customAttribute.get$value();
                                                                case 272:
                                                                  state0 = 0;
                                                                  v1 = $.$$index(t5, face.get$a());
                                                                  t5 = customAttribute.get$value();
                                                                case 273:
                                                                  state0 = 0;
                                                                  v2 = $.$$index(t5, face.get$b());
                                                                  t5 = customAttribute.get$value();
                                                                case 274:
                                                                  state0 = 0;
                                                                  v3 = $.$$index(t5, face.get$c());
                                                                  t5 = customAttribute.get$value();
                                                                case 275:
                                                                  state0 = 0;
                                                                  v4 = $.$$index(t5, face.get$d());
                                                                  t5 = customAttribute.get$array();
                                                                case 276:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom, v1.get$x());
                                                                  t5 = customAttribute.get$array();
                                                                case 277:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 1, v1.get$y());
                                                                  t5 = customAttribute.get$array();
                                                                case 278:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 2, v1.get$z());
                                                                  t5 = customAttribute.get$array();
                                                                case 279:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 3, v1.get$w());
                                                                  t5 = customAttribute.get$array();
                                                                case 280:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 4, v2.get$x());
                                                                  t5 = customAttribute.get$array();
                                                                case 281:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 5, v2.get$y());
                                                                  t5 = customAttribute.get$array();
                                                                case 282:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 6, v2.get$z());
                                                                  t5 = customAttribute.get$array();
                                                                case 283:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 7, v2.get$w());
                                                                  t5 = customAttribute.get$array();
                                                                case 284:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 8, v3.get$x());
                                                                  t5 = customAttribute.get$array();
                                                                case 285:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 9, v3.get$y());
                                                                  t5 = customAttribute.get$array();
                                                                case 286:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 10, v3.get$z());
                                                                  t5 = customAttribute.get$array();
                                                                case 287:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 11, v3.get$w());
                                                                  t5 = customAttribute.get$array();
                                                                case 288:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 12, v4.get$x());
                                                                  t5 = customAttribute.get$array();
                                                                case 289:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 13, v4.get$y());
                                                                  t5 = customAttribute.get$array();
                                                                case 290:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 14, v4.get$z());
                                                                  t5 = customAttribute.get$array();
                                                                case 291:
                                                                  state0 = 0;
                                                                  $.$$indexSet(t5, offset_custom + 15, v4.get$w());
                                                                  offset_custom += 16;
                                                                  ++f;
                                                              }
                                                      }
                                                    else
                                                      switch (state0) {
                                                        case 0:
                                                          t5 = customAttribute.get$boundTo();
                                                        case 292:
                                                          state0 = 0;
                                                        default:
                                                          if (state0 === 324 || state0 === 323 || state0 === 322 || state0 === 321 || state0 === 320 || state0 === 319 || state0 === 318 || state0 === 317 || state0 === 316 || state0 === 315 || state0 === 314 || state0 === 313 || state0 === 312 || state0 === 311 || state0 === 310 || state0 === 309 || state0 === 308 || state0 === 307 || state0 === 306 || state0 === 305 || state0 === 304 || state0 === 303 || state0 === 302 || state0 === 301 || state0 === 300 || state0 === 299 || state0 === 298 || state0 === 297 || state0 === 296 || state0 === 295 || state0 === 294 || state0 === 293 || state0 === 0 && $.$$eq(t5, "faces") === true)
                                                            switch (state0) {
                                                              case 0:
                                                                fl = t4.get$length(chunk_faces3);
                                                              case 293:
                                                                state0 = 0;
                                                                offset_custom = 0;
                                                                f = 0;
                                                              default:
                                                                L26:
                                                                  while (true)
                                                                    switch (state0) {
                                                                      case 0:
                                                                        if (!$.CONSTANT1.$lt(f, fl))
                                                                          break L26;
                                                                        t5 = customAttribute.get$value();
                                                                      case 294:
                                                                        state0 = 0;
                                                                        value = $.$$index(t5, t4.$index(chunk_faces3, f));
                                                                        t5 = customAttribute.get$array();
                                                                      case 295:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom, value.get$x());
                                                                        t5 = customAttribute.get$array();
                                                                      case 296:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 1, value.get$y());
                                                                        t5 = customAttribute.get$array();
                                                                      case 297:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 2, value.get$z());
                                                                        t5 = customAttribute.get$array();
                                                                      case 298:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 3, value.get$w());
                                                                        t5 = customAttribute.get$array();
                                                                      case 299:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 4, value.get$x());
                                                                        t5 = customAttribute.get$array();
                                                                      case 300:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 5, value.get$y());
                                                                        t5 = customAttribute.get$array();
                                                                      case 301:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 6, value.get$z());
                                                                        t5 = customAttribute.get$array();
                                                                      case 302:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 7, value.get$w());
                                                                        t5 = customAttribute.get$array();
                                                                      case 303:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 8, value.get$x());
                                                                        t5 = customAttribute.get$array();
                                                                      case 304:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 9, value.get$y());
                                                                        t5 = customAttribute.get$array();
                                                                      case 305:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 10, value.get$z());
                                                                        t5 = customAttribute.get$array();
                                                                      case 306:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 11, value.get$w());
                                                                        offset_custom += 12;
                                                                        ++f;
                                                                        v3 = value;
                                                                        v2 = v3;
                                                                        v1 = v2;
                                                                    }
                                                                fl = t2.get$length(chunk_faces4);
                                                              case 307:
                                                                state0 = 0;
                                                                f = 0;
                                                              case 308:
                                                              case 309:
                                                              case 310:
                                                              case 311:
                                                              case 312:
                                                              case 313:
                                                              case 314:
                                                              case 315:
                                                              case 316:
                                                              case 317:
                                                              case 318:
                                                              case 319:
                                                              case 320:
                                                              case 321:
                                                              case 322:
                                                              case 323:
                                                              case 324:
                                                                L27:
                                                                  while (true)
                                                                    switch (state0) {
                                                                      case 0:
                                                                        if (!$.CONSTANT1.$lt(f, fl))
                                                                          break L27;
                                                                        t5 = customAttribute.get$value();
                                                                      case 308:
                                                                        state0 = 0;
                                                                        value = $.$$index(t5, t2.$index(chunk_faces4, f));
                                                                        t5 = customAttribute.get$array();
                                                                      case 309:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom, value.get$x());
                                                                        t5 = customAttribute.get$array();
                                                                      case 310:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 1, value.get$y());
                                                                        t5 = customAttribute.get$array();
                                                                      case 311:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 2, value.get$z());
                                                                        t5 = customAttribute.get$array();
                                                                      case 312:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 3, value.get$w());
                                                                        t5 = customAttribute.get$array();
                                                                      case 313:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 4, value.get$x());
                                                                        t5 = customAttribute.get$array();
                                                                      case 314:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 5, value.get$y());
                                                                        t5 = customAttribute.get$array();
                                                                      case 315:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 6, value.get$z());
                                                                        t5 = customAttribute.get$array();
                                                                      case 316:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 7, value.get$w());
                                                                        t5 = customAttribute.get$array();
                                                                      case 317:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 8, value.get$x());
                                                                        t5 = customAttribute.get$array();
                                                                      case 318:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 9, value.get$y());
                                                                        t5 = customAttribute.get$array();
                                                                      case 319:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 10, value.get$z());
                                                                        t5 = customAttribute.get$array();
                                                                      case 320:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 11, value.get$w());
                                                                        t5 = customAttribute.get$array();
                                                                      case 321:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 12, value.get$x());
                                                                        t5 = customAttribute.get$array();
                                                                      case 322:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 13, value.get$y());
                                                                        t5 = customAttribute.get$array();
                                                                      case 323:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 14, value.get$z());
                                                                        t5 = customAttribute.get$array();
                                                                      case 324:
                                                                        state0 = 0;
                                                                        $.$$indexSet(t5, offset_custom + 15, value.get$w());
                                                                        offset_custom += 16;
                                                                        ++f;
                                                                        v4 = value;
                                                                        v3 = v4;
                                                                        v2 = v3;
                                                                        v1 = v2;
                                                                    }
                                                            }
                                                          else
                                                            switch (state0) {
                                                              case 0:
                                                                t5 = customAttribute.get$boundTo();
                                                              case 325:
                                                                state0 = 0;
                                                              default:
                                                                if (state0 === 359 || state0 === 358 || state0 === 357 || state0 === 356 || state0 === 355 || state0 === 354 || state0 === 353 || state0 === 352 || state0 === 351 || state0 === 350 || state0 === 349 || state0 === 348 || state0 === 347 || state0 === 346 || state0 === 345 || state0 === 344 || state0 === 343 || state0 === 342 || state0 === 341 || state0 === 340 || state0 === 339 || state0 === 338 || state0 === 337 || state0 === 336 || state0 === 335 || state0 === 334 || state0 === 333 || state0 === 332 || state0 === 331 || state0 === 330 || state0 === 329 || state0 === 328 || state0 === 327 || state0 === 326 || state0 === 0 && $.$$eq(t5, "faceVertices") === true)
                                                                  switch (state0) {
                                                                    case 0:
                                                                      fl = t4.get$length(chunk_faces3);
                                                                    case 326:
                                                                      state0 = 0;
                                                                      offset_custom = 0;
                                                                      f = 0;
                                                                    default:
                                                                      L28:
                                                                        while (true)
                                                                          switch (state0) {
                                                                            case 0:
                                                                              if (!$.CONSTANT1.$lt(f, fl))
                                                                                break L28;
                                                                              t5 = customAttribute.get$value();
                                                                            case 327:
                                                                              state0 = 0;
                                                                              t5 = $.$$index(t5, t4.$index(chunk_faces3, f));
                                                                            case 328:
                                                                              state0 = 0;
                                                                              t8 = $.getInterceptor$JSStringJSArray(t5);
                                                                              v1 = t8.$index(t5, 0);
                                                                              v2 = t8.$index(t5, 1);
                                                                              v3 = t8.$index(t5, 2);
                                                                              t8 = customAttribute.get$array();
                                                                            case 329:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom, v1.get$x());
                                                                              t8 = customAttribute.get$array();
                                                                            case 330:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 1, v1.get$y());
                                                                              t8 = customAttribute.get$array();
                                                                            case 331:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 2, v1.get$z());
                                                                              t8 = customAttribute.get$array();
                                                                            case 332:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 3, v1.get$w());
                                                                              t8 = customAttribute.get$array();
                                                                            case 333:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 4, v2.get$x());
                                                                              t8 = customAttribute.get$array();
                                                                            case 334:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 5, v2.get$y());
                                                                              t8 = customAttribute.get$array();
                                                                            case 335:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 6, v2.get$z());
                                                                              t8 = customAttribute.get$array();
                                                                            case 336:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 7, v2.get$w());
                                                                              t8 = customAttribute.get$array();
                                                                            case 337:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 8, v3.get$x());
                                                                              t8 = customAttribute.get$array();
                                                                            case 338:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 9, v3.get$y());
                                                                              t8 = customAttribute.get$array();
                                                                            case 339:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 10, v3.get$z());
                                                                              t8 = customAttribute.get$array();
                                                                            case 340:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 11, v3.get$w());
                                                                              offset_custom += 12;
                                                                              ++f;
                                                                              value = t5;
                                                                          }
                                                                      fl = t2.get$length(chunk_faces4);
                                                                    case 341:
                                                                      state0 = 0;
                                                                      f = 0;
                                                                    case 342:
                                                                    case 343:
                                                                    case 344:
                                                                    case 345:
                                                                    case 346:
                                                                    case 347:
                                                                    case 348:
                                                                    case 349:
                                                                    case 350:
                                                                    case 351:
                                                                    case 352:
                                                                    case 353:
                                                                    case 354:
                                                                    case 355:
                                                                    case 356:
                                                                    case 357:
                                                                    case 358:
                                                                    case 359:
                                                                      L29:
                                                                        while (true)
                                                                          switch (state0) {
                                                                            case 0:
                                                                              if (!$.CONSTANT1.$lt(f, fl))
                                                                                break L29;
                                                                              t5 = customAttribute.get$value();
                                                                            case 342:
                                                                              state0 = 0;
                                                                              t5 = $.$$index(t5, t2.$index(chunk_faces4, f));
                                                                            case 343:
                                                                              state0 = 0;
                                                                              t8 = $.getInterceptor$JSStringJSArray(t5);
                                                                              v1 = t8.$index(t5, 0);
                                                                              v2 = t8.$index(t5, 1);
                                                                              v3 = t8.$index(t5, 2);
                                                                              v4 = t8.$index(t5, 3);
                                                                              t8 = customAttribute.get$array();
                                                                            case 344:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom, v1.get$x());
                                                                              t8 = customAttribute.get$array();
                                                                            case 345:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 1, v1.get$y());
                                                                              t8 = customAttribute.get$array();
                                                                            case 346:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 2, v1.get$z());
                                                                              t8 = customAttribute.get$array();
                                                                            case 347:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 3, v1.get$w());
                                                                              t8 = customAttribute.get$array();
                                                                            case 348:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 4, v2.get$x());
                                                                              t8 = customAttribute.get$array();
                                                                            case 349:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 5, v2.get$y());
                                                                              t8 = customAttribute.get$array();
                                                                            case 350:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 6, v2.get$z());
                                                                              t8 = customAttribute.get$array();
                                                                            case 351:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 7, v2.get$w());
                                                                              t8 = customAttribute.get$array();
                                                                            case 352:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 8, v3.get$x());
                                                                              t8 = customAttribute.get$array();
                                                                            case 353:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 9, v3.get$y());
                                                                              t8 = customAttribute.get$array();
                                                                            case 354:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 10, v3.get$z());
                                                                              t8 = customAttribute.get$array();
                                                                            case 355:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 11, v3.get$w());
                                                                              t8 = customAttribute.get$array();
                                                                            case 356:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 12, v4.get$x());
                                                                              t8 = customAttribute.get$array();
                                                                            case 357:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 13, v4.get$y());
                                                                              t8 = customAttribute.get$array();
                                                                            case 358:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 14, v4.get$z());
                                                                              t8 = customAttribute.get$array();
                                                                            case 359:
                                                                              state0 = 0;
                                                                              $.$$indexSet(t8, offset_custom + 15, v4.get$w());
                                                                              offset_custom += 16;
                                                                              ++f;
                                                                              value = t5;
                                                                          }
                                                                  }
                                                                else
                                                                  offset_custom = 0;
                                                            }
                                                      }
                                                }
                                              else
                                                offset_custom = 0;
                                          }
                                    }
                              }
                            this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
                            this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
                            offset_customSrc = 0;
                        }
                      }
                      ++i;
                  }
          }
        if (dispose) {
          geometryGroup.set$__inittedArrays(null);
          geometryGroup.set$__colorArray(null);
          geometryGroup.set$__normalArray(null);
          geometryGroup.set$__tangentArray(null);
          geometryGroup.set$__uvArray(null);
          geometryGroup.set$__uv2Array(null);
          geometryGroup.set$__faceArray(null);
          geometryGroup.set$__vertexArray(null);
          geometryGroup.set$__lineArray(null);
          geometryGroup.set$__skinVertexAArray(null);
          geometryGroup.set$__skinVertexBArray(null);
          geometryGroup.set$__skinIndexArray(null);
          geometryGroup.set$__skinWeightArray(null);
        }
    }
  },
  setDirectBuffers$3: function(geometry, hint, dispose) {
    var attributes, t1, index, position, normal, uv, color, tangent, t2;
    attributes = geometry.get$attributes();
    t1 = $.getInterceptor$JSStringJSArray(attributes);
    index = t1.$index(attributes, "index");
    position = t1.$index(attributes, "position");
    normal = t1.$index(attributes, "normal");
    uv = t1.$index(attributes, "uv");
    color = t1.$index(attributes, "color");
    tangent = t1.$index(attributes, "tangent");
    if (geometry.get$elementsNeedUpdate() === true && !(index == null)) {
      this._gl.bindBuffer$2(34963, index.get$buffer());
      this._gl.bufferData$3(34963, index.get$array(), hint);
    }
    if (geometry.get$verticesNeedUpdate() === true && !(position == null)) {
      this._gl.bindBuffer$2(34962, position.get$buffer());
      this._gl.bufferData$3(34962, position.get$array(), hint);
    }
    if (geometry.get$normalsNeedUpdate() === true && !(normal == null)) {
      this._gl.bindBuffer$2(34962, normal.get$buffer());
      this._gl.bufferData$3(34962, normal.get$array(), hint);
    }
    if (geometry.get$uvsNeedUpdate() === true && !(uv == null)) {
      this._gl.bindBuffer$2(34962, uv.get$buffer());
      this._gl.bufferData$3(34962, uv.get$array(), hint);
    }
    if (geometry.get$colorsNeedUpdate() === true && !(color == null)) {
      this._gl.bindBuffer$2(34962, color.get$buffer());
      this._gl.bufferData$3(34962, color.get$array(), hint);
    }
    if (geometry.get$tangentsNeedUpdate() === true && !(tangent == null)) {
      this._gl.bindBuffer$2(34962, tangent.get$buffer());
      this._gl.bufferData$3(34962, tangent.get$array(), hint);
    }
    if (dispose)
      for (t1 = $.iterator(geometry.get$attributes()); t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        $.$$index(geometry.get$attributes(), t2).set$array(null);
      }
  },
  renderBufferImmediate$3: function(object, program, material) {
    var t1, i, normalArray, t2, nax, t3, nay, t4, naz, t5, nbx, t6, nby, t7, nbz, t8, ncx, t9, ncy, t10, ncz, t11, t12, t13;
    if (object.get$hasPositions() === true && $.$$index(object, "__webglVertexBuffer") !== true)
      $.$$indexSet(object, "__webglVertexBuffer", this._gl.createBuffer$0());
    if (object.get$hasNormals() === true && $.$$index(object, "__webglNormalBuffer") !== true)
      $.$$indexSet(object, "__webglNormalBuffer", this._gl.createBuffer$0());
    if (object.get$hasUvs() === true && $.$$index(object, "__webglUVBuffer") !== true)
      $.$$indexSet(object, "__webglUVBuffer", this._gl.createBuffer$0());
    if (object.get$hasColors() === true && $.$$index(object, "__webglColorBuffer") !== true)
      $.$$indexSet(object, "__webglColorBuffer", this._gl.createBuffer$0());
    if (object.get$hasPositions() === true) {
      this._gl.bindBuffer$2(34962, $.$$index(object, "__webglVertexBuffer"));
      this._gl.bufferData$3(34962, object.get$positionArray(), 35048);
      this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "position"));
      this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "position"), 3, 5126, false, 0, 0);
    }
    if (object.get$hasNormals() === true) {
      this._gl.bindBuffer$2(34962, $.$$index(object, "__webglNormalBuffer"));
      if ($.$$eq(material.get$shading(), 1) === true) {
        t1 = $.$$mul(object.get$count(), 3);
        if (typeof t1 !== "number")
          return this.renderBufferImmediate$3$bailout(1, object, program, material, t1);
        for (i = 0; i < t1; i += 9) {
          normalArray = object.get$normalArray();
          t2 = $.getInterceptor$JSStringJSArray(normalArray);
          nax = t2.$index(normalArray, i);
          t3 = i + 1;
          nay = t2.$index(normalArray, t3);
          t4 = i + 2;
          naz = t2.$index(normalArray, t4);
          t5 = i + 3;
          nbx = t2.$index(normalArray, t5);
          t6 = i + 4;
          nby = t2.$index(normalArray, t6);
          t7 = i + 5;
          nbz = t2.$index(normalArray, t7);
          t8 = i + 6;
          ncx = t2.$index(normalArray, t8);
          t9 = i + 7;
          ncy = t2.$index(normalArray, t9);
          t10 = i + 8;
          ncz = t2.$index(normalArray, t10);
          t11 = $.$$div($.$$add($.$$add(nax, nbx), ncx), 3);
          t12 = $.$$div($.$$add($.$$add(nay, nby), ncy), 3);
          t13 = $.$$div($.$$add($.$$add(naz, nbz), ncz), 3);
          t2.$indexSet(normalArray, i, t11);
          t2.$indexSet(normalArray, t3, t12);
          t2.$indexSet(normalArray, t4, t13);
          t2.$indexSet(normalArray, t5, t11);
          t2.$indexSet(normalArray, t6, t12);
          t2.$indexSet(normalArray, t7, t13);
          t2.$indexSet(normalArray, t8, t11);
          t2.$indexSet(normalArray, t9, t12);
          t2.$indexSet(normalArray, t10, t13);
        }
      }
      this._gl.bufferData$3(34962, object.get$normalArray(), 35048);
      this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "normal"));
      this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "normal"), 3, 5126, false, 0, 0);
    }
    if (object.get$hasUvs() === true && material.get$map() === true) {
      this._gl.bindBuffer$2(34962, $.$$index(object, "__webglUVBuffer"));
      this._gl.bufferData$3(34962, object.get$uvArray(), 35048);
      this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "uv"));
      this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "uv"), 2, 5126, false, 0, 0);
    }
    if (object.get$hasColors() === true && $.$$eq(material.get$vertexColors(), 0) !== true) {
      this._gl.bindBuffer$2(34962, $.$$index(object, "__webglColorBuffer"));
      this._gl.bufferData$3(34962, object.get$colorArray(), 35048);
      this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "color"));
      this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "color"), 3, 5126, false, 0, 0);
    }
    this._gl.drawArrays$3(4, 0, object.get$count());
    object.set$count(0);
  },
  renderBufferImmediate$3$bailout: function(state0, object, program, material, t1) {
    switch (state0) {
      case 0:
        if (object.get$hasPositions() === true && $.$$index(object, "__webglVertexBuffer") !== true)
          $.$$indexSet(object, "__webglVertexBuffer", this._gl.createBuffer$0());
        if (object.get$hasNormals() === true && $.$$index(object, "__webglNormalBuffer") !== true)
          $.$$indexSet(object, "__webglNormalBuffer", this._gl.createBuffer$0());
        if (object.get$hasUvs() === true && $.$$index(object, "__webglUVBuffer") !== true)
          $.$$indexSet(object, "__webglUVBuffer", this._gl.createBuffer$0());
        if (object.get$hasColors() === true && $.$$index(object, "__webglColorBuffer") !== true)
          $.$$indexSet(object, "__webglColorBuffer", this._gl.createBuffer$0());
        if (object.get$hasPositions() === true) {
          this._gl.bindBuffer$2(34962, $.$$index(object, "__webglVertexBuffer"));
          this._gl.bufferData$3(34962, object.get$positionArray(), 35048);
          this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "position"));
          this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "position"), 3, 5126, false, 0, 0);
        }
      case 1:
        var i, normalArray, t2, nax, t3, nay, t4, naz, t5, nbx, t6, nby, t7, nbz, t8, ncx, t9, ncy, t10, ncz, t11, t12, t13;
        if (state0 === 1 || state0 === 0 && object.get$hasNormals() === true)
          switch (state0) {
            case 0:
              this._gl.bindBuffer$2(34962, $.$$index(object, "__webglNormalBuffer"));
            case 1:
              if (state0 === 1 || state0 === 0 && $.$$eq(material.get$shading(), 1) === true)
                switch (state0) {
                  case 0:
                    t1 = $.$$mul(object.get$count(), 3);
                  case 1:
                    state0 = 0;
                    for (i = 0; $.CONSTANT1.$lt(i, t1); i += 9) {
                      normalArray = object.get$normalArray();
                      t2 = $.getInterceptor$JSStringJSArray(normalArray);
                      nax = t2.$index(normalArray, i);
                      t3 = i + 1;
                      nay = t2.$index(normalArray, t3);
                      t4 = i + 2;
                      naz = t2.$index(normalArray, t4);
                      t5 = i + 3;
                      nbx = t2.$index(normalArray, t5);
                      t6 = i + 4;
                      nby = t2.$index(normalArray, t6);
                      t7 = i + 5;
                      nbz = t2.$index(normalArray, t7);
                      t8 = i + 6;
                      ncx = t2.$index(normalArray, t8);
                      t9 = i + 7;
                      ncy = t2.$index(normalArray, t9);
                      t10 = i + 8;
                      ncz = t2.$index(normalArray, t10);
                      t11 = $.$$div($.$$add($.$$add(nax, nbx), ncx), 3);
                      t12 = $.$$div($.$$add($.$$add(nay, nby), ncy), 3);
                      t13 = $.$$div($.$$add($.$$add(naz, nbz), ncz), 3);
                      t2.$indexSet(normalArray, i, t11);
                      t2.$indexSet(normalArray, t3, t12);
                      t2.$indexSet(normalArray, t4, t13);
                      t2.$indexSet(normalArray, t5, t11);
                      t2.$indexSet(normalArray, t6, t12);
                      t2.$indexSet(normalArray, t7, t13);
                      t2.$indexSet(normalArray, t8, t11);
                      t2.$indexSet(normalArray, t9, t12);
                      t2.$indexSet(normalArray, t10, t13);
                    }
                }
              this._gl.bufferData$3(34962, object.get$normalArray(), 35048);
              this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "normal"));
              this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "normal"), 3, 5126, false, 0, 0);
          }
        if (object.get$hasUvs() === true && material.get$map() === true) {
          this._gl.bindBuffer$2(34962, $.$$index(object, "__webglUVBuffer"));
          this._gl.bufferData$3(34962, object.get$uvArray(), 35048);
          this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "uv"));
          this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "uv"), 2, 5126, false, 0, 0);
        }
        if (object.get$hasColors() === true && $.$$eq(material.get$vertexColors(), 0) !== true) {
          this._gl.bindBuffer$2(34962, $.$$index(object, "__webglColorBuffer"));
          this._gl.bufferData$3(34962, object.get$colorArray(), 35048);
          this._gl.enableVertexAttribArray$1($.$$index(program.get$attributes(), "color"));
          this._gl.vertexAttribPointer$6($.$$index(program.get$attributes(), "color"), 3, 5126, false, 0, 0);
        }
        this._gl.drawArrays$3(4, 0, object.get$count());
        object.set$count(0);
    }
  },
  renderBufferDirect$6: function(camera, lights, fog, material, geometry, object) {
    var t1, program, attributes, wireframeBit, t3, t5, updateBuffers, offsets, t2, t4, t6, i, startIndex, position, positionSize, normal, t7, normalSize, uv, t8, uvSize, color, colorSize, tangent, tangentSize, index, t9, t12, t14, t16, t18;
    t1 = material.get$visible();
    if (typeof t1 !== "boolean")
      return this.renderBufferDirect$6$bailout(1, camera, lights, fog, material, geometry, object, t1);
    if (!t1)
      return;
    program = this.setProgram$5(camera, lights, fog, material, object);
    attributes = program.get$attributes();
    wireframeBit = material.get$wireframe() === true ? 1 : 0;
    t1 = geometry.id;
    if (typeof t1 !== "number")
      return this.renderBufferDirect$6$bailout(2, null, null, null, null, geometry, object, t1, program, attributes, wireframeBit);
    t1 *= 16777215;
    t3 = program.get$id();
    if (typeof t3 !== "number")
      return this.renderBufferDirect$6$bailout(3, null, null, null, null, geometry, object, t1, null, attributes, wireframeBit, t3);
    t5 = t1 + t3 * 2 + wireframeBit;
    if (!(t5 === this._currentGeometryGroupHash)) {
      this._currentGeometryGroupHash = t5;
      updateBuffers = true;
    } else
      updateBuffers = false;
    if (typeof object === "object" && object !== null && !!object.$isMesh) {
      offsets = geometry.offsets;
      if (typeof offsets !== "string" && (typeof offsets !== "object" || offsets === null || offsets.constructor !== Array && !offsets.$isJavaScriptIndexingBehavior()))
        return this.renderBufferDirect$6$bailout(4, null, null, null, null, geometry, null, null, null, attributes, null, null, offsets, updateBuffers);
      t1 = $.getInterceptor$JSStringJSArray(offsets);
      t2 = offsets.length;
      if (t2 > 1)
        updateBuffers = true;
      for (t3 = this.info, t4 = geometry.attributes, t5 = $.getInterceptor$JSStringJSArray(t4), t6 = $.getInterceptor$JSStringJSArray(attributes), i = 0; i < t2; ++i) {
        if (i >= offsets.length)
          throw $.ioore(i);
        startIndex = offsets[i].get$index();
        if (typeof startIndex !== "number")
          return this.renderBufferDirect$6$bailout(7, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i);
        if (updateBuffers) {
          position = t5.$index(t4, "position");
          positionSize = position.get$itemSize();
          if (typeof positionSize !== "number")
            return this.renderBufferDirect$6$bailout(8, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, position, positionSize);
          this._gl.bindBuffer$2(34962, position.get$buffer());
          this._gl.vertexAttribPointer$6(t6.$index(attributes, "position"), positionSize, 5126, false, 0, startIndex * positionSize * 4);
          normal = t5.$index(t4, "normal");
          t7 = t6.$index(attributes, "normal");
          if (typeof t7 !== "number")
            return this.renderBufferDirect$6$bailout(9, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, normal, t7);
          if (t7 >= 0 && normal === true) {
            normalSize = normal.get$itemSize();
            if (typeof normalSize !== "number")
              return this.renderBufferDirect$6$bailout(10, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, normal, null, normalSize);
            this._gl.bindBuffer$2(34962, normal.get$buffer());
            this._gl.vertexAttribPointer$6(t6.$index(attributes, "normal"), normalSize, 5126, false, 0, startIndex * normalSize * 4);
          }
          uv = t5.$index(t4, "uv");
          t7 = t6.$index(attributes, "uv");
          if (typeof t7 !== "number")
            return this.renderBufferDirect$6$bailout(11, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, null, t7, null, uv);
          if (t7 >= 0 && uv === true) {
            t7 = uv.get$buffer();
            t8 = this._gl;
            if (t7 === true) {
              uvSize = uv.get$itemSize();
              if (typeof uvSize !== "number")
                return this.renderBufferDirect$6$bailout(12, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, null, t7, null, null, uvSize, t8);
              t8.bindBuffer$2(34962, t7);
              this._gl.vertexAttribPointer$6(t6.$index(attributes, "uv"), uvSize, 5126, false, 0, startIndex * uvSize * 4);
              this._gl.enableVertexAttribArray$1(t6.$index(attributes, "uv"));
            } else
              t8.disableVertexAttribArray$1(t6.$index(attributes, "uv"));
          }
          color = t5.$index(t4, "color");
          t7 = t6.$index(attributes, "color");
          if (typeof t7 !== "number")
            return this.renderBufferDirect$6$bailout(13, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, null, t7, null, null, null, null, color);
          if (t7 >= 0 && color === true) {
            colorSize = color.get$itemSize();
            if (typeof colorSize !== "number")
              return this.renderBufferDirect$6$bailout(14, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, null, null, null, null, null, null, color, colorSize);
            this._gl.bindBuffer$2(34962, color.get$buffer());
            this._gl.vertexAttribPointer$6(t6.$index(attributes, "color"), colorSize, 5126, false, 0, startIndex * colorSize * 4);
          }
          tangent = t5.$index(t4, "tangent");
          t7 = t6.$index(attributes, "tangent");
          if (typeof t7 !== "number")
            return this.renderBufferDirect$6$bailout(15, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, null, t7, null, null, null, null, null, null, tangent);
          if (t7 >= 0 && tangent === true) {
            tangentSize = tangent.get$itemSize();
            if (typeof tangentSize !== "number")
              return this.renderBufferDirect$6$bailout(16, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, startIndex, t6, t5, i, null, null, $.CONSTANT3, null, null, null, null, null, null, null, null, tangent, tangentSize);
            this._gl.bindBuffer$2(34962, tangent.get$buffer());
            this._gl.vertexAttribPointer$6(t6.$index(attributes, "tangent"), tangentSize, 5126, false, 0, startIndex * tangentSize * 4);
          }
          index = t5.$index(t4, "index");
          this._gl.bindBuffer$2(34963, index.get$buffer());
        }
        t7 = this._gl;
        if (i >= offsets.length)
          throw $.ioore(i);
        t8 = offsets[i];
        t9 = t8.get$count();
        t8 = t8.get$start();
        if (typeof t8 !== "number")
          return this.renderBufferDirect$6$bailout(17, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, null, t6, t5, i, null, null, t9, null, t7, null, null, null, t8);
        t7.drawElements$4(4, t9, 5123, t8 * 2);
        t9 = t3.render;
        t7 = t9.get$calls();
        if (typeof t7 !== "number")
          return this.renderBufferDirect$6$bailout(18, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, null, t6, t5, i, null, null, t9, null, t7);
        t9.set$calls(t7 + 1);
        t9 = t3.render;
        t12 = t9.get$vertices();
        if (i >= offsets.length)
          throw $.ioore(i);
        t14 = offsets[i].get$count();
        if (typeof t12 !== "number")
          return this.renderBufferDirect$6$bailout(19, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, null, t6, t5, i, null, null, t9, null, null, null, null, null, null, null, null, null, null, t12);
        if (typeof t14 !== "number")
          return this.renderBufferDirect$6$bailout(20, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, null, t6, t5, i, null, null, t9, null, null, null, null, null, null, null, null, null, null, t12, t14);
        t9.set$vertices(t12 + t14);
        t9 = t3.render;
        t16 = t9.get$faces();
        if (i >= offsets.length)
          throw $.ioore(i);
        t18 = offsets[i].get$count();
        if (typeof t18 !== "number")
          return this.renderBufferDirect$6$bailout(22, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, null, t6, t5, i, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, t16, t18);
        if (typeof t16 !== "number")
          return this.renderBufferDirect$6$bailout(21, null, null, null, null, null, null, t1, null, attributes, null, t4, offsets, updateBuffers, t3, t2, null, t6, t5, i, null, null, t9, null, null, null, null, null, null, null, null, null, null, null, null, t16);
        t9.set$faces(t16 + t18 / 3);
      }
    }
  },
  renderBufferDirect$6$bailout: function(state0, camera, lights, fog, material, geometry, object, t1, program, attributes, wireframeBit, t3, offsets, updateBuffers, t2, il, startIndex, t5, t4, i, position, positionSize, t7, normal, t6, normalSize, uv, uvSize, t8, color, colorSize, tangent, tangentSize, t11, t13, t15, t17) {
    switch (state0) {
      case 0:
        t1 = material.get$visible();
      case 1:
        state0 = 0;
        if ($.$$eq(t1, false) === true)
          return;
        program = this.setProgram$5(camera, lights, fog, material, object);
        attributes = program.get$attributes();
        wireframeBit = material.get$wireframe() === true ? 1 : 0;
        t1 = geometry.id;
      case 2:
        state0 = 0;
        t1 = $.$$mul(t1, 16777215);
        t3 = program.get$id();
      case 3:
        state0 = 0;
        t5 = $.$$add($.$$add(t1, $.$$mul(t3, 2)), wireframeBit);
        if ($.$$eq(t5, this._currentGeometryGroupHash) !== true) {
          this._currentGeometryGroupHash = t5;
          updateBuffers = true;
        } else
          updateBuffers = false;
      default:
        var index;
        if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isMesh)
          switch (state0) {
            case 0:
              offsets = geometry.offsets;
            case 4:
              state0 = 0;
              t1 = $.getInterceptor$JSStringJSArray(offsets);
              t2 = t1.get$length(offsets);
            case 5:
              state0 = 0;
              if ($.$$gt(t2, 1) === true)
                updateBuffers = true;
              il = t1.get$length(offsets);
            case 6:
              state0 = 0;
              t2 = this.info;
              t3 = geometry.attributes;
              t4 = $.getInterceptor$JSStringJSArray(t3);
              t5 = $.getInterceptor$JSStringJSArray(attributes);
              i = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.CONSTANT1.$lt(i, il))
                        break L0;
                      startIndex = t1.$index(offsets, i).get$index();
                    case 7:
                      state0 = 0;
                    default:
                      if (state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 0 && updateBuffers)
                        switch (state0) {
                          case 0:
                            position = t4.$index(t3, "position");
                            positionSize = position.get$itemSize();
                          case 8:
                            state0 = 0;
                            this._gl.bindBuffer$2(34962, position.get$buffer());
                            t7 = $.getInterceptor$JSNumber(startIndex);
                            this._gl.vertexAttribPointer$6(t5.$index(attributes, "position"), positionSize, 5126, false, 0, $.$$mul(t7.$mul(startIndex, positionSize), 4));
                            normal = t4.$index(t3, "normal");
                            t6 = t5.$index(attributes, "normal");
                          case 9:
                            state0 = 0;
                          case 10:
                            if (state0 === 10 || state0 === 0 && $.$$ge(t6, 0) === true && normal === true)
                              switch (state0) {
                                case 0:
                                  normalSize = normal.get$itemSize();
                                case 10:
                                  state0 = 0;
                                  this._gl.bindBuffer$2(34962, normal.get$buffer());
                                  this._gl.vertexAttribPointer$6(t5.$index(attributes, "normal"), normalSize, 5126, false, 0, $.$$mul(t7.$mul(startIndex, normalSize), 4));
                              }
                            uv = t4.$index(t3, "uv");
                            t6 = t5.$index(attributes, "uv");
                          case 11:
                            state0 = 0;
                          case 12:
                            if (state0 === 12 || state0 === 0 && $.$$ge(t6, 0) === true && uv === true)
                              switch (state0) {
                                case 0:
                                  t6 = uv.get$buffer();
                                  t8 = this._gl;
                                case 12:
                                  if (state0 === 12 || state0 === 0 && t6 === true)
                                    switch (state0) {
                                      case 0:
                                        uvSize = uv.get$itemSize();
                                      case 12:
                                        state0 = 0;
                                        t8.bindBuffer$2(34962, t6);
                                        this._gl.vertexAttribPointer$6(t5.$index(attributes, "uv"), uvSize, 5126, false, 0, $.$$mul(t7.$mul(startIndex, uvSize), 4));
                                        this._gl.enableVertexAttribArray$1(t5.$index(attributes, "uv"));
                                    }
                                  else
                                    t8.disableVertexAttribArray$1(t5.$index(attributes, "uv"));
                              }
                            color = t4.$index(t3, "color");
                            t6 = t5.$index(attributes, "color");
                          case 13:
                            state0 = 0;
                          case 14:
                            if (state0 === 14 || state0 === 0 && $.$$ge(t6, 0) === true && color === true)
                              switch (state0) {
                                case 0:
                                  colorSize = color.get$itemSize();
                                case 14:
                                  state0 = 0;
                                  this._gl.bindBuffer$2(34962, color.get$buffer());
                                  this._gl.vertexAttribPointer$6(t5.$index(attributes, "color"), colorSize, 5126, false, 0, $.$$mul(t7.$mul(startIndex, colorSize), 4));
                              }
                            tangent = t4.$index(t3, "tangent");
                            t6 = t5.$index(attributes, "tangent");
                          case 15:
                            state0 = 0;
                          case 16:
                            if (state0 === 16 || state0 === 0 && $.$$ge(t6, 0) === true && tangent === true)
                              switch (state0) {
                                case 0:
                                  tangentSize = tangent.get$itemSize();
                                case 16:
                                  state0 = 0;
                                  this._gl.bindBuffer$2(34962, tangent.get$buffer());
                                  this._gl.vertexAttribPointer$6(t5.$index(attributes, "tangent"), tangentSize, 5126, false, 0, $.$$mul(t7.$mul(startIndex, tangentSize), 4));
                              }
                            index = t4.$index(t3, "index");
                            this._gl.bindBuffer$2(34963, index.get$buffer());
                        }
                      t6 = this._gl;
                      t7 = t1.$index(offsets, i).get$count();
                      t8 = t1.$index(offsets, i).get$start();
                    case 17:
                      state0 = 0;
                      t6.drawElements$4(4, t7, 5123, $.$$mul(t8, 2));
                      t7 = t2.render;
                      t6 = t7.get$calls();
                    case 18:
                      state0 = 0;
                      t7.set$calls($.$$add(t6, 1));
                      t7 = t2.render;
                      t11 = t7.get$vertices();
                    case 19:
                      state0 = 0;
                      t13 = t1.$index(offsets, i).get$count();
                    case 20:
                      state0 = 0;
                      t7.set$vertices($.$$add(t11, t13));
                      t7 = t2.render;
                      t15 = t7.get$faces();
                    case 21:
                      state0 = 0;
                      t17 = t1.$index(offsets, i).get$count();
                    case 22:
                      state0 = 0;
                      t7.set$faces($.$$add(t15, $.$$div(t17, 3)));
                      ++i;
                  }
          }
    }
  },
  renderBuffer$6: function(camera, lights, fog, material, geometryGroup, webglobject) {
    var object, program, attributes, wireframeBit, t1, t3, t5, updateBuffers, t2, i, t4, t7, t10, primitives, t6;
    object = webglobject.get$object();
    if (material.get$visible() !== true)
      return;
    program = this.setProgram$5(camera, lights, fog, material, webglobject);
    attributes = program.get$attributes();
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.renderBuffer$6$bailout(1, program, attributes, geometryGroup, webglobject, material, object);
    wireframeBit = material.get$wireframe() === true ? 1 : 0;
    t1 = geometryGroup.get$id();
    if (typeof t1 !== "number")
      return this.renderBuffer$6$bailout(2, program, attributes, geometryGroup, webglobject, material, object, wireframeBit, t1);
    t1 *= 16777215;
    t3 = program.get$id();
    if (typeof t3 !== "number")
      return this.renderBuffer$6$bailout(3, null, attributes, geometryGroup, webglobject, material, object, wireframeBit, t1, t3);
    t5 = t1 + t3 * 2 + wireframeBit;
    if (!(t5 === this._currentGeometryGroupHash)) {
      this._currentGeometryGroupHash = t5;
      updateBuffers = true;
    } else
      updateBuffers = false;
    if (material.get$morphTargets() !== true) {
      throw $.iae("position");
      if ("position" < 0 || "position" >= attributes.length)
        throw $.ioore("position");
      t1 = attributes.position;
      if (typeof t1 !== "number")
        return this.renderBuffer$6$bailout(4, null, attributes, geometryGroup, webglobject, material, object, null, t1, null, updateBuffers);
      t1 = t1 >= 0;
    } else
      t1 = false;
    if (t1) {
      if (updateBuffers) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
        t1 = this._gl;
        throw $.iae("position");
        if ("position" < 0 || "position" >= attributes.length)
          throw $.ioore("position");
        t1.vertexAttribPointer$6(attributes.position, 3, 5126, false, 0, 0);
      }
    } else {
      t1 = webglobject.get$morphTargetBase();
      if (typeof t1 !== "number")
        return this.renderBuffer$6$bailout(5, null, attributes, geometryGroup, webglobject, material, object, null, t1, null, updateBuffers);
      if (!(t1 === 0))
        this.setupMorphTargets$3(material, geometryGroup, webglobject);
    }
    if (updateBuffers) {
      t1 = geometryGroup.get$__webglCustomAttributesList();
      if (!(t1 == null)) {
        t1 = $.length(t1);
        if (typeof t1 !== "number")
          return this.renderBuffer$6$bailout(6, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers);
        for (t2 = $.getInterceptor$JSStringJSArray(attributes), i = 0; i < t1; ++i) {
          t3 = geometryGroup.get$__webglCustomAttributesList();
          if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
            return this.renderBuffer$6$bailout(7, null, attributes, geometryGroup, null, material, object, null, t1, t3, updateBuffers, i, t2);
          if (i >= t3.length)
            throw $.ioore(i);
          t3 = t3[i];
          t4 = t3.get$buffer();
          t5 = t4.get$belongsToAttribute();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= attributes.length)
            throw $.ioore(t5);
          t5 = attributes[t5];
          if (typeof t5 !== "number")
            return this.renderBuffer$6$bailout(8, null, attributes, geometryGroup, null, material, object, null, t1, t3, updateBuffers, i, t2, t5);
          if (t5 >= 0) {
            this._gl.bindBuffer$2(34962, t4);
            t4 = this._gl;
            t5 = t3.get$buffer().get$belongsToAttribute();
            if (t5 !== (t5 | 0))
              throw $.iae(t5);
            if (t5 < 0 || t5 >= attributes.length)
              throw $.ioore(t5);
            t4.vertexAttribPointer$6(attributes[t5], t3.get$size(), 5126, false, 0, 0);
          }
        }
      }
      t1 = $.getInterceptor$JSStringJSArray(attributes);
      throw $.iae("color");
      if ("color" < 0 || "color" >= attributes.length)
        throw $.ioore("color");
      t2 = attributes.color;
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(9, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t2);
      if (t2 >= 0) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
        t2 = this._gl;
        if ("color" >= attributes.length)
          throw $.ioore("color");
        t2.vertexAttribPointer$6(attributes.color, 3, 5126, false, 0, 0);
      }
      throw $.iae("normal");
      if ("normal" < 0 || "normal" >= attributes.length)
        throw $.ioore("normal");
      t2 = attributes.normal;
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(10, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t2);
      if (t2 >= 0) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
        t2 = this._gl;
        if ("normal" >= attributes.length)
          throw $.ioore("normal");
        t2.vertexAttribPointer$6(attributes.normal, 3, 5126, false, 0, 0);
      }
      throw $.iae("tangent");
      if ("tangent" < 0 || "tangent" >= attributes.length)
        throw $.ioore("tangent");
      t2 = attributes.tangent;
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(11, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t2);
      if (t2 >= 0) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
        t2 = this._gl;
        if ("tangent" >= attributes.length)
          throw $.ioore("tangent");
        t2.vertexAttribPointer$6(attributes.tangent, 4, 5126, false, 0, 0);
      }
      throw $.iae("uv");
      if ("uv" < 0 || "uv" >= attributes.length)
        throw $.ioore("uv");
      t2 = attributes.uv;
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(12, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t2);
      if (t2 >= 0) {
        t3 = geometryGroup.get$__webglUVBuffer();
        t4 = this._gl;
        if (!(t3 == null)) {
          t4.bindBuffer$2(34962, t3);
          t2 = this._gl;
          if ("uv" >= attributes.length)
            throw $.ioore("uv");
          t2.vertexAttribPointer$6(attributes.uv, 2, 5126, false, 0, 0);
          t2 = this._gl;
          if ("uv" >= attributes.length)
            throw $.ioore("uv");
          t2.enableVertexAttribArray$1(attributes.uv);
        } else
          t4.disableVertexAttribArray$1(t2);
      }
      throw $.iae("uv2");
      if ("uv2" < 0 || "uv2" >= attributes.length)
        throw $.ioore("uv2");
      t2 = attributes.uv2;
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(13, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t2);
      if (t2 >= 0) {
        t3 = geometryGroup.get$__webglUV2Buffer();
        t4 = this._gl;
        if (!(t3 == null)) {
          t4.bindBuffer$2(34962, t3);
          t2 = this._gl;
          if ("uv2" >= attributes.length)
            throw $.ioore("uv2");
          t2.vertexAttribPointer$6(attributes.uv2, 2, 5126, false, 0, 0);
          t2 = this._gl;
          if ("uv2" >= attributes.length)
            throw $.ioore("uv2");
          t2.enableVertexAttribArray$1(attributes.uv2);
        } else
          t4.disableVertexAttribArray$1(t2);
      }
      if (material.get$skinning() === true) {
        throw $.iae("skinVertexA");
        t2 = attributes.length;
        if ("skinVertexA" < 0 || "skinVertexA" >= t2)
          throw $.ioore("skinVertexA");
        t3 = attributes.skinVertexA;
        if (typeof t3 !== "number")
          return this.renderBuffer$6$bailout(14, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t3);
        if (t3 >= 0) {
          throw $.iae("skinVertexB");
          if ("skinVertexB" < 0 || "skinVertexB" >= t2)
            throw $.ioore("skinVertexB");
          t3 = attributes.skinVertexB;
          if (typeof t3 !== "number")
            return this.renderBuffer$6$bailout(15, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t3);
          if (t3 >= 0) {
            throw $.iae("skinIndex");
            if ("skinIndex" < 0 || "skinIndex" >= t2)
              throw $.ioore("skinIndex");
            t3 = attributes.skinIndex;
            if (typeof t3 !== "number")
              return this.renderBuffer$6$bailout(16, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t3);
            if (t3 >= 0) {
              throw $.iae("skinWeight");
              if ("skinWeight" < 0 || "skinWeight" >= t2)
                throw $.ioore("skinWeight");
              t3 = attributes.skinWeight;
              if (typeof t3 !== "number")
                return this.renderBuffer$6$bailout(17, null, attributes, geometryGroup, null, material, object, null, t1, null, updateBuffers, null, t3);
              t3 = t3 >= 0;
              t1 = t3;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
        t1 = this._gl;
        throw $.iae("skinVertexA");
        if ("skinVertexA" < 0 || "skinVertexA" >= attributes.length)
          throw $.ioore("skinVertexA");
        t1.vertexAttribPointer$6(attributes.skinVertexA, 4, 5126, false, 0, 0);
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
        t1 = this._gl;
        throw $.iae("skinVertexB");
        if ("skinVertexB" < 0 || "skinVertexB" >= attributes.length)
          throw $.ioore("skinVertexB");
        t1.vertexAttribPointer$6(attributes.skinVertexB, 4, 5126, false, 0, 0);
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
        t1 = this._gl;
        throw $.iae("skinIndex");
        if ("skinIndex" < 0 || "skinIndex" >= attributes.length)
          throw $.ioore("skinIndex");
        t1.vertexAttribPointer$6(attributes.skinIndex, 4, 5126, false, 0, 0);
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
        t1 = this._gl;
        throw $.iae("skinWeight");
        if ("skinWeight" < 0 || "skinWeight" >= attributes.length)
          throw $.ioore("skinWeight");
        t1.vertexAttribPointer$6(attributes.skinWeight, 4, 5126, false, 0, 0);
      }
    }
    if (typeof object === "object" && object !== null && !!object.$isMesh) {
      if (material.get$wireframe() === true) {
        t1 = material.get$wireframeLinewidth();
        if ($.$$eq(t1, this._oldLineWidth) !== true) {
          this._gl.lineWidth$1(t1);
          this._oldLineWidth = t1;
        }
        if (updateBuffers)
          this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
        this._gl.drawElements$4(1, geometryGroup.get$__webglLineCount(), 5123, 0);
      } else {
        if (updateBuffers)
          this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
        this._gl.drawElements$4(4, geometryGroup.get$__webglFaceCount(), 5123, 0);
      }
      t1 = this.info;
      t2 = t1.render;
      t3 = t2.get$calls();
      if (typeof t3 !== "number")
        return this.renderBuffer$6$bailout(18, null, null, geometryGroup, null, null, null, null, t1, t3, null, null, t2);
      t2.set$calls(t3 + 1);
      t2 = t1.render;
      t5 = t2.get$vertices();
      t7 = geometryGroup.get$__webglFaceCount();
      if (typeof t5 !== "number")
        return this.renderBuffer$6$bailout(19, null, null, geometryGroup, null, null, null, null, t1, null, null, null, t2, null, t5);
      if (typeof t7 !== "number")
        return this.renderBuffer$6$bailout(20, null, null, geometryGroup, null, null, null, null, t1, null, null, null, t2, null, t5, t7);
      t2.set$vertices(t5 + t7);
      t1 = t1.render;
      t2 = t1.get$faces();
      t10 = geometryGroup.get$__webglFaceCount();
      if (typeof t10 !== "number")
        return this.renderBuffer$6$bailout(22, null, null, null, null, null, null, null, t1, null, null, null, t2, null, null, null, t10);
      t10 = $.CONSTANT3.$tdiv(t10, 3);
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(21, null, null, geometryGroup, null, null, null, null, t1, null, null, null, t2);
      t1.set$faces(t2 + t10);
    } else if (typeof object === "object" && object !== null && !!object.$isLine) {
      t1 = object.type;
      if (typeof t1 !== "number")
        return this.renderBuffer$6$bailout(23, null, null, geometryGroup, null, material, null, null, t1);
      primitives = t1 === 0 ? 3 : 1;
      t1 = material.get$linewidth();
      if ($.$$eq(t1, this._oldLineWidth) !== true) {
        this._gl.lineWidth$1(t1);
        this._oldLineWidth = t1;
      }
      this._gl.drawArrays$3(primitives, 0, geometryGroup.get$__webglLineCount());
      t1 = this.info.render;
      t2 = t1.get$calls();
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(24, null, null, null, null, null, null, null, t1, null, null, null, t2);
      t1.set$calls(t2 + 1);
    } else if (typeof object === "object" && object !== null && !!object.$isParticleSystem) {
      this._gl.drawArrays$3(0, 0, geometryGroup.get$__webglParticleCount());
      t1 = this.info;
      t2 = t1.render;
      t3 = t2.get$calls();
      if (typeof t3 !== "number")
        return this.renderBuffer$6$bailout(25, null, null, geometryGroup, null, null, null, null, t1, t3, null, null, t2);
      t2.set$calls(t3 + 1);
      t1 = t1.render;
      t2 = t1.get$points();
      t6 = geometryGroup.get$__webglParticleCount();
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(26, null, null, geometryGroup, null, null, null, null, t1, null, null, null, t2);
      if (typeof t6 !== "number")
        return this.renderBuffer$6$bailout(27, null, null, null, null, null, null, null, t1, null, null, null, t2, null, null, null, null, t6);
      t1.set$points(t2 + t6);
    } else if (typeof object === "object" && object !== null && !!object.$isRibbon) {
      this._gl.drawArrays$3(5, 0, geometryGroup.get$__webglVertexCount());
      t1 = this.info.render;
      t2 = t1.get$calls();
      if (typeof t2 !== "number")
        return this.renderBuffer$6$bailout(28, null, null, null, null, null, null, null, t1, null, null, null, t2);
      t1.set$calls(t2 + 1);
    }
  },
  renderBuffer$6$bailout: function(state0, program, attributes, geometryGroup, webglobject, material, object, wireframeBit, t1, t3, updateBuffers, i, t2, t4, t5, t7, t10, t6) {
    switch (state0) {
      case 0:
        object = webglobject.get$object();
        if (material.get$visible() !== true)
          return;
        program = this.setProgram$5(camera, lights, fog, material, webglobject);
        attributes = program.get$attributes();
      case 1:
        state0 = 0;
        wireframeBit = material.get$wireframe() === true ? 1 : 0;
        t1 = geometryGroup.get$id();
      case 2:
        state0 = 0;
        t1 = $.$$mul(t1, 16777215);
        t3 = program.get$id();
      case 3:
        state0 = 0;
        t5 = $.$$add($.$$add(t1, $.$$mul(t3, 2)), wireframeBit);
        if ($.$$eq(t5, this._currentGeometryGroupHash) !== true) {
          this._currentGeometryGroupHash = t5;
          updateBuffers = true;
        } else
          updateBuffers = false;
      case 4:
        if (state0 === 4 || state0 === 0 && material.get$morphTargets() !== true)
          switch (state0) {
            case 0:
              t1 = $.$$index(attributes, "position");
            case 4:
              state0 = 0;
              t3 = $.$$ge(t1, 0) === true;
              t1 = t3;
          }
        else
          t1 = false;
      case 5:
        if (state0 === 0 && t1) {
          if (updateBuffers) {
            this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
            this._gl.vertexAttribPointer$6($.$$index(attributes, "position"), 3, 5126, false, 0, 0);
          }
        } else
          switch (state0) {
            case 0:
              t1 = webglobject.get$morphTargetBase();
            case 5:
              state0 = 0;
              if ($.$$eq(t1, 0) !== true)
                this.setupMorphTargets$3(material, geometryGroup, webglobject);
          }
      default:
        if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && updateBuffers)
          switch (state0) {
            case 0:
              t1 = geometryGroup.get$__webglCustomAttributesList();
            default:
              if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && !(t1 == null))
                switch (state0) {
                  case 0:
                    t1 = $.length(t1);
                  case 6:
                    state0 = 0;
                    t2 = $.getInterceptor$JSStringJSArray(attributes);
                    i = 0;
                  default:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.CONSTANT1.$lt(i, t1))
                              break L0;
                            t3 = geometryGroup.get$__webglCustomAttributesList();
                          case 7:
                            state0 = 0;
                            t3 = $.$$index(t3, i);
                            t4 = t2.$index(attributes, t3.get$buffer().get$belongsToAttribute());
                          case 8:
                            state0 = 0;
                            if ($.$$ge(t4, 0) === true) {
                              this._gl.bindBuffer$2(34962, t3.get$buffer());
                              this._gl.vertexAttribPointer$6(t2.$index(attributes, t3.get$buffer().get$belongsToAttribute()), t3.get$size(), 5126, false, 0, 0);
                            }
                            ++i;
                        }
                }
              t1 = $.getInterceptor$JSStringJSArray(attributes);
              t2 = t1.$index(attributes, "color");
            case 9:
              state0 = 0;
              if ($.$$ge(t2, 0) === true) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
                this._gl.vertexAttribPointer$6(t1.$index(attributes, "color"), 3, 5126, false, 0, 0);
              }
              t2 = t1.$index(attributes, "normal");
            case 10:
              state0 = 0;
              if ($.$$ge(t2, 0) === true) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
                this._gl.vertexAttribPointer$6(t1.$index(attributes, "normal"), 3, 5126, false, 0, 0);
              }
              t2 = t1.$index(attributes, "tangent");
            case 11:
              state0 = 0;
              if ($.$$ge(t2, 0) === true) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
                this._gl.vertexAttribPointer$6(t1.$index(attributes, "tangent"), 4, 5126, false, 0, 0);
              }
              t2 = t1.$index(attributes, "uv");
            case 12:
              state0 = 0;
              if ($.$$ge(t2, 0) === true) {
                t2 = geometryGroup.get$__webglUVBuffer();
                t3 = this._gl;
                if (!(t2 == null)) {
                  t3.bindBuffer$2(34962, t2);
                  this._gl.vertexAttribPointer$6(t1.$index(attributes, "uv"), 2, 5126, false, 0, 0);
                  this._gl.enableVertexAttribArray$1(t1.$index(attributes, "uv"));
                } else
                  t3.disableVertexAttribArray$1(t1.$index(attributes, "uv"));
              }
              t2 = t1.$index(attributes, "uv2");
            case 13:
              state0 = 0;
              if ($.$$ge(t2, 0) === true) {
                t2 = geometryGroup.get$__webglUV2Buffer();
                t3 = this._gl;
                if (!(t2 == null)) {
                  t3.bindBuffer$2(34962, t2);
                  this._gl.vertexAttribPointer$6(t1.$index(attributes, "uv2"), 2, 5126, false, 0, 0);
                  this._gl.enableVertexAttribArray$1(t1.$index(attributes, "uv2"));
                } else
                  t3.disableVertexAttribArray$1(t1.$index(attributes, "uv2"));
              }
            case 14:
            case 15:
            case 16:
            case 17:
              if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 0 && material.get$skinning() === true)
                switch (state0) {
                  case 0:
                    t2 = t1.$index(attributes, "skinVertexA");
                  case 14:
                    state0 = 0;
                  default:
                    if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 0 && $.$$ge(t2, 0) === true)
                      switch (state0) {
                        case 0:
                          t2 = t1.$index(attributes, "skinVertexB");
                        case 15:
                          state0 = 0;
                        default:
                          if (state0 === 17 || state0 === 16 || state0 === 0 && $.$$ge(t2, 0) === true)
                            switch (state0) {
                              case 0:
                                t2 = t1.$index(attributes, "skinIndex");
                              case 16:
                                state0 = 0;
                              case 17:
                                if (state0 === 17 || state0 === 0 && $.$$ge(t2, 0) === true)
                                  switch (state0) {
                                    case 0:
                                      t2 = t1.$index(attributes, "skinWeight");
                                    case 17:
                                      state0 = 0;
                                      t4 = $.$$ge(t2, 0) === true;
                                      t2 = t4;
                                  }
                                else
                                  t2 = false;
                            }
                          else
                            t2 = false;
                      }
                    else
                      t2 = false;
                }
              else
                t2 = false;
              if (t2) {
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
                this._gl.vertexAttribPointer$6(t1.$index(attributes, "skinVertexA"), 4, 5126, false, 0, 0);
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
                this._gl.vertexAttribPointer$6(t1.$index(attributes, "skinVertexB"), 4, 5126, false, 0, 0);
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
                this._gl.vertexAttribPointer$6(t1.$index(attributes, "skinIndex"), 4, 5126, false, 0, 0);
                this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
                this._gl.vertexAttribPointer$6(t1.$index(attributes, "skinWeight"), 4, 5126, false, 0, 0);
              }
          }
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
        var primitives;
        if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isMesh)
          switch (state0) {
            case 0:
              if (material.get$wireframe() === true) {
                t1 = material.get$wireframeLinewidth();
                if ($.$$eq(t1, this._oldLineWidth) !== true) {
                  this._gl.lineWidth$1(t1);
                  this._oldLineWidth = t1;
                }
                if (updateBuffers)
                  this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
                this._gl.drawElements$4(1, geometryGroup.get$__webglLineCount(), 5123, 0);
              } else {
                if (updateBuffers)
                  this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
                this._gl.drawElements$4(4, geometryGroup.get$__webglFaceCount(), 5123, 0);
              }
              t1 = this.info;
              t2 = t1.render;
              t3 = t2.get$calls();
            case 18:
              state0 = 0;
              t2.set$calls($.$$add(t3, 1));
              t2 = t1.render;
              t5 = t2.get$vertices();
            case 19:
              state0 = 0;
              t7 = geometryGroup.get$__webglFaceCount();
            case 20:
              state0 = 0;
              t2.set$vertices($.$$add(t5, t7));
              t1 = t1.render;
              t2 = t1.get$faces();
            case 21:
              state0 = 0;
              t10 = geometryGroup.get$__webglFaceCount();
            case 22:
              state0 = 0;
              t1.set$faces($.$$add(t2, $.$$tdiv(t10, 3)));
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 24 || state0 === 23 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isLine)
                switch (state0) {
                  case 0:
                    t1 = object.type;
                  case 23:
                    state0 = 0;
                    primitives = $.$$eq(t1, 0) === true ? 3 : 1;
                    t1 = material.get$linewidth();
                    if ($.$$eq(t1, this._oldLineWidth) !== true) {
                      this._gl.lineWidth$1(t1);
                      this._oldLineWidth = t1;
                    }
                    this._gl.drawArrays$3(primitives, 0, geometryGroup.get$__webglLineCount());
                    t1 = this.info.render;
                    t2 = t1.get$calls();
                  case 24:
                    state0 = 0;
                    t1.set$calls($.$$add(t2, 1));
                }
              else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 27 || state0 === 26 || state0 === 25 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isParticleSystem)
                      switch (state0) {
                        case 0:
                          this._gl.drawArrays$3(0, 0, geometryGroup.get$__webglParticleCount());
                          t1 = this.info;
                          t2 = t1.render;
                          t3 = t2.get$calls();
                        case 25:
                          state0 = 0;
                          t2.set$calls($.$$add(t3, 1));
                          t1 = t1.render;
                          t2 = t1.get$points();
                        case 26:
                          state0 = 0;
                          t6 = geometryGroup.get$__webglParticleCount();
                        case 27:
                          state0 = 0;
                          t1.set$points($.$$add(t2, t6));
                      }
                    else
                      switch (state0) {
                        case 0:
                        case 28:
                          if (state0 === 28 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isRibbon)
                            switch (state0) {
                              case 0:
                                this._gl.drawArrays$3(5, 0, geometryGroup.get$__webglVertexCount());
                                t1 = this.info.render;
                                t2 = t1.get$calls();
                              case 28:
                                state0 = 0;
                                t1.set$calls($.$$add(t2, 1));
                            }
                      }
                }
          }
    }
  },
  setupMorphTargets$3: function(material, geometryGroup, object) {
    var attributes, t1, order, influences, m, t2, t3, activeInfluenceIndices, il, i, influence, influenceIndex;
    attributes = material.get$program().get$attributes();
    if ($.$$eq(object.get$morphTargetBase(), -1) !== true) {
      this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphTargetsBuffers(), object.get$morphTargetBase()));
      this._gl.vertexAttribPointer$6($.$$index(attributes, "position"), 3, 5126, false, 0, 0);
    } else {
      t1 = $.getInterceptor$JSStringJSArray(attributes);
      if ($.$$ge(t1.$index(attributes, "position"), 0) === true) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
        this._gl.vertexAttribPointer$6(t1.$index(attributes, "position"), 3, 5126, false, 0, 0);
      }
    }
    if ($.$$gt($.length(object.get$morphTargetForcedOrder()), 0) === true) {
      order = object.get$morphTargetForcedOrder();
      if (typeof order !== "string" && (typeof order !== "object" || order === null || order.constructor !== Array && !order.$isJavaScriptIndexingBehavior()))
        return this.setupMorphTargets$3$bailout(1, material, geometryGroup, object, order, attributes);
      influences = object.get$morphTargetInfluences();
      if (typeof influences !== "string" && (typeof influences !== "object" || influences === null || influences.constructor !== Array && !influences.$isJavaScriptIndexingBehavior()))
        return this.setupMorphTargets$3$bailout(2, material, geometryGroup, object, order, attributes, influences);
      t1 = $.getInterceptor$JSStringJSArray(attributes);
      m = 0;
      while (true) {
        if (!($.CONSTANT1.$lt(m, material.get$numSupportedMorphTargets()) && m < order.length))
          break;
        t2 = this._gl;
        t3 = geometryGroup.get$__webglMorphTargetsBuffers();
        if (m >= order.length)
          throw $.ioore(m);
        t2.bindBuffer$2(34962, $.$$index(t3, order[m]));
        this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphTarget" + $.S(m)), 3, 5126, false, 0, 0);
        if (material.get$morphNormals() === true) {
          t2 = this._gl;
          t3 = geometryGroup.get$__webglMorphNormalsBuffers();
          if (m >= order.length)
            throw $.ioore(m);
          t2.bindBuffer$2(34962, $.$$index(t3, order[m]));
          this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphNormal" + $.S(m)), 3, 5126, false, 0, 0);
        }
        t2 = object.get$__webglMorphTargetInfluences();
        if (m >= order.length)
          throw $.ioore(m);
        t3 = order[m];
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= influences.length)
          throw $.ioore(t3);
        $.$$indexSet(t2, m, influences[t3]);
        ++m;
      }
    } else {
      activeInfluenceIndices = [];
      influences = object.get$morphTargetInfluences();
      if (typeof influences !== "string" && (typeof influences !== "object" || influences === null || influences.constructor !== Array && !influences.$isJavaScriptIndexingBehavior()))
        return this.setupMorphTargets$3$bailout(3, material, geometryGroup, object, null, attributes, influences, activeInfluenceIndices);
      il = influences.length;
      for (i = 0; i < il; ++i) {
        if (i >= influences.length)
          throw $.ioore(i);
        influence = influences[i];
        if ($.$$gt(influence, 0) === true)
          activeInfluenceIndices.push([i, influence]);
      }
      if ($.CONSTANT1.$gt(activeInfluenceIndices.length, material.get$numSupportedMorphTargets())) {
        $.CONSTANT0.sort$1(activeInfluenceIndices, this.get$numericalSort());
        $.CONSTANT0.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
      } else if ($.CONSTANT1.$gt(activeInfluenceIndices.length, material.get$numSupportedMorphNormals()))
        $.CONSTANT0.sort$1(activeInfluenceIndices, this.get$numericalSort());
      else if (activeInfluenceIndices.length === 0)
        activeInfluenceIndices.push([0, 0]);
      for (t1 = $.getInterceptor$JSStringJSArray(attributes), influenceIndex = null, m = 0; $.CONSTANT1.$lt(m, material.get$numSupportedMorphTargets());) {
        if (m < activeInfluenceIndices.length) {
          t2 = activeInfluenceIndices[m];
          t2 = !(t2 == null) && $.isEmpty(t2) !== true;
        } else
          t2 = false;
        if (t2) {
          if (m >= activeInfluenceIndices.length)
            throw $.ioore(m);
          influenceIndex = $.$$index(activeInfluenceIndices[m], 0);
          this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphTargetsBuffers(), influenceIndex));
          this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphTarget" + $.S(m)), 3, 5126, false, 0, 0);
          if (material.get$morphNormals() === true) {
            this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphNormalsBuffers(), influenceIndex));
            this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphNormal" + $.S(m)), 3, 5126, false, 0, 0);
          }
          t2 = object.get$__webglMorphTargetInfluences();
          if (influenceIndex !== (influenceIndex | 0))
            throw $.iae(influenceIndex);
          if (influenceIndex < 0 || influenceIndex >= influences.length)
            throw $.ioore(influenceIndex);
          $.$$indexSet(t2, m, influences[influenceIndex]);
        } else {
          this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphTarget" + $.S(m)), 3, 5126, false, 0, 0);
          if (material.get$morphNormals() === true)
            this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphNormal" + $.S(m)), 3, 5126, false, 0, 0);
          $.$$indexSet(object.get$__webglMorphTargetInfluences(), m, 0);
        }
        ++m;
      }
    }
    if (!($.$$index(material.get$program().get$uniforms(), "morphTargetInfluences") == null))
      this._gl.uniform1fv$2($.$$index(material.get$program().get$uniforms(), "morphTargetInfluences"), object.get$__webglMorphTargetInfluences());
  },
  setupMorphTargets$3$bailout: function(state0, material, geometryGroup, object, order, attributes, influences, activeInfluenceIndices, t2, il) {
    switch (state0) {
      case 0:
        attributes = material.get$program().get$attributes();
        if ($.$$eq(object.get$morphTargetBase(), -1) !== true) {
          this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphTargetsBuffers(), object.get$morphTargetBase()));
          this._gl.vertexAttribPointer$6($.$$index(attributes, "position"), 3, 5126, false, 0, 0);
        } else {
          t1 = $.getInterceptor$JSStringJSArray(attributes);
          if ($.$$ge(t1.$index(attributes, "position"), 0) === true) {
            this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
            this._gl.vertexAttribPointer$6(t1.$index(attributes, "position"), 3, 5126, false, 0, 0);
          }
        }
      default:
        var t1, t3, m, i, influence, influenceIndex;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.$$gt($.length(object.get$morphTargetForcedOrder()), 0) === true)
          switch (state0) {
            case 0:
              order = object.get$morphTargetForcedOrder();
            case 1:
              state0 = 0;
              influences = object.get$morphTargetInfluences();
            case 2:
              state0 = 0;
              t1 = $.getInterceptor$JSStringJSArray(order);
              t2 = $.getInterceptor$JSStringJSArray(influences);
              t3 = $.getInterceptor$JSStringJSArray(attributes);
              m = 0;
              while (true) {
                if (!($.CONSTANT1.$lt(m, material.get$numSupportedMorphTargets()) && $.CONSTANT1.$lt(m, t1.get$length(order))))
                  break;
                this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphTargetsBuffers(), t1.$index(order, m)));
                this._gl.vertexAttribPointer$6(t3.$index(attributes, "morphTarget" + $.S(m)), 3, 5126, false, 0, 0);
                if (material.get$morphNormals() === true) {
                  this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphNormalsBuffers(), t1.$index(order, m)));
                  this._gl.vertexAttribPointer$6(t3.$index(attributes, "morphNormal" + $.S(m)), 3, 5126, false, 0, 0);
                }
                $.$$indexSet(object.get$__webglMorphTargetInfluences(), m, t2.$index(influences, t1.$index(order, m)));
                ++m;
              }
          }
        else
          switch (state0) {
            case 0:
              activeInfluenceIndices = [];
              influences = object.get$morphTargetInfluences();
            case 3:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(influences);
              il = t2.get$length(influences);
            case 4:
              state0 = 0;
              for (i = 0; $.CONSTANT1.$lt(i, il); ++i) {
                influence = t2.$index(influences, i);
                if ($.$$gt(influence, 0) === true)
                  activeInfluenceIndices.push([i, influence]);
              }
              if ($.CONSTANT1.$gt(activeInfluenceIndices.length, material.get$numSupportedMorphTargets())) {
                $.CONSTANT0.sort$1(activeInfluenceIndices, this.get$numericalSort());
                $.CONSTANT0.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
              } else if ($.CONSTANT1.$gt(activeInfluenceIndices.length, material.get$numSupportedMorphNormals()))
                $.CONSTANT0.sort$1(activeInfluenceIndices, this.get$numericalSort());
              else if (activeInfluenceIndices.length === 0)
                activeInfluenceIndices.push([0, 0]);
              for (t1 = $.getInterceptor$JSStringJSArray(attributes), influenceIndex = null, m = 0; $.CONSTANT1.$lt(m, material.get$numSupportedMorphTargets());) {
                if (m < activeInfluenceIndices.length) {
                  t3 = activeInfluenceIndices[m];
                  t3 = !(t3 == null) && $.isEmpty(t3) !== true;
                } else
                  t3 = false;
                if (t3) {
                  if (m >= activeInfluenceIndices.length)
                    throw $.ioore(m);
                  influenceIndex = $.$$index(activeInfluenceIndices[m], 0);
                  this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphTargetsBuffers(), influenceIndex));
                  this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphTarget" + $.S(m)), 3, 5126, false, 0, 0);
                  if (material.get$morphNormals() === true) {
                    this._gl.bindBuffer$2(34962, $.$$index(geometryGroup.get$__webglMorphNormalsBuffers(), influenceIndex));
                    this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphNormal" + $.S(m)), 3, 5126, false, 0, 0);
                  }
                  $.$$indexSet(object.get$__webglMorphTargetInfluences(), m, t2.$index(influences, influenceIndex));
                } else {
                  this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphTarget" + $.S(m)), 3, 5126, false, 0, 0);
                  if (material.get$morphNormals() === true)
                    this._gl.vertexAttribPointer$6(t1.$index(attributes, "morphNormal" + $.S(m)), 3, 5126, false, 0, 0);
                  $.$$indexSet(object.get$__webglMorphTargetInfluences(), m, 0);
                }
                ++m;
              }
          }
        if (!($.$$index(material.get$program().get$uniforms(), "morphTargetInfluences") == null))
          this._gl.uniform1fv$2($.$$index(material.get$program().get$uniforms(), "morphTargetInfluences"), object.get$__webglMorphTargetInfluences());
    }
  },
  painterSort$2: function(a, b) {
    return $.toInt($.$$sub(b.get$z(), a.get$z()));
  },
  get$painterSort: function() {
    return new $.BoundClosure1(this, "painterSort$2");
  },
  numericalSort$2: function(a, b) {
    return $.toInt($.$$sub($.$$index(b, 1), $.$$index(a, 1)));
  },
  get$numericalSort: function() {
    return new $.BoundClosure1(this, "numericalSort$2");
  },
  render$2: function(scene, camera) {
    return this._render$2(scene, camera);
  },
  get$render: function() {
    return new $.BoundClosure1(this, "render$2");
  },
  _render$4$forceClear$renderTarget: function(scene, c, forceClear, renderTarget) {
    var lights, fog, camera, t1, t2, t3, renderList, il, t4, i, webglObject, object, t5;
    lights = scene.get$lights();
    fog = scene.get$fog();
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
    if (this.autoUpdateScene)
      scene.updateMatrixWorld$0();
    camera = $.WebGLCamera_WebGLCamera(c);
    if (camera.get$parent() == null)
      camera.updateMatrixWorld$0();
    camera.get$matrixWorldInverse().getInverse$1(camera.get$matrixWorld());
    camera.get$matrixWorldInverse().flattenToArray$1(camera.get$_viewMatrixArray());
    camera.get$projectionMatrix().flattenToArray$1(camera.get$_projectionMatrixArray());
    t1 = this._projScreenMatrix;
    t1.multiply$2(camera.get$projectionMatrix(), camera.get$matrixWorldInverse());
    t2 = this._frustum;
    t2.setFromMatrix$1(t1);
    if (this.autoUpdateObjects)
      this.initWebGLObjects$1(scene);
    this.renderPlugins$3(this.renderPluginsPre, scene, camera);
    t3 = this.info;
    t3.render.set$calls(0);
    t3.render.set$vertices(0);
    t3.render.set$faces(0);
    t3.render.set$points(0);
    this.setRenderTarget$1(renderTarget);
    if (this.autoClear || forceClear === true)
      this.clear$3(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
    t3 = $.getInterceptor$JSStringJSArray(scene);
    renderList = t3.$index(scene, "__webglObjects");
    if (typeof renderList !== "string" && (typeof renderList !== "object" || renderList === null || renderList.constructor !== Array && !renderList.$isJavaScriptIndexingBehavior()))
      return this._render$4$forceClear$renderTarget$bailout(1, t2, scene, renderTarget, camera, lights, fog, t3, renderList, t1);
    il = renderList.length;
    for (t4 = this._vector3, i = 0; i < il; ++i) {
      if (i >= renderList.length)
        throw $.ioore(i);
      webglObject = renderList[i];
      object = webglObject.get$object();
      webglObject.set$render(false);
      if (object.get$visible() === true)
        if (!(typeof object === "object" && object !== null && !!object.$isMesh || typeof object === "object" && object !== null && !!object.$isParticleSystem) || object.get$frustumCulled() !== true || t2.contains$1(object) === true) {
          this.setupMatrices$2(webglObject, camera);
          this.unrollBufferMaterial$1(webglObject);
          webglObject.set$render(true);
          if (this.sortObjects === true) {
            t5 = object.get$renderDepth();
            if (!(t5 == null))
              webglObject.set$z(t5);
            else {
              t4.copy$1(object.get$matrixWorld().getPosition$0());
              t1.multiplyVector3$1(t4);
              webglObject.set$z(t4.z);
            }
          }
        }
    }
    if (this.sortObjects === true)
      $.getInterceptor$JSStringJSArray(renderList).sort$1(renderList, this.get$painterSort());
    renderList = t3.$index(scene, "__webglObjectsImmediate");
    if (typeof renderList !== "string" && (typeof renderList !== "object" || renderList === null || renderList.constructor !== Array && !renderList.$isJavaScriptIndexingBehavior()))
      return this._render$4$forceClear$renderTarget$bailout(3, null, scene, renderTarget, camera, lights, fog, t3, renderList);
    il = renderList.length;
    for (i = 0; i < il; ++i) {
      if (i >= renderList.length)
        throw $.ioore(i);
      webglObject = renderList[i];
      if (webglObject.get$object().get$visible() === true) {
        this.setupMatrices$2(webglObject, camera);
        this.unrollImmediateBufferMaterial$1(webglObject);
      }
    }
    t1 = scene.get$overrideMaterial();
    if (!(t1 == null)) {
      this.setBlending$4(t1.get$blending(), t1.get$blendEquation(), t1.get$blendSrc(), t1.get$blendDst());
      this.setDepthTest$1(t1.get$depthTest());
      this.setDepthWrite$1(t1.get$depthWrite());
      this.setPolygonOffset$3(t1.get$polygonOffset(), t1.get$polygonOffsetFactor(), t1.get$polygonOffsetUnits());
      this.renderObjects$8(t3.$index(scene, "__webglObjects"), false, "", camera, lights, fog, true, t1);
      this.renderObjectsImmediate$7(t3.$index(scene, "__webglObjectsImmediate"), "", camera, lights, fog, false, t1);
    } else {
      this.setBlending$1(1);
      this.renderObjects$7(t3.$index(scene, "__webglObjects"), true, "opaque", camera, lights, fog, false);
      this.renderObjectsImmediate$6(t3.$index(scene, "__webglObjectsImmediate"), "opaque", camera, lights, fog, false);
      this.renderObjects$7(t3.$index(scene, "__webglObjects"), false, "transparent", camera, lights, fog, true);
      this.renderObjectsImmediate$6(t3.$index(scene, "__webglObjectsImmediate"), "transparent", camera, lights, fog, true);
    }
    this.renderPlugins$3(this.renderPluginsPost, scene, camera);
    if (!(renderTarget == null) && renderTarget.get$generateMipmaps() === true && $.$$eq(renderTarget.get$minFilter(), 3) !== true && $.$$eq(renderTarget.get$minFilter(), 6) !== true)
      this.updateRenderTargetMipmap$1(renderTarget);
    this.setDepthTest$1(true);
    this.setDepthWrite$1(true);
  },
  _render$4$forceClear$renderTarget$bailout: function(state0, t2, scene, renderTarget, camera, lights, fog, t3, renderList, t1, t5, il) {
    switch (state0) {
      case 0:
        lights = scene.get$lights();
        fog = scene.get$fog();
        this._currentMaterialId = -1;
        this._lightsNeedUpdate = true;
        if (this.autoUpdateScene)
          scene.updateMatrixWorld$0();
        camera = $.WebGLCamera_WebGLCamera(c);
        if (camera.get$parent() == null)
          camera.updateMatrixWorld$0();
        camera.get$matrixWorldInverse().getInverse$1(camera.get$matrixWorld());
        camera.get$matrixWorldInverse().flattenToArray$1(camera.get$_viewMatrixArray());
        camera.get$projectionMatrix().flattenToArray$1(camera.get$_projectionMatrixArray());
        t1 = this._projScreenMatrix;
        t1.multiply$2(camera.get$projectionMatrix(), camera.get$matrixWorldInverse());
        t2 = this._frustum;
        t2.setFromMatrix$1(t1);
        if (this.autoUpdateObjects)
          this.initWebGLObjects$1(scene);
        this.renderPlugins$3(this.renderPluginsPre, scene, camera);
        t3 = this.info;
        t3.render.set$calls(0);
        t3.render.set$vertices(0);
        t3.render.set$faces(0);
        t3.render.set$points(0);
        this.setRenderTarget$1(renderTarget);
        if (this.autoClear || forceClear === true)
          this.clear$3(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
        t3 = $.getInterceptor$JSStringJSArray(scene);
        renderList = t3.$index(scene, "__webglObjects");
      case 1:
        state0 = 0;
        t5 = $.getInterceptor$JSStringJSArray(renderList);
        il = t5.get$length(renderList);
      case 2:
        state0 = 0;
        for (t4 = this._vector3, i = 0; $.CONSTANT1.$lt(i, il); ++i) {
          webglObject = t5.$index(renderList, i);
          object = webglObject.get$object();
          webglObject.set$render(false);
          if (object.get$visible() === true)
            if (!(typeof object === "object" && object !== null && !!object.$isMesh || typeof object === "object" && object !== null && !!object.$isParticleSystem) || object.get$frustumCulled() !== true || t2.contains$1(object) === true) {
              this.setupMatrices$2(webglObject, camera);
              this.unrollBufferMaterial$1(webglObject);
              webglObject.set$render(true);
              if (this.sortObjects === true) {
                t6 = object.get$renderDepth();
                if (!(t6 == null))
                  webglObject.set$z(t6);
                else {
                  t4.copy$1(object.get$matrixWorld().getPosition$0());
                  t1.multiplyVector3$1(t4);
                  webglObject.set$z(t4.z);
                }
              }
            }
        }
        if (this.sortObjects === true)
          t5.sort$1(renderList, this.get$painterSort());
        renderList = t3.$index(scene, "__webglObjectsImmediate");
      case 3:
        state0 = 0;
        t2 = $.getInterceptor$JSStringJSArray(renderList);
        il = t2.get$length(renderList);
      case 4:
        var t4, i, webglObject, object, t6;
        state0 = 0;
        for (i = 0; $.CONSTANT1.$lt(i, il); ++i) {
          webglObject = t2.$index(renderList, i);
          if (webglObject.get$object().get$visible() === true) {
            this.setupMatrices$2(webglObject, camera);
            this.unrollImmediateBufferMaterial$1(webglObject);
          }
        }
        t1 = scene.get$overrideMaterial();
        if (!(t1 == null)) {
          this.setBlending$4(t1.get$blending(), t1.get$blendEquation(), t1.get$blendSrc(), t1.get$blendDst());
          this.setDepthTest$1(t1.get$depthTest());
          this.setDepthWrite$1(t1.get$depthWrite());
          this.setPolygonOffset$3(t1.get$polygonOffset(), t1.get$polygonOffsetFactor(), t1.get$polygonOffsetUnits());
          this.renderObjects$8(t3.$index(scene, "__webglObjects"), false, "", camera, lights, fog, true, t1);
          this.renderObjectsImmediate$7(t3.$index(scene, "__webglObjectsImmediate"), "", camera, lights, fog, false, t1);
        } else {
          this.setBlending$1(1);
          this.renderObjects$7(t3.$index(scene, "__webglObjects"), true, "opaque", camera, lights, fog, false);
          this.renderObjectsImmediate$6(t3.$index(scene, "__webglObjectsImmediate"), "opaque", camera, lights, fog, false);
          this.renderObjects$7(t3.$index(scene, "__webglObjects"), false, "transparent", camera, lights, fog, true);
          this.renderObjectsImmediate$6(t3.$index(scene, "__webglObjectsImmediate"), "transparent", camera, lights, fog, true);
        }
        this.renderPlugins$3(this.renderPluginsPost, scene, camera);
        if (!(renderTarget == null) && renderTarget.get$generateMipmaps() === true && $.$$eq(renderTarget.get$minFilter(), 3) !== true && $.$$eq(renderTarget.get$minFilter(), 6) !== true)
          this.updateRenderTargetMipmap$1(renderTarget);
        this.setDepthTest$1(true);
        this.setDepthWrite$1(true);
    }
  },
  _render$2: function(scene, c) {
    return this._render$4$forceClear$renderTarget(scene, c, false, null);
  },
  renderPlugins$3: function(plugins, scene, camera) {
    var il, i;
    if ($.CONSTANT0.get$isEmpty(plugins) === true)
      return;
    il = plugins.length;
    for (i = 0; i < il; ++i) {
      this._currentProgram = null;
      this._currentCamera = null;
      this._oldBlending = -1;
      this._oldDepthTest = -1;
      this._oldDepthWrite = -1;
      this._oldDoubleSided = -1;
      this._oldFlipSided = -1;
      this._currentGeometryGroupHash = -1;
      this._currentMaterialId = -1;
      this._lightsNeedUpdate = true;
      if (i >= plugins.length)
        throw $.ioore(i);
      plugins[i].render$4(scene, camera, this._currentWidth, this._currentHeight);
      this._currentProgram = null;
      this._currentCamera = null;
      this._oldBlending = -1;
      this._oldDepthTest = -1;
      this._oldDepthWrite = -1;
      this._oldDoubleSided = -1;
      this._oldFlipSided = -1;
      this._currentGeometryGroupHash = -1;
      this._currentMaterialId = -1;
      this._lightsNeedUpdate = true;
    }
  },
  renderObjects$8: function(renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
    var end, start, delta, t1, t2, t3, i, object, buffer, material, webglObject;
    if (typeof renderList !== "string" && (typeof renderList !== "object" || renderList === null || renderList.constructor !== Array && !renderList.$isJavaScriptIndexingBehavior()))
      return this.renderObjects$8$bailout(1, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial);
    if (typeof materialType !== "string")
      return this.renderObjects$8$bailout(1, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial);
    end = renderList.length;
    if (reverse === true) {
      start = end - 1;
      delta = -1;
      end = -1;
    } else {
      delta = 1;
      start = 0;
    }
    for (t1 = !(overrideMaterial == null), t2 = useBlending === true, t3 = materialType === "opaque", i = start, object = null, buffer = null, material = null; i !== end; i += delta) {
      if (i < 0 || i >= renderList.length)
        throw $.ioore(i);
      webglObject = renderList[i];
      if (webglObject.get$render() === true) {
        object = webglObject.get$object();
        buffer = webglObject.get$buffer();
        if (t1)
          material = overrideMaterial;
        else {
          material = t3 ? webglObject.get$opaque() : webglObject.get$transparent();
          if (material == null)
            continue;
          if (t2)
            this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
          this.setDepthTest$1(material.get$depthTest());
          this.setDepthWrite$1(material.get$depthWrite());
          this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
        }
        this.setMaterialFaces$1(material);
        if (typeof buffer === "object" && buffer !== null && !!buffer.$isBufferGeometry)
          this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
        else
          this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
      }
    }
  },
  renderObjects$8$bailout: function(state0, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial, delta, start, end) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(renderList);
        if (reverse === true) {
          start = $.$$sub(t1.get$length(renderList), 1);
          delta = -1;
          end = -1;
        } else {
          end = t1.get$length(renderList);
          delta = 1;
          start = 0;
        }
      case 3:
        state0 = 0;
      case 2:
        var t1, t2, t3, t4, i, object, buffer, material, t5, webglObject;
        state0 = 0;
        for (t1 = $.getInterceptor(materialType), t2 = !(overrideMaterial == null), t3 = $.getInterceptor$JSStringJSArray(renderList), t4 = useBlending === true, i = start, object = null, buffer = null, material = null; t5 = $.getInterceptor(i), t5.$eq(i, end) !== true; i = t5.$add(i, delta)) {
          webglObject = t3.$index(renderList, i);
          if (webglObject.get$render() === true) {
            object = webglObject.get$object();
            buffer = webglObject.get$buffer();
            if (t2)
              material = overrideMaterial;
            else {
              material = t1.$eq(materialType, "opaque") === true ? webglObject.get$opaque() : webglObject.get$transparent();
              if (material == null)
                continue;
              if (t4)
                this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
              this.setDepthTest$1(material.get$depthTest());
              this.setDepthWrite$1(material.get$depthWrite());
              this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
            }
            this.setMaterialFaces$1(material);
            if (typeof buffer === "object" && buffer !== null && !!buffer.$isBufferGeometry)
              this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
            else
              this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
          }
        }
    }
  },
  renderObjects$7: function(renderList, reverse, materialType, camera, lights, fog, useBlending) {
    return this.renderObjects$8(renderList, reverse, materialType, camera, lights, fog, useBlending, null);
  },
  renderObjectsImmediate$7: function(renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
    var il, t1, t2, material, i, webglObject, object;
    if (typeof renderList !== "string" && (typeof renderList !== "object" || renderList === null || renderList.constructor !== Array && !renderList.$isJavaScriptIndexingBehavior()))
      return this.renderObjectsImmediate$7$bailout(1, renderList, materialType, camera, lights, fog, useBlending, overrideMaterial);
    il = renderList.length;
    for (t1 = overrideMaterial === true, t2 = useBlending === true, material = null, i = 0; i < il; ++i) {
      if (i >= renderList.length)
        throw $.ioore(i);
      webglObject = renderList[i];
      object = webglObject.get$object();
      if (object.get$visible() === true) {
        if (t1)
          material = overrideMaterial;
        else {
          material = $.$$index(webglObject, materialType);
          if (material !== true)
            continue;
          if (t2)
            this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
          this.setDepthTest$1(material.get$depthTest());
          this.setDepthWrite$1(material.get$depthWrite());
          this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
        }
        this.renderImmediateObject$5(camera, lights, fog, material, object);
      }
    }
  },
  renderObjectsImmediate$7$bailout: function(state0, renderList, materialType, camera, lights, fog, useBlending, overrideMaterial, t1, il) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(renderList);
        il = t1.get$length(renderList);
      case 2:
        var t2, t3, material, i, webglObject, object;
        state0 = 0;
        for (t2 = overrideMaterial === true, t3 = useBlending === true, material = null, i = 0; $.CONSTANT1.$lt(i, il); ++i) {
          webglObject = t1.$index(renderList, i);
          object = webglObject.get$object();
          if (object.get$visible() === true) {
            if (t2)
              material = overrideMaterial;
            else {
              material = $.$$index(webglObject, materialType);
              if (material !== true)
                continue;
              if (t3)
                this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
              this.setDepthTest$1(material.get$depthTest());
              this.setDepthWrite$1(material.get$depthWrite());
              this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
            }
            this.renderImmediateObject$5(camera, lights, fog, material, object);
          }
        }
    }
  },
  renderObjectsImmediate$6: function(renderList, materialType, camera, lights, fog, useBlending) {
    return this.renderObjectsImmediate$7(renderList, materialType, camera, lights, fog, useBlending, null);
  },
  renderImmediateObject$5: function(camera, lights, fog, material, object) {
    var program = this.setProgram$5(camera, lights, fog, material, object);
    this._currentGeometryGroupHash = -1;
    this.setMaterialFaces$1(material);
    if (object.get$immediateRenderCallback() === true)
      object.immediateRenderCallback$3(program, this._gl, this._frustum);
    else
      object.render$1(new $.WebGLRenderer_renderImmediateObject_anon(this, material, program));
  },
  unrollImmediateBufferMaterial$1: function(webglobject) {
    var material = webglobject.get$webglmaterial();
    if (material.get$transparent() === true) {
      webglobject.set$transparent(material);
      webglobject.set$opaque(null);
    } else {
      webglobject.set$opaque(material);
      webglobject.set$transparent(null);
    }
  },
  unrollBufferMaterial$1: function(object) {
    var buffer, meshMaterial, t1, materialIndex, material;
    buffer = object.get$buffer();
    meshMaterial = object.get$webglmaterial();
    t1 = object.get$material();
    if (typeof t1 === "object" && t1 !== null && !!t1.$isMeshFaceMaterial) {
      materialIndex = buffer.get$materialIndex();
      if (typeof materialIndex !== "number")
        return this.unrollBufferMaterial$1$bailout(1, object, materialIndex);
      if (materialIndex >= 0) {
        t1 = object.get$geometry().get$materials();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
          return this.unrollBufferMaterial$1$bailout(2, object, materialIndex, t1);
        if (materialIndex !== (materialIndex | 0))
          throw $.iae(materialIndex);
        if (materialIndex < 0 || materialIndex >= t1.length)
          throw $.ioore(materialIndex);
        material = $.WebGLMaterial_WebGLMaterial$from(t1[materialIndex]);
        if (material.get$transparent() === true) {
          object.set$transparent(material);
          object.set$opaque(null);
        } else {
          object.set$opaque(material);
          object.set$transparent(null);
        }
      }
    } else if (!(meshMaterial == null))
      if (!(meshMaterial.get$transparent() == null)) {
        object.set$transparent(meshMaterial);
        object.set$opaque(null);
      } else {
        object.set$opaque(meshMaterial);
        object.set$transparent(null);
      }
  },
  unrollBufferMaterial$1$bailout: function(state0, object, materialIndex, t1) {
    switch (state0) {
      case 0:
        buffer = object.get$buffer();
        meshMaterial = object.get$webglmaterial();
        t1 = object.get$material();
      default:
        var buffer, meshMaterial, material;
        if (state0 === 2 || state0 === 1 || state0 === 0 && typeof t1 === "object" && t1 !== null && !!t1.$isMeshFaceMaterial)
          switch (state0) {
            case 0:
              materialIndex = buffer.get$materialIndex();
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && $.$$ge(materialIndex, 0) === true)
                switch (state0) {
                  case 0:
                    t1 = object.get$geometry().get$materials();
                  case 2:
                    state0 = 0;
                    material = $.WebGLMaterial_WebGLMaterial$from($.$$index(t1, materialIndex));
                    if (material.get$transparent() === true) {
                      object.set$transparent(material);
                      object.set$opaque(null);
                    } else {
                      object.set$opaque(material);
                      object.set$transparent(null);
                    }
                }
          }
        else if (!(meshMaterial == null))
          if (!(meshMaterial.get$transparent() == null)) {
            object.set$transparent(meshMaterial);
            object.set$opaque(null);
          } else {
            object.set$opaque(meshMaterial);
            object.set$transparent(null);
          }
    }
  },
  sortFacesByMaterial$1: function(geometry) {
    var hash_map, t1, t2, t3, t4, f, t5, materialIndex, materialHash, groupHash, vertices, t6, t7;
    hash_map = $.makeLiteralMap([]);
    t1 = $.length(geometry.get$morphTargets());
    t2 = $.length(geometry.get$morphNormals());
    geometry.set$geometryGroups($.makeLiteralMap([]));
    t3 = $.length(geometry.get$faces());
    if (typeof t3 !== "number")
      return this.sortFacesByMaterial$1$bailout(1, geometry, t1, t2, t3, hash_map);
    for (t4 = $.getInterceptor$JSStringJSArray(hash_map), f = 0; f < t3; ++f) {
      t5 = $.$$index(geometry.get$faces(), f);
      materialIndex = t5.get$materialIndex();
      materialHash = !(materialIndex == null) ? $.toString(materialIndex) : $.CONSTANT1.toString$0(-1);
      if (t4.$index(hash_map, materialHash) == null)
        t4.$indexSet(hash_map, materialHash, $.makeLiteralMap(["hash", materialHash, "counter", 0]));
      groupHash = $.S($.$$index(t4.$index(hash_map, materialHash), "hash")) + "_" + $.S($.$$index(t4.$index(hash_map, materialHash), "counter"));
      if ($.$$index(geometry.get$geometryGroups(), groupHash) == null)
        $.$$indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, t2, t1, 0));
      t5 = typeof t5 === "object" && t5 !== null && !!t5.$isFace3;
      vertices = t5 ? 3 : 4;
      if ($.$$gt($.$$add($.$$index(geometry.get$geometryGroups(), groupHash).get$vertices(), vertices), 65535) === true) {
        t6 = t4.$index(hash_map, materialHash);
        t7 = $.getInterceptor$JSStringJSArray(t6);
        t7.$indexSet(t6, "counter", $.$$add(t7.$index(t6, "counter"), 1));
        groupHash = $.S($.$$index(t4.$index(hash_map, materialHash), "hash")) + "_" + $.S($.$$index(t4.$index(hash_map, materialHash), "counter"));
        if ($.$$index(geometry.get$geometryGroups(), groupHash) == null)
          $.$$indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, t2, t1, 0));
      }
      t6 = geometry.get$geometryGroups();
      if (t5)
        $.add($.$$index(t6, groupHash).get$faces3(), f);
      else
        $.add($.$$index(t6, groupHash).get$faces4(), f);
      t5 = $.$$index(geometry.get$geometryGroups(), groupHash);
      t5.set$vertices($.$$add(t5.get$vertices(), vertices));
    }
    geometry.set$geometryGroupsList([]);
    $.forEach(geometry.get$geometryGroups(), new $.WebGLRenderer_sortFacesByMaterial_anon(this, geometry));
    return;
  },
  sortFacesByMaterial$1$bailout: function(state0, geometry, t1, t2, t3, hash_map) {
    var t4, f, t5, materialIndex, materialHash, groupHash, vertices, t6, t7;
    for (t4 = $.getInterceptor$JSStringJSArray(hash_map), f = 0; $.CONSTANT1.$lt(f, t3); ++f) {
      t5 = $.$$index(geometry.get$faces(), f);
      materialIndex = t5.get$materialIndex();
      materialHash = !(materialIndex == null) ? $.toString(materialIndex) : $.CONSTANT1.toString$0(-1);
      if (t4.$index(hash_map, materialHash) == null)
        t4.$indexSet(hash_map, materialHash, $.makeLiteralMap(["hash", materialHash, "counter", 0]));
      groupHash = $.S($.$$index(t4.$index(hash_map, materialHash), "hash")) + "_" + $.S($.$$index(t4.$index(hash_map, materialHash), "counter"));
      if ($.$$index(geometry.get$geometryGroups(), groupHash) == null)
        $.$$indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, t2, t1, 0));
      t5 = typeof t5 === "object" && t5 !== null && !!t5.$isFace3;
      vertices = t5 ? 3 : 4;
      if ($.$$gt($.$$add($.$$index(geometry.get$geometryGroups(), groupHash).get$vertices(), vertices), 65535) === true) {
        t6 = t4.$index(hash_map, materialHash);
        t7 = $.getInterceptor$JSStringJSArray(t6);
        t7.$indexSet(t6, "counter", $.$$add(t7.$index(t6, "counter"), 1));
        groupHash = $.S($.$$index(t4.$index(hash_map, materialHash), "hash")) + "_" + $.S($.$$index(t4.$index(hash_map, materialHash), "counter"));
        if ($.$$index(geometry.get$geometryGroups(), groupHash) == null)
          $.$$indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, t2, t1, 0));
      }
      t6 = geometry.get$geometryGroups();
      if (t5)
        $.add($.$$index(t6, groupHash).get$faces3(), f);
      else
        $.add($.$$index(t6, groupHash).get$faces4(), f);
      t5 = $.$$index(geometry.get$geometryGroups(), groupHash);
      t5.set$vertices($.$$add(t5.get$vertices(), vertices));
    }
    geometry.set$geometryGroupsList([]);
    $.forEach(geometry.get$geometryGroups(), new $.WebGLRenderer_sortFacesByMaterial_anon(this, geometry));
    return;
  },
  initWebGLObjects$1: function(scene) {
    var t1, t2, o;
    t1 = $.getInterceptor$JSStringJSArray(scene);
    if (t1.$index(scene, "__webglObjects") == null) {
      t1.$indexSet(scene, "__webglObjects", []);
      t1.$indexSet(scene, "__webglObjectsImmediate", []);
      t1.$indexSet(scene, "__webglSprites", []);
      t1.$indexSet(scene, "__webglFlares", []);
    }
    for (; $.$$gt($.length(scene.get$__objectsAdded()), 0) === true;) {
      this.addObject$2($.$$index(scene.get$__objectsAdded(), 0), scene);
      $.removeRange(scene.get$__objectsAdded(), 0, 1);
    }
    for (; $.$$gt($.length(scene.get$__objectsRemoved()), 0) === true;) {
      this.removeObject$2($.$$index(scene.get$__objectsRemoved(), 0), scene);
      $.removeRange(scene.get$__objectsRemoved(), 0, 1);
    }
    t2 = $.length(t1.$index(scene, "__webglObjects"));
    if (typeof t2 !== "number")
      return this.initWebGLObjects$1$bailout(1, scene, t2, t1);
    o = 0;
    for (; o < t2; ++o)
      this.updateObject$1($.$$index(t1.$index(scene, "__webglObjects"), o));
  },
  initWebGLObjects$1$bailout: function(state0, scene, t2, t1) {
    var o = 0;
    for (; $.CONSTANT1.$lt(o, t2); ++o)
      this.updateObject$1($.$$index(t1.$index(scene, "__webglObjects"), o));
  },
  addObject$2: function(object, scene) {
    var t1, webglobject, t2;
    t1 = {};
    webglobject = $.WebGLObject_WebGLObject(object, null, null, true, null, 0);
    t1.geometry_0 = webglobject.get$webglgeometry();
    if (webglobject.get$__webglInit() !== true) {
      webglobject.set$__webglInit(true);
      webglobject.set$_modelViewMatrix($.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1));
      webglobject.set$_normalMatrix($.Matrix3$());
      if (typeof object === "object" && object !== null && !!object.$isMesh) {
        t2 = object.geometry;
        if (typeof t2 === "object" && t2 !== null && !!t2.$isGeometry) {
          t2 = t1.geometry_0;
          if (t2.get$geometryGroups() == null)
            this.sortFacesByMaterial$1(t2);
          $.forEach(t1.geometry_0.get$geometryGroups(), new $.WebGLRenderer_addObject_anon(t1, this, webglobject));
        } else if (typeof t2 === "object" && t2 !== null && !!t2.$isBufferGeometry)
          this.initDirectBuffers$1($.propertyTypeCast(t2, "$isBufferGeometry"));
      } else if (typeof object === "object" && object !== null && !!object.$isRibbon) {
        t2 = t1.geometry_0;
        if (t2.get$__webglVertexBuffer() == null) {
          this.createRibbonBuffers$1(t2);
          this.initRibbonBuffers$1(t1.geometry_0);
          t1.geometry_0.set$verticesNeedUpdate(true);
          t1.geometry_0.set$colorsNeedUpdate(true);
        }
      } else if (typeof object === "object" && object !== null && !!object.$isLine) {
        t1.geometry_0 = $.WebGLGeometry_WebGLGeometry$from(object.geometry);
        t2 = t1.geometry_0;
        if (t2.get$__webglVertexBuffer() == null) {
          this.createLineBuffers$1(t2);
          this.initLineBuffers$2(t1.geometry_0, webglobject);
          t1.geometry_0.set$verticesNeedUpdate(true);
          t1.geometry_0.set$colorsNeedUpdate(true);
        }
      } else if (typeof object === "object" && object !== null && !!object.$isParticleSystem) {
        t2 = t1.geometry_0;
        if (t2.get$__webglVertexBuffer() == null) {
          this.createParticleBuffers$1(t2);
          this.initParticleBuffers$2(t1.geometry_0, webglobject);
          t1.geometry_0.set$verticesNeedUpdate(true);
          t1.geometry_0.set$colorsNeedUpdate(true);
        }
      }
      webglobject.set$__webglActive(false);
    }
    if (webglobject.get$__webglActive() !== true) {
      if (typeof object === "object" && object !== null && !!object.$isMesh) {
        t2 = object.geometry;
        if (typeof t2 === "object" && t2 !== null && !!t2.$isBufferGeometry)
          this.addBuffer$3($.$$index(scene, "__webglObjects"), t1.geometry_0, webglobject);
        else
          $.forEach(t1.geometry_0.get$geometryGroups(), new $.WebGLRenderer_addObject_anon0(this, scene, webglobject));
      } else if (typeof object === "object" && object !== null && !!object.$isRibbon || typeof object === "object" && object !== null && !!object.$isLine || typeof object === "object" && object !== null && !!object.$isParticleSystem)
        this.addBuffer$3($.$$index(scene, "__webglObjects"), t1.geometry_0, webglobject);
      else if (typeof object === "object" && object !== null && !!object.$isImmediateRenderObject || !($.$$index(object, "immediateRenderCallback") == null))
        this.addBufferImmediate$2($.$$index(scene, "__webglObjectsImmediate"), webglobject);
      else if (typeof object === "object" && object !== null && !!object.$isSprite)
        $.add($.$$index(scene, "__webglSprites"), object);
      else if (typeof object === "object" && object !== null && !!object.$isLensFlare)
        $.add($.$$index(scene, "__webglFlares"), object);
      $.$$indexSet(object, "__webglActive", true);
    }
  },
  addBuffer$3: function(objlist, buffer, object) {
    object.set$buffer(buffer);
    object.set$opaque(null);
    object.set$transparent(null);
    $.add(objlist, object);
  },
  addBufferImmediate$2: function(objlist, object) {
    object.set$opaque(null);
    object.set$transparent(null);
    $.add(objlist, object);
  },
  updateObject$1: function(webglobject) {
    var object, geometry, t1, i, material, t2, customAttributesDirty;
    object = webglobject.get$object();
    geometry = webglobject.get$webglgeometry();
    if (typeof object === "object" && object !== null && !!object.$isMesh) {
      t1 = object.geometry;
      if (typeof t1 === "object" && t1 !== null && !!t1.$isBufferGeometry) {
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true)
          this.setDirectBuffers$3(geometry, 35048, geometry !== true);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$elementsNeedUpdate(false);
        geometry.set$uvsNeedUpdate(false);
        geometry.set$normalsNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        geometry.set$tangentsNeedUpdate(false);
      } else {
        t1 = $.length(geometry.get$geometryGroupsList());
        if (typeof t1 !== "number")
          return this.updateObject$1$bailout(1, webglobject, t1, geometry);
        i = 0;
        material = null;
        for (; i < t1; ++i) {
          t2 = geometry.get$geometryGroupsList();
          if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
            return this.updateObject$1$bailout(2, webglobject, t1, geometry, t2, i);
          if (i >= t2.length)
            throw $.ioore(i);
          t2 = t2[i];
          material = this.getBufferMaterial$2(webglobject, t2);
          customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
          if (geometry.get$verticesNeedUpdate() === true || geometry.get$morphTargetsNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true || customAttributesDirty)
            this.setMeshBuffers$5(t2, webglobject, 35048, geometry.get$Dynamic() !== true, material);
        }
        geometry.set$verticesNeedUpdate(false);
        geometry.set$morphTargetsNeedUpdate(false);
        geometry.set$elementsNeedUpdate(false);
        geometry.set$uvsNeedUpdate(false);
        geometry.set$normalsNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        geometry.set$tangentsNeedUpdate(false);
        if (!(material.get$attributes() == null))
          for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;)
            t1.get$current().set$needsUpdate(false);
      }
    } else if (typeof object === "object" && object !== null && !!object.$isRibbon) {
      if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true)
        this.setRibbonBuffers$2(geometry, 35048);
      geometry.set$verticesNeedUpdate(false);
      geometry.set$colorsNeedUpdate(false);
    } else if (typeof object === "object" && object !== null && !!object.$isLine) {
      material = this.getBufferMaterial$2(webglobject, null);
      customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
      if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || customAttributesDirty)
        this.setLineBuffers$2(geometry, 35048);
      geometry.set$verticesNeedUpdate(false);
      geometry.set$colorsNeedUpdate(false);
      if (!(material.get$attributes() == null))
        for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;)
          t1.get$current().set$needsUpdate(false);
    } else if (typeof object === "object" && object !== null && !!object.$isParticleSystem) {
      material = this.getBufferMaterial$2(webglobject, null);
      customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
      if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || object.sortParticles === true || customAttributesDirty)
        this.setParticleBuffers$3(geometry, 35048, object);
      geometry.set$verticesNeedUpdate(false);
      geometry.set$colorsNeedUpdate(false);
      if (!(material.get$attributes() == null))
        for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;)
          t1.get$current().set$needsUpdate(false);
    }
  },
  updateObject$1$bailout: function(state0, webglobject, t1, geometry, t2, i) {
    switch (state0) {
      case 0:
        object = webglobject.get$object();
        geometry = webglobject.get$webglgeometry();
      default:
        var object, material, customAttributesDirty;
        if (state0 === 2 || state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isMesh)
          switch (state0) {
            case 0:
              t1 = object.geometry;
            default:
              if (state0 === 0 && typeof t1 === "object" && t1 !== null && !!t1.$isBufferGeometry) {
                if (geometry.get$verticesNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true)
                  this.setDirectBuffers$3(geometry, 35048, geometry !== true);
                geometry.set$verticesNeedUpdate(false);
                geometry.set$elementsNeedUpdate(false);
                geometry.set$uvsNeedUpdate(false);
                geometry.set$normalsNeedUpdate(false);
                geometry.set$colorsNeedUpdate(false);
                geometry.set$tangentsNeedUpdate(false);
              } else
                switch (state0) {
                  case 0:
                    t1 = $.length(geometry.get$geometryGroupsList());
                  case 1:
                    state0 = 0;
                    i = 0;
                    material = null;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.CONSTANT1.$lt(i, t1))
                              break L0;
                            t2 = geometry.get$geometryGroupsList();
                          case 2:
                            state0 = 0;
                            t2 = $.$$index(t2, i);
                            material = this.getBufferMaterial$2(webglobject, t2);
                            customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
                            if (geometry.get$verticesNeedUpdate() === true || geometry.get$morphTargetsNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true || customAttributesDirty)
                              this.setMeshBuffers$5(t2, webglobject, 35048, geometry.get$Dynamic() !== true, material);
                            ++i;
                        }
                    geometry.set$verticesNeedUpdate(false);
                    geometry.set$morphTargetsNeedUpdate(false);
                    geometry.set$elementsNeedUpdate(false);
                    geometry.set$uvsNeedUpdate(false);
                    geometry.set$normalsNeedUpdate(false);
                    geometry.set$colorsNeedUpdate(false);
                    geometry.set$tangentsNeedUpdate(false);
                    if (!(material.get$attributes() == null))
                      for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;)
                        t1.get$current().set$needsUpdate(false);
                }
          }
        else if (typeof object === "object" && object !== null && !!object.$isRibbon) {
          if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true)
            this.setRibbonBuffers$2(geometry, 35048);
          geometry.set$verticesNeedUpdate(false);
          geometry.set$colorsNeedUpdate(false);
        } else if (typeof object === "object" && object !== null && !!object.$isLine) {
          material = this.getBufferMaterial$2(webglobject, null);
          customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
          if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || customAttributesDirty)
            this.setLineBuffers$2(geometry, 35048);
          geometry.set$verticesNeedUpdate(false);
          geometry.set$colorsNeedUpdate(false);
          if (!(material.get$attributes() == null))
            for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;)
              t1.get$current().set$needsUpdate(false);
        } else if (typeof object === "object" && object !== null && !!object.$isParticleSystem) {
          material = this.getBufferMaterial$2(webglobject, null);
          customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
          if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || object.sortParticles === true || customAttributesDirty)
            this.setParticleBuffers$3(geometry, 35048, object);
          geometry.set$verticesNeedUpdate(false);
          geometry.set$colorsNeedUpdate(false);
          if (!(material.get$attributes() == null))
            for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;)
              t1.get$current().set$needsUpdate(false);
        }
    }
  },
  areCustomAttributesDirty$1: function(material) {
    var t1;
    for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;)
      if (t1.get$current().get$needsUpdate() === true)
        return true;
    return false;
  },
  removeObject$2: function(object, scene) {
    var webglobject = $.WebGLObject_WebGLObject(object, null, null, true, null, 0);
    if (typeof object === "object" && object !== null && !!object.$isMesh || typeof object === "object" && object !== null && !!object.$isParticleSystem || typeof object === "object" && object !== null && !!object.$isRibbon || typeof object === "object" && object !== null && !!object.$isLine)
      this.removeInstances$2($.$$index(scene, "__webglObjects"), object);
    else if (typeof object === "object" && object !== null && !!object.$isSprite)
      this.removeInstancesDirect$2($.$$index(scene, "__webglSprites"), object);
    else if (typeof object === "object" && object !== null && !!object.$isLensFlare)
      this.removeInstancesDirect$2($.$$index(scene, "__webglFlares"), object);
    else if (typeof object === "object" && object !== null && !!object.$isImmediateRenderObject || !($.$$index(object, "immediateRenderCallback") == null))
      this.removeInstances$2($.$$index(scene, "__webglObjectsImmediate"), object);
    webglobject.set$__webglActive(false);
  },
  removeInstances$2: function(objlist, object) {
    var t1, o;
    if (typeof objlist !== "string" && (typeof objlist !== "object" || objlist === null || objlist.constructor !== Array && !objlist.$isJavaScriptIndexingBehavior()))
      return this.removeInstances$2$bailout(1, objlist, object);
    for (t1 = $.getInterceptor$JSStringJSArray(objlist), o = objlist.length - 1; o >= 0; --o) {
      if (o >= objlist.length)
        throw $.ioore(o);
      if ($.$$eq(objlist[o].get$object(), object) === true)
        t1.removeRange$2(objlist, o, 1);
    }
  },
  removeInstances$2$bailout: function(state0, objlist, object, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(objlist);
        t2 = $.$$sub(t1.get$length(objlist), 1);
      case 2:
        var o;
        state0 = 0;
        o = t2;
        for (; t2 = $.getInterceptor$JSNumber(o), t2.$ge(o, 0) === true; o = t2.$sub(o, 1))
          if ($.$$eq(t1.$index(objlist, o).get$object(), object) === true)
            t1.removeRange$2(objlist, o, 1);
    }
  },
  removeInstancesDirect$2: function(objlist, object) {
    var t1, o, t2;
    if (typeof objlist !== "string" && (typeof objlist !== "object" || objlist === null || objlist.constructor !== Array && !objlist.$isJavaScriptIndexingBehavior()))
      return this.removeInstancesDirect$2$bailout(1, objlist, object);
    for (t1 = $.getInterceptor$JSStringJSArray(objlist), o = objlist.length - 1; o >= 0; --o) {
      if (o >= objlist.length)
        throw $.ioore(o);
      t2 = objlist[o];
      if (t2 == null ? object == null : t2 === object)
        t1.removeRange$2(objlist, o, 1);
    }
  },
  removeInstancesDirect$2$bailout: function(state0, objlist, object, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(objlist);
        t2 = $.$$sub(t1.get$length(objlist), 1);
      case 2:
        var o, t3;
        state0 = 0;
        o = t2;
        for (; t2 = $.getInterceptor$JSNumber(o), t2.$ge(o, 0) === true; o = t2.$sub(o, 1)) {
          t3 = t1.$index(objlist, o);
          if (t3 == null ? object == null : t3 === object)
            t1.removeRange$2(objlist, o, 1);
        }
    }
  },
  initMaterial$4: function(material, lights, fog, webglobject) {
    var object, shaderID, maxLightCount, maxShadows, maxBones, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, attributes, i, id;
    object = webglobject.get$object();
    if (material.get$isMeshDepthMaterial() === true)
      shaderID = "depth";
    else if (material.get$isMeshNormalMaterial() === true)
      shaderID = "normal";
    else if (material.get$isMeshBasicMaterial() === true)
      shaderID = "basic";
    else if (material.get$isMeshLambertMaterial() === true)
      shaderID = "lambert";
    else if (material.get$isMeshPhongMaterial() === true)
      shaderID = "phong";
    else if (material.get$isLineBasicMaterial() === true)
      shaderID = "basic";
    else
      shaderID = material.get$isParticleBasicMaterial() === true ? "particle_basic" : null;
    if (!(shaderID == null))
      this.setMaterialShaders$2(material, $.$$index($.ShaderLib(), shaderID));
    maxLightCount = this.allocateLights$1(lights);
    maxShadows = this.allocateShadows$1(lights);
    maxBones = this.allocateBones$1(object);
    t1 = material.get$fragmentShader();
    t2 = material.get$vertexShader();
    t3 = material.get$uniforms();
    t4 = material.get$attributes();
    t5 = material.get$map();
    t6 = material.get$envMap();
    t7 = material.get$lightMap();
    t8 = material.get$bumpMap();
    t9 = material.get$specularMap();
    t10 = material.get$vertexColors();
    t11 = material.get$fog();
    t12 = material.get$sizeAttenuation();
    t13 = material.get$skinning();
    t14 = this.supportsBoneTextures === true && !(object == null) && typeof object === "object" && object !== null && !!object.$isSkinnedMesh && object.useVertexTexture === true;
    t15 = !(object == null);
    t16 = t15 && typeof object === "object" && object !== null && !!object.$isSkinnedMesh ? $.propertyTypeCast(object, "$isSkinnedMesh").get$boneTextureWidth() : null;
    t15 = t15 && typeof object === "object" && object !== null && !!object.$isSkinnedMesh ? $.propertyTypeCast(object, "$isSkinnedMesh").get$boneTextureHeight() : null;
    t17 = material.get$morphTargets();
    t18 = material.get$morphNormals();
    t19 = this.maxMorphTargets;
    t20 = this.maxMorphNormals;
    t21 = $.getInterceptor$JSStringJSArray(maxLightCount);
    t22 = t21.$index(maxLightCount, "directional");
    t23 = t21.$index(maxLightCount, "point");
    t21 = t21.$index(maxLightCount, "spot");
    t24 = this.shadowMapEnabled && object.get$receiveShadow() === true;
    t25 = this.shadowMapSoft;
    t26 = this.shadowMapDebug;
    t27 = this.shadowMapCascade;
    t28 = material.get$alphaTest();
    t29 = material.get$metal();
    t30 = material.get$perPixel();
    t31 = material.get$wrapAround();
    material.set$program(this.buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround(shaderID, t1, t2, t3, t4, t28, t15, t16, t8, $.$$eq(material.get$side(), 2), t6, fog, t7, t5, maxBones, t22, t20, t19, t23, maxShadows, t21, t29, t18, t17, t30, t27, t26, t24, t25, t12, t13, t9, t11, t14, t10, t31));
    attributes = material.get$program().get$attributes();
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.initMaterial$4$bailout(1, material, attributes, t19, t20);
    throw $.iae("position");
    if ("position" < 0 || "position" >= attributes.length)
      throw $.ioore("position");
    if ($.$$ge(attributes.position, 0) === true) {
      t1 = this._gl;
      if ("position" >= attributes.length)
        throw $.ioore("position");
      t1.enableVertexAttribArray$1(attributes.position);
    }
    throw $.iae("color");
    if ("color" < 0 || "color" >= attributes.length)
      throw $.ioore("color");
    if ($.$$ge(attributes.color, 0) === true) {
      t1 = this._gl;
      if ("color" >= attributes.length)
        throw $.ioore("color");
      t1.enableVertexAttribArray$1(attributes.color);
    }
    throw $.iae("normal");
    if ("normal" < 0 || "normal" >= attributes.length)
      throw $.ioore("normal");
    if ($.$$ge(attributes.normal, 0) === true) {
      t1 = this._gl;
      if ("normal" >= attributes.length)
        throw $.ioore("normal");
      t1.enableVertexAttribArray$1(attributes.normal);
    }
    throw $.iae("tangent");
    if ("tangent" < 0 || "tangent" >= attributes.length)
      throw $.ioore("tangent");
    if ($.$$ge(attributes.tangent, 0) === true) {
      t1 = this._gl;
      if ("tangent" >= attributes.length)
        throw $.ioore("tangent");
      t1.enableVertexAttribArray$1(attributes.tangent);
    }
    if (material.get$skinning() === true) {
      throw $.iae("skinVertexA");
      if ("skinVertexA" < 0 || "skinVertexA" >= attributes.length)
        throw $.ioore("skinVertexA");
      if ($.$$ge(attributes.skinVertexA, 0) === true) {
        throw $.iae("skinVertexB");
        if ("skinVertexB" < 0 || "skinVertexB" >= attributes.length)
          throw $.ioore("skinVertexB");
        if ($.$$ge(attributes.skinVertexB, 0) === true) {
          throw $.iae("skinIndex");
          if ("skinIndex" < 0 || "skinIndex" >= attributes.length)
            throw $.ioore("skinIndex");
          if ($.$$ge(attributes.skinIndex, 0) === true) {
            throw $.iae("skinWeight");
            if ("skinWeight" < 0 || "skinWeight" >= attributes.length)
              throw $.ioore("skinWeight");
            t1 = $.$$ge(attributes.skinWeight, 0) === true;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1) {
      t1 = this._gl;
      throw $.iae("skinVertexA");
      if ("skinVertexA" < 0 || "skinVertexA" >= attributes.length)
        throw $.ioore("skinVertexA");
      t1.enableVertexAttribArray$1(attributes.skinVertexA);
      t1 = this._gl;
      throw $.iae("skinVertexB");
      if ("skinVertexB" < 0 || "skinVertexB" >= attributes.length)
        throw $.ioore("skinVertexB");
      t1.enableVertexAttribArray$1(attributes.skinVertexB);
      t1 = this._gl;
      throw $.iae("skinIndex");
      if ("skinIndex" < 0 || "skinIndex" >= attributes.length)
        throw $.ioore("skinIndex");
      t1.enableVertexAttribArray$1(attributes.skinIndex);
      t1 = this._gl;
      throw $.iae("skinWeight");
      if ("skinWeight" < 0 || "skinWeight" >= attributes.length)
        throw $.ioore("skinWeight");
      t1.enableVertexAttribArray$1(attributes.skinWeight);
    }
    if (!(material.get$attributes() == null))
      for (t1 = $.iterator(material.get$attributes()); t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= attributes.length)
          throw $.ioore(t2);
        t3 = attributes[t2];
        if (!(t3 == null) && $.$$ge(t3, 0) === true) {
          t3 = this._gl;
          if (t2 >= attributes.length)
            throw $.ioore(t2);
          t3.enableVertexAttribArray$1(attributes[t2]);
        }
      }
    if (material.get$morphTargets() === true) {
      material.set$numSupportedMorphTargets(0);
      for (i = 0; i < t19; ++i) {
        id = "morphTarget" + $.S(i);
        if (id !== (id | 0))
          throw $.iae(id);
        if (id < 0 || id >= attributes.length)
          throw $.ioore(id);
        if ($.$$ge(attributes[id], 0) === true) {
          t1 = this._gl;
          if (id >= attributes.length)
            throw $.ioore(id);
          t1.enableVertexAttribArray$1(attributes[id]);
          material.set$numSupportedMorphTargets($.$$add(material.get$numSupportedMorphTargets(), 1));
        }
      }
    }
    if (material.get$morphNormals() === true) {
      material.set$numSupportedMorphNormals(0);
      for (i = 0; i < t20; ++i) {
        id = "morphNormal" + $.S(i);
        if (id !== (id | 0))
          throw $.iae(id);
        if (id < 0 || id >= attributes.length)
          throw $.ioore(id);
        if ($.$$ge(attributes[id], 0) === true) {
          t1 = this._gl;
          if (id >= attributes.length)
            throw $.ioore(id);
          t1.enableVertexAttribArray$1(attributes[id]);
          material.set$numSupportedMorphNormals($.$$add(material.get$numSupportedMorphNormals(), 1));
        }
      }
    }
    material.set$uniformsList([]);
    $.forEach(material.get$uniforms(), new $.WebGLRenderer_initMaterial_anon(material));
  },
  initMaterial$4$bailout: function(state0, material, attributes, t19, t20) {
    var t1, t2, t3, i, id;
    t1 = $.getInterceptor$JSStringJSArray(attributes);
    if ($.$$ge(t1.$index(attributes, "position"), 0) === true)
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "position"));
    if ($.$$ge(t1.$index(attributes, "color"), 0) === true)
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "color"));
    if ($.$$ge(t1.$index(attributes, "normal"), 0) === true)
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "normal"));
    if ($.$$ge(t1.$index(attributes, "tangent"), 0) === true)
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "tangent"));
    if (material.get$skinning() === true && $.$$ge(t1.$index(attributes, "skinVertexA"), 0) === true && $.$$ge(t1.$index(attributes, "skinVertexB"), 0) === true && $.$$ge(t1.$index(attributes, "skinIndex"), 0) === true && $.$$ge(t1.$index(attributes, "skinWeight"), 0) === true) {
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "skinVertexA"));
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "skinVertexB"));
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "skinIndex"));
      this._gl.enableVertexAttribArray$1(t1.$index(attributes, "skinWeight"));
    }
    if (!(material.get$attributes() == null))
      for (t2 = $.iterator(material.get$attributes()); t2.moveNext$0() === true;) {
        t3 = t2.get$current();
        if (!(t1.$index(attributes, t3) == null) && $.$$ge(t1.$index(attributes, t3), 0) === true)
          this._gl.enableVertexAttribArray$1(t1.$index(attributes, t3));
      }
    if (material.get$morphTargets() === true) {
      material.set$numSupportedMorphTargets(0);
      for (i = 0; i < t19; ++i) {
        id = "morphTarget" + $.S(i);
        if ($.$$ge(t1.$index(attributes, id), 0) === true) {
          this._gl.enableVertexAttribArray$1(t1.$index(attributes, id));
          material.set$numSupportedMorphTargets($.$$add(material.get$numSupportedMorphTargets(), 1));
        }
      }
    }
    if (material.get$morphNormals() === true) {
      material.set$numSupportedMorphNormals(0);
      for (i = 0; i < t20; ++i) {
        id = "morphNormal" + $.S(i);
        if ($.$$ge(t1.$index(attributes, id), 0) === true) {
          this._gl.enableVertexAttribArray$1(t1.$index(attributes, id));
          material.set$numSupportedMorphNormals($.$$add(material.get$numSupportedMorphNormals(), 1));
        }
      }
    }
    material.set$uniformsList([]);
    $.forEach(material.get$uniforms(), new $.WebGLRenderer_initMaterial_anon(material));
  },
  setMaterialShaders$2: function(material, shaders) {
    var t1 = $.getInterceptor$JSStringJSArray(shaders);
    material.set$uniforms($.UniformsUtils_clone(t1.$index(shaders, "uniforms")));
    material.set$vertexShader(t1.$index(shaders, "vertexShader"));
    material.set$fragmentShader(t1.$index(shaders, "fragmentShader"));
  },
  setProgram$5: function(camera, lights, fog, material, object) {
    var program, p_uniforms, m_uniforms, t1, refreshMaterial, t2, position;
    if (material.get$needsUpdate() === true) {
      if (!(material.get$program() == null))
        this.deallocateMaterial$1(material);
      this.initMaterial$4(material, lights, fog, object);
      material.set$needsUpdate(false);
    }
    if (material.get$morphTargets() === true)
      if (object.get$__webglMorphTargetInfluences() == null)
        object.set$__webglMorphTargetInfluences($.Float32Array_Float32Array(this.maxMorphTargets));
    program = material.get$program();
    p_uniforms = program.get$uniforms();
    m_uniforms = material.get$uniforms();
    t1 = this._currentProgram;
    if (!(program == null ? t1 == null : program === t1)) {
      this._gl.useProgram$1(program.get$glProgram());
      this._currentProgram = program;
      refreshMaterial = true;
    } else
      refreshMaterial = false;
    if ($.$$eq(material.get$id(), this._currentMaterialId) !== true) {
      this._currentMaterialId = material.get$id();
      refreshMaterial = true;
    }
    if (!refreshMaterial) {
      t1 = this._currentCamera;
      t2 = !(camera == null ? t1 == null : camera === t1);
      t1 = t2;
    } else
      t1 = true;
    if (t1) {
      this._gl.uniformMatrix4fv$3($.$$index(p_uniforms, "projectionMatrix"), false, camera.get$_projectionMatrixArray());
      t1 = this._currentCamera;
      if (!(camera == null ? t1 == null : camera === t1))
        this._currentCamera = camera;
    }
    if (refreshMaterial) {
      if (!(fog == null) && material.get$fog() === true)
        this.refreshUniformsFog$2(m_uniforms, fog);
      if (material.get$isMeshPhongMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$lights() === true) {
        if (this._lightsNeedUpdate) {
          this.setupLights$2(program, lights);
          this._lightsNeedUpdate = false;
        }
        this.refreshUniformsLights$2(m_uniforms, this._lights);
      }
      if (material.get$isMeshBasicMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$isMeshPhongMaterial() === true)
        this.refreshUniformsCommon$2(m_uniforms, material);
      if (material.get$isLineBasicMaterial() === true)
        this.refreshUniformsLine$2(m_uniforms, material);
      else if (material.get$isParticleBasicMaterial() === true)
        this.refreshUniformsParticle$2(m_uniforms, material);
      else if (material.get$isMeshPhongMaterial() === true)
        this.refreshUniformsPhong$2(m_uniforms, material);
      else if (material.get$isMeshLambertMaterial() === true)
        this.refreshUniformsLambert$2(m_uniforms, material);
      else if (material.get$isMeshDepthMaterial() === true) {
        t1 = camera.get$near();
        t2 = $.getInterceptor$JSStringJSArray(m_uniforms);
        t2.$index(m_uniforms, "mNear").set$value(t1);
        t1 = camera.get$far();
        t2.$index(m_uniforms, "mFar").set$value(t1);
        t1 = material.get$opacity();
        t2.$index(m_uniforms, "opacity").set$value(t1);
      } else if (material.get$isMeshNormalMaterial() === true) {
        t1 = material.get$opacity();
        $.$$index(m_uniforms, "opacity").set$value(t1);
      }
      if (object.get$receiveShadow() === true && material.get$_shadowPass() !== true)
        this.refreshUniformsShadow$2(m_uniforms, lights);
      this.loadUniformsGeneric$2(program, material.get$uniformsList());
      if (material.get$isShaderMaterial() === true || material.get$isMeshPhongMaterial() === true || !(material.get$envMap() == null)) {
        t1 = $.getInterceptor$JSStringJSArray(p_uniforms);
        if (!(t1.$index(p_uniforms, "cameraPosition") == null)) {
          position = camera.get$matrixWorld().getPosition$0();
          this._gl.uniform3f$4(t1.$index(p_uniforms, "cameraPosition"), position.get$x(), position.get$y(), position.get$z());
        }
      }
      if (material.get$isMeshPhongMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$isShaderMaterial() === true || material.get$skinning() === true) {
        t1 = $.getInterceptor$JSStringJSArray(p_uniforms);
        if (!(t1.$index(p_uniforms, "viewMatrix") == null))
          this._gl.uniformMatrix4fv$3(t1.$index(p_uniforms, "viewMatrix"), false, camera.get$_viewMatrixArray());
      }
    }
    if (material.get$skinning() === true)
      if (this.supportsBoneTextures === true && object.get$useVertexTexture() === true) {
        t1 = $.getInterceptor$JSStringJSArray(p_uniforms);
        if (!(t1.$index(p_uniforms, "boneTexture") == null)) {
          this._gl.uniform1i$2(t1.$index(p_uniforms, "boneTexture"), 12);
          this.setTexture$2(object.get$boneTexture(), 12);
        }
      } else {
        t1 = $.getInterceptor$JSStringJSArray(p_uniforms);
        if (!(t1.$index(p_uniforms, "boneGlobalMatrices") == null))
          this._gl.uniformMatrix4fv$3(t1.$index(p_uniforms, "boneGlobalMatrices"), false, object.get$boneMatrices());
      }
    this.loadUniformsMatrices$2(p_uniforms, object);
    t1 = $.getInterceptor$JSStringJSArray(p_uniforms);
    if (!(t1.$index(p_uniforms, "modelMatrix") == null))
      this._gl.uniformMatrix4fv$3(t1.$index(p_uniforms, "modelMatrix"), false, object.get$matrixWorld().get$elements());
    return program;
  },
  refreshUniformsCommon$2: function(uniforms, material) {
    var t1, t2, t3, uvScaleMap, offset, repeat;
    t1 = material.get$opacity();
    t2 = $.getInterceptor$JSStringJSArray(uniforms);
    t2.$index(uniforms, "opacity").set$value(t1);
    t1 = this.gammaInput;
    if (t1)
      t2.$index(uniforms, "diffuse").get$value().copyGammaToLinear$1(material.get$color());
    else {
      t3 = material.get$color();
      t2.$index(uniforms, "diffuse").set$value(t3);
    }
    t3 = material.get$map();
    t2.$index(uniforms, "map").set$texture(t3);
    t3 = material.get$lightMap();
    t2.$index(uniforms, "lightMap").set$texture(t3);
    t3 = material.get$specularMap();
    t2.$index(uniforms, "specularMap").set$texture(t3);
    if (!(material.get$bumpMap() == null)) {
      t3 = material.get$bumpMap();
      t2.$index(uniforms, "bumpMap").set$texture(t3);
      t3 = material.get$bumpScale();
      t2.$index(uniforms, "bumpScale").set$value(t3);
    }
    if (!(material.get$map() == null))
      uvScaleMap = material.get$map();
    else if (!(material.get$specularMap() == null))
      uvScaleMap = material.get$specularMap();
    else
      uvScaleMap = !(material.get$bumpMap() == null) ? material.get$bumpMap() : null;
    if (!(uvScaleMap == null)) {
      offset = uvScaleMap.get$offset();
      repeat = uvScaleMap.get$repeat();
      t2.$index(uniforms, "offsetRepeat").get$value().setValues$4(offset.get$x(), offset.get$y(), repeat.get$x(), repeat.get$y());
    }
    t3 = material.get$envMap();
    t2.$index(uniforms, "envMap").set$texture(t3);
    t3 = material.get$envMap();
    t3 = typeof t3 === "object" && t3 !== null && !!t3.$isWebGLRenderTargetCube ? 1 : -1;
    t2.$index(uniforms, "flipEnvMap").set$value(t3);
    if (t1) {
      t1 = material.get$reflectivity();
      t2.$index(uniforms, "reflectivity").set$value(t1);
    } else {
      t1 = material.get$reflectivity();
      t2.$index(uniforms, "reflectivity").set$value(t1);
    }
    t1 = material.get$refractionRatio();
    t2.$index(uniforms, "refractionRatio").set$value(t1);
    t1 = material.get$combine();
    t2.$index(uniforms, "combine").set$value(t1);
    if (!(material.get$envMap() == null)) {
      t1 = material.get$envMap().get$mapping();
      t1 = typeof t1 === "object" && t1 !== null && !!t1.$isCubeRefractionMapping;
    } else
      t1 = false;
    t1 = t1 ? 1 : 0;
    t2.$index(uniforms, "useRefract").set$value(t1);
  },
  refreshUniformsLine$2: function(uniforms, material) {
    var t1, t2;
    t1 = material.get$color();
    t2 = $.getInterceptor$JSStringJSArray(uniforms);
    t2.$index(uniforms, "diffuse").set$value(t1);
    t1 = material.get$opacity();
    t2.$index(uniforms, "opacity").set$value(t1);
  },
  refreshUniformsParticle$2: function(uniforms, material) {
    var t1, t2;
    t1 = material.get$color();
    t2 = $.getInterceptor$JSStringJSArray(uniforms);
    t2.$index(uniforms, "psColor").set$value(t1);
    t1 = material.get$opacity();
    t2.$index(uniforms, "opacity").set$value(t1);
    t1 = material.get$size();
    t2.$index(uniforms, "size").set$value(t1);
    t1 = $.$$div(this.canvas.get$height(), 2);
    t2.$index(uniforms, "scale").set$value(t1);
    t1 = material.get$map();
    t2.$index(uniforms, "map").set$texture(t1);
  },
  refreshUniformsFog$2: function(uniforms, fog) {
    var t1, t2;
    t1 = fog.get$color();
    t2 = $.getInterceptor$JSStringJSArray(uniforms);
    t2.$index(uniforms, "fogColor").set$value(t1);
    if (typeof fog === "object" && fog !== null && !!fog.$isFogLinear) {
      t1 = fog.near;
      t2.$index(uniforms, "fogNear").set$value(t1);
      t1 = fog.far;
      t2.$index(uniforms, "fogFar").set$value(t1);
    } else if (typeof fog === "object" && fog !== null && !!fog.$isFogExp2) {
      t1 = fog.density;
      t2.$index(uniforms, "fogDensity").set$value(t1);
    }
  },
  refreshUniformsPhong$2: function(uniforms, material) {
    var t1, t2;
    t1 = material.get$shininess();
    t2 = $.getInterceptor$JSStringJSArray(uniforms);
    t2.$index(uniforms, "shininess").set$value(t1);
    if (this.gammaInput) {
      t2.$index(uniforms, "ambient").get$value().copyGammaToLinear$1(material.get$ambient());
      t2.$index(uniforms, "emissive").get$value().copyGammaToLinear$1(material.get$emissive());
      t2.$index(uniforms, "specular").get$value().copyGammaToLinear$1(material.get$specular());
    } else {
      t1 = material.get$ambient();
      t2.$index(uniforms, "ambient").set$value(t1);
      t1 = material.get$emissive();
      t2.$index(uniforms, "emissive").set$value(t1);
      t1 = material.get$specular();
      t2.$index(uniforms, "specular").set$value(t1);
    }
    if (material.get$wrapAround() === true)
      t2.$index(uniforms, "wrapRGB").get$value().copy$1(material.get$wrapRGB());
  },
  refreshUniformsLambert$2: function(uniforms, material) {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(uniforms);
    if (this.gammaInput) {
      t1.$index(uniforms, "ambient").get$value().copyGammaToLinear$1(material.get$ambient());
      t1.$index(uniforms, "emissive").get$value().copyGammaToLinear$1(material.get$emissive());
    } else {
      t2 = material.get$ambient();
      t1.$index(uniforms, "ambient").set$value(t2);
      t2 = material.get$emissive();
      t1.$index(uniforms, "emissive").set$value(t2);
    }
    if (material.get$wrapAround() === true)
      $.$$index(uniforms, "wrapRGB").get$value().copy$1(material.get$wrapRGB());
  },
  refreshUniformsLights$2: function(uniforms, lights) {
    var t1, t2, t3;
    t1 = $.getInterceptor$JSStringJSArray(lights);
    t2 = t1.$index(lights, "ambient");
    t3 = $.getInterceptor$JSStringJSArray(uniforms);
    t3.$index(uniforms, "ambientLightColor").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "directional"), "colors");
    t3.$index(uniforms, "directionalLightColor").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "directional"), "positions");
    t3.$index(uniforms, "directionalLightDirection").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "point"), "colors");
    t3.$index(uniforms, "pointLightColor").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "point"), "positions");
    t3.$index(uniforms, "pointLightPosition").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "point"), "distances");
    t3.$index(uniforms, "pointLightDistance").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "spot"), "colors");
    t3.$index(uniforms, "spotLightColor").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "spot"), "positions");
    t3.$index(uniforms, "spotLightPosition").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "spot"), "distances");
    t3.$index(uniforms, "spotLightDistance").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "spot"), "directions");
    t3.$index(uniforms, "spotLightDirection").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "spot"), "angles");
    t3.$index(uniforms, "spotLightAngle").set$value(t2);
    t2 = $.$$index(t1.$index(lights, "spot"), "exponents");
    t3.$index(uniforms, "spotLightExponent").set$value(t2);
  },
  refreshUniformsShadow$2: function(uniforms, lights) {
    var t1, il, j, i, light, t2;
    if (typeof lights !== "string" && (typeof lights !== "object" || lights === null || lights.constructor !== Array && !lights.$isJavaScriptIndexingBehavior()))
      return this.refreshUniformsShadow$2$bailout(1, uniforms, lights);
    t1 = $.getInterceptor$JSStringJSArray(uniforms);
    if (t1.$index(uniforms, "shadowMatrix") === true)
      for (il = lights.length, j = 0, i = 0; i < il; ++i) {
        if (i >= lights.length)
          throw $.ioore(i);
        light = lights[i];
        if (light.get$castShadow() !== true)
          continue;
        if (!(typeof light === "object" && light !== null && !!light.$isSpotLight))
          t2 = typeof light === "object" && light !== null && !!light.$isDirectionalLight && light.get$shadowCascade() !== true;
        else
          t2 = true;
        if (t2) {
          $.$$indexSet(t1.$index(uniforms, "shadowMap").get$texture(), j, light.get$shadowMap());
          $.$$indexSet(t1.$index(uniforms, "shadowMapSize").get$value(), j, light.get$shadowMapSize());
          $.$$indexSet(t1.$index(uniforms, "shadowMatrix").get$value(), j, light.get$shadowMatrix());
          $.$$indexSet(t1.$index(uniforms, "shadowDarkness").get$value(), j, light.get$shadowDarkness());
          $.$$indexSet(t1.$index(uniforms, "shadowBias").get$value(), j, light.get$shadowBias());
          ++j;
        }
      }
  },
  refreshUniformsShadow$2$bailout: function(state0, uniforms, lights, t2, il, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(uniforms);
      case 2:
        var j, i, light, t3;
        if (state0 === 2 || state0 === 0 && t1.$index(uniforms, "shadowMatrix") === true)
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$JSStringJSArray(lights);
              il = t2.get$length(lights);
            case 2:
              state0 = 0;
              j = 0;
              i = 0;
              for (; $.CONSTANT1.$lt(i, il); ++i) {
                light = t2.$index(lights, i);
                if (light.get$castShadow() !== true)
                  continue;
                if (!(typeof light === "object" && light !== null && !!light.$isSpotLight))
                  t3 = typeof light === "object" && light !== null && !!light.$isDirectionalLight && light.get$shadowCascade() !== true;
                else
                  t3 = true;
                if (t3) {
                  $.$$indexSet(t1.$index(uniforms, "shadowMap").get$texture(), j, light.get$shadowMap());
                  $.$$indexSet(t1.$index(uniforms, "shadowMapSize").get$value(), j, light.get$shadowMapSize());
                  $.$$indexSet(t1.$index(uniforms, "shadowMatrix").get$value(), j, light.get$shadowMatrix());
                  $.$$indexSet(t1.$index(uniforms, "shadowDarkness").get$value(), j, light.get$shadowDarkness());
                  $.$$indexSet(t1.$index(uniforms, "shadowBias").get$value(), j, light.get$shadowBias());
                  ++j;
                }
              }
          }
    }
  },
  loadUniformsMatrices$2: function(uniforms, object) {
    var t1 = $.getInterceptor$JSStringJSArray(uniforms);
    this._gl.uniformMatrix4fv$3(t1.$index(uniforms, "modelViewMatrix"), false, object.get$_modelViewMatrix().get$elements());
    if (!(t1.$index(uniforms, "normalMatrix") == null))
      this._gl.uniformMatrix3fv$3(t1.$index(uniforms, "normalMatrix"), false, object.get$_normalMatrix().get$elements());
  },
  loadUniformsGeneric$2: function(program, uniforms) {
    var t1, jl, uniform, type, texture, i, il, j, offset, value, t2, t3, t4, t5;
    if (typeof uniforms !== "string" && (typeof uniforms !== "object" || uniforms === null || uniforms.constructor !== Array && !uniforms.$isJavaScriptIndexingBehavior()))
      return this.loadUniformsGeneric$2$bailout(1, program, uniforms);
    t1 = $.getInterceptor$JSStringJSArray(uniforms);
    jl = uniforms.length;
    for (uniform = null, type = null, texture = null, i = null, il = null, j = 0, offset = null, value = null; j < jl; ++j) {
      t2 = program.get$uniforms();
      if (j >= uniforms.length)
        throw $.ioore(j);
      t2 = $.$$index(t2, $.$$index(uniforms[j], 1));
      if (t2 == null)
        continue;
      if (j >= uniforms.length)
        throw $.ioore(j);
      uniform = $.$$index(uniforms[j], 0);
      type = uniform.get$type();
      value = uniform.get$value();
      t3 = $.getInterceptor(type);
      if (t3.$eq(type, "i") === true)
        this._gl.uniform1i$2(t2, value);
      else if (t3.$eq(type, "f") === true)
        this._gl.uniform1f$2(t2, value);
      else if (t3.$eq(type, "v2") === true)
        this._gl.uniform2f$3(t2, value.get$x(), value.get$y());
      else if (t3.$eq(type, "v3") === true)
        this._gl.uniform3f$4(t2, value.get$x(), value.get$y(), value.get$z());
      else if (t3.$eq(type, "v4") === true)
        this._gl.uniform4f$5(t2, value.get$x(), value.get$y(), value.get$z(), value.get$w());
      else if (t3.$eq(type, "c") === true)
        this._gl.uniform3f$4(t2, value.get$r(), value.get$g(), value.get$b());
      else if (t3.$eq(type, "iv1") === true) {
        t3 = this._gl;
        t3.uniform1iv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Int32Array_Int32Array$fromList(value) : value);
      } else if (t3.$eq(type, "iv") === true) {
        t3 = this._gl;
        t3.uniform3iv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Int32Array_Int32Array$fromList(value) : value);
      } else if (t3.$eq(type, "fv1") === true) {
        t3 = this._gl;
        t3.uniform1fv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Float32Array_Float32Array$fromList(value) : value);
      } else if (t3.$eq(type, "fv") === true) {
        t3 = this._gl;
        t3.uniform3fv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Float32Array_Float32Array$fromList(value) : value);
      } else if (t3.$eq(type, "v2v") === true) {
        if (uniform.get$_array() == null) {
          t3 = $.length(value);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          uniform.set$_array($.Float32Array_Float32Array(2 * t3));
        }
        t3 = $.getInterceptor$JSStringJSArray(value);
        il = t3.get$length(value);
        for (i = 0; t4 = $.CONSTANT1.$lt(i, il), t5 = uniform.get$_array(), t4; ++i) {
          offset = i * 2;
          $.$$indexSet(t5, offset, t3.$index(value, i).get$x());
          $.$$indexSet(uniform.get$_array(), offset + 1, t3.$index(value, i).get$y());
        }
        this._gl.uniform2fv$2(t2, t5);
      } else if (t3.$eq(type, "v3v") === true) {
        if (uniform.get$_array() == null) {
          t3 = $.length(value);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          uniform.set$_array($.Float32Array_Float32Array(3 * t3));
        }
        t3 = $.getInterceptor$JSStringJSArray(value);
        il = t3.get$length(value);
        for (i = 0; t4 = $.CONSTANT1.$lt(i, il), t5 = uniform.get$_array(), t4; ++i) {
          offset = i * 3;
          $.$$indexSet(t5, offset, t3.$index(value, i).get$x());
          $.$$indexSet(uniform.get$_array(), offset + 1, t3.$index(value, i).get$y());
          $.$$indexSet(uniform.get$_array(), offset + 2, t3.$index(value, i).get$z());
        }
        this._gl.uniform3fv$2(t2, t5);
      } else if (t3.$eq(type, "v4v") === true) {
        if (uniform.get$_array() == null) {
          t3 = $.length(value);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          uniform.set$_array($.Float32Array_Float32Array(4 * t3));
        }
        t3 = $.getInterceptor$JSStringJSArray(value);
        il = t3.get$length(value);
        for (i = 0; t4 = $.CONSTANT1.$lt(i, il), t5 = uniform.get$_array(), t4; ++i) {
          offset = i * 4;
          $.$$indexSet(t5, offset, t3.$index(value, i).get$x());
          $.$$indexSet(uniform.get$_array(), offset + 1, t3.$index(value, i).get$y());
          $.$$indexSet(uniform.get$_array(), offset + 2, t3.$index(value, i).get$z());
          $.$$indexSet(uniform.get$_array(), offset + 3, t3.$index(value, i).get$w());
        }
        this._gl.uniform4fv$2(t2, t5);
      } else if (t3.$eq(type, "m4") === true) {
        if (uniform.get$_array() == null)
          uniform.set$_array($.Float32Array_Float32Array(16));
        value.flattenToArray$1(uniform.get$_array());
        this._gl.uniformMatrix4fv$3(t2, false, uniform.get$_array());
      } else if (t3.$eq(type, "m4v") === true) {
        if (uniform.get$_array() == null) {
          t3 = $.length(value);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          uniform.set$_array($.Float32Array_Float32Array(16 * t3));
        }
        t3 = $.getInterceptor$JSStringJSArray(value);
        il = t3.get$length(value);
        for (i = 0; $.CONSTANT1.$lt(i, il); ++i)
          t3.$index(value, i).flattenToArrayOffset$2(uniform.get$_array(), i * 16);
        this._gl.uniformMatrix4fv$3(t2, false, uniform.get$_array());
      } else if (t3.$eq(type, "t") === true) {
        this._gl.uniform1i$2(t2, value);
        texture = uniform.get$texture();
        if (texture == null)
          continue;
        t2 = texture.get$image();
        if ((typeof t2 === "object" && t2 !== null && !!t2.$isImageList || typeof t2 === "object" && t2 !== null && !!t2.$isWebGLImageList) && $.$$eq($.length(t2), 6) === true)
          this.setCubeTexture$2(texture, value);
        else if (typeof texture === "object" && texture !== null && !!texture.$isWebGLRenderTargetCube)
          this.setCubeTextureDynamic$2(texture, value);
        else
          this.setTexture$2(texture, value);
      } else if (t3.$eq(type, "tv") === true) {
        if (uniform.get$_array() == null) {
          uniform.set$_array([]);
          t3 = $.length(uniform.get$texture());
          if (typeof t3 !== "number")
            return this.loadUniformsGeneric$2$bailout(3, program, uniforms, t1, jl, t3, type, value, texture, j, offset, t2, uniform);
          for (t4 = $.getInterceptor$JSNumber(value), i = 0; i < t3; ++i)
            $.$$indexSet(uniform.get$_array(), i, t4.$add(value, i));
        }
        this._gl.uniform1iv$2(t2, uniform.get$_array());
        il = $.length(uniform.get$texture());
        for (i = 0; $.CONSTANT1.$lt(i, il); ++i) {
          texture = $.$$index(uniform.get$texture(), i);
          if (texture !== true)
            continue;
          this.setTexture$2(texture, $.$$index(uniform.get$_array(), i));
        }
      }
    }
  },
  loadUniformsGeneric$2$bailout: function(state0, program, uniforms, t1, jl, t3, type, value, texture, j, offset, t2, uniform) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(uniforms);
        jl = t1.get$length(uniforms);
      case 2:
        state0 = 0;
        uniform = null;
        type = null;
        texture = null;
        i = null;
        il = null;
        j = 0;
        offset = null;
        value = null;
      case 3:
        var i, il, t4, t5;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT1.$lt(j, jl))
                  break L0;
              case 3:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = $.$$index(program.get$uniforms(), $.$$index(t1.$index(uniforms, j), 1));
                      if (t2 == null)
                        break c$0;
                      uniform = $.$$index(t1.$index(uniforms, j), 0);
                      type = uniform.get$type();
                      value = uniform.get$value();
                      t3 = $.getInterceptor(type);
                    case 3:
                      if (state0 === 0 && t3.$eq(type, "i") === true)
                        this._gl.uniform1i$2(t2, value);
                      else
                        switch (state0) {
                          case 0:
                          case 3:
                            if (state0 === 0 && t3.$eq(type, "f") === true)
                              this._gl.uniform1f$2(t2, value);
                            else
                              switch (state0) {
                                case 0:
                                case 3:
                                  if (state0 === 0 && t3.$eq(type, "v2") === true)
                                    this._gl.uniform2f$3(t2, value.get$x(), value.get$y());
                                  else
                                    switch (state0) {
                                      case 0:
                                      case 3:
                                        if (state0 === 0 && t3.$eq(type, "v3") === true)
                                          this._gl.uniform3f$4(t2, value.get$x(), value.get$y(), value.get$z());
                                        else
                                          switch (state0) {
                                            case 0:
                                            case 3:
                                              if (state0 === 0 && t3.$eq(type, "v4") === true)
                                                this._gl.uniform4f$5(t2, value.get$x(), value.get$y(), value.get$z(), value.get$w());
                                              else
                                                switch (state0) {
                                                  case 0:
                                                  case 3:
                                                    if (state0 === 0 && t3.$eq(type, "c") === true)
                                                      this._gl.uniform3f$4(t2, value.get$r(), value.get$g(), value.get$b());
                                                    else
                                                      switch (state0) {
                                                        case 0:
                                                        case 3:
                                                          if (state0 === 0 && t3.$eq(type, "iv1") === true) {
                                                            t3 = this._gl;
                                                            t3.uniform1iv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Int32Array_Int32Array$fromList(value) : value);
                                                          } else
                                                            switch (state0) {
                                                              case 0:
                                                              case 3:
                                                                if (state0 === 0 && t3.$eq(type, "iv") === true) {
                                                                  t3 = this._gl;
                                                                  t3.uniform3iv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Int32Array_Int32Array$fromList(value) : value);
                                                                } else
                                                                  switch (state0) {
                                                                    case 0:
                                                                    case 3:
                                                                      if (state0 === 0 && t3.$eq(type, "fv1") === true) {
                                                                        t3 = this._gl;
                                                                        t3.uniform1fv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Float32Array_Float32Array$fromList(value) : value);
                                                                      } else
                                                                        switch (state0) {
                                                                          case 0:
                                                                          case 3:
                                                                            if (state0 === 0 && t3.$eq(type, "fv") === true) {
                                                                              t3 = this._gl;
                                                                              t3.uniform3fv$2(t2, typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()) ? $.Float32Array_Float32Array$fromList(value) : value);
                                                                            } else
                                                                              switch (state0) {
                                                                                case 0:
                                                                                case 3:
                                                                                  if (state0 === 0 && t3.$eq(type, "v2v") === true) {
                                                                                    if (uniform.get$_array() == null) {
                                                                                      t3 = $.length(value);
                                                                                      if (typeof t3 !== "number")
                                                                                        throw $.iae(t3);
                                                                                      uniform.set$_array($.Float32Array_Float32Array(2 * t3));
                                                                                    }
                                                                                    t3 = $.getInterceptor$JSStringJSArray(value);
                                                                                    il = t3.get$length(value);
                                                                                    for (i = 0; t4 = $.CONSTANT1.$lt(i, il), t5 = uniform.get$_array(), t4; ++i) {
                                                                                      offset = i * 2;
                                                                                      $.$$indexSet(t5, offset, t3.$index(value, i).get$x());
                                                                                      $.$$indexSet(uniform.get$_array(), offset + 1, t3.$index(value, i).get$y());
                                                                                    }
                                                                                    this._gl.uniform2fv$2(t2, t5);
                                                                                  } else
                                                                                    switch (state0) {
                                                                                      case 0:
                                                                                      case 3:
                                                                                        if (state0 === 0 && t3.$eq(type, "v3v") === true) {
                                                                                          if (uniform.get$_array() == null) {
                                                                                            t3 = $.length(value);
                                                                                            if (typeof t3 !== "number")
                                                                                              throw $.iae(t3);
                                                                                            uniform.set$_array($.Float32Array_Float32Array(3 * t3));
                                                                                          }
                                                                                          t3 = $.getInterceptor$JSStringJSArray(value);
                                                                                          il = t3.get$length(value);
                                                                                          for (i = 0; t4 = $.CONSTANT1.$lt(i, il), t5 = uniform.get$_array(), t4; ++i) {
                                                                                            offset = i * 3;
                                                                                            $.$$indexSet(t5, offset, t3.$index(value, i).get$x());
                                                                                            $.$$indexSet(uniform.get$_array(), offset + 1, t3.$index(value, i).get$y());
                                                                                            $.$$indexSet(uniform.get$_array(), offset + 2, t3.$index(value, i).get$z());
                                                                                          }
                                                                                          this._gl.uniform3fv$2(t2, t5);
                                                                                        } else
                                                                                          switch (state0) {
                                                                                            case 0:
                                                                                            case 3:
                                                                                              if (state0 === 0 && t3.$eq(type, "v4v") === true) {
                                                                                                if (uniform.get$_array() == null) {
                                                                                                  t3 = $.length(value);
                                                                                                  if (typeof t3 !== "number")
                                                                                                    throw $.iae(t3);
                                                                                                  uniform.set$_array($.Float32Array_Float32Array(4 * t3));
                                                                                                }
                                                                                                t3 = $.getInterceptor$JSStringJSArray(value);
                                                                                                il = t3.get$length(value);
                                                                                                for (i = 0; t4 = $.CONSTANT1.$lt(i, il), t5 = uniform.get$_array(), t4; ++i) {
                                                                                                  offset = i * 4;
                                                                                                  $.$$indexSet(t5, offset, t3.$index(value, i).get$x());
                                                                                                  $.$$indexSet(uniform.get$_array(), offset + 1, t3.$index(value, i).get$y());
                                                                                                  $.$$indexSet(uniform.get$_array(), offset + 2, t3.$index(value, i).get$z());
                                                                                                  $.$$indexSet(uniform.get$_array(), offset + 3, t3.$index(value, i).get$w());
                                                                                                }
                                                                                                this._gl.uniform4fv$2(t2, t5);
                                                                                              } else
                                                                                                switch (state0) {
                                                                                                  case 0:
                                                                                                  case 3:
                                                                                                    if (state0 === 0 && t3.$eq(type, "m4") === true) {
                                                                                                      if (uniform.get$_array() == null)
                                                                                                        uniform.set$_array($.Float32Array_Float32Array(16));
                                                                                                      value.flattenToArray$1(uniform.get$_array());
                                                                                                      this._gl.uniformMatrix4fv$3(t2, false, uniform.get$_array());
                                                                                                    } else
                                                                                                      switch (state0) {
                                                                                                        case 0:
                                                                                                        case 3:
                                                                                                          if (state0 === 0 && t3.$eq(type, "m4v") === true) {
                                                                                                            if (uniform.get$_array() == null) {
                                                                                                              t3 = $.length(value);
                                                                                                              if (typeof t3 !== "number")
                                                                                                                throw $.iae(t3);
                                                                                                              uniform.set$_array($.Float32Array_Float32Array(16 * t3));
                                                                                                            }
                                                                                                            t3 = $.getInterceptor$JSStringJSArray(value);
                                                                                                            il = t3.get$length(value);
                                                                                                            for (i = 0; $.CONSTANT1.$lt(i, il); ++i)
                                                                                                              t3.$index(value, i).flattenToArrayOffset$2(uniform.get$_array(), i * 16);
                                                                                                            this._gl.uniformMatrix4fv$3(t2, false, uniform.get$_array());
                                                                                                          } else
                                                                                                            switch (state0) {
                                                                                                              case 0:
                                                                                                              case 3:
                                                                                                                if (state0 === 0 && t3.$eq(type, "t") === true) {
                                                                                                                  this._gl.uniform1i$2(t2, value);
                                                                                                                  texture = uniform.get$texture();
                                                                                                                  if (texture == null)
                                                                                                                    break c$0;
                                                                                                                  t2 = texture.get$image();
                                                                                                                  if ((typeof t2 === "object" && t2 !== null && !!t2.$isImageList || typeof t2 === "object" && t2 !== null && !!t2.$isWebGLImageList) && $.$$eq($.length(t2), 6) === true)
                                                                                                                    this.setCubeTexture$2(texture, value);
                                                                                                                  else if (typeof texture === "object" && texture !== null && !!texture.$isWebGLRenderTargetCube)
                                                                                                                    this.setCubeTextureDynamic$2(texture, value);
                                                                                                                  else
                                                                                                                    this.setTexture$2(texture, value);
                                                                                                                } else
                                                                                                                  switch (state0) {
                                                                                                                    case 0:
                                                                                                                    case 3:
                                                                                                                      if (state0 === 3 || state0 === 0 && t3.$eq(type, "tv") === true)
                                                                                                                        switch (state0) {
                                                                                                                          case 0:
                                                                                                                          case 3:
                                                                                                                            if (state0 === 3 || state0 === 0 && uniform.get$_array() == null)
                                                                                                                              switch (state0) {
                                                                                                                                case 0:
                                                                                                                                  uniform.set$_array([]);
                                                                                                                                  t3 = $.length(uniform.get$texture());
                                                                                                                                case 3:
                                                                                                                                  state0 = 0;
                                                                                                                                  for (t4 = $.getInterceptor$JSNumber(value), i = 0; $.CONSTANT1.$lt(i, t3); ++i)
                                                                                                                                    $.$$indexSet(uniform.get$_array(), i, t4.$add(value, i));
                                                                                                                              }
                                                                                                                            this._gl.uniform1iv$2(t2, uniform.get$_array());
                                                                                                                            il = $.length(uniform.get$texture());
                                                                                                                            for (i = 0; $.CONSTANT1.$lt(i, il); ++i) {
                                                                                                                              texture = $.$$index(uniform.get$texture(), i);
                                                                                                                              if (texture !== true)
                                                                                                                                continue;
                                                                                                                              this.setTexture$2(texture, $.$$index(uniform.get$_array(), i));
                                                                                                                            }
                                                                                                                        }
                                                                                                                  }
                                                                                                            }
                                                                                                      }
                                                                                                }
                                                                                          }
                                                                                    }
                                                                              }
                                                                        }
                                                                  }
                                                            }
                                                      }
                                                }
                                          }
                                    }
                              }
                        }
                  }
                }
                ++j;
            }
    }
  },
  setupMatrices$2: function(object, camera) {
    object.get$_modelViewMatrix().multiply$2(camera.get$matrixWorldInverse(), object.get$matrixWorld());
    object.get$_normalMatrix().getInverse$1(object.get$_modelViewMatrix());
    object.get$_normalMatrix().transpose$0();
  },
  setupLights$2: function(program, lights) {
    var zlights, t1, t2, t4, t6, t8, t10, t12, t14, t16, t18, t20, t22, ll, t3, t5, pdistances, l, r, g, color, position, b, intensity, distance, dlength, plength, slength, doffset, poffset, soffset, light, t7, t9, t11, t13, t15, slength0;
    if (typeof lights !== "string" && (typeof lights !== "object" || lights === null || lights.constructor !== Array && !lights.$isJavaScriptIndexingBehavior()))
      return this.setupLights$2$bailout(1, lights);
    zlights = this._lights;
    t1 = $.getInterceptor$JSStringJSArray(zlights);
    t2 = $.$$index(t1.$index(zlights, "directional"), "colors");
    if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(2, lights, t1, t2, zlights);
    t4 = $.$$index(t1.$index(zlights, "directional"), "positions");
    if (typeof t4 !== "object" || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(3, lights, t1, t2, zlights, t4);
    t6 = $.$$index(t1.$index(zlights, "point"), "colors");
    if (typeof t6 !== "object" || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(4, lights, t1, t2, zlights, t4, t6);
    t8 = $.$$index(t1.$index(zlights, "point"), "positions");
    if (typeof t8 !== "object" || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(5, lights, t1, t2, zlights, t4, t6, t8);
    t10 = $.$$index(t1.$index(zlights, "point"), "distances");
    if (typeof t10 !== "object" || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(6, lights, t1, t2, zlights, t4, t6, t8, t10);
    t12 = $.$$index(t1.$index(zlights, "spot"), "colors");
    if (typeof t12 !== "object" || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(7, lights, t1, t2, zlights, t4, t6, t8, t10, t12);
    t14 = $.$$index(t1.$index(zlights, "spot"), "positions");
    if (typeof t14 !== "object" || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(8, lights, t1, t2, zlights, t4, t6, t8, t10, t12, t14);
    t16 = $.$$index(t1.$index(zlights, "spot"), "distances");
    if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(9, lights, t1, t2, zlights, t4, t6, t8, t10, t12, t14, t16);
    t18 = $.$$index(t1.$index(zlights, "spot"), "directions");
    if (typeof t18 !== "object" || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(10, lights, t1, t2, zlights, t4, t6, t8, t10, t12, t14, t16, t18);
    t20 = $.$$index(t1.$index(zlights, "spot"), "angles");
    if (typeof t20 !== "object" || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(11, lights, t1, t2, zlights, t4, t6, t8, t10, t12, t14, t16, t18, t20);
    t22 = $.$$index(t1.$index(zlights, "spot"), "exponents");
    if (typeof t22 !== "object" || t22 === null || (t22.constructor !== Array || !!t22.immutable$list) && !t22.$isJavaScriptIndexingBehavior())
      return this.setupLights$2$bailout(12, lights, t1, t2, zlights, t4, t6, t8, t10, t12, t14, t16, t18, t20, t22);
    ll = lights.length;
    for (t3 = this.gammaInput, t5 = this._direction, pdistances = t10, l = 0, r = 0, g = 0, color = null, position = null, b = 0, intensity = null, distance = null, dlength = 0, plength = 0, slength = 0, doffset = 0, poffset = 0, soffset = 0; l < ll; ++l) {
      if (l >= lights.length)
        throw $.ioore(l);
      light = lights[l];
      t7 = typeof light === "object" && light !== null && !!light.$isDirectionalLight;
      t9 = !t7;
      if ((t7 || typeof light === "object" && light !== null && !!light.$isSpotLight) && light.get$onlyShadow() === true || light.get$visible() !== true)
        continue;
      color = light.get$color();
      if (t7 || typeof light === "object" && light !== null && !!light.$isSpotLight || typeof light === "object" && light !== null && !!light.$isPointLight) {
        intensity = light.get$intensity();
        distance = light.get$distance();
      }
      if (typeof light === "object" && light !== null && !!light.$isAmbientLight) {
        t7 = color.get$r();
        if (t3) {
          t7 = $.$$mul(t7, t7);
          if (typeof t7 !== "number")
            throw $.iae(t7);
          r += t7;
          t7 = color.get$g();
          t7 = $.$$mul(t7, t7);
          if (typeof t7 !== "number")
            throw $.iae(t7);
          g += t7;
          t7 = color.get$b();
          t7 = $.$$mul(t7, t7);
          if (typeof t7 !== "number")
            throw $.iae(t7);
          b += t7;
        } else {
          if (typeof t7 !== "number")
            throw $.iae(t7);
          r += t7;
          t7 = color.get$g();
          if (typeof t7 !== "number")
            throw $.iae(t7);
          g += t7;
          t7 = color.get$b();
          if (typeof t7 !== "number")
            throw $.iae(t7);
          b += t7;
        }
      } else if (t7) {
        doffset = dlength * 3;
        t7 = doffset + 3;
        $.CONSTANT0.set$length(t2, t7);
        $.CONSTANT0.set$length(t4, t7);
        t7 = doffset + 2;
        t9 = color.get$r();
        t10 = doffset + 1;
        if (t3) {
          t11 = $.$$mul($.$$mul($.$$mul(t9, t9), intensity), intensity);
          if (doffset < 0 || doffset >= t2.length)
            throw $.ioore(doffset);
          t2[doffset] = t11;
          t11 = color.get$g();
          t13 = $.$$mul($.$$mul($.$$mul(t11, t11), intensity), intensity);
          if (t10 < 0 || t10 >= t2.length)
            throw $.ioore(t10);
          t2[t10] = t13;
          t13 = color.get$b();
          t15 = $.$$mul($.$$mul($.$$mul(t13, t13), intensity), intensity);
          if (t7 < 0 || t7 >= t2.length)
            throw $.ioore(t7);
          t2[t7] = t15;
        } else {
          t9 = $.$$mul(t9, intensity);
          if (doffset < 0 || doffset >= t2.length)
            throw $.ioore(doffset);
          t2[doffset] = t9;
          t9 = $.$$mul(color.get$g(), intensity);
          if (t10 < 0 || t10 >= t2.length)
            throw $.ioore(t10);
          t2[t10] = t9;
          t9 = $.$$mul(color.get$b(), intensity);
          if (t7 < 0 || t7 >= t2.length)
            throw $.ioore(t7);
          t2[t7] = t9;
        }
        t5.copy$1(light.matrixWorld.getPosition$0());
        t5.subSelf$1(light.target.matrixWorld.getPosition$0());
        t5.normalize$0();
        t9 = t5.x;
        t11 = t4.length;
        if (doffset < 0 || doffset >= t11)
          throw $.ioore(doffset);
        t4[doffset] = t9;
        t9 = t5.y;
        if (t10 < 0 || t10 >= t11)
          throw $.ioore(t10);
        t4[t10] = t9;
        t9 = t5.z;
        if (t7 < 0 || t7 >= t11)
          throw $.ioore(t7);
        t4[t7] = t9;
        ++dlength;
      } else if (typeof light === "object" && light !== null && !!light.$isPointLight) {
        poffset = plength * 3;
        t7 = poffset + 3;
        $.CONSTANT0.set$length(t6, t7);
        $.CONSTANT0.set$length(t8, t7);
        t7 = poffset + 2;
        t9 = color.get$r();
        t10 = poffset + 1;
        if (t3) {
          t11 = $.$$mul($.$$mul($.$$mul(t9, t9), intensity), intensity);
          if (poffset < 0 || poffset >= t6.length)
            throw $.ioore(poffset);
          t6[poffset] = t11;
          t11 = color.get$g();
          t13 = $.$$mul($.$$mul($.$$mul(t11, t11), intensity), intensity);
          if (t10 < 0 || t10 >= t6.length)
            throw $.ioore(t10);
          t6[t10] = t13;
          t13 = color.get$b();
          t15 = $.$$mul($.$$mul($.$$mul(t13, t13), intensity), intensity);
          if (t7 < 0 || t7 >= t6.length)
            throw $.ioore(t7);
          t6[t7] = t15;
        } else {
          t9 = $.$$mul(t9, intensity);
          if (poffset < 0 || poffset >= t6.length)
            throw $.ioore(poffset);
          t6[poffset] = t9;
          t9 = $.$$mul(color.get$g(), intensity);
          if (t10 < 0 || t10 >= t6.length)
            throw $.ioore(t10);
          t6[t10] = t9;
          t9 = $.$$mul(color.get$b(), intensity);
          if (t7 < 0 || t7 >= t6.length)
            throw $.ioore(t7);
          t6[t7] = t9;
        }
        position = light.matrixWorld.getPosition$0();
        t9 = position.get$x();
        t11 = t8.length;
        if (poffset < 0 || poffset >= t11)
          throw $.ioore(poffset);
        t8[poffset] = t9;
        t9 = position.get$y();
        if (t10 < 0 || t10 >= t11)
          throw $.ioore(t10);
        t8[t10] = t9;
        t9 = position.get$z();
        if (t7 < 0 || t7 >= t11)
          throw $.ioore(t7);
        t8[t7] = t9;
        if (pdistances.length === 0)
          $.CONSTANT0.add$1(pdistances, 0);
        if (plength >= pdistances.length)
          throw $.ioore(plength);
        pdistances[plength] = distance;
        ++plength;
      } else if (typeof light === "object" && light !== null && !!light.$isSpotLight) {
        soffset = slength * 3;
        t7 = soffset + 3;
        $.CONSTANT0.set$length(t12, t7);
        $.CONSTANT0.set$length(t14, t7);
        $.CONSTANT0.set$length(t18, t7);
        slength0 = slength + 1;
        $.CONSTANT0.set$length(t16, slength0);
        t7 = soffset + 2;
        t9 = color.get$r();
        t10 = soffset + 1;
        if (t3) {
          t11 = $.$$mul($.$$mul($.$$mul(t9, t9), intensity), intensity);
          if (soffset < 0 || soffset >= t12.length)
            throw $.ioore(soffset);
          t12[soffset] = t11;
          t11 = color.get$g();
          t13 = $.$$mul($.$$mul($.$$mul(t11, t11), intensity), intensity);
          if (t10 < 0 || t10 >= t12.length)
            throw $.ioore(t10);
          t12[t10] = t13;
          t13 = color.get$b();
          t15 = $.$$mul($.$$mul($.$$mul(t13, t13), intensity), intensity);
          if (t7 < 0 || t7 >= t12.length)
            throw $.ioore(t7);
          t12[t7] = t15;
        } else {
          t9 = $.$$mul(t9, intensity);
          if (soffset < 0 || soffset >= t12.length)
            throw $.ioore(soffset);
          t12[soffset] = t9;
          t9 = $.$$mul(color.get$g(), intensity);
          if (t10 < 0 || t10 >= t12.length)
            throw $.ioore(t10);
          t12[t10] = t9;
          t9 = $.$$mul(color.get$b(), intensity);
          if (t7 < 0 || t7 >= t12.length)
            throw $.ioore(t7);
          t12[t7] = t9;
        }
        position = light.matrixWorld.getPosition$0();
        t9 = position.get$x();
        t11 = t14.length;
        if (soffset < 0 || soffset >= t11)
          throw $.ioore(soffset);
        t14[soffset] = t9;
        t9 = position.get$y();
        if (t10 < 0 || t10 >= t11)
          throw $.ioore(t10);
        t14[t10] = t9;
        t9 = position.get$z();
        if (t7 < 0 || t7 >= t11)
          throw $.ioore(t7);
        t14[t7] = t9;
        if (slength >= t16.length)
          throw $.ioore(slength);
        t16[slength] = distance;
        t5.copy$1(position);
        t5.subSelf$1(light.target.get$matrixWorld().getPosition$0());
        t5.normalize$0();
        t9 = t5.x;
        t13 = t18.length;
        if (soffset >= t13)
          throw $.ioore(soffset);
        t18[soffset] = t9;
        t9 = t5.y;
        if (t10 >= t13)
          throw $.ioore(t10);
        t18[t10] = t9;
        t9 = t5.z;
        if (t7 >= t13)
          throw $.ioore(t7);
        t18[t7] = t9;
        t9 = Math.cos($.checkNum(light.angle));
        if (slength >= t20.length)
          throw $.ioore(slength);
        t20[slength] = t9;
        t9 = light.exponent;
        if (slength >= t22.length)
          throw $.ioore(slength);
        t22[slength] = t9;
        slength = slength0;
      }
    }
    ll = t2.length;
    for (l = dlength * 3; l < ll; ++l) {
      if (l < 0)
        throw $.ioore(l);
      t2[l] = 0;
    }
    ll = t6.length;
    for (l = plength * 3; l < ll; ++l) {
      if (l < 0)
        throw $.ioore(l);
      t6[l] = 0;
    }
    ll = t12.length;
    for (l = slength * 3; l < ll; ++l) {
      if (l < 0)
        throw $.ioore(l);
      t12[l] = 0;
    }
    $.$$indexSet(t1.$index(zlights, "directional"), "length", dlength);
    $.$$indexSet(t1.$index(zlights, "point"), "length", plength);
    $.$$indexSet(t1.$index(zlights, "spot"), "length", slength);
    $.$$indexSet(t1.$index(zlights, "ambient"), 0, r);
    $.$$indexSet(t1.$index(zlights, "ambient"), 1, g);
    $.$$indexSet(t1.$index(zlights, "ambient"), 2, b);
  },
  setupLights$2$bailout: function(state0, lights, t1, t2, zlights, t4, t6, t8, t10, t12, t14, t16, t18, t20, t22, t24, ll, g, b, r, dlength, plength, slength, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        zlights = this._lights;
        t1 = $.getInterceptor$JSStringJSArray(zlights);
        t2 = $.$$index(t1.$index(zlights, "directional"), "colors");
      case 2:
        state0 = 0;
        t4 = $.$$index(t1.$index(zlights, "directional"), "positions");
      case 3:
        state0 = 0;
        t6 = $.$$index(t1.$index(zlights, "point"), "colors");
      case 4:
        state0 = 0;
        t8 = $.$$index(t1.$index(zlights, "point"), "positions");
      case 5:
        state0 = 0;
        t10 = $.$$index(t1.$index(zlights, "point"), "distances");
      case 6:
        state0 = 0;
        t12 = $.$$index(t1.$index(zlights, "spot"), "colors");
      case 7:
        state0 = 0;
        t14 = $.$$index(t1.$index(zlights, "spot"), "positions");
      case 8:
        state0 = 0;
        t16 = $.$$index(t1.$index(zlights, "spot"), "distances");
      case 9:
        state0 = 0;
        t18 = $.$$index(t1.$index(zlights, "spot"), "directions");
      case 10:
        state0 = 0;
        t20 = $.$$index(t1.$index(zlights, "spot"), "angles");
      case 11:
        state0 = 0;
        t22 = $.$$index(t1.$index(zlights, "spot"), "exponents");
      case 12:
        state0 = 0;
        t24 = $.getInterceptor$JSStringJSArray(lights);
        ll = t24.get$length(lights);
      case 13:
        state0 = 0;
        for (t3 = this.gammaInput, t5 = this._direction, t7 = $.getInterceptor$JSArray(t4), t9 = $.getInterceptor$JSArray(t2), t11 = $.getInterceptor$JSArray(t8), t13 = $.getInterceptor$JSArray(t6), t15 = $.getInterceptor$JSArray(t14), t17 = $.getInterceptor$JSArray(t16), t19 = $.getInterceptor$JSArray(t18), t21 = $.getInterceptor$JSArray(t20), t23 = $.getInterceptor$JSArray(t22), t25 = $.getInterceptor$JSArray(t12), pdistances = t10, l = 0, r = 0, g = 0, color = null, position = null, b = 0, intensity = null, distance = null, dlength = 0, plength = 0, slength = 0, doffset = 0, poffset = 0, soffset = 0; $.CONSTANT1.$lt(l, ll); ++l) {
          light = t24.$index(lights, l);
          t10 = typeof light === "object" && light !== null && !!light.$isDirectionalLight;
          t26 = !t10;
          if ((t10 || typeof light === "object" && light !== null && !!light.$isSpotLight) && light.get$onlyShadow() === true || light.get$visible() !== true)
            continue;
          color = light.get$color();
          if (t10 || typeof light === "object" && light !== null && !!light.$isSpotLight || typeof light === "object" && light !== null && !!light.$isPointLight) {
            intensity = light.get$intensity();
            distance = light.get$distance();
          }
          if (typeof light === "object" && light !== null && !!light.$isAmbientLight) {
            t10 = color.get$r();
            if (t3) {
              t10 = $.$$mul(t10, t10);
              if (typeof t10 !== "number")
                throw $.iae(t10);
              r += t10;
              t10 = color.get$g();
              t10 = $.$$mul(t10, t10);
              if (typeof t10 !== "number")
                throw $.iae(t10);
              g += t10;
              t10 = color.get$b();
              t10 = $.$$mul(t10, t10);
              if (typeof t10 !== "number")
                throw $.iae(t10);
              b += t10;
            } else {
              if (typeof t10 !== "number")
                throw $.iae(t10);
              r += t10;
              t10 = color.get$g();
              if (typeof t10 !== "number")
                throw $.iae(t10);
              g += t10;
              t10 = color.get$b();
              if (typeof t10 !== "number")
                throw $.iae(t10);
              b += t10;
            }
          } else if (t10) {
            doffset = dlength * 3;
            t10 = doffset + 3;
            t9.set$length(t2, t10);
            t7.set$length(t4, t10);
            t10 = doffset + 2;
            t26 = color.get$r();
            t27 = doffset + 1;
            if (t3) {
              t9.$indexSet(t2, doffset, $.$$mul($.$$mul($.$$mul(t26, t26), intensity), intensity));
              t28 = color.get$g();
              t9.$indexSet(t2, t27, $.$$mul($.$$mul($.$$mul(t28, t28), intensity), intensity));
              t27 = color.get$b();
              t9.$indexSet(t2, t10, $.$$mul($.$$mul($.$$mul(t27, t27), intensity), intensity));
            } else {
              t9.$indexSet(t2, doffset, $.$$mul(t26, intensity));
              t9.$indexSet(t2, t27, $.$$mul(color.get$g(), intensity));
              t9.$indexSet(t2, t10, $.$$mul(color.get$b(), intensity));
            }
            t5.copy$1(light.matrixWorld.getPosition$0());
            t5.subSelf$1(light.target.matrixWorld.getPosition$0());
            t5.normalize$0();
            t7.$indexSet(t4, doffset, t5.x);
            t7.$indexSet(t4, doffset + 1, t5.y);
            t7.$indexSet(t4, doffset + 2, t5.z);
            ++dlength;
          } else if (typeof light === "object" && light !== null && !!light.$isPointLight) {
            poffset = plength * 3;
            t10 = poffset + 3;
            t13.set$length(t6, t10);
            t11.set$length(t8, t10);
            t10 = poffset + 2;
            t26 = color.get$r();
            t27 = poffset + 1;
            if (t3) {
              t13.$indexSet(t6, poffset, $.$$mul($.$$mul($.$$mul(t26, t26), intensity), intensity));
              t28 = color.get$g();
              t13.$indexSet(t6, t27, $.$$mul($.$$mul($.$$mul(t28, t28), intensity), intensity));
              t27 = color.get$b();
              t13.$indexSet(t6, t10, $.$$mul($.$$mul($.$$mul(t27, t27), intensity), intensity));
            } else {
              t13.$indexSet(t6, poffset, $.$$mul(t26, intensity));
              t13.$indexSet(t6, t27, $.$$mul(color.get$g(), intensity));
              t13.$indexSet(t6, t10, $.$$mul(color.get$b(), intensity));
            }
            position = light.matrixWorld.getPosition$0();
            t11.$indexSet(t8, poffset, position.get$x());
            t11.$indexSet(t8, poffset + 1, position.get$y());
            t11.$indexSet(t8, poffset + 2, position.get$z());
            if (pdistances == null) {
              pdistances = $.List_List(0);
              pdistances.push(0);
            }
            t10 = $.getInterceptor$JSStringJSArray(pdistances);
            if ($.$$eq(t10.get$length(pdistances), 0) === true)
              t10.add$1(pdistances, 0);
            t10.$indexSet(pdistances, plength, distance);
            ++plength;
          } else if (typeof light === "object" && light !== null && !!light.$isSpotLight) {
            soffset = slength * 3;
            t10 = soffset + 3;
            t25.set$length(t12, t10);
            t15.set$length(t14, t10);
            t19.set$length(t18, t10);
            slength0 = slength + 1;
            t17.set$length(t16, slength0);
            t10 = soffset + 2;
            t26 = color.get$r();
            t27 = soffset + 1;
            if (t3) {
              t25.$indexSet(t12, soffset, $.$$mul($.$$mul($.$$mul(t26, t26), intensity), intensity));
              t28 = color.get$g();
              t25.$indexSet(t12, t27, $.$$mul($.$$mul($.$$mul(t28, t28), intensity), intensity));
              t27 = color.get$b();
              t25.$indexSet(t12, t10, $.$$mul($.$$mul($.$$mul(t27, t27), intensity), intensity));
            } else {
              t25.$indexSet(t12, soffset, $.$$mul(t26, intensity));
              t25.$indexSet(t12, t27, $.$$mul(color.get$g(), intensity));
              t25.$indexSet(t12, t10, $.$$mul(color.get$b(), intensity));
            }
            position = light.matrixWorld.getPosition$0();
            t15.$indexSet(t14, soffset, position.get$x());
            t10 = soffset + 1;
            t15.$indexSet(t14, t10, position.get$y());
            t26 = soffset + 2;
            t15.$indexSet(t14, t26, position.get$z());
            t17.$indexSet(t16, slength, distance);
            t5.copy$1(position);
            t5.subSelf$1(light.target.get$matrixWorld().getPosition$0());
            t5.normalize$0();
            t19.$indexSet(t18, soffset, t5.x);
            t19.$indexSet(t18, t10, t5.y);
            t19.$indexSet(t18, t26, t5.z);
            t21.$indexSet(t20, slength, Math.cos($.checkNum(light.angle)));
            t23.$indexSet(t22, slength, light.exponent);
            slength = slength0;
          }
        }
        t3 = $.getInterceptor$JSStringJSArray(t2);
        ll = t3.get$length(t2);
      case 14:
        state0 = 0;
        for (l = dlength * 3; $.CONSTANT1.$lt(l, ll); ++l)
          t3.$indexSet(t2, l, 0);
        t2 = $.getInterceptor$JSStringJSArray(t6);
        ll = t2.get$length(t6);
      case 15:
        state0 = 0;
        for (l = plength * 3; $.CONSTANT1.$lt(l, ll); ++l)
          t2.$indexSet(t6, l, 0);
        t2 = $.getInterceptor$JSStringJSArray(t12);
        ll = t2.get$length(t12);
      case 16:
        var t5, t7, t9, t11, t13, t15, t17, t19, t21, t23, t25, pdistances, l, color, position, intensity, distance, doffset, poffset, soffset, light, t26, t27, t28, slength0;
        state0 = 0;
        for (l = slength * 3; $.CONSTANT1.$lt(l, ll); ++l)
          t2.$indexSet(t12, l, 0);
        $.$$indexSet(t1.$index(zlights, "directional"), "length", dlength);
        $.$$indexSet(t1.$index(zlights, "point"), "length", plength);
        $.$$indexSet(t1.$index(zlights, "spot"), "length", slength);
        $.$$indexSet(t1.$index(zlights, "ambient"), 0, r);
        $.$$indexSet(t1.$index(zlights, "ambient"), 1, g);
        $.$$indexSet(t1.$index(zlights, "ambient"), 2, b);
    }
  },
  setMaterialFaces$1: function(material) {
    var t1, t3, t2;
    t1 = material.get$side();
    if (typeof t1 !== "number")
      return this.setMaterialFaces$1$bailout(1, material, t1);
    t1 = t1 === 2;
    t3 = material.get$side();
    if (typeof t3 !== "number")
      return this.setMaterialFaces$1$bailout(2, null, t1, t3);
    t3 = t3 === 1;
    t2 = this._oldDoubleSided;
    if (typeof t2 !== "boolean")
      return this.setMaterialFaces$1$bailout(3, null, t1, t3, t2);
    if (!(t2 === t1)) {
      t2 = this._gl;
      if (t1)
        t2.disable$1(2884);
      else
        t2.enable$1(2884);
      this._oldDoubleSided = t1;
    }
    t1 = this._oldFlipSided;
    if (typeof t1 !== "boolean")
      return this.setMaterialFaces$1$bailout(4, null, t1, t3);
    if (!(t1 === t3)) {
      t1 = this._gl;
      if (t3)
        t1.frontFace$1(2304);
      else
        t1.frontFace$1(2305);
      this._oldFlipSided = t3;
    }
  },
  setMaterialFaces$1$bailout: function(state0, material, t1, t3, t2) {
    switch (state0) {
      case 0:
        t1 = material.get$side();
      case 1:
        state0 = 0;
        t1 = $.$$eq(t1, 2);
        t3 = material.get$side();
      case 2:
        state0 = 0;
        t3 = $.$$eq(t3, 1);
        t2 = this._oldDoubleSided;
      case 3:
        state0 = 0;
        if ($.$$eq(t2, t1) !== true) {
          t2 = this._gl;
          if (t1 === true)
            t2.disable$1(2884);
          else
            t2.enable$1(2884);
          this._oldDoubleSided = t1;
        }
        t1 = this._oldFlipSided;
      case 4:
        state0 = 0;
        if ($.$$eq(t1, t3) !== true) {
          t1 = this._gl;
          if (t3 === true)
            t1.frontFace$1(2304);
          else
            t1.frontFace$1(2305);
          this._oldFlipSided = t3;
        }
    }
  },
  setDepthTest$1: function(depthTest) {
    var t1;
    if ($.$$eq(this._oldDepthTest, depthTest) !== true) {
      t1 = this._gl;
      if (depthTest === true)
        t1.enable$1(2929);
      else
        t1.disable$1(2929);
      this._oldDepthTest = depthTest;
    }
  },
  setDepthWrite$1: function(depthWrite) {
    if ($.$$eq(this._oldDepthWrite, depthWrite) !== true) {
      this._gl.depthMask$1(depthWrite);
      this._oldDepthWrite = depthWrite;
    }
  },
  setPolygonOffset$3: function(polygonoffset, factor, units) {
    var t1;
    if ($.$$eq(this._oldPolygonOffset, polygonoffset) !== true) {
      t1 = this._gl;
      if (polygonoffset === true)
        t1.enable$1(32823);
      else
        t1.disable$1(32823);
      this._oldPolygonOffset = polygonoffset;
    }
    if (polygonoffset === true)
      t1 = $.$$eq(this._oldPolygonOffsetFactor, factor) !== true || $.$$eq(this._oldPolygonOffsetUnits, units) !== true;
    else
      t1 = false;
    if (t1) {
      this._gl.polygonOffset$2(factor, units);
      this._oldPolygonOffsetFactor = factor;
      this._oldPolygonOffsetUnits = units;
    }
  },
  setBlending$4: function(blending, blendEquation, blendSrc, blendDst) {
    var t1;
    if (typeof blending !== "number")
      return this.setBlending$4$bailout(1, blending, blendEquation, blendSrc, blendDst);
    if (!(blending === this._oldBlending)) {
      if (blending === 0)
        this._gl.disable$1(3042);
      else if (blending === 2) {
        this._gl.enable$1(3042);
        this._gl.blendEquation$1(32774);
        this._gl.blendFunc$2(770, 1);
      } else if (blending === 3) {
        this._gl.enable$1(3042);
        this._gl.blendEquation$1(32774);
        this._gl.blendFunc$2(0, 769);
      } else if (blending === 4) {
        this._gl.enable$1(3042);
        this._gl.blendEquation$1(32774);
        this._gl.blendFunc$2(0, 768);
      } else {
        t1 = this._gl;
        if (blending === 5)
          t1.enable$1(3042);
        else {
          t1.enable$1(3042);
          this._gl.blendEquationSeparate$2(32774, 32774);
          this._gl.blendFuncSeparate$4(770, 771, 1, 771);
        }
      }
      this._oldBlending = blending;
    }
    if (blending === 5) {
      if ($.$$eq(blendEquation, this._oldBlendEquation) !== true) {
        this._gl.blendEquation$1(this.paramThreeToGL$1(blendEquation));
        this._oldBlendEquation = blendEquation;
      }
      if ($.$$eq(blendSrc, this._oldBlendSrc) !== true || $.$$eq(blendDst, this._oldBlendDst) !== true) {
        this._gl.blendFunc$2(this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
        this._oldBlendSrc = blendSrc;
        this._oldBlendDst = blendDst;
      }
    } else {
      this._oldBlendEquation = null;
      this._oldBlendSrc = null;
      this._oldBlendDst = null;
    }
  },
  setBlending$4$bailout: function(state0, blending, blendEquation, blendSrc, blendDst) {
    var t1, t2, t3;
    t1 = $.getInterceptor(blending);
    if (t1.$eq(blending, this._oldBlending) !== true) {
      if (t1.$eq(blending, 0) === true)
        this._gl.disable$1(3042);
      else if (t1.$eq(blending, 2) === true) {
        this._gl.enable$1(3042);
        this._gl.blendEquation$1(32774);
        this._gl.blendFunc$2(770, 1);
      } else if (t1.$eq(blending, 3) === true) {
        this._gl.enable$1(3042);
        this._gl.blendEquation$1(32774);
        this._gl.blendFunc$2(0, 769);
      } else if (t1.$eq(blending, 4) === true) {
        this._gl.enable$1(3042);
        this._gl.blendEquation$1(32774);
        this._gl.blendFunc$2(0, 768);
      } else {
        t2 = t1.$eq(blending, 5);
        t3 = this._gl;
        if (t2 === true)
          t3.enable$1(3042);
        else {
          t3.enable$1(3042);
          this._gl.blendEquationSeparate$2(32774, 32774);
          this._gl.blendFuncSeparate$4(770, 771, 1, 771);
        }
      }
      this._oldBlending = blending;
    }
    if (t1.$eq(blending, 5) === true) {
      if ($.$$eq(blendEquation, this._oldBlendEquation) !== true) {
        this._gl.blendEquation$1(this.paramThreeToGL$1(blendEquation));
        this._oldBlendEquation = blendEquation;
      }
      if ($.$$eq(blendSrc, this._oldBlendSrc) !== true || $.$$eq(blendDst, this._oldBlendDst) !== true) {
        this._gl.blendFunc$2(this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
        this._oldBlendSrc = blendSrc;
        this._oldBlendDst = blendDst;
      }
    } else {
      this._oldBlendEquation = null;
      this._oldBlendSrc = null;
      this._oldBlendDst = null;
    }
  },
  setBlending$1: function(blending) {
    return this.setBlending$4(blending, null, null, null);
  },
  buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround: function(shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround) {
    var t1, chunks, code, t2, pl, p, program, glprogram, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, prefix_vertex, t50, glFragmentShader, glVertexShader, status, error, i;
    t1 = {};
    if (typeof maxMorphNormals !== "number")
      return this.buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround$bailout(1, shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround, t1);
    if (typeof maxMorphTargets !== "number")
      return this.buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround$bailout(1, shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround, t1);
    chunks = [];
    if (!(shaderID == null))
      chunks.push(shaderID);
    else {
      chunks.push(fragmentShader);
      chunks.push(vertexShader);
    }
    code = "maxDirLights" + $.S(maxDirLights) + "maxPointLights" + $.S(maxPointLights) + "maxSpotLights" + $.S(maxSpotLights) + "maxShadows" + $.S(maxShadows) + "maxBones" + $.S(maxBones) + "map" + $.S(map) + "envMap" + $.S(envMap) + "lightMap" + $.S(lightMap) + "bumpMap" + $.S(bumpMap) + "specularMap" + $.S(specularMap) + "vertexColors" + $.S(vertexColors) + "skinning" + $.S(skinning) + "useVertexTexture" + $.S(useVertexTexture) + "boneTextureWidth" + $.S(boneTextureWidth) + "boneTextureHeight" + $.S(boneTextureHeight) + "morphTargets" + $.S(morphTargets) + "morphNormals" + $.S(morphNormals) + "perPixel" + $.S(perPixel) + "wrapAround" + $.S(wrapAround) + "doubleSided" + $.S(doubleSided) + "shadowMapEnabled" + $.S(shadowMapEnabled) + "shadowMapSoft" + $.S(shadowMapSoft) + "shadowMapDebug" + $.S(shadowMapDebug) + "shadowMapCascade" + $.S(shadowMapCascade) + "sizeAttenuation" + $.S(sizeAttenuation);
    t2 = this._programs;
    pl = t2.length;
    for (p = 0; p < pl; ++p) {
      program = t2[p];
      if (program.get$code() === code) {
        program.set$usedTimes($.$$add(program.get$usedTimes(), 1));
        return program;
      }
    }
    glprogram = this._gl.createProgram$0();
    t3 = this.precision;
    t4 = "precision " + $.S(t3) + " float;";
    t5 = this.supportsVertexTextures === true ? "#define VERTEX_TEXTURES" : "";
    t6 = this.gammaInput;
    t7 = t6 ? "#define GAMMA_INPUT" : "";
    t8 = this.gammaOutput;
    t9 = t8 ? "#define GAMMA_OUTPUT" : "";
    t10 = this.physicallyBasedShading;
    t11 = t10 ? "#define PHYSICALLY_BASED_SHADING" : "";
    t12 = "#define MAX_DIR_LIGHTS " + $.S(maxDirLights);
    t13 = "#define MAX_POINT_LIGHTS " + $.S(maxPointLights);
    t14 = "#define MAX_SPOT_LIGHTS " + $.S(maxSpotLights);
    t15 = "#define MAX_SHADOWS " + $.S(maxShadows);
    t16 = "#define MAX_BONES " + $.S(maxBones);
    t17 = !(map == null);
    t18 = t17 ? "#define USE_MAP" : "";
    t19 = !(envMap == null);
    t20 = t19 ? "#define USE_ENVMAP" : "";
    t21 = !(lightMap == null);
    t22 = t21 ? "#define USE_LIGHTMAP" : "";
    t23 = !(bumpMap == null);
    t24 = t23 ? "#define USE_BUMPMAP" : "";
    t25 = !(specularMap == null);
    t26 = t25 ? "#define USE_SPECULARMAP" : "";
    t27 = $.getInterceptor(vertexColors);
    t28 = t27.$eq(vertexColors, 0) !== true ? "#define USE_COLOR" : "";
    t29 = skinning === true ? "#define USE_SKINNING" : "";
    t30 = useVertexTexture === true;
    t31 = t30 ? "#define BONE_TEXTURE" : "";
    t32 = !(boneTextureWidth == null) ? "#define N_BONE_PIXEL_X " + $.S($.toStringAsFixed(boneTextureWidth, 1)) : "";
    t33 = !(boneTextureHeight == null) ? "#define N_BONE_PIXEL_Y " + $.S($.toStringAsFixed(boneTextureHeight, 1)) : "";
    t34 = morphTargets === true ? "#define USE_MORPHTARGETS" : "";
    t35 = morphNormals === true ? "#define USE_MORPHNORMALS" : "";
    t36 = perPixel === true;
    t37 = t36 ? "#define PHONG_PER_PIXEL" : "";
    t38 = wrapAround === true;
    t39 = t38 ? "#define WRAP_AROUND" : "";
    t40 = doubleSided === true;
    t41 = t40 ? "#define DOUBLE_SIDED" : "";
    t42 = shadowMapEnabled === true;
    t43 = t42 ? "#define USE_SHADOWMAP" : "";
    t44 = shadowMapSoft === true;
    t45 = t44 ? "#define SHADOWMAP_SOFT" : "";
    t46 = shadowMapDebug === true;
    t47 = t46 ? "#define SHADOWMAP_DEBUG" : "";
    t48 = shadowMapCascade === true;
    t49 = t48 ? "#define SHADOWMAP_CASCADE" : "";
    prefix_vertex = $.Strings_join([t4, t5, t7, t9, t11, t12, t13, t14, t15, t16, t18, t20, t22, t24, t26, t28, t29, t31, t32, t33, t34, t35, t37, t39, t41, t43, t45, t47, t49, sizeAttenuation === true ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "attribute vec2 uv2;", "#ifdef USE_COLOR", "attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "attribute vec3 morphTarget0;", "attribute vec3 morphTarget1;", "attribute vec3 morphTarget2;", "attribute vec3 morphTarget3;", "#ifdef USE_MORPHNORMALS", "attribute vec3 morphNormal0;", "attribute vec3 morphNormal1;", "attribute vec3 morphNormal2;", "attribute vec3 morphNormal3;", "#else", "attribute vec3 morphTarget4;", "attribute vec3 morphTarget5;", "attribute vec3 morphTarget6;", "attribute vec3 morphTarget7;", "#endif", "#endif", "#ifdef USE_SKINNING", "attribute vec4 skinVertexA;", "attribute vec4 skinVertexB;", "attribute vec4 skinIndex;", "attribute vec4 skinWeight;", "#endif", ""], "\n");
    t50 = "precision " + $.S(t3) + " float;";
    t3 = t23 ? "#extension GL_OES_standard_derivatives : enable" : "";
    t4 = "#define MAX_DIR_LIGHTS " + $.S(maxDirLights);
    t5 = "#define MAX_POINT_LIGHTS " + $.S(maxPointLights);
    t7 = "#define MAX_SPOT_LIGHTS " + $.S(maxSpotLights);
    t9 = "#define MAX_SHADOWS " + $.S(maxShadows);
    t11 = $.$$eq(alphaTest, 0) !== true ? "#define ALPHATEST " + $.S(alphaTest) : "";
    t6 = t6 ? "#define GAMMA_INPUT" : "";
    t8 = t8 ? "#define GAMMA_OUTPUT" : "";
    t10 = t10 ? "#define PHYSICALLY_BASED_SHADING" : "";
    t12 = useFog === true;
    t13 = t12 && !(fog == null) ? "#define USE_FOG" : "";
    t12 = t12 && typeof fog === "object" && fog !== null && !!fog.$isFogExp2 ? "#define FOG_EXP2" : "";
    t14 = t17 ? "#define USE_MAP" : "";
    t15 = t19 ? "#define USE_ENVMAP" : "";
    t16 = t21 ? "#define USE_LIGHTMAP" : "";
    t17 = t23 ? "#define USE_BUMPMAP" : "";
    t18 = t25 ? "#define USE_SPECULARMAP" : "";
    t19 = t27.$eq(vertexColors, 0) !== true ? "#define USE_COLOR" : "";
    t20 = metal === true ? "#define METAL" : "";
    t21 = t36 ? "#define PHONG_PER_PIXEL" : "";
    t22 = t38 ? "#define WRAP_AROUND" : "";
    t23 = t40 ? "#define DOUBLE_SIDED" : "";
    t24 = t42 ? "#define USE_SHADOWMAP" : "";
    t25 = t44 ? "#define SHADOWMAP_SOFT" : "";
    t26 = t46 ? "#define SHADOWMAP_DEBUG" : "";
    glFragmentShader = this.getShader$2("fragment", $.S($.Strings_join([t50, t3, t4, t5, t7, t9, t11, t6, t8, t10, t13, t12, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t48 ? "#define SHADOWMAP_CASCADE" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", ""], "\n")) + $.S(fragmentShader));
    glVertexShader = this.getShader$2("vertex", $.S(prefix_vertex) + $.S(vertexShader));
    this._gl.attachShader$2(glprogram, glVertexShader);
    this._gl.attachShader$2(glprogram, glFragmentShader);
    this._gl.linkProgram$1(glprogram);
    if (this._gl.getProgramParameter$2(glprogram, 35714) !== true) {
      status = this._gl.getProgramParameter$2(glprogram, 35715);
      error = this._gl.getError$0();
      $.print("Could not initialise shader\nVALIDATE_STATUS: " + $.S(status) + ", gl error [" + $.S(error) + "]");
    }
    this._gl.deleteShader$1(glFragmentShader);
    this._gl.deleteShader$1(glVertexShader);
    t3 = this._programs_counter;
    this._programs_counter = t3 + 1;
    program = $.Program$(t3, glprogram, code, 1);
    t1.identifiers_0 = null;
    t1.identifiers_0 = ["viewMatrix", "modelViewMatrix", "projectionMatrix", "normalMatrix", "modelMatrix", "cameraPosition", "morphTargetInfluences"];
    t3 = t1.identifiers_0;
    if (t30)
      $.add(t3, "boneTexture");
    else
      $.add(t3, "boneGlobalMatrices");
    $.forEach(uniforms, new $.WebGLRenderer_buildProgram_anon(t1));
    this.cacheUniformLocations$2(program, t1.identifiers_0);
    t1.identifiers_0 = ["position", "normal", "uv", "uv2", "tangent", "color", "skinVertexA", "skinVertexB", "skinIndex", "skinWeight"];
    for (i = 0; i < maxMorphTargets; ++i)
      $.add(t1.identifiers_0, "morphTarget" + $.S(i));
    for (i = 0; i < maxMorphNormals; ++i)
      $.add(t1.identifiers_0, "morphNormal" + $.S(i));
    if (!(attributes == null))
      $.forEach(attributes, new $.WebGLRenderer_buildProgram_anon0(t1));
    this.cacheAttributeLocations$2(program, t1.identifiers_0);
    t2.push(program);
    t2 = t2.length;
    this.info.memory.programs = t2;
    return program;
  },
  buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround$bailout: function(state0, shaderID, fragmentShader, vertexShader, uniforms, attributes, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, fog, lightMap, map, maxBones, maxDirLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapSoft, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround, t1) {
    var chunks, code, t2, pl, p, program, glprogram, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, prefix_vertex, t50, glFragmentShader, glVertexShader, status, error, i;
    chunks = [];
    if (!(shaderID == null))
      chunks.push(shaderID);
    else {
      chunks.push(fragmentShader);
      chunks.push(vertexShader);
    }
    code = "maxDirLights" + $.S(maxDirLights) + "maxPointLights" + $.S(maxPointLights) + "maxSpotLights" + $.S(maxSpotLights) + "maxShadows" + $.S(maxShadows) + "maxBones" + $.S(maxBones) + "map" + $.S(map) + "envMap" + $.S(envMap) + "lightMap" + $.S(lightMap) + "bumpMap" + $.S(bumpMap) + "specularMap" + $.S(specularMap) + "vertexColors" + $.S(vertexColors) + "skinning" + $.S(skinning) + "useVertexTexture" + $.S(useVertexTexture) + "boneTextureWidth" + $.S(boneTextureWidth) + "boneTextureHeight" + $.S(boneTextureHeight) + "morphTargets" + $.S(morphTargets) + "morphNormals" + $.S(morphNormals) + "perPixel" + $.S(perPixel) + "wrapAround" + $.S(wrapAround) + "doubleSided" + $.S(doubleSided) + "shadowMapEnabled" + $.S(shadowMapEnabled) + "shadowMapSoft" + $.S(shadowMapSoft) + "shadowMapDebug" + $.S(shadowMapDebug) + "shadowMapCascade" + $.S(shadowMapCascade) + "sizeAttenuation" + $.S(sizeAttenuation);
    t2 = this._programs;
    pl = t2.length;
    for (p = 0; p < pl; ++p) {
      program = t2[p];
      if (program.get$code() === code) {
        program.set$usedTimes($.$$add(program.get$usedTimes(), 1));
        return program;
      }
    }
    glprogram = this._gl.createProgram$0();
    t3 = this.precision;
    t4 = "precision " + $.S(t3) + " float;";
    t5 = this.supportsVertexTextures === true ? "#define VERTEX_TEXTURES" : "";
    t6 = this.gammaInput;
    t7 = t6 ? "#define GAMMA_INPUT" : "";
    t8 = this.gammaOutput;
    t9 = t8 ? "#define GAMMA_OUTPUT" : "";
    t10 = this.physicallyBasedShading;
    t11 = t10 ? "#define PHYSICALLY_BASED_SHADING" : "";
    t12 = "#define MAX_DIR_LIGHTS " + $.S(maxDirLights);
    t13 = "#define MAX_POINT_LIGHTS " + $.S(maxPointLights);
    t14 = "#define MAX_SPOT_LIGHTS " + $.S(maxSpotLights);
    t15 = "#define MAX_SHADOWS " + $.S(maxShadows);
    t16 = "#define MAX_BONES " + $.S(maxBones);
    t17 = !(map == null);
    t18 = t17 ? "#define USE_MAP" : "";
    t19 = !(envMap == null);
    t20 = t19 ? "#define USE_ENVMAP" : "";
    t21 = !(lightMap == null);
    t22 = t21 ? "#define USE_LIGHTMAP" : "";
    t23 = !(bumpMap == null);
    t24 = t23 ? "#define USE_BUMPMAP" : "";
    t25 = !(specularMap == null);
    t26 = t25 ? "#define USE_SPECULARMAP" : "";
    t27 = $.getInterceptor(vertexColors);
    t28 = t27.$eq(vertexColors, 0) !== true ? "#define USE_COLOR" : "";
    t29 = skinning === true ? "#define USE_SKINNING" : "";
    t30 = useVertexTexture === true;
    t31 = t30 ? "#define BONE_TEXTURE" : "";
    t32 = !(boneTextureWidth == null) ? "#define N_BONE_PIXEL_X " + $.S($.toStringAsFixed(boneTextureWidth, 1)) : "";
    t33 = !(boneTextureHeight == null) ? "#define N_BONE_PIXEL_Y " + $.S($.toStringAsFixed(boneTextureHeight, 1)) : "";
    t34 = morphTargets === true ? "#define USE_MORPHTARGETS" : "";
    t35 = morphNormals === true ? "#define USE_MORPHNORMALS" : "";
    t36 = perPixel === true;
    t37 = t36 ? "#define PHONG_PER_PIXEL" : "";
    t38 = wrapAround === true;
    t39 = t38 ? "#define WRAP_AROUND" : "";
    t40 = doubleSided === true;
    t41 = t40 ? "#define DOUBLE_SIDED" : "";
    t42 = shadowMapEnabled === true;
    t43 = t42 ? "#define USE_SHADOWMAP" : "";
    t44 = shadowMapSoft === true;
    t45 = t44 ? "#define SHADOWMAP_SOFT" : "";
    t46 = shadowMapDebug === true;
    t47 = t46 ? "#define SHADOWMAP_DEBUG" : "";
    t48 = shadowMapCascade === true;
    t49 = t48 ? "#define SHADOWMAP_CASCADE" : "";
    prefix_vertex = $.Strings_join([t4, t5, t7, t9, t11, t12, t13, t14, t15, t16, t18, t20, t22, t24, t26, t28, t29, t31, t32, t33, t34, t35, t37, t39, t41, t43, t45, t47, t49, sizeAttenuation === true ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "attribute vec2 uv2;", "#ifdef USE_COLOR", "attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "attribute vec3 morphTarget0;", "attribute vec3 morphTarget1;", "attribute vec3 morphTarget2;", "attribute vec3 morphTarget3;", "#ifdef USE_MORPHNORMALS", "attribute vec3 morphNormal0;", "attribute vec3 morphNormal1;", "attribute vec3 morphNormal2;", "attribute vec3 morphNormal3;", "#else", "attribute vec3 morphTarget4;", "attribute vec3 morphTarget5;", "attribute vec3 morphTarget6;", "attribute vec3 morphTarget7;", "#endif", "#endif", "#ifdef USE_SKINNING", "attribute vec4 skinVertexA;", "attribute vec4 skinVertexB;", "attribute vec4 skinIndex;", "attribute vec4 skinWeight;", "#endif", ""], "\n");
    t50 = "precision " + $.S(t3) + " float;";
    t3 = t23 ? "#extension GL_OES_standard_derivatives : enable" : "";
    t4 = "#define MAX_DIR_LIGHTS " + $.S(maxDirLights);
    t5 = "#define MAX_POINT_LIGHTS " + $.S(maxPointLights);
    t7 = "#define MAX_SPOT_LIGHTS " + $.S(maxSpotLights);
    t9 = "#define MAX_SHADOWS " + $.S(maxShadows);
    t11 = $.$$eq(alphaTest, 0) !== true ? "#define ALPHATEST " + $.S(alphaTest) : "";
    t6 = t6 ? "#define GAMMA_INPUT" : "";
    t8 = t8 ? "#define GAMMA_OUTPUT" : "";
    t10 = t10 ? "#define PHYSICALLY_BASED_SHADING" : "";
    t12 = useFog === true;
    t13 = t12 && !(fog == null) ? "#define USE_FOG" : "";
    t12 = t12 && typeof fog === "object" && fog !== null && !!fog.$isFogExp2 ? "#define FOG_EXP2" : "";
    t14 = t17 ? "#define USE_MAP" : "";
    t15 = t19 ? "#define USE_ENVMAP" : "";
    t16 = t21 ? "#define USE_LIGHTMAP" : "";
    t17 = t23 ? "#define USE_BUMPMAP" : "";
    t18 = t25 ? "#define USE_SPECULARMAP" : "";
    t19 = t27.$eq(vertexColors, 0) !== true ? "#define USE_COLOR" : "";
    t20 = metal === true ? "#define METAL" : "";
    t21 = t36 ? "#define PHONG_PER_PIXEL" : "";
    t22 = t38 ? "#define WRAP_AROUND" : "";
    t23 = t40 ? "#define DOUBLE_SIDED" : "";
    t24 = t42 ? "#define USE_SHADOWMAP" : "";
    t25 = t44 ? "#define SHADOWMAP_SOFT" : "";
    t26 = t46 ? "#define SHADOWMAP_DEBUG" : "";
    glFragmentShader = this.getShader$2("fragment", $.S($.Strings_join([t50, t3, t4, t5, t7, t9, t11, t6, t8, t10, t13, t12, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t48 ? "#define SHADOWMAP_CASCADE" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", ""], "\n")) + $.S(fragmentShader));
    glVertexShader = this.getShader$2("vertex", $.S(prefix_vertex) + $.S(vertexShader));
    this._gl.attachShader$2(glprogram, glVertexShader);
    this._gl.attachShader$2(glprogram, glFragmentShader);
    this._gl.linkProgram$1(glprogram);
    if (this._gl.getProgramParameter$2(glprogram, 35714) !== true) {
      status = this._gl.getProgramParameter$2(glprogram, 35715);
      error = this._gl.getError$0();
      $.print("Could not initialise shader\nVALIDATE_STATUS: " + $.S(status) + ", gl error [" + $.S(error) + "]");
    }
    this._gl.deleteShader$1(glFragmentShader);
    this._gl.deleteShader$1(glVertexShader);
    t3 = this._programs_counter;
    this._programs_counter = t3 + 1;
    program = $.Program$(t3, glprogram, code, 1);
    t1.identifiers_0 = null;
    t1.identifiers_0 = ["viewMatrix", "modelViewMatrix", "projectionMatrix", "normalMatrix", "modelMatrix", "cameraPosition", "morphTargetInfluences"];
    t3 = t1.identifiers_0;
    if (t30)
      $.add(t3, "boneTexture");
    else
      $.add(t3, "boneGlobalMatrices");
    $.forEach(uniforms, new $.WebGLRenderer_buildProgram_anon(t1));
    this.cacheUniformLocations$2(program, t1.identifiers_0);
    t1.identifiers_0 = ["position", "normal", "uv", "uv2", "tangent", "color", "skinVertexA", "skinVertexB", "skinIndex", "skinWeight"];
    for (i = 0; $.CONSTANT1.$lt(i, maxMorphTargets); ++i)
      $.add(t1.identifiers_0, "morphTarget" + $.S(i));
    for (i = 0; $.CONSTANT1.$lt(i, maxMorphNormals); ++i)
      $.add(t1.identifiers_0, "morphNormal" + $.S(i));
    if (!(attributes == null))
      $.forEach(attributes, new $.WebGLRenderer_buildProgram_anon0(t1));
    this.cacheAttributeLocations$2(program, t1.identifiers_0);
    t2.push(program);
    t2 = t2.length;
    this.info.memory.programs = t2;
    return program;
  },
  cacheUniformLocations$2: function(program, identifiers) {
    var l, t1, i, id;
    if (typeof identifiers !== "string" && (typeof identifiers !== "object" || identifiers === null || identifiers.constructor !== Array && !identifiers.$isJavaScriptIndexingBehavior()))
      return this.cacheUniformLocations$2$bailout(1, program, identifiers);
    l = identifiers.length;
    for (t1 = program.glProgram, i = 0; i < l; ++i) {
      if (i >= identifiers.length)
        throw $.ioore(i);
      id = identifiers[i];
      $.$$indexSet(program.uniforms, id, this._gl.getUniformLocation$2(t1, id));
    }
  },
  cacheUniformLocations$2$bailout: function(state0, program, identifiers, t1, l) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(identifiers);
        l = t1.get$length(identifiers);
      case 2:
        var t2, i, id;
        state0 = 0;
        for (t2 = program.glProgram, i = 0; $.CONSTANT1.$lt(i, l); ++i) {
          id = t1.$index(identifiers, i);
          $.$$indexSet(program.uniforms, id, this._gl.getUniformLocation$2(t2, id));
        }
    }
  },
  cacheAttributeLocations$2: function(program, identifiers) {
    var t1, l, t2, t4, i, id;
    if (typeof identifiers !== "string" && (typeof identifiers !== "object" || identifiers === null || identifiers.constructor !== Array && !identifiers.$isJavaScriptIndexingBehavior()))
      return this.cacheAttributeLocations$2$bailout(1, program, identifiers);
    t1 = $.getInterceptor$JSStringJSArray(identifiers);
    l = identifiers.length;
    t2 = program.attributes;
    if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.$isJavaScriptIndexingBehavior())
      return this.cacheAttributeLocations$2$bailout(3, program, identifiers, t1, l, t2);
    t4 = program.glProgram;
    i = 0;
    for (; i < l; ++i) {
      if (i >= identifiers.length)
        throw $.ioore(i);
      id = identifiers[i];
      t1 = this._gl.getAttribLocation$2(t4, id);
      if (id !== (id | 0))
        throw $.iae(id);
      if (id < 0 || id >= t2.length)
        throw $.ioore(id);
      t2[id] = t1;
    }
  },
  cacheAttributeLocations$2$bailout: function(state0, program, identifiers, t1, l, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(identifiers);
        l = t1.get$length(identifiers);
      case 2:
        state0 = 0;
        t2 = program.attributes;
      case 3:
        var t4, t5, i, id;
        state0 = 0;
        t4 = program.glProgram;
        t5 = $.getInterceptor$JSArray(t2);
        i = 0;
        for (; $.CONSTANT1.$lt(i, l); ++i) {
          id = t1.$index(identifiers, i);
          t5.$indexSet(t2, id, this._gl.getAttribLocation$2(t4, id));
        }
    }
  },
  addLineNumbers$1: function(string) {
    var chunks, il, i, i0, t1, t2;
    chunks = string.split("\n");
    if (typeof chunks !== "object" || chunks === null || (chunks.constructor !== Array || !!chunks.immutable$list) && !chunks.$isJavaScriptIndexingBehavior())
      return this.addLineNumbers$1$bailout(1, chunks);
    il = chunks.length;
    for (i = 0; i < il; i = i0) {
      i0 = i + 1;
      t1 = $.S(i0) + ":";
      if (i >= chunks.length)
        throw $.ioore(i);
      t2 = t1 + $.S(chunks[i]);
      if (i >= chunks.length)
        throw $.ioore(i);
      chunks[i] = t2;
    }
    return $.CONSTANT0.join$1(chunks, "\n");
  },
  addLineNumbers$1$bailout: function(state0, chunks, t2, il) {
    switch (state0) {
      case 0:
        chunks = string.split("\n");
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$JSStringJSArray(chunks);
        il = t2.get$length(chunks);
      case 2:
        var i, i0;
        state0 = 0;
        for (i = 0; $.CONSTANT1.$lt(i, il); i = i0) {
          i0 = i + 1;
          t2.$indexSet(chunks, i, $.S(i0) + ":" + $.S(t2.$index(chunks, i)));
        }
        return t2.join$1(chunks, "\n");
    }
  },
  getShader$2: function(type, string) {
    var shader;
    if (type === "fragment")
      shader = this._gl.createShader$1(35632);
    else
      shader = type === "vertex" ? this._gl.createShader$1(35633) : null;
    this._gl.shaderSource$2(shader, string);
    this._gl.compileShader$1(shader);
    if (this._gl.getShaderParameter$2(shader, 35713) !== true) {
      $.print(this._gl.getShaderInfoLog$1(shader));
      $.print(this.addLineNumbers$1(string));
      return;
    }
    return shader;
  },
  setTextureParameters$3: function(textureType, texture, isImagePowerOfTwo) {
    var t1 = this._gl;
    if (isImagePowerOfTwo) {
      t1.texParameteri$3(textureType, 10242, this.paramThreeToGL$1(texture.get$wrapS()));
      this._gl.texParameteri$3(textureType, 10243, this.paramThreeToGL$1(texture.get$wrapT()));
      this._gl.texParameteri$3(textureType, 10240, this.paramThreeToGL$1(texture.get$magFilter()));
      this._gl.texParameteri$3(textureType, 10241, this.paramThreeToGL$1(texture.get$minFilter()));
    } else {
      t1.texParameteri$3(textureType, 10242, 33071);
      this._gl.texParameteri$3(textureType, 10243, 33071);
      this._gl.texParameteri$3(textureType, 10240, this.filterFallback$1(texture.get$magFilter()));
      this._gl.texParameteri$3(textureType, 10241, this.filterFallback$1(texture.get$minFilter()));
    }
    if (!(this._glExtensionTextureFilterAnisotropic == null) && $.$$eq(texture.get$type(), 15) !== true)
      if ($.$$gt(texture.get$anisotropy(), 1) === true || !($.$$index(texture, "__oldAnisotropy") == null)) {
        this._gl.texParameterf$3(textureType, 34046, $.min(texture.get$anisotropy(), this.maxAnisotropy));
        $.$$indexSet(texture, "__oldAnisotropy", texture.get$anisotropy());
      }
  },
  setTexture$2: function(texture, slot) {
    var t1, t2, image, isImagePowerOfTwo, glFormat, glType;
    if (texture.get$needsUpdate() === true) {
      t1 = $.getInterceptor$JSStringJSArray(texture);
      if (t1.$index(texture, "__webglInit") == null) {
        t1.$indexSet(texture, "__webglInit", true);
        t1.$indexSet(texture, "__webglTexture", this._gl.createTexture$0());
        t2 = this.info.memory;
        t2.textures = t2.textures + 1;
      }
      t2 = this._gl;
      if (typeof slot !== "number")
        throw $.iae(slot);
      t2.activeTexture$1(33984 + slot);
      this._gl.bindTexture$2(3553, t1.$index(texture, "__webglTexture"));
      t2 = this._gl;
      t2.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
      t1 = this._gl;
      t1.pixelStorei$2(37441, texture.get$premultiplyAlpha() === true ? 1 : 0);
      image = texture.get$image();
      t1 = image.get$width();
      if (t1 !== (t1 | 0))
        return this.setTexture$2$bailout(1, texture, image, t1);
      if ((t1 & t1 - 1) >>> 0 === 0) {
        t1 = image.get$height();
        if (t1 !== (t1 | 0))
          return this.setTexture$2$bailout(2, texture, image, t1);
        isImagePowerOfTwo = (t1 & t1 - 1) >>> 0 === 0;
      } else
        isImagePowerOfTwo = false;
      glFormat = this.paramThreeToGL$1(texture.get$format());
      glType = this.paramThreeToGL$1(texture.get$type());
      this.setTextureParameters$3(3553, texture, isImagePowerOfTwo);
      t1 = this._gl;
      if (typeof texture === "object" && texture !== null && !!texture.$isDataTexture)
        t1.texImage2D$9(3553, 0, glFormat, image.get$width(), image.get$height(), 0, glFormat, glType, image.get$data());
      else
        t1.texImage2D$6(3553, 0, glFormat, glFormat, glType, texture.get$image());
      if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
        this._gl.generateMipmap$1(3553);
      texture.set$needsUpdate(false);
      if (!(texture.get$onUpdate() == null))
        texture.onUpdate$0();
    } else {
      t1 = this._gl;
      if (typeof slot !== "number")
        throw $.iae(slot);
      t1.activeTexture$1(33984 + slot);
      this._gl.bindTexture$2(3553, $.$$index(texture, "__webglTexture"));
    }
  },
  setTexture$2$bailout: function(state0, texture, image, t1) {
    switch (state0) {
      case 0:
      default:
        var t2, t3, isImagePowerOfTwo, glFormat, glType;
        if (state0 === 2 || state0 === 1 || state0 === 0 && texture.get$needsUpdate() === true)
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSStringJSArray(texture);
              if (t1.$index(texture, "__webglInit") == null) {
                t1.$indexSet(texture, "__webglInit", true);
                t1.$indexSet(texture, "__webglTexture", this._gl.createTexture$0());
                t2 = this.info.memory;
                t2.textures = t2.textures + 1;
              }
              t2 = this._gl;
              if (typeof slot !== "number")
                throw $.iae(slot);
              t2.activeTexture$1(33984 + slot);
              this._gl.bindTexture$2(3553, t1.$index(texture, "__webglTexture"));
              t2 = this._gl;
              t2.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
              t1 = this._gl;
              t1.pixelStorei$2(37441, texture.get$premultiplyAlpha() === true ? 1 : 0);
              image = texture.get$image();
              t1 = image.get$width();
            case 1:
              state0 = 0;
              t3 = $.getInterceptor$JSNumber(t1);
            case 2:
              if (state0 === 2 || state0 === 0 && $.$$eq(t3.$and(t1, t3.$sub(t1, 1)), 0) === true)
                switch (state0) {
                  case 0:
                    t1 = image.get$height();
                  case 2:
                    state0 = 0;
                    t3 = $.getInterceptor$JSNumber(t1);
                    isImagePowerOfTwo = $.$$eq(t3.$and(t1, t3.$sub(t1, 1)), 0) === true;
                }
              else
                isImagePowerOfTwo = false;
              glFormat = this.paramThreeToGL$1(texture.get$format());
              glType = this.paramThreeToGL$1(texture.get$type());
              this.setTextureParameters$3(3553, texture, isImagePowerOfTwo);
              t1 = this._gl;
              if (typeof texture === "object" && texture !== null && !!texture.$isDataTexture)
                t1.texImage2D$9(3553, 0, glFormat, image.get$width(), image.get$height(), 0, glFormat, glType, image.get$data());
              else
                t1.texImage2D$6(3553, 0, glFormat, glFormat, glType, texture.get$image());
              if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
                this._gl.generateMipmap$1(3553);
              texture.set$needsUpdate(false);
              if (!(texture.get$onUpdate() == null))
                texture.onUpdate$0();
          }
        else {
          t1 = this._gl;
          if (typeof slot !== "number")
            throw $.iae(slot);
          t1.activeTexture$1(33984 + slot);
          this._gl.bindTexture$2(3553, $.$$index(texture, "__webglTexture"));
        }
    }
  },
  clampToMaxSize$2: function(image, maxSize) {
    var t1, maxDimension, t3, t4, t6, canvas;
    if (typeof maxSize !== "number")
      return this.clampToMaxSize$2$bailout(1, image, maxSize);
    t1 = image.get$width();
    if (typeof t1 !== "number")
      return this.clampToMaxSize$2$bailout(2, image, maxSize, t1);
    if (t1 <= maxSize) {
      t1 = image.get$height();
      if (typeof t1 !== "number")
        return this.clampToMaxSize$2$bailout(3, image, maxSize, t1);
      t1 = t1 <= maxSize;
    } else
      t1 = false;
    if (t1)
      return image;
    maxDimension = $.max(image.get$width(), image.get$height());
    t1 = image.get$width();
    if (typeof t1 !== "number")
      return this.clampToMaxSize$2$bailout(4, image, maxSize, t1, maxDimension);
    t3 = $.CONSTANT6.floor$0(t1 * maxSize / maxDimension);
    t4 = image.get$height();
    if (typeof t4 !== "number")
      return this.clampToMaxSize$2$bailout(5, image, maxSize, null, maxDimension, t3, t4);
    t6 = $.CONSTANT6.floor$0(t4 * maxSize / maxDimension);
    canvas = $.CanvasElement_CanvasElement(null, null);
    canvas.set$width(t3);
    canvas.set$height(t6);
    canvas.get$context2d().drawImage$9(image, 0, 0, image.get$width(), image.get$height(), 0, 0, t3, t6);
    return canvas;
  },
  clampToMaxSize$2$bailout: function(state0, image, maxSize, t1, maxDimension, t3, t4) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = image.get$width();
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$le(t1, maxSize) === true)
          switch (state0) {
            case 0:
              t1 = image.get$height();
            case 3:
              state0 = 0;
              t3 = $.$$le(t1, maxSize) === true;
              t1 = t3;
          }
        else
          t1 = false;
        if (t1)
          return image;
        maxDimension = $.max(image.get$width(), image.get$height());
        t1 = image.get$width();
      case 4:
        state0 = 0;
        t3 = $.floor($.$$div($.$$mul(t1, maxSize), maxDimension));
        t4 = image.get$height();
      case 5:
        var t6, canvas;
        state0 = 0;
        t6 = $.floor($.$$div($.$$mul(t4, maxSize), maxDimension));
        canvas = $.CanvasElement_CanvasElement(null, null);
        canvas.set$width(t3);
        canvas.set$height(t6);
        canvas.get$context2d().drawImage$9(image, 0, 0, image.get$width(), image.get$height(), 0, 0, t3, t6);
        return canvas;
    }
  },
  setCubeTexture$2: function(texture, slot) {
    var t1, cubeImage, i, t2, t4, image, isImagePowerOfTwo, glFormat, glType;
    t1 = $.length(texture.get$image());
    if (typeof t1 !== "number")
      return this.setCubeTexture$2$bailout(1, texture, slot, t1);
    if (t1 === 6) {
      t1 = texture.get$image();
      if (typeof t1 === "object" && t1 !== null && !!t1.$isImageList)
        texture.set$image($.WebGLImageList_WebGLImageList(t1));
      if (texture.get$needsUpdate() === true) {
        if (texture.get$image().get$webglTextureCube() == null) {
          t1 = this._gl.createTexture$0();
          texture.get$image().set$webglTextureCube(t1);
        }
        t1 = this._gl;
        if (typeof slot !== "number")
          throw $.iae(slot);
        t1.activeTexture$1(33984 + slot);
        this._gl.bindTexture$2(34067, texture.get$image().get$webglTextureCube());
        t1 = this._gl;
        t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
        cubeImage = $.List_List$fixedLength(6, null);
        for (t1 = this.autoScaleCubemaps, i = 0; i < 6; ++i) {
          t2 = texture.get$image();
          if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
            return this.setCubeTexture$2$bailout(2, texture, null, t1, t2, cubeImage, i);
          t4 = t2.length;
          if (t1) {
            if (i >= t4)
              throw $.ioore(i);
            cubeImage[i] = this.clampToMaxSize$2(t2[i], this.maxCubemapSize);
          } else {
            if (i >= t4)
              throw $.ioore(i);
            cubeImage[i] = t2[i];
          }
        }
        image = cubeImage[0];
        t1 = image.get$width();
        if (t1 !== (t1 | 0))
          return this.setCubeTexture$2$bailout(3, texture, null, t1, null, cubeImage, null, image);
        if ((t1 & t1 - 1) >>> 0 === 0) {
          t1 = image.get$height();
          if (t1 !== (t1 | 0))
            return this.setCubeTexture$2$bailout(4, texture, null, t1, null, cubeImage);
          isImagePowerOfTwo = (t1 & t1 - 1) >>> 0 === 0;
        } else
          isImagePowerOfTwo = false;
        glFormat = this.paramThreeToGL$1(texture.get$format());
        glType = this.paramThreeToGL$1(texture.get$type());
        this.setTextureParameters$3(34067, texture, isImagePowerOfTwo);
        for (i = 0; i < 6; ++i)
          this._gl.texImage2D$6(34069 + i, 0, glFormat, glFormat, glType, cubeImage[i]);
        if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
          this._gl.generateMipmap$1(34067);
        texture.set$needsUpdate(false);
        if (!(texture.get$onUpdate() == null))
          texture.onUpdate$0();
      } else {
        t1 = this._gl;
        if (typeof slot !== "number")
          throw $.iae(slot);
        t1.activeTexture$1(33984 + slot);
        this._gl.bindTexture$2(34067, texture.get$image().get$webglTextureCube());
      }
    }
  },
  setCubeTexture$2$bailout: function(state0, texture, slot, t1, t2, cubeImage, i, image) {
    switch (state0) {
      case 0:
        t1 = $.length(texture.get$image());
      case 1:
        state0 = 0;
      default:
        var t3, isImagePowerOfTwo, glFormat, glType;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.$$eq(t1, 6) === true)
          switch (state0) {
            case 0:
              t1 = texture.get$image();
              if (typeof t1 === "object" && t1 !== null && !!t1.$isImageList)
                texture.set$image($.WebGLImageList_WebGLImageList(t1));
            default:
              if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && texture.get$needsUpdate() === true)
                switch (state0) {
                  case 0:
                    if (texture.get$image().get$webglTextureCube() == null) {
                      t1 = this._gl.createTexture$0();
                      texture.get$image().set$webglTextureCube(t1);
                    }
                    t1 = this._gl;
                    if (typeof slot !== "number")
                      throw $.iae(slot);
                    t1.activeTexture$1(33984 + slot);
                    this._gl.bindTexture$2(34067, texture.get$image().get$webglTextureCube());
                    t1 = this._gl;
                    t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
                    cubeImage = $.List_List$fixedLength(6, null);
                    t1 = this.autoScaleCubemaps;
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!(i < 6))
                              break L0;
                            t2 = texture.get$image();
                          case 2:
                            state0 = 0;
                            if (t1)
                              cubeImage[i] = this.clampToMaxSize$2($.$$index(t2, i), this.maxCubemapSize);
                            else
                              cubeImage[i] = $.$$index(t2, i);
                            ++i;
                        }
                    image = cubeImage[0];
                    t1 = image.get$width();
                  case 3:
                    state0 = 0;
                    t3 = $.getInterceptor$JSNumber(t1);
                  case 4:
                    if (state0 === 4 || state0 === 0 && $.$$eq(t3.$and(t1, t3.$sub(t1, 1)), 0) === true)
                      switch (state0) {
                        case 0:
                          t1 = image.get$height();
                        case 4:
                          state0 = 0;
                          t3 = $.getInterceptor$JSNumber(t1);
                          isImagePowerOfTwo = $.$$eq(t3.$and(t1, t3.$sub(t1, 1)), 0) === true;
                      }
                    else
                      isImagePowerOfTwo = false;
                    glFormat = this.paramThreeToGL$1(texture.get$format());
                    glType = this.paramThreeToGL$1(texture.get$type());
                    this.setTextureParameters$3(34067, texture, isImagePowerOfTwo);
                    for (i = 0; i < 6; ++i)
                      this._gl.texImage2D$6(34069 + i, 0, glFormat, glFormat, glType, cubeImage[i]);
                    if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
                      this._gl.generateMipmap$1(34067);
                    texture.set$needsUpdate(false);
                    if (!(texture.get$onUpdate() == null))
                      texture.onUpdate$0();
                }
              else {
                t1 = this._gl;
                if (typeof slot !== "number")
                  throw $.iae(slot);
                t1.activeTexture$1(33984 + slot);
                this._gl.bindTexture$2(34067, texture.get$image().get$webglTextureCube());
              }
          }
    }
  },
  setCubeTextureDynamic$2: function(texture, slot) {
    var t1 = this._gl;
    if (typeof slot !== "number")
      throw $.iae(slot);
    t1.activeTexture$1(33984 + slot);
    this._gl.bindTexture$2(34067, texture.$index("__webglTexture"));
  },
  setupFrameBuffer$3: function(framebuffer, renderTarget, textureTarget) {
    this._gl.bindFramebuffer$2(36160, framebuffer);
    this._gl.framebufferTexture2D$5(36160, 36064, textureTarget, $.$$index(renderTarget, "__webglTexture"), 0);
  },
  setupRenderBuffer$2: function(renderbuffer, renderTarget) {
    var t1, t2;
    this._gl.bindRenderbuffer$2(36161, renderbuffer);
    t1 = renderTarget.get$depthBuffer() === true;
    if (t1 && renderTarget.get$stencilBuffer() !== true) {
      this._gl.renderbufferStorage$4(36161, 33189, renderTarget.get$width(), renderTarget.get$height());
      this._gl.framebufferRenderbuffer$4(36160, 36096, 36161, renderbuffer);
    } else {
      t1 = t1 && renderTarget.get$stencilBuffer() === true;
      t2 = this._gl;
      if (t1) {
        t2.renderbufferStorage$4(36161, 34041, renderTarget.get$width(), renderTarget.get$height());
        this._gl.framebufferRenderbuffer$4(36160, 33306, 36161, renderbuffer);
      } else
        t2.renderbufferStorage$4(36161, 32854, renderTarget.get$width(), renderTarget.get$height());
    }
  },
  setRenderTarget$1: function(renderTarget) {
    var isCube, t1, t2, isTargetPowerOfTwo, glFormat, glType, i, framebuffer, width, height, vx, vy;
    isCube = typeof renderTarget === "object" && renderTarget !== null && !!renderTarget.$isWebGLRenderTargetCube;
    if (!(renderTarget == null) && renderTarget.get$__webglFramebuffer() == null) {
      if (renderTarget.get$depthBuffer() == null)
        renderTarget.set$depthBuffer(true);
      if (renderTarget.get$stencilBuffer() == null)
        renderTarget.set$stencilBuffer(true);
      renderTarget.set$__webglTexture(this._gl.createTexture$0());
      t1 = renderTarget.get$width();
      t2 = $.getInterceptor$JSNumber(t1);
      if ($.$$eq(t2.$and(t1, t2.$sub(t1, 1)), 0) === true) {
        t1 = renderTarget.get$height();
        t2 = $.getInterceptor$JSNumber(t1);
        isTargetPowerOfTwo = $.$$eq(t2.$and(t1, t2.$sub(t1, 1)), 0) === true;
      } else
        isTargetPowerOfTwo = false;
      glFormat = this.paramThreeToGL$1(renderTarget.get$format());
      glType = this.paramThreeToGL$1(renderTarget.get$type());
      if (isCube) {
        renderTarget.__webglFramebuffer = [];
        renderTarget.__webglRenderbuffer = [];
        this._gl.bindTexture$2(34067, renderTarget.__webglTexture);
        this.setTextureParameters$3(34067, renderTarget, isTargetPowerOfTwo);
        for (i = 0; i < 6; ++i) {
          $.$$indexSet(renderTarget.__webglFramebuffer, i, this._gl.createFramebuffer$0());
          $.$$indexSet(renderTarget.__webglRenderbuffer, i, this._gl.createRenderbuffer$0());
          t1 = 34069 + i;
          this._gl.texImage2D$9(t1, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
          this.setupFrameBuffer$3($.$$index(renderTarget.__webglFramebuffer, i), renderTarget, t1);
          this.setupRenderBuffer$2($.$$index(renderTarget.__webglRenderbuffer, i), renderTarget);
        }
        if (isTargetPowerOfTwo)
          this._gl.generateMipmap$1(34067);
        renderTarget = renderTarget;
      } else {
        renderTarget.set$__webglFramebuffer(this._gl.createFramebuffer$0());
        renderTarget.set$__webglRenderbuffer(this._gl.createRenderbuffer$0());
        this._gl.bindTexture$2(3553, renderTarget.get$__webglTexture());
        this.setTextureParameters$3(3553, renderTarget, isTargetPowerOfTwo);
        this._gl.texImage2D$9(3553, 0, glFormat, renderTarget.get$width(), renderTarget.get$height(), 0, glFormat, glType, null);
        this.setupFrameBuffer$3(renderTarget.get$__webglFramebuffer(), renderTarget, 3553);
        this.setupRenderBuffer$2(renderTarget.get$__webglRenderbuffer(), renderTarget);
        if (isTargetPowerOfTwo)
          this._gl.generateMipmap$1(3553);
      }
      t1 = this._gl;
      if (isCube)
        t1.bindTexture$2(34067, null);
      else
        t1.bindTexture$2(3553, null);
      this._gl.bindRenderbuffer$2(36161, null);
      this._gl.bindFramebuffer$2(36160, null);
    }
    if (!(renderTarget == null)) {
      framebuffer = renderTarget.get$__webglFramebuffer();
      if (isCube)
        framebuffer = $.$$index(framebuffer, $.propertyTypeCast(renderTarget, "$isWebGLRenderTargetCube").get$activeCubeFace());
      width = renderTarget.get$width();
      height = renderTarget.get$height();
      vx = 0;
      vy = 0;
    } else {
      width = this._viewportWidth;
      height = this._viewportHeight;
      vx = this._viewportX;
      vy = this._viewportY;
      framebuffer = null;
    }
    t1 = this._currentFramebuffer;
    if (!(framebuffer == null ? t1 == null : framebuffer === t1)) {
      this._gl.bindFramebuffer$2(36160, framebuffer);
      this._gl.viewport$4(vx, vy, width, height);
      this._currentFramebuffer = framebuffer;
    }
    this._currentWidth = width;
    this._currentHeight = height;
  },
  updateRenderTargetMipmap$1: function(renderTarget) {
    var t1 = this._gl;
    if (typeof renderTarget === "object" && renderTarget !== null && !!renderTarget.$isWebGLRenderTargetCube) {
      t1.bindTexture$2(34067, renderTarget.__webglTexture);
      this._gl.generateMipmap$1(34067);
      this._gl.bindTexture$2(34067, null);
    } else {
      t1.bindTexture$2(3553, renderTarget.get$__webglTexture());
      this._gl.generateMipmap$1(3553);
      this._gl.bindTexture$2(3553, null);
    }
  },
  filterFallback$1: function(f) {
    var t1 = $.getInterceptor(f);
    if (t1.$eq(f, 3) === true || t1.$eq(f, 4) === true || t1.$eq(f, 5) === true)
      return 9728;
    return 9729;
  },
  paramThreeToGL$1: function(p) {
    var t1 = $.getInterceptor(p);
    if (t1.$eq(p, 0) === true)
      return 10497;
    if (t1.$eq(p, 1) === true)
      return 33071;
    if (t1.$eq(p, 2) === true)
      return 33648;
    if (t1.$eq(p, 3) === true)
      return 9728;
    if (t1.$eq(p, 4) === true)
      return 9984;
    if (t1.$eq(p, 5) === true)
      return 9986;
    if (t1.$eq(p, 6) === true)
      return 9729;
    if (t1.$eq(p, 7) === true)
      return 9985;
    if (t1.$eq(p, 8) === true)
      return 9987;
    if (t1.$eq(p, 10) === true)
      return 5121;
    if (t1.$eq(p, 1016) === true)
      return 32819;
    if (t1.$eq(p, 1017) === true)
      return 32820;
    if (t1.$eq(p, 1018) === true)
      return 33635;
    if (t1.$eq(p, 9) === true)
      return 5120;
    if (t1.$eq(p, 11) === true)
      return 5122;
    if (t1.$eq(p, 12) === true)
      return 5123;
    if (t1.$eq(p, 13) === true)
      return 5124;
    if (t1.$eq(p, 14) === true)
      return 5125;
    if (t1.$eq(p, 15) === true)
      return 5126;
    if (t1.$eq(p, 16) === true)
      return 6406;
    if (t1.$eq(p, 17) === true)
      return 6407;
    if (t1.$eq(p, 18) === true)
      return 6408;
    if (t1.$eq(p, 19) === true)
      return 6409;
    if (t1.$eq(p, 20) === true)
      return 6410;
    if (t1.$eq(p, 100) === true)
      return 32774;
    if (t1.$eq(p, 101) === true)
      return 32778;
    if (t1.$eq(p, 102) === true)
      return 32779;
    if (t1.$eq(p, 200) === true)
      return 0;
    if (t1.$eq(p, 201) === true)
      return 1;
    if (t1.$eq(p, 202) === true)
      return 768;
    if (t1.$eq(p, 203) === true)
      return 769;
    if (t1.$eq(p, 204) === true)
      return 770;
    if (t1.$eq(p, 205) === true)
      return 771;
    if (t1.$eq(p, 206) === true)
      return 772;
    if (t1.$eq(p, 207) === true)
      return 773;
    if (t1.$eq(p, 208) === true)
      return 774;
    if (t1.$eq(p, 209) === true)
      return 775;
    if (t1.$eq(p, 210) === true)
      return 776;
    $.print("[paramThreeToGL] Unknown param " + $.S(p));
    return 0;
  },
  allocateBones$1: function(object) {
    var maxBones;
    if (this.supportsBoneTextures === true && !(object == null) && typeof object === "object" && object !== null && !!object.$isSkinnedMesh && object.useVertexTexture === true)
      return 1024;
    else {
      maxBones = $.toInt($.floor($.$$div($.$$sub(this._gl.getParameter$1(36347), 20), 4)));
      if (!(object == null) && typeof object === "object" && object !== null && !!object.$isSkinnedMesh) {
        maxBones = $.min($.length(object.get$bones()), maxBones);
        if ($.CONSTANT3.$lt(maxBones, $.length(object.get$bones())))
          $.print("WebGLRenderer: too many bones - " + $.S($.length(object.get$bones())) + " , this GPU supports just " + $.S(maxBones) + "  (try OpenGL instead of ANGLE)");
      }
      return maxBones;
    }
  },
  allocateLights$1: function(lights) {
    var ll, dirLights, pointLights, spotLights, l, light, t1, maxSpotLights, maxPointLights, maxDirLights, t2;
    if (typeof lights !== "string" && (typeof lights !== "object" || lights === null || lights.constructor !== Array && !lights.$isJavaScriptIndexingBehavior()))
      return this.allocateLights$1$bailout(1, lights);
    ll = lights.length;
    for (dirLights = 0, pointLights = 0, spotLights = 0, l = 0; l < ll; ++l) {
      light = lights[l];
      t1 = typeof light === "object" && light !== null && !!light.$isDirectionalLight;
      if ((t1 || typeof light === "object" && light !== null && !!light.$isSpotLight) && light.get$onlyShadow() === true)
        continue;
      if (t1)
        ++dirLights;
      if (typeof light === "object" && light !== null && !!light.$isPointLight)
        ++pointLights;
      if (typeof light === "object" && light !== null && !!light.$isSpotLight)
        ++spotLights;
    }
    t1 = this.maxLights;
    if ($.CONSTANT1.$le(pointLights + spotLights + dirLights, t1)) {
      maxSpotLights = spotLights;
      maxPointLights = pointLights;
      maxDirLights = dirLights;
    } else {
      t2 = $.getInterceptor$JSNumber(t1);
      maxDirLights = $.ceil($.$$div(t2.$mul(t1, dirLights), pointLights + dirLights));
      maxPointLights = t2.$sub(t1, maxDirLights);
      maxSpotLights = maxPointLights;
    }
    return $.makeLiteralMap(["directional", maxDirLights, "point", maxPointLights, "spot", maxSpotLights]);
  },
  allocateLights$1$bailout: function(state0, lights, t1, ll) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(lights);
        ll = t1.get$length(lights);
      case 2:
        var dirLights, pointLights, spotLights, l, light, t2, maxSpotLights, maxPointLights, maxDirLights;
        state0 = 0;
        for (dirLights = 0, pointLights = 0, spotLights = 0, l = 0; $.CONSTANT1.$lt(l, ll); ++l) {
          light = t1.$index(lights, l);
          t2 = typeof light === "object" && light !== null && !!light.$isDirectionalLight;
          if ((t2 || typeof light === "object" && light !== null && !!light.$isSpotLight) && light.get$onlyShadow() === true)
            continue;
          if (t2)
            ++dirLights;
          if (typeof light === "object" && light !== null && !!light.$isPointLight)
            ++pointLights;
          if (typeof light === "object" && light !== null && !!light.$isSpotLight)
            ++spotLights;
        }
        t1 = this.maxLights;
        if ($.CONSTANT1.$le(pointLights + spotLights + dirLights, t1)) {
          maxSpotLights = spotLights;
          maxPointLights = pointLights;
          maxDirLights = dirLights;
        } else {
          t2 = $.getInterceptor$JSNumber(t1);
          maxDirLights = $.ceil($.$$div(t2.$mul(t1, dirLights), pointLights + dirLights));
          maxPointLights = t2.$sub(t1, maxDirLights);
          maxSpotLights = maxPointLights;
        }
        return $.makeLiteralMap(["directional", maxDirLights, "point", maxPointLights, "spot", maxSpotLights]);
    }
  },
  allocateShadows$1: function(lights) {
    var ll, l, maxShadows, light;
    if (typeof lights !== "string" && (typeof lights !== "object" || lights === null || lights.constructor !== Array && !lights.$isJavaScriptIndexingBehavior()))
      return this.allocateShadows$1$bailout(1, lights);
    ll = lights.length;
    for (l = 0, maxShadows = 0; l < ll; ++l) {
      light = lights[l];
      if (light.get$castShadow() !== true)
        continue;
      if (typeof light === "object" && light !== null && !!light.$isSpotLight)
        ++maxShadows;
      if (typeof light === "object" && light !== null && !!light.$isDirectionalLight && light.get$shadowCascade() !== true)
        ++maxShadows;
    }
    return maxShadows;
  },
  allocateShadows$1$bailout: function(state0, lights, t1, ll) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(lights);
        ll = t1.get$length(lights);
      case 2:
        var l, maxShadows, light;
        state0 = 0;
        for (l = 0, maxShadows = 0; $.CONSTANT1.$lt(l, ll); ++l) {
          light = t1.$index(lights, l);
          if (light.get$castShadow() !== true)
            continue;
          if (typeof light === "object" && light !== null && !!light.$isSpotLight)
            ++maxShadows;
          if (typeof light === "object" && light !== null && !!light.$isDirectionalLight && light.get$shadowCascade() !== true)
            ++maxShadows;
        }
        return maxShadows;
    }
  },
  initGL$0: function() {
    var error, exception, t1;
    try {
      this._gl = this.canvas.getContext$1("experimental-webgl");
      if (this._gl == null)
        throw $.$$throw("Error creating WebGL context.");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      error = t1;
      $.print(error);
    }

    this._glExtensionTextureFloat = this._gl.getExtension$1("OES_texture_float");
    this._glExtensionStandardDerivatives = this._gl.getExtension$1("OES_standard_derivatives");
    this._glExtensionTextureFilterAnisotropic = this._gl.getExtension$1("EXT_texture_filter_anisotropic");
    if (this._glExtensionTextureFilterAnisotropic == null)
      this._glExtensionTextureFilterAnisotropic = this._gl.getExtension$1("MOZ_EXT_texture_filter_anisotropic");
    if (this._glExtensionTextureFilterAnisotropic == null)
      this._glExtensionTextureFilterAnisotropic = this._gl.getExtension$1("WEBKIT_EXT_texture_filter_anisotropic");
    if (this._glExtensionTextureFloat == null)
      $.print("THREE.WebGLRenderer: Float textures not supported.");
    if (this._glExtensionStandardDerivatives == null)
      $.print("THREE.WebGLRenderer: Standard derivatives not supported.");
    if (this._glExtensionTextureFilterAnisotropic == null)
      $.print("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");
  },
  setDefaultGLState$0: function() {
    var t1, t2;
    this._gl.clearColor$4(0, 0, 0, 1);
    this._gl.clearDepth$1(1);
    this._gl.clearStencil$1(0);
    this._gl.enable$1(2929);
    this._gl.depthFunc$1(515);
    this._gl.frontFace$1(2305);
    this._gl.cullFace$1(1029);
    this._gl.enable$1(2884);
    this._gl.enable$1(3042);
    this._gl.blendEquation$1(32774);
    this._gl.blendFunc$2(770, 771);
    t1 = this._gl;
    t2 = this.clearColor;
    t1.clearColor$4(t2.r, t2.g, t2.b, this.clearAlpha);
  },
  WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$maxLights$precision$premultipliedAlpha$preserveDrawingBuffer$stencil: function(alpha, antialias, canvas, clearAlpha, clearColorHex, maxLights, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    this._lights = $.makeLiteralMap(["ambient", [0, 0, 0], "directional", $.makeLiteralMap(["length", 0, "colors", [], "positions", []]), "point", $.makeLiteralMap(["length", 0, "colors", [], "positions", [], "distances", []]), "spot", $.makeLiteralMap(["length", 0, "colors", [], "positions", [], "distances", [], "directions", [], "angles", [], "exponents", []])]);
    if (this.canvas == null)
      this.canvas = $.CanvasElement_CanvasElement(null, null);
    this.initGL$0();
    this.setDefaultGLState$0();
    this.maxVertexTextures = this._gl.getParameter$1(35660);
    this.maxTextureSize = this._gl.getParameter$1(3379);
    this.maxCubemapSize = this._gl.getParameter$1(34076);
    this.maxAnisotropy = !(this._glExtensionTextureFilterAnisotropic == null) ? this._gl.getParameter$1(34047) : 0;
    this.supportsVertexTextures = $.$$gt(this.maxVertexTextures, 0);
    this.supportsBoneTextures = this.supportsVertexTextures === true && !(this._glExtensionTextureFloat == null);
  }
};

$$.WebGLRendererInfo = {"": "Object;memory,render=",
  render$1: function(arg0) {
    return this.render.call$1(arg0);
  },
  render$2: function(arg0, arg1) {
    return this.render.call$2(arg0, arg1);
  },
  render$4: function(arg0, arg1, arg2, arg3) {
    return this.render.call$4(arg0, arg1, arg2, arg3);
  },
  WebGLRendererInfo$0: function() {
    this.memory = $.WebGLRendererMemoryInfo$();
    this.render = $.WebGLRendererRenderInfo$();
  }
};

$$.WebGLRendererMemoryInfo = {"": "Object;programs,geometries,textures"};

$$.WebGLRendererRenderInfo = {"": "Object;calls=,vertices=,faces=,points="};

$$.Program = {"": "Object;id=,glProgram>,code>,usedTimes=,attributes>,uniforms="};

$$.Buffer = {"": "Object;glbuffer,belongsToAttribute="};

$$.WebGLObject = {"": "Object;__webglInit=,__webglActive=,_modelViewMatrix=,_normalMatrix=,_normalMatrixArray,_modelViewMatrixArray,modelMatrixArray,buffer=,object>,opaque=,transparent=,render=,z=,__webglMorphTargetInfluences=",
  render$1: function(arg0) {
    return this.render.call$1(arg0);
  },
  render$2: function(arg0, arg1) {
    return this.render.call$2(arg0, arg1);
  },
  render$4: function(arg0, arg1, arg2, arg3) {
    return this.render.call$4(arg0, arg1, arg2, arg3);
  },
  get$geometry: function() {
    return this.get$_hasGeometry() === true ? this.object.get$geometry() : null;
  },
  get$webglgeometry: function() {
    return !(this.get$geometry() == null) ? $.WebGLGeometry_WebGLGeometry$from(this.get$geometry()) : null;
  },
  get$material: function() {
    return this.object.get$material();
  },
  get$webglmaterial: function() {
    return $.WebGLMaterial_WebGLMaterial$from(this.get$material());
  },
  get$matrixWorld: function() {
    return this.object.get$matrixWorld();
  },
  get$_hasGeometry: function() {
    var t1 = this.object;
    return typeof t1 === "object" && t1 !== null && !!t1.$isMesh || typeof t1 === "object" && t1 !== null && !!t1.$isParticleSystem || typeof t1 === "object" && t1 !== null && !!t1.$isLine;
  },
  get$morphTargetBase: function() {
    return this.object.get$morphTargetBase();
  },
  get$receiveShadow: function() {
    return this.object.get$receiveShadow();
  },
  get$morphTargetForcedOrder: function() {
    return $.propertyTypeCast(this.object, "$isMesh").get$morphTargetForcedOrder();
  },
  get$morphTargetInfluences: function() {
    return $.propertyTypeCast(this.object, "$isMesh").get$morphTargetInfluences();
  },
  get$useVertexTexture: function() {
    return this.object.get$useVertexTexture();
  },
  get$boneMatrices: function() {
    return this.object.get$boneMatrices();
  },
  get$boneTexture: function() {
    return this.object.get$boneTexture();
  }
};

$$.WebGLGeometry = {"": "Object;id=,_vertices,faces3>,faces4>,materialIndex>,numMorphTargets>,numMorphNormals>,geometryGroups=,geometryGroupsList=,verticesNeedUpdate=,morphTargetsNeedUpdate=,elementsNeedUpdate=,uvsNeedUpdate=,normalsNeedUpdate=,tangentsNeedUpdate=,colorsNeedUpdate=,__inittedArrays=,__vertexArray=,__normalArray=,__tangentArray=,__colorArray=,__uvArray=,__uv2Array=,__skinVertexAArray=,__skinVertexBArray=,__skinIndexArray=,__skinWeightArray=,__faceArray=,__lineArray=,__morphTargetsArrays=,__morphNormalsArrays=,__webglFaceCount=,__webglLineCount=,__webglParticleCount=,__webglVertexCount=,__sortArray=,__webglCustomAttributesList=,__webglVertexBuffer=,__webglNormalBuffer=,__webglTangentBuffer=,__webglColorBuffer=,__webglUVBuffer=,__webglUV2Buffer=,__webglSkinVertexABuffer=,__webglSkinVertexBBuffer=,__webglSkinIndicesBuffer=,__webglSkinWeightsBuffer=,__webglFaceBuffer=,__webglLineBuffer=,__webglMorphTargetsBuffers=,__webglMorphNormalsBuffers=,_geometry",
  set$vertices: function(n) {
    this._vertices = n;
    return n;
  },
  get$vertices: function() {
    var t1 = this._vertices;
    if (t1 == null && !(this._geometry == null))
      return this._geometry.get$vertices();
    return t1;
  },
  get$morphTargets: function() {
    return this._geometry.get$morphTargets();
  },
  get$morphNormals: function() {
    return this._geometry.get$morphNormals();
  },
  get$faces: function() {
    return this._geometry.get$faces();
  },
  get$Dynamic: function() {
    return this._geometry.get$Dynamic();
  },
  get$faceVertexUvs: function() {
    return this._geometry.get$faceVertexUvs();
  },
  get$colors: function() {
    return this._geometry.get$colors();
  },
  get$skinIndices: function() {
    return this._geometry.get$skinIndices();
  },
  get$skinWeights: function() {
    return this._geometry.get$skinWeights();
  },
  get$skinVerticesA: function() {
    return $.$$index(this._geometry, "skinVerticesA");
  },
  get$skinVerticesB: function() {
    return $.$$index(this._geometry, "skinVerticesB");
  },
  get$hasTangents: function() {
    return this._geometry.get$hasTangents();
  }
};

$$.WebGLMaterial = {"": "Object;_material,program=,_fragmentShader,_vertexShader,_uniforms,uniformsList=,numSupportedMorphTargets=,numSupportedMorphNormals=,_shadowPass>",
  get$attributes: function() {
    return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, "$isShaderMaterial").get$attributes() : null;
  },
  get$fragmentShader: function() {
    return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, "$isShaderMaterial").get$fragmentShader() : this._fragmentShader;
  },
  get$vertexShader: function() {
    return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, "$isShaderMaterial").get$vertexShader() : this._vertexShader;
  },
  get$uniforms: function() {
    return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, "$isShaderMaterial").get$uniforms() : this._uniforms;
  },
  set$fragmentShader: function(v) {
    if (this.get$isShaderMaterial() === true)
      $.propertyTypeCast(this._material, "$isShaderMaterial").set$fragmentShader(v);
    else
      this._fragmentShader = v;
    return v;
  },
  set$vertexShader: function(v) {
    if (this.get$isShaderMaterial() === true)
      $.propertyTypeCast(this._material, "$isShaderMaterial").set$vertexShader(v);
    else
      this._vertexShader = v;
    return v;
  },
  set$uniforms: function(v) {
    if (this.get$isShaderMaterial() === true)
      $.propertyTypeCast(this._material, "$isShaderMaterial").set$uniforms(v);
    else
      this._uniforms = v;
    return v;
  },
  get$needsSmoothNormals: function() {
    return !(this._material == null) && !(this.get$shading() == null) && $.$$eq(this.get$shading(), 2) === true;
  },
  get$needsNormals: function() {
    var t1 = this._material;
    return !(typeof t1 === "object" && t1 !== null && !!t1.$isMeshBasicMaterial && this.get$envMap() == null || typeof t1 === "object" && t1 !== null && !!t1.$isMeshDepthMaterial);
  },
  get$name: function() {
    return this._material.get$name();
  },
  get$id: function() {
    return this._material.get$id();
  },
  get$side: function() {
    return this._material.get$side();
  },
  get$opacity: function() {
    return this._material.get$opacity();
  },
  get$blending: function() {
    return this._material.get$blending();
  },
  get$blendSrc: function() {
    return this._material.get$blendSrc();
  },
  get$blendDst: function() {
    return this._material.get$blendDst();
  },
  get$blendEquation: function() {
    return this._material.get$blendEquation();
  },
  blendEquation$1: function(arg0) {
    return this.get$blendEquation().call$1(arg0);
  },
  get$alphaTest: function() {
    return this._material.get$alphaTest();
  },
  get$polygonOffsetFactor: function() {
    return this._material.get$polygonOffsetFactor();
  },
  get$polygonOffsetUnits: function() {
    return this._material.get$polygonOffsetUnits();
  },
  get$transparent: function() {
    return this._material.get$transparent();
  },
  get$depthTest: function() {
    return this._material.get$depthTest();
  },
  get$depthWrite: function() {
    return this._material.get$depthWrite();
  },
  get$polygonOffset: function() {
    return this._material.get$polygonOffset();
  },
  polygonOffset$2: function(arg0, arg1) {
    return this.get$polygonOffset().call$2(arg0, arg1);
  },
  get$visible: function() {
    return this._material.get$visible();
  },
  get$needsUpdate: function() {
    return this._material.get$needsUpdate();
  },
  set$needsUpdate: function(flag) {
    this._material.set$needsUpdate(flag);
    return flag;
  },
  get$vertexColors: function() {
    return this.get$_hasVertexColors() === true ? this._material.get$vertexColors() : 0;
  },
  get$color: function() {
    return this._material.get$color();
  },
  get$ambient: function() {
    return this._material.get$ambient();
  },
  get$emissive: function() {
    return this._material.get$emissive();
  },
  get$lights: function() {
    return this.get$isShaderMaterial() === true && $.propertyTypeCast(this._material, "$isShaderMaterial").get$lights();
  },
  get$morphTargets: function() {
    var t1;
    if (this.get$_hasMorhTargets() === true) {
      t1 = this._material.get$morphTargets();
      if (typeof t1 !== "boolean")
        return this.get$morphTargets$bailout(1, t1);
    } else
      t1 = false;
    return t1;
  },
  get$morphTargets$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
      case 1:
        if (state0 === 1 || state0 === 0 && this.get$_hasMorhTargets() === true)
          switch (state0) {
            case 0:
              t1 = this._material.get$morphTargets();
            case 1:
              state0 = 0;
          }
        else
          t1 = false;
        return t1;
    }
  },
  get$morphNormals: function() {
    var t1;
    if (this.get$_hasMorphNormals() === true) {
      t1 = this._material.get$morphNormals();
      if (typeof t1 !== "boolean")
        return this.get$morphNormals$bailout(1, t1);
    } else
      t1 = false;
    return t1;
  },
  get$morphNormals$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
      case 1:
        if (state0 === 1 || state0 === 0 && this.get$_hasMorphNormals() === true)
          switch (state0) {
            case 0:
              t1 = this._material.get$morphNormals();
            case 1:
              state0 = 0;
          }
        else
          t1 = false;
        return t1;
    }
  },
  get$metal: function() {
    return this.get$isMeshPhongMaterial() === true && $.propertyTypeCast(this._material, "$isMeshPhongMaterial").get$metal();
  },
  get$perPixel: function() {
    return this.get$isMeshPhongMaterial() === true && $.propertyTypeCast(this._material, "$isMeshPhongMaterial").get$perPixel();
  },
  get$wrapAround: function() {
    return this.get$_hasWrapAround() === true && this._material.get$wrapAround();
  },
  get$fog: function() {
    return this.get$_hasFog() === true && this._material.get$fog();
  },
  get$shading: function() {
    return this._material.get$shading();
  },
  get$map: function() {
    return this.get$_hasTextureMap() === true ? this._material.get$map() : null;
  },
  get$envMap: function() {
    return this.get$_hasEnvMap() === true ? this._material.get$envMap() : null;
  },
  get$lightMap: function() {
    return this.get$_hasLightMap() === true ? this._material.get$lightMap() : null;
  },
  get$bumpMap: function() {
    return this.get$isMeshPhongMaterial() === true ? $.propertyTypeCast(this._material, "$isMeshPhongMaterial").get$bumpMap() : null;
  },
  get$specularMap: function() {
    return this.get$_hasSpecularMap() === true ? this._material.get$specularMap() : null;
  },
  get$wireframe: function() {
    return this.get$isLineBasicMaterial() !== true && this.get$isParticleBasicMaterial() !== true && this._material.get$wireframe() === true;
  },
  get$wireframeLinewidth: function() {
    return this.get$wireframe() === true ? this._material.get$wireframeLinewidth() : null;
  },
  get$linewidth: function() {
    return this.get$isLineBasicMaterial() === true ? this._material.get$linewidth() : null;
  },
  get$reflectivity: function() {
    return this._material.get$reflectivity();
  },
  get$refractionRatio: function() {
    return this._material.get$refractionRatio();
  },
  get$combine: function() {
    return this._material.get$combine();
  },
  get$skinning: function() {
    return this.get$_hasSkinning() === true && this._material.get$skinning();
  },
  get$sizeAttenuation: function() {
    return this.get$isParticleBasicMaterial() === true && $.propertyTypeCast(this._material, "$isParticleBasicMaterial").get$sizeAttenuation();
  },
  get$size: function() {
    return this.get$isParticleBasicMaterial() === true ? $.propertyTypeCast(this._material, "$isParticleBasicMaterial").get$size() : null;
  },
  get$isShaderMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isShaderMaterial;
  },
  get$isMeshDepthMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isMeshDepthMaterial;
  },
  get$isMeshNormalMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isMeshNormalMaterial;
  },
  get$isMeshBasicMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isMeshBasicMaterial;
  },
  get$isMeshLambertMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isMeshLambertMaterial;
  },
  get$isMeshPhongMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isMeshPhongMaterial;
  },
  get$isLineBasicMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isLineBasicMaterial;
  },
  get$isParticleBasicMaterial: function() {
    var t1 = this._material;
    return typeof t1 === "object" && t1 !== null && !!t1.$isParticleBasicMaterial;
  },
  get$_hasWrapAround: function() {
    return this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
  },
  get$_hasLightMap: function() {
    return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
  },
  get$_hasEnvMap: function() {
    return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
  },
  get$_hasSpecularMap: function() {
    return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
  },
  get$_hasTextureMap: function() {
    return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true;
  },
  get$_hasSkinning: function() {
    return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
  },
  get$_hasMorhTargets: function() {
    return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
  },
  get$_hasMorphNormals: function() {
    return this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
  },
  get$_hasVertexColors: function() {
    return this.get$isLineBasicMaterial() === true || this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true || this.get$isShaderMaterial() === true;
  },
  get$_hasFog: function() {
    return this.get$isLineBasicMaterial() === true || this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true || this.get$isShaderMaterial() === true;
  }
};

$$.WebGLCamera = {"": "Object;_camera,_viewMatrixArray>,_projectionMatrixArray>",
  get$near: function() {
    return this._camera.get$near();
  },
  get$far: function() {
    return this._camera.get$far();
  },
  get$parent: function() {
    return this._camera.get$parent();
  },
  get$matrixWorld: function() {
    return this._camera.get$matrixWorld();
  },
  get$matrixWorldInverse: function() {
    return this._camera.get$matrixWorldInverse();
  },
  get$projectionMatrix: function() {
    return this._camera.get$projectionMatrix();
  },
  updateMatrixWorld$1$force: function(force) {
    return this._camera.updateMatrixWorld$0();
  },
  updateMatrixWorld$0: function() {
    return this.updateMatrixWorld$1$force(false);
  }
};

$$.WebGLImageList = {"": "Object;_imageList,webglTextureCube=",
  $index: function(index) {
    var t1 = this._imageList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout10(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout10: function(state0, t1, index) {
    return $.$$index(t1, index);
  },
  $indexSet: function(index, img) {
    var t1 = this._imageList;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout5(1, index, t1, img);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index] = img;
  },
  $$indexSet$bailout5: function(state0, index, t1, img) {
    $.$$indexSet(t1, index, img);
  },
  get$length: function() {
    return $.length(this._imageList);
  },
  $isWebGLImageList: true
};

$$.Uniform = {"": "Object;type>,value=,texture="};

$$.Scene = {"": "Object3D;fog>,overrideMaterial>,objects,lights>,__objectsAdded>,__objectsRemoved>,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,__data",
  addObject$1: function(object) {
    var t1, i, c;
    if (typeof object === "object" && object !== null && !!object.$isLight) {
      t1 = $.CONSTANT0.indexOf$1(this.lights, object);
      if (typeof t1 !== "number")
        return this.addObject$1$bailout(1, object, t1);
      if (t1 === -1)
        this.lights.push(object);
    } else if (!(typeof object === "object" && object !== null && !!object.$isCamera || typeof object === "object" && object !== null && !!object.$isBone)) {
      t1 = $.CONSTANT0.indexOf$1(this.objects, object);
      if (typeof t1 !== "number")
        return this.addObject$1$bailout(2, object, t1);
      if (t1 === -1) {
        this.objects.push(object);
        this.__objectsAdded.push(object);
        i = $.CONSTANT0.indexOf$1(this.__objectsRemoved, object);
        if (typeof i !== "number")
          return this.addObject$1$bailout(3, object, null, i);
        if (!(i === -1))
          $.CONSTANT0.removeRange$2(this.__objectsRemoved, i, 1);
      }
    }
    c = 0;
    while (true) {
      t1 = $.length(object.get$children());
      if (typeof t1 !== "number")
        return this.addObject$1$bailout(4, object, t1, null, c);
      if (!(c < t1))
        break;
      t1 = object.get$children();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.addObject$1$bailout(5, object, t1, null, c);
      if (c >= t1.length)
        throw $.ioore(c);
      this.addObject$1(t1[c]);
      ++c;
    }
  },
  addObject$1$bailout: function(state0, object, t1, i, c) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isLight)
          switch (state0) {
            case 0:
              t1 = $.CONSTANT0.indexOf$1(this.lights, object);
            case 1:
              state0 = 0;
              if ($.$$eq(t1, -1) === true)
                this.lights.push(object);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 3 || state0 === 2 || state0 === 0 && !(typeof object === "object" && object !== null && !!object.$isCamera || typeof object === "object" && object !== null && !!object.$isBone))
                switch (state0) {
                  case 0:
                    t1 = $.CONSTANT0.indexOf$1(this.objects, object);
                  case 2:
                    state0 = 0;
                  case 3:
                    if (state0 === 3 || state0 === 0 && $.$$eq(t1, -1) === true)
                      switch (state0) {
                        case 0:
                          this.objects.push(object);
                          this.__objectsAdded.push(object);
                          i = $.CONSTANT0.indexOf$1(this.__objectsRemoved, object);
                        case 3:
                          state0 = 0;
                          if ($.$$eq(i, -1) !== true)
                            $.CONSTANT0.removeRange$2(this.__objectsRemoved, i, 1);
                      }
                }
          }
        c = 0;
      case 4:
      case 5:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(object.get$children());
              case 4:
                state0 = 0;
                if (!$.CONSTANT1.$lt(c, t1))
                  break L0;
                t1 = object.get$children();
              case 5:
                state0 = 0;
                this.addObject$1($.$$index(t1, c));
                ++c;
            }
    }
  },
  removeObject$1: function(object) {
    var i, ai, c, t1;
    if (typeof object === "object" && object !== null && !!object.$isLight) {
      i = $.CONSTANT0.indexOf$1(this.lights, object);
      if (typeof i !== "number")
        return this.removeObject$1$bailout(1, object, i);
      if (!(i === -1))
        $.CONSTANT0.removeRange$2(this.lights, i, 1);
    } else if (!(typeof object === "object" && object !== null && !!object.$isCamera)) {
      i = $.CONSTANT0.indexOf$1(this.objects, object);
      if (typeof i !== "number")
        return this.removeObject$1$bailout(2, object, i);
      if (!(i === -1)) {
        $.CONSTANT0.removeRange$2(this.objects, i, 1);
        this.__objectsRemoved.push(object);
        ai = $.CONSTANT0.indexOf$1(this.__objectsAdded, object);
        if (typeof ai !== "number")
          return this.removeObject$1$bailout(3, object, null, ai);
        if (!(ai === -1))
          $.CONSTANT0.removeRange$2(this.__objectsAdded, ai, 1);
      }
    }
    c = 0;
    while (true) {
      t1 = $.length(object.get$children());
      if (typeof t1 !== "number")
        return this.removeObject$1$bailout(4, object, null, null, t1, c);
      if (!(c < t1))
        break;
      t1 = object.get$children();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.removeObject$1$bailout(5, object, null, null, t1, c);
      if (c >= t1.length)
        throw $.ioore(c);
      this.removeObject$1(t1[c]);
      ++c;
    }
  },
  removeObject$1$bailout: function(state0, object, i, ai, t1, c) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && !!object.$isLight)
          switch (state0) {
            case 0:
              i = $.CONSTANT0.indexOf$1(this.lights, object);
            case 1:
              state0 = 0;
              if ($.$$eq(i, -1) !== true)
                $.CONSTANT0.removeRange$2(this.lights, i, 1);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 3 || state0 === 2 || state0 === 0 && !(typeof object === "object" && object !== null && !!object.$isCamera))
                switch (state0) {
                  case 0:
                    i = $.CONSTANT0.indexOf$1(this.objects, object);
                  case 2:
                    state0 = 0;
                  case 3:
                    if (state0 === 3 || state0 === 0 && $.$$eq(i, -1) !== true)
                      switch (state0) {
                        case 0:
                          $.CONSTANT0.removeRange$2(this.objects, i, 1);
                          this.__objectsRemoved.push(object);
                          ai = $.CONSTANT0.indexOf$1(this.__objectsAdded, object);
                        case 3:
                          state0 = 0;
                          if ($.$$eq(ai, -1) !== true)
                            $.CONSTANT0.removeRange$2(this.__objectsAdded, ai, 1);
                      }
                }
          }
        c = 0;
      case 4:
      case 5:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(object.get$children());
              case 4:
                state0 = 0;
                if (!$.CONSTANT1.$lt(c, t1))
                  break L0;
                t1 = object.get$children();
              case 5:
                state0 = 0;
                this.removeObject$1($.$$index(t1, c));
                ++c;
            }
    }
  },
  Scene$0: function() {
    this.fog = null;
    this.overrideMaterial = null;
    this.matrixAutoUpdate = false;
    this.objects = [];
    this.lights = [];
    this.__objectsAdded = [];
    this.__objectsRemoved = [];
  },
  $isScene: true
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Maps__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt(t1.i_1, 0) === true)
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add(t1.i_1, 1);
  }
};

$$.Face4_clone_anon = {"": "Closure;",
  call$1: function(v) {
    return v.clone$0();
  }
};

$$.Face4_clone_anon0 = {"": "Closure;",
  call$1: function(v) {
    return v.clone$0();
  }
};

$$.Face4_clone_anon1 = {"": "Closure;",
  call$1: function(v) {
    return v.clone$0();
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  }
};

$$.FilteredElementList_removeRange_anon = {"": "Closure;",
  call$1: function(el) {
    return el.remove$0();
  }
};

$$.Face3_clone_anon = {"": "Closure;",
  call$1: function(v) {
    return v.clone$0();
  }
};

$$.Face3_clone_anon0 = {"": "Closure;",
  call$1: function(v) {
    return v.clone$0();
  }
};

$$.Face3_clone_anon1 = {"": "Closure;",
  call$1: function(v) {
    return v.clone$0();
  }
};

$$.Geometry_computeBoundingSphere_anon = {"": "Closure;box_0",
  call$2: function(curMaxRadiusSq, vertex) {
    var radiusSq, t1;
    radiusSq = vertex.lengthSq$0();
    t1 = this.box_0;
    t1.radiusSq_0 = radiusSq;
    return $.$$gt(t1.radiusSq_0, curMaxRadiusSq) === true ? t1.radiusSq_0 : curMaxRadiusSq;
  }
};

$$.Vector3_setEulerFromRotationMatrix_anon = {"": "Closure;",
  call$1: function(x) {
    return $.min($.max(x, -1), 1);
  }
};

$$.Geometry_computeVertexNormals_anon = {"": "Closure;this_1",
  call$1: function(_) {
    return $.add(this.this_1.get$__tmpVertices(), $.Vector3$(0, 0, 0));
  }
};

$$.Geometry_computeVertexNormals_anon0 = {"": "Closure;",
  call$1: function(face) {
    if (typeof face === "object" && face !== null && !!face.$isFace3)
      face.vertexNormals = [$.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0)];
    else if (typeof face === "object" && face !== null && !!face.$isFace4)
      face.vertexNormals = [$.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0)];
  }
};

$$.Geometry_computeVertexNormals_anon1 = {"": "Closure;box_0",
  call$1: function(face) {
    var t1;
    if (typeof face === "object" && face !== null && !!face.$isFace3) {
      t1 = this.box_0;
      $.$$index(t1.vertices_0, face.a).addSelf$1(face.normal);
      $.$$index(t1.vertices_0, face.b).addSelf$1(face.normal);
      $.$$index(t1.vertices_0, face.c).addSelf$1(face.normal);
    } else if (typeof face === "object" && face !== null && !!face.$isFace4) {
      t1 = this.box_0;
      $.$$index(t1.vertices_0, face.a).addSelf$1(face.normal);
      $.$$index(t1.vertices_0, face.b).addSelf$1(face.normal);
      $.$$index(t1.vertices_0, face.c).addSelf$1(face.normal);
      $.$$index(t1.vertices_0, face.d).addSelf$1(face.normal);
    }
  }
};

$$.Geometry_computeVertexNormals_anon2 = {"": "Closure;",
  call$1: function(v) {
    return v.normalize$0();
  }
};

$$.Geometry_computeVertexNormals_anon3 = {"": "Closure;box_0",
  call$1: function(face) {
    var t1, t2;
    if (typeof face === "object" && face !== null && !!face.$isFace3) {
      t1 = $.$$index(face.vertexNormals, 0);
      t2 = this.box_0;
      t1.copy$1($.$$index(t2.vertices_0, face.a));
      $.$$index(face.vertexNormals, 1).copy$1($.$$index(t2.vertices_0, face.b));
      $.$$index(face.vertexNormals, 2).copy$1($.$$index(t2.vertices_0, face.c));
    } else if (typeof face === "object" && face !== null && !!face.$isFace4) {
      t1 = $.$$index(face.vertexNormals, 0);
      t2 = this.box_0;
      t1.copy$1($.$$index(t2.vertices_0, face.a));
      $.$$index(face.vertexNormals, 1).copy$1($.$$index(t2.vertices_0, face.b));
      $.$$index(face.vertexNormals, 2).copy$1($.$$index(t2.vertices_0, face.c));
      $.$$index(face.vertexNormals, 3).copy$1($.$$index(t2.vertices_0, face.d));
    }
  }
};

$$.Geometry_computeFaceNormals_anon = {"": "Closure;box_0,this_1,cb_2,ab_3",
  call$1: function(face) {
    var t1, t2, t3, t4;
    t1 = this.this_1;
    t2 = $.$$index(t1.get$vertices(), face.get$a());
    t3 = this.box_0;
    t3.vA_0 = t2;
    t3.vB_1 = $.$$index(t1.get$vertices(), face.get$b());
    t3.vC_2 = $.$$index(t1.get$vertices(), face.get$c());
    t2 = this.cb_2;
    t2.sub$2(t3.vC_2, t3.vB_1);
    t4 = this.ab_3;
    t4.sub$2(t3.vA_0, t3.vB_1);
    t2.crossSelf$1(t4);
    if (t2.isZero$0() !== true)
      t2.normalize$0();
    face.get$normal().copy$1(t2);
  }
};

$$.Geometry_computeCentroids_anon = {"": "Closure;this_0",
  call$1: function(face) {
    var t1, t2;
    face.get$centroid().setValues$3(0, 0, 0);
    if (typeof face === "object" && face !== null && !!face.$isFace3) {
      t1 = face.centroid;
      t2 = this.this_0;
      t1.addSelf$1($.$$index(t2.get$vertices(), face.a));
      face.centroid.addSelf$1($.$$index(t2.get$vertices(), face.b));
      face.centroid.addSelf$1($.$$index(t2.get$vertices(), face.c));
      face.centroid.divideScalar$1(3);
    } else if (typeof face === "object" && face !== null && !!face.$isFace4) {
      t1 = face.centroid;
      t2 = this.this_0;
      t1.addSelf$1($.$$index(t2.get$vertices(), face.a));
      face.centroid.addSelf$1($.$$index(t2.get$vertices(), face.b));
      face.centroid.addSelf$1($.$$index(t2.get$vertices(), face.c));
      face.centroid.addSelf$1($.$$index(t2.get$vertices(), face.d));
      face.centroid.divideScalar$1(4);
    }
  }
};

$$.TubeGeometry__frenetFrames__initialNormal1 = {"": "Closure;this_1",
  call$1: function(lastBinormal) {
    var t1 = this.this_1;
    $.$$indexSet(t1.get$normals(), 0, $.Vector3$(0, 0, 0));
    $.$$indexSet(t1.get$binormals(), 0, $.Vector3$(0, 0, 0));
    if (lastBinormal == null)
      lastBinormal = $.Vector3$(0, 0, 1);
    $.$$index(t1.get$normals(), 0).cross$2(lastBinormal, $.$$index(t1.get$tangents(), 0)).normalize$0();
    $.$$index(t1.get$binormals(), 0).cross$2($.$$index(t1.get$tangents(), 0), $.$$index(t1.get$normals(), 0)).normalize$0();
  },
  call$0: function() {
    return this.call$1(null);
  }
};

$$.TubeGeometry__frenetFrames__initialNormal2 = {"": "Closure;this_2,epsilon_3",
  call$0: function() {
    var t1, t2;
    t1 = this.this_2;
    t2 = t1.get$path().getTangentAt$1(this.epsilon_3);
    $.$$indexSet(t1.get$normals(), 0, $.Vector3$(0, 0, 0).sub$2(t2, $.$$index(t1.get$tangents(), 0)).normalize$0());
    $.$$indexSet(t1.get$binormals(), 0, $.Vector3$(0, 0, 0).cross$2($.$$index(t1.get$tangents(), 0), $.$$index(t1.get$normals(), 0)));
    $.$$index(t1.get$normals(), 0).cross$2($.$$index(t1.get$binormals(), 0), $.$$index(t1.get$tangents(), 0)).normalize$0();
    $.$$index(t1.get$binormals(), 0).cross$2($.$$index(t1.get$tangents(), 0), $.$$index(t1.get$normals(), 0)).normalize$0();
  }
};

$$.TubeGeometry__frenetFrames__initialNormal3 = {"": "Closure;box_0,this_4,normal_5,vec_6",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    $.$$indexSet(t1.get$normals(), 0, $.Vector3$(0, 0, 0));
    $.$$indexSet(t1.get$binormals(), 0, $.Vector3$(0, 0, 0));
    t2 = this.box_0;
    t2.smallest_0 = (1/0);
    t2.tx_1 = $.abs($.$$index(t1.get$tangents(), 0).get$x());
    t2.ty_2 = $.abs($.$$index(t1.get$tangents(), 0).get$y());
    t2.tz_3 = $.abs($.$$index(t1.get$tangents(), 0).get$z());
    if ($.$$le(t2.tx_1, t2.smallest_0) === true) {
      t2.smallest_0 = t2.tx_1;
      this.normal_5.setValues$3(1, 0, 0);
    }
    if ($.$$le(t2.ty_2, t2.smallest_0) === true) {
      t2.smallest_0 = t2.ty_2;
      this.normal_5.setValues$3(0, 1, 0);
    }
    if ($.$$le(t2.tz_3, t2.smallest_0) === true)
      this.normal_5.setValues$3(0, 0, 1);
    t2 = this.vec_6;
    t2.cross$2($.$$index(t1.get$tangents(), 0), this.normal_5).normalize$0();
    $.$$index(t1.get$normals(), 0).cross$2($.$$index(t1.get$tangents(), 0), t2);
    $.$$index(t1.get$binormals(), 0).cross$2($.$$index(t1.get$tangents(), 0), $.$$index(t1.get$normals(), 0));
  }
};

$$.WebGLRenderer_renderImmediateObject_anon = {"": "Closure;this_0,material_1,program_2",
  call$1: function(object) {
    this.this_0.renderBufferImmediate$3(object, this.program_2, this.material_1);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, length, i, t2;
    t1 = this.values_0;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout0(1, value, t1);
    length = t1.length;
    for (i = 0; i < length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.add(t1, value);
    $.add(this.copies_1, null);
    return length;
  },
  call$1$bailout0: function(state0, value, t1, t3, length) {
    switch (state0) {
      case 0:
        t1 = this.values_0;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        length = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        for (i = 0; $.CONSTANT1.$lt(i, length); ++i) {
          t2 = t3.$index(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.add(t1, value);
        $.add(this.copies_1, null);
        return length;
    }
  }
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    return $.$$index(this.copies_2, i);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    $.$$indexSet(this.copies_3, i, x);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, t3, length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      copy = $.makeLiteralMap([]);
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(2, e, copy, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)); t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        t3 = this.call$1(e[t2]);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= copy.length)
          throw $.ioore(t2);
        copy[t2] = t3;
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      length = e.length;
      if (this.mustCopy_4 === true)
        copy = new Array(length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(4, e, copy, slot, length, $.CONSTANT0);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, copy, slot, length, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      case 2:
        if (state0 === 2 || state0 === 0 && Object.getPrototypeOf(e) === Object.prototype)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              copy = $.makeLiteralMap([]);
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)), t2 = $.getInterceptor$JSArray(copy); t1.moveNext$0() === true;) {
                t3 = t1.get$current();
                t2.$indexSet(copy, t3, this.call$1(e[t3]));
              }
              return copy;
          }
      default:
        var t2, t3, i;
        if (state0 === 4 || state0 === 3 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              length = t1.get$length(e);
            case 3:
              state0 = 0;
              copy = this.mustCopy_4 === true ? new Array(length) : e;
            case 4:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$JSArray(copy), i = 0; $.CONSTANT1.$lt(i, length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  }
};

$$.WebGLRenderer_initMaterial_anon = {"": "Closure;material_0",
  call$2: function(k, u) {
    return $.add(this.material_0.get$uniformsList(), [u, k]);
  }
};

$$.WebGLRenderer_buildProgram_anon = {"": "Closure;box_0",
  call$2: function(u, _) {
    return $.add(this.box_0.identifiers_0, u);
  }
};

$$.WebGLRenderer_buildProgram_anon0 = {"": "Closure;box_0",
  call$2: function(a, _) {
    return $.add(this.box_0.identifiers_0, a);
  }
};

$$.UniformsUtils_clone_anon = {"": "Closure;uniforms_dst_0",
  call$2: function(k, u) {
    var parameter_src, parameter_dst, t1, t2;
    parameter_src = u.get$value();
    if (typeof parameter_src === "object" && parameter_src !== null && !!parameter_src.$isColor || typeof parameter_src === "object" && parameter_src !== null && !!parameter_src.$isVector2 || typeof parameter_src === "object" && parameter_src !== null && !!parameter_src.$isVector3 || typeof parameter_src === "object" && parameter_src !== null && !!parameter_src.$isVector4 || typeof parameter_src === "object" && parameter_src !== null && !!parameter_src.$isMatrix4 || typeof parameter_src === "object" && parameter_src !== null && !!parameter_src.$isTexture)
      parameter_dst = parameter_src.clone$0();
    else
      parameter_dst = typeof parameter_src === "object" && parameter_src !== null && (parameter_src.constructor === Array || parameter_src.$isList()) ? $.List_List$from(parameter_src) : parameter_src;
    t1 = this.uniforms_dst_0;
    t2 = u.get$type();
    $.$$indexSet(t1, k, $.Uniform$(u.get$texture(), t2, parameter_dst));
  }
};

$$.UniformsUtils_merge_anon = {"": "Closure;box_0,merged_1",
  call$2: function(k, _) {
    $.$$indexSet(this.merged_1, k, $.$$index(this.box_0.tmp_0, k));
  }
};

$$.WebGLRenderer_addObject_anon = {"": "Closure;box_0,this_1,webglobject_2",
  call$2: function(k, geometryGroup) {
    var t1;
    if (geometryGroup.get$__webglVertexBuffer() == null) {
      t1 = this.this_1;
      t1.createMeshBuffers$1(geometryGroup);
      t1.initMeshBuffers$2(geometryGroup, this.webglobject_2);
      t1 = this.box_0;
      t1.geometry_0.set$verticesNeedUpdate(true);
      t1.geometry_0.set$morphTargetsNeedUpdate(true);
      t1.geometry_0.set$elementsNeedUpdate(true);
      t1.geometry_0.set$uvsNeedUpdate(true);
      t1.geometry_0.set$normalsNeedUpdate(true);
      t1.geometry_0.set$tangentsNeedUpdate(true);
      t1.geometry_0.set$colorsNeedUpdate(true);
    }
  }
};

$$.WebGLRenderer_addObject_anon0 = {"": "Closure;this_3,scene_4,webglobject_5",
  call$2: function(k, geometryGroup) {
    this.this_3.addBuffer$3($.$$index(this.scene_4, "__webglObjects"), geometryGroup, this.webglobject_5);
  }
};

$$.WebGLRenderer_initDirectBuffers_anon = {"": "Closure;box_0,this_1",
  call$2: function(a, v) {
    var t1, t2, t3;
    t1 = $.$$eq(a, "index");
    t2 = this.box_0;
    if (t1 === true)
      t2.type_1 = 34963;
    else
      t2.type_1 = 34962;
    t1 = this.box_0;
    t1.attribute_0 = v;
    t2 = this.this_1;
    t3 = t2.get$_gl().createBuffer$0();
    t1.attribute_0.set$buffer(t3);
    t2.get$_gl().bindBuffer$2(t1.type_1, t1.attribute_0.get$buffer());
    t2.get$_gl().bufferData$3(t1.type_1, t1.attribute_0.get$array(), 35044);
  }
};

$$.WebGLRenderer_sortFacesByMaterial_anon = {"": "Closure;this_0,geometry_1",
  call$2: function(k, g) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$_geometryGroupCounter();
    t1.set$_geometryGroupCounter($.$$add(t2, 1));
    g.set$id(t2);
    $.add(this.geometry_1.get$geometryGroupsList(), g);
  }
};

$$.WebGLRenderer_initMeshBuffers_anon = {"": "Closure;this_0,geometryGroup_1,nvertices_2,material_3",
  call$1: function(a) {
    var t1, attribute, t2, t3, t4, size, buffer;
    t1 = $.$$index(this.material_3.get$attributes(), a);
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout1(1, a, t1);
    attribute = $.makeLiteralMap([]);
    if (typeof attribute !== "object" || attribute === null || (attribute.constructor !== Array || !!attribute.immutable$list) && !attribute.$isJavaScriptIndexingBehavior())
      return this.call$1$bailout1(2, a, t1, attribute);
    for (t2 = $.iterator(t1); t2.moveNext$0() === true;) {
      t3 = t2.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      t4 = t1[t3];
      if (t3 >= attribute.length)
        throw $.ioore(t3);
      attribute[t3] = t4;
    }
    throw $.iae("__webglInitialized");
    if ("__webglInitialized" < 0 || "__webglInitialized" >= attribute.length)
      throw $.ioore("__webglInitialized");
    t2 = attribute.__webglInitialized;
    if (!(t2 == null || $.$$eq(t2, false) === true)) {
      throw $.iae("createUniqueBuffers");
      if ("createUniqueBuffers" < 0 || "createUniqueBuffers" >= attribute.length)
        throw $.ioore("createUniqueBuffers");
      t2 = attribute.createUniqueBuffers;
      t2 = !(t2 == null) && t2 === true;
    } else
      t2 = true;
    if (t2) {
      t2 = attribute.length;
      if ("__webglInitialized" >= t2)
        throw $.ioore("__webglInitialized");
      attribute.__webglInitialized = true;
      throw $.iae("type");
      if ("type" < 0 || "type" >= t2)
        throw $.ioore("type");
      if ($.$$eq(attribute.type, "v2") === true)
        size = 2;
      else {
        if ("type" >= attribute.length)
          throw $.ioore("type");
        if ($.$$eq(attribute.type, "v3") === true)
          size = 3;
        else {
          if ("type" >= attribute.length)
            throw $.ioore("type");
          if ($.$$eq(attribute.type, "v4") === true)
            size = 4;
          else {
            if ("type" >= attribute.length)
              throw $.ioore("type");
            size = $.$$eq(attribute.type, "c") === true ? 3 : 1;
          }
        }
      }
      throw $.iae("size");
      if ("size" < 0 || "size" >= attribute.length)
        throw $.ioore("size");
      attribute.size = size;
      t2 = $.Float32Array_Float32Array($.$$mul(this.nvertices_2, size));
      throw $.iae("array");
      if ("array" < 0 || "array" >= attribute.length)
        throw $.ioore("array");
      attribute.array = t2;
      buffer = $.Buffer$(this.this_0.get$_gl().createBuffer$0());
      buffer.belongsToAttribute = a;
      throw $.iae("buffer");
      if ("buffer" < 0 || "buffer" >= attribute.length)
        throw $.ioore("buffer");
      attribute.buffer = buffer;
      t1.set$needsUpdate(true);
      throw $.iae("__original");
      if ("__original" < 0 || "__original" >= attribute.length)
        throw $.ioore("__original");
      attribute.__original = t1;
    }
    $.add(this.geometryGroup_1.get$__webglCustomAttributesList(), attribute);
  },
  call$1$bailout1: function(state0, a, t1, attribute) {
    switch (state0) {
      case 0:
        t1 = $.$$index(this.material_3.get$attributes(), a);
      case 1:
        state0 = 0;
        attribute = $.makeLiteralMap([]);
      case 2:
        var t2, t3, t4, t5, size, buffer;
        state0 = 0;
        for (t2 = $.getInterceptor$JSArray(t1), t3 = t2.get$iterator(t1), t4 = $.getInterceptor$JSArray(attribute); t3.moveNext$0() === true;) {
          t5 = t3.get$current();
          t4.$indexSet(attribute, t5, t2.$index(t1, t5));
        }
        t2 = $.getInterceptor$JSStringJSArray(attribute);
        if (!(t2.$index(attribute, "__webglInitialized") == null || $.$$eq(t2.$index(attribute, "__webglInitialized"), false) === true))
          t3 = !(t2.$index(attribute, "createUniqueBuffers") == null) && t2.$index(attribute, "createUniqueBuffers") === true;
        else
          t3 = true;
        if (t3) {
          t2.$indexSet(attribute, "__webglInitialized", true);
          if ($.$$eq(t2.$index(attribute, "type"), "v2") === true)
            size = 2;
          else if ($.$$eq(t2.$index(attribute, "type"), "v3") === true)
            size = 3;
          else if ($.$$eq(t2.$index(attribute, "type"), "v4") === true)
            size = 4;
          else
            size = $.$$eq(t2.$index(attribute, "type"), "c") === true ? 3 : 1;
          t2.$indexSet(attribute, "size", size);
          t2.$indexSet(attribute, "array", $.Float32Array_Float32Array($.$$mul(this.nvertices_2, size)));
          buffer = $.Buffer$(this.this_0.get$_gl().createBuffer$0());
          buffer.belongsToAttribute = a;
          t2.$indexSet(attribute, "buffer", buffer);
          t1.set$needsUpdate(true);
          t2.$indexSet(attribute, "__original", t1);
        }
        $.add(this.geometryGroup_1.get$__webglCustomAttributesList(), attribute);
    }
  }
};

$$.WebGLRenderer_setParticleBuffers_anon = {"": "Closure;",
  call$2: function(a, b) {
    return $.$$sub($.$$index(b, 0), $.$$index(a, 0));
  }
};

$$.Object3D_updateMatrixWorld_anon = {"": "Closure;box_0",
  call$1: function(c) {
    return c.updateMatrixWorld$1$force(this.box_0.force_0);
  }
};

$$.createMultiMaterialObject_anon = {"": "Closure;geometry_0,group_1",
  call$1: function(material) {
    $.add(this.group_1, $.Mesh$(this.geometry_0, material));
  }
};

$$.ExtrudeGeometry_addShape_f3 = {"": "Closure;this_1,shape_2,material_3,uvgen_4,shapesOffset_5",
  call$4: function(a, b, c, isBottom) {
    var t1, t2, t3, t4, t5, t6, uvs;
    t1 = this.shapesOffset_5;
    t2 = $.$$add(a, t1);
    t3 = $.$$add(b, t1);
    t1 = $.$$add(c, t1);
    t4 = this.this_1;
    $.add(t4.get$faces(), $.Face3$(t2, t3, t1, null, null, this.material_3));
    t5 = this.uvgen_4;
    t6 = this.shape_2;
    uvs = isBottom === true ? t5.generateBottomUV$6(t4, t6, null, t2, t3, t1) : t5.generateTopUV$6(t4, t6, null, t2, t3, t1);
    $.add($.$$index(t4.get$faceVertexUvs(), 0), uvs);
  }
};

$$.ExtrudeGeometry_addShape_f4 = {"": "Closure;this_6,shape_7,extrudeMaterial_8,uvgen_9,shapesOffset_10",
  call$7: function(a, b, c, d, wallContour, stepIndex, stepsLength) {
    var t1, t2, t3, t4, t5, uvs;
    t1 = this.shapesOffset_10;
    t2 = $.$$add(a, t1);
    t3 = $.$$add(b, t1);
    t4 = $.$$add(c, t1);
    t1 = $.$$add(d, t1);
    t5 = this.this_6;
    $.add(t5.get$faces(), $.Face4$(t2, t3, t4, t1, null, null, this.extrudeMaterial_8));
    uvs = this.uvgen_9.generateSideWallUV$10(t5, this.shape_7, wallContour, null, t2, t3, t4, t1, stepIndex, stepsLength);
    $.add($.$$index(t5.get$faceVertexUvs(), 0), uvs);
  }
};

$$.ExtrudeGeometry_addShape_sidewalls = {"": "Closure;box_0,nSteps_11,vlen_12,f4_13",
  call$2: function(contour, layeroffset) {
    var t1, i, t2, t4, t5, t7, k, t6, sl, t3, s, slen1, s0, slen2;
    if (typeof layeroffset !== "number")
      return this.call$2$bailout(1, contour, layeroffset);
    t1 = $.getInterceptor$JSStringJSArray(contour);
    i = t1.get$length(contour);
    if (typeof i !== "number")
      return this.call$2$bailout(2, contour, layeroffset, t1, i);
    t2 = this.vlen_12;
    if (typeof t2 !== "number")
      return this.call$2$bailout(3, contour, layeroffset, t1, i, t2);
    t4 = this.f4_13;
    t5 = this.nSteps_11;
    if (typeof t5 !== "number")
      return this.call$2$bailout(4, contour, layeroffset, t1, i, t2, $.CONSTANT3, t4, t5, $.CONSTANT3);
    t7 = this.box_0;
    for (; --i, i >= 0;) {
      k = i - 1;
      if (k < 0)
        k = $.$$sub(t1.get$length(contour), 1);
      if (typeof k !== "number")
        return this.call$2$bailout(5, contour, layeroffset, t1, i, t2, $.CONSTANT3, t4, t5, $.CONSTANT3, k, t7, $.CONSTANT3);
      t6 = $.$$mul(t7.bevelSegments_0, 2);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      sl = t5 + t6;
      for (t3 = layeroffset + i, t6 = layeroffset + k, s = 0; s < sl; s = s0) {
        slen1 = t2 * s;
        s0 = s + 1;
        slen2 = t2 * s0;
        t4.call$7(t3 + slen1, t6 + slen1, t6 + slen2, t3 + slen2, contour, s, sl);
      }
    }
  },
  call$2$bailout: function(state0, contour, layeroffset, t1, i, t2, t5, t6, t7, t4, k, t9, t10) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(contour);
        i = t1.get$length(contour);
      case 2:
        state0 = 0;
        t2 = this.vlen_12;
      case 3:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(t2);
        t5 = $.getInterceptor$JSNumber(layeroffset);
        t6 = this.f4_13;
        t7 = this.nSteps_11;
      case 4:
        state0 = 0;
        t9 = this.box_0;
        t10 = $.getInterceptor$JSNumber(t7);
      case 5:
        var t3, sl, s, slen1, s0, slen2;
        L0:
          while (true)
            switch (state0) {
              case 0:
                i = $.$$sub(i, 1);
                t3 = $.getInterceptor$JSNumber(i);
                if (!(t3.$ge(i, 0) === true))
                  break L0;
                k = t3.$sub(i, 1);
                if ($.$$lt(k, 0) === true)
                  k = $.$$sub(t1.get$length(contour), 1);
              case 5:
                state0 = 0;
                sl = t10.$add(t7, $.$$mul(t9.bevelSegments_0, 2));
                for (s = 0; $.CONSTANT1.$lt(s, sl); s = s0) {
                  slen1 = t4.$mul(t2, s);
                  s0 = s + 1;
                  slen2 = t4.$mul(t2, s0);
                  t6.call$7($.$$add(t5.$add(layeroffset, i), slen1), $.$$add(t5.$add(layeroffset, k), slen1), $.$$add(t5.$add(layeroffset, k), slen2), $.$$add(t5.$add(layeroffset, i), slen2), contour, s, sl);
                }
            }
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, length, i, t2;
    t1 = this.values_1;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout3(1, value, t1);
    length = t1.length;
    for (i = 0; i < length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.add(t1, value);
    $.add(this.copies_2, null);
    return length;
  },
  call$1$bailout3: function(state0, value, t1, t3, length) {
    switch (state0) {
      case 0:
        t1 = this.values_1;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        length = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        for (i = 0; $.CONSTANT1.$lt(i, length); ++i) {
          t2 = t3.$index(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.add(t1, value);
        $.add(this.copies_2, null);
        return length;
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    return $.$$index(this.copies_3, i);
  }
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    $.$$indexSet(this.copies_4, i, x);
  }
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.$isDateTime)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!e.$isRegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.$isFile())
      return e;
    if (typeof e === "object" && e !== null && e.$isBlob())
      return e;
    if (typeof e === "object" && e !== null && e.$isFileList())
      return e;
    if (typeof e === "object" && e !== null && e.$isImageData())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.$isMap()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (!(t2 == null))
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout2(1, e);
      length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (!(copy == null)) {
        if (true === copy) {
          copy = new Array(length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (!(elementCopy == null ? element == null : elementCopy === element)) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array(length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.$isJavaScriptIndexingBehavior())
              return this.call$1$bailout2(3, e, length, $.CONSTANT0, t3, elementCopy, copy0, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array(length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout2(4, e, length, $.CONSTANT0, null, null, null, null, null, copy, i);
      for (; i < length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout2: function(state0, e, length, t2, t3, elementCopy, copy0, slot, t4, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.$isDateTime)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!e.$isRegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.$isFile())
          return e;
        if (typeof e === "object" && e !== null && e.$isBlob())
          return e;
        if (typeof e === "object" && e !== null && e.$isFileList())
          return e;
        if (typeof e === "object" && e !== null && e.$isImageData())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.$isMap()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (!(t2 == null))
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, element, j;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(e);
              length = t2.get$length(e);
            case 2:
              state0 = 0;
              slot = this.findSlot_5.call$1(e);
              t4 = this.readSlot_6;
              copy = t4.call$1(slot);
              if (!(copy == null)) {
                if (true === copy) {
                  copy = new Array(length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t3 = this.writeSlot_7;
            case 3:
              if (state0 === 3 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t3.call$2(slot, true);
                    i = 0;
                  case 3:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.CONSTANT1.$lt(i, length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 3:
                            if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                              switch (state0) {
                                case 0:
                                  copy0 = t4.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array(length);
                                    t3.call$2(slot, copy0);
                                  }
                                case 3:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$JSArray(copy0), j = 0; j < i; ++j)
                                    t1.$indexSet(copy0, j, t2.$index(e, j));
                                  t1.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t3.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array(length);
                t3.call$2(slot, copy);
                i = 0;
              }
            case 4:
              state0 = 0;
              for (t1 = $.getInterceptor$JSArray(copy); $.CONSTANT1.$lt(i, length); ++i)
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  }
};

$$.BoundClosure = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};
$$.BoundClosure1 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};
$$.BoundClosure2 = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  }
};
$$.BoundClosure3 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1($);
  }
};
$$.BoundClosure4 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  call$0: function() {
    return this.call$1($);
  }
};
$$.BoundClosure5 = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  },
  call$1: function(when) {
    return this.call$3(when, $, $);
  },
  call$2: function(when, grainOffset) {
    return this.call$3(when, grainOffset, $);
  }
};
$.Strings__toJsStringArray = function(strings) {
  var length, i, string;
  $.checkNull(strings);
  if (!strings.constructor === Array)
    strings = $.List_List$from(strings);
  length = strings.length;
  for (i = 0; i < length; ++i) {
    string = strings[i];
    if (!(typeof string === "string"))
      throw $.$$throw($.ArgumentError$(string));
  }
  return strings;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var t1;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  t1 = $.toString(value);
  if (!(typeof t1 === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return t1;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var name, decompiled, t1;
  name = $.constructorNameFallback(object);
  if ($.$$eq(name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name = decompiled;
  }
  t1 = $.getInterceptor$JSString(name);
  return t1.charCodeAt$1(name, 0) === 36 ? t1.substring$1(name, 1) : name;
};

$.Primitives_newFixedList = function(length) {
  var result = new Array(length);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if ($.CONSTANT4.endsWith$1(message, "is null") === true || $.CONSTANT4.endsWith$1(message, "is undefined") === true || $.CONSTANT4.endsWith$1(message, "is null or undefined") === true || $.CONSTANT4.endsWith$1(message, "of undefined") === true || $.CONSTANT4.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, t1, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (t1 = $.getInterceptor$JSArray(result); iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    t1.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return new $.invokeClosure_anon(closure).call$0();
  else if (t1.$eq(numberOfArguments, 1) === true)
    return new $.invokeClosure_anon0(closure, arg1).call$0();
  else if (t1.$eq(numberOfArguments, 2) === true)
    return new $.invokeClosure_anon1(closure, arg1, arg2).call$0();
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $;
  $function = function($0, $1) { return $.invokeClosure.call$5(closure, $, arity, $0, $1); };
  closure.$identity = $function;
  return $function;
};

$.propertyTypeCastError = function(value, property) {
  var t1 = $.getInterceptor$JSStringJSArray(property);
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name = tag;
  if (name === "Window")
    return "DOMWindow";
  if (name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name === "WebKitMutationObserver")
    return "MutationObserver";
  if (name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name === "AudioGainNode")
    return "GainNode";
  if (name === "AudioPannerNode")
    return "PannerNode";
  if (name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name === "Oscillator")
    return "OscillatorNode";
  if (name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name;
};

$.typeNameInOpera = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "ApplicationCache")
    return "DOMApplicationCache";
  return name;
};

$.typeNameInFirefox = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name === "DataTransfer")
    return "Clipboard";
  if (name === "DragEvent")
    return "MouseEvent";
  if (name === "GeoGeolocation")
    return "Geolocation";
  if (name === "MouseScrollEvent")
    return "WheelEvent";
  if (name === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name === "WorkerMessageEvent")
    return "MessageEvent";
  if (name === "XMLDocument")
    return "Document";
  return name;
};

$.typeNameInIE = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name === "ApplicationCache")
    return "DOMApplicationCache";
  if (name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name === "DataTransfer")
    return "Clipboard";
  if (name === "DragEvent")
    return "MouseEvent";
  if (name === "HTMLDDElement")
    return "HTMLElement";
  if (name === "HTMLDTElement")
    return "HTMLElement";
  if (name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name === "HTMLPhraseElement")
    return "HTMLElement";
  if (name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name === "MouseWheelEvent")
    return "WheelEvent";
  if (name === "Position")
    return "Geoposition";
  if (name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name;
};

$.constructorNameFallback = function(object) {
  var $constructor, name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    name = $constructor.name;
    if (typeof name === "string")
      t1 = !(name === "") && !(name === "Object") && !(name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name, methods, arguments) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT7));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name + " is not a function");} else {return Object.prototype[name].apply(this, arguments);}};
  if ($.callHasOwnProperty(hasOwnPropertyFunction, proto, name) !== true)
    $.defineProperty(proto, name, method);
  return method.apply(obj, arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT7)[name];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (isMultiLine === true)
    $.add(sb, "m");
  if (isCaseSensitive !== true)
    $.add(sb, "i");
  if (global === true)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length, patternLength, startIndex, position, t2, endIndex;
  result = $.List_List(0);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    t2 = $.getInterceptor(position);
    if (t2.$eq(position, -1) === true)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = t2.$add(position, patternLength);
    if ($.$$eq(endIndex, length) === true)
      break;
    else
      startIndex = t2.$eq(position, endIndex) === true ? $.$$add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.$$eq($.CONSTANT4.indexOf$2(receiver, other, startIndex), -1) !== true;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT4.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.CONSTANT4.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length, t1, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function(content) {
  var t1 = typeof content === "string" ? content : $.S(content);
  return new $.JsStringBuffer(t1);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.$indexSet(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.$indexSet(dst, j, src[i]);
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_reduce = function(iterable, initialValue, combine) {
  var t1;
  for (t1 = $.iterator(iterable); t1.moveNext$0() === true;)
    initialValue = combine.call$2(initialValue, t1.get$current());
  return initialValue;
};

$.IterableMixinWorkaround_joinList = function(list, separator) {
  var t1, buffer, i;
  if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if (typeof separator !== "string")
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if ($.isEmpty(list) === true)
    return "";
  t1 = list.length;
  if (t1 === 1) {
    if (0 >= t1)
      throw $.ioore(0);
    return $.S(list[0]);
  }
  buffer = $.StringBuffer_StringBuffer("");
  if (separator === "")
    for (t1 = $.getInterceptor$JSArray(buffer), i = 0; i < list.length; ++i)
      t1.add$1(buffer, $.S(list[i]));
  else {
    if (0 >= list.length)
      throw $.ioore(0);
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, $.S(list[0]));
    for (i = 1; i < list.length; ++i) {
      t1.add$1(buffer, separator);
      if (i >= list.length)
        throw $.ioore(i);
      t1.add$1(buffer, $.S(list[i]));
    }
  }
  return $.toString(buffer);
};

$.IterableMixinWorkaround_joinList$bailout = function(state0, list, separator) {
  var t1, buffer, t2, i;
  t1 = $.getInterceptor$JSStringJSArray(list);
  if (t1.get$isEmpty(list) === true)
    return "";
  if ($.$$eq(t1.get$length(list), 1) === true)
    return $.S(t1.$index(list, 0));
  buffer = $.StringBuffer_StringBuffer("");
  if (separator == null || $.$$eq(separator, "") === true)
    for (t2 = $.getInterceptor$JSArray(buffer), i = 0; $.CONSTANT1.$lt(i, t1.get$length(list)); ++i)
      t2.add$1(buffer, $.S(t1.$index(list, i)));
  else {
    t2 = $.getInterceptor$JSArray(buffer);
    t2.add$1(buffer, $.S(t1.$index(list, 0)));
    for (i = 1; $.CONSTANT1.$lt(i, t1.get$length(list)); ++i) {
      t2.add$1(buffer, separator);
      t2.add$1(buffer, $.S(t1.$index(list, i)));
    }
  }
  return $.toString(buffer);
};

$.IterableMixinWorkaround_sortList = function(l, compare) {
  if (compare == null)
    compare = $.Comparable_compare;
  $._Sort__doSort(l, 0, l.length - 1, compare);
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(0));
  return $.toString(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.Collections__containsRef(visiting, o) === true)
      $.add(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.Collections__containsRef(visiting, o) === true)
      $.add(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT1.$tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length) {
  return $.$$and($.$$add(currentProbe, numberOfProbes), $.$$sub(length, 1));
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(0));
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach(m, new $.Maps__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$._Sort__doSort = function(a, left, right, compare) {
  if (right - left <= 32)
    $._Sort_insertionSort_(a, left, right, compare);
  else
    $._Sort__dualPivotQuicksort(a, left, right, compare);
};

$._Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior())
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$$gt(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$._Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$$gt(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.CONSTANT0.$indexSet(a, j, a[j0]);
      j = j0;
    }
    $.CONSTANT0.$indexSet(a, j, el);
  }
};

$._Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, t3, great0, less0, t4;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior())
    return $._Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.CONSTANT1.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT1.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$$gt(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  t1 = $.$$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$JSNumber(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$lt(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else if ($.$$gt(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$gt(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$$lt(compare.call$2(a[great], el2), 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t2 = less - 1;
  t3 = a.length;
  if (t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (left >= t3)
    throw $.ioore(left);
  a[left] = t4;
  a[t2] = el2;
  t2 = great + 1;
  if (t2 < 0 || t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  a[t2] = el4;
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$._Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, t3, less0;
  sixth = $.CONSTANT1.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT1.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$$gt(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.CONSTANT0.$indexSet(a, index1, el1);
  $.CONSTANT0.$indexSet(a, index3, el3);
  $.CONSTANT0.$indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.CONSTANT0.$indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.CONSTANT0.$indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  t1 = $.$$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.$indexSet(a, k, a[less]);
          $.CONSTANT0.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$JSNumber(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.CONSTANT0.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, less, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, k, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$lt(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.$indexSet(a, k, a[less]);
          $.CONSTANT0.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$$gt(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$gt(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$$lt(compare.call$2(a[great], el2), 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.CONSTANT0.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, less, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, k, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t2 = less - 1;
  if (t2 >= a.length)
    throw $.ioore(t2);
  $.CONSTANT0.$indexSet(a, left, a[t2]);
  $.CONSTANT0.$indexSet(a, t2, el2);
  t2 = great + 1;
  if (t2 < 0 || t2 >= a.length)
    throw $.ioore(t2);
  $.CONSTANT0.$indexSet(a, right, a[t2]);
  $.CONSTANT0.$indexSet(a, t2, el4);
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.$indexSet(a, k, a[less]);
          $.CONSTANT0.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              $.CONSTANT0.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, less, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, k, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(list, $.length(list), -1, null);
};

$.MappedList$ = function(_list, _f) {
  return new $.MappedList(_list, _f);
};

$.Comparable_compare = function(a, b) {
  return $.compareTo(a, b);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll($.replaceAll($.replaceAll($.CONSTANT4.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.List_List = function(length) {
  if (!(typeof length === "number" && Math.floor(length) === length) || length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length) + "."));
  return new Array(length);
};

$.List_List$fixedLength = function(length, fill) {
  var result, t1, i;
  if (!(typeof length === "number" && Math.floor(length) === length) || length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length) + "."));
  result = $.Primitives_newFixedList(length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length, fill, result);
  if ($.$$eq(length, 0) !== true && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length, fill, result) {
  var t1, i;
  if ($.$$eq(length, 0) !== true && !(fill == null))
    for (t1 = $.getInterceptor$JSStringJSArray(result), i = 0; $.CONSTANT1.$lt(i, t1.get$length(result)); ++i)
      t1.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.print = function(object) {
  if (typeof object === "string")
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.toString(object));
};

$.StringBuffer_StringBuffer = function(content) {
  return $.JsStringBuffer$(content);
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  return $.Strings__toJsStringArray(strings).join(separator);
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.ApplicationCacheEvents$ = function(_ptr) {
  return new $.ApplicationCacheEvents(_ptr);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = document.$$dom_createElement$1("canvas");
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.Float32Array_Float32Array = function(length) {
  return new Float32Array(length);
};

$.Float32Array_Float32Array$fromList = function(list) {
  return new Float32Array(list);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.Int32Array_Int32Array$fromList = function(list) {
  return new Int32Array(list);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.RtcDataChannelEvents$ = function(_ptr) {
  return new $.RtcDataChannelEvents(_ptr);
};

$.RtcPeerConnectionEvents$ = function(_ptr) {
  return new $.RtcPeerConnectionEvents(_ptr);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.Uint16Array_Uint16Array = function(length) {
  return new Uint16Array(length);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$._FrameSetElementEvents$ = function(_ptr) {
  return new $._FrameSetElementEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains($._Device_userAgent(), "Opera", 0);
};

$._Device_isWebKit = function() {
  return $._Device_isOpera() !== true && $.contains($._Device_userAgent(), "WebKit", 0) === true;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertDartToNative_ImageData = function(imageData) {
  if (typeof imageData === "object" && imageData !== null && !!imageData.$is_TypedImageData)
    return {data: imageData.data, height: imageData.height, width: imageData.width};
  return imageData;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = window;
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.length(array), -1, null);
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  t2 = $.getInterceptor$JSNumber(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, length, accumulator) {
  var end, i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, length, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, length, accumulator);
  if ($.$$lt(length, 0) === true)
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length !== "number")
    throw $.iae(length);
  end = start + length;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, length, accumulator) {
  var t1, end, i, t2;
  if ($.$$lt(length, 0) === true)
    throw $.$$throw($.ArgumentError$("length"));
  t1 = $.getInterceptor$JSNumber(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  end = t1.$add(start, length);
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.$$gt(end, t1.get$length(a)) === true)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, end) === true; i = t2.$add(i, 1))
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$.DatabaseEvents$ = function(_ptr) {
  return new $.DatabaseEvents(_ptr);
};

$.OpenDBRequestEvents$ = function(_ptr) {
  return new $.OpenDBRequestEvents(_ptr);
};

$.RequestEvents$ = function(_ptr) {
  return new $.RequestEvents(_ptr);
};

$.TransactionEvents$ = function(_ptr) {
  return new $.TransactionEvents(_ptr);
};

$.VersionChangeRequestEvents$ = function(_ptr) {
  return new $.VersionChangeRequestEvents(_ptr);
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.CONSTANT6.get$isNegative(b) === true || $.CONSTANT6.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.CONSTANT6.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.CONSTANT3.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.Random_Random = function(seed) {
  return $.CONSTANT5;
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.WebGL_Geometry_Extrude_By_U_Shapes$ = function() {
  return new $.WebGL_Geometry_Extrude_By_U_Shapes(null, null, null, null, null, null, 0, 0, 0, 0, null, null, null);
};

$.main = function() {
  $.WebGL_Geometry_Extrude_By_U_Shapes$().run$0();
};

$.CubicBezierCurve$ = function(v0, v1, v2, v3) {
  return new $.CubicBezierCurve(v0, v1, v2, v3, null, null, false);
};

$.CurvePath$ = function() {
  return new $.CurvePath([], [], false, null, null, null, false);
};

$.EllipseCurve$ = function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise) {
  return new $.EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, null, null, false);
};

$.LineCurve$ = function(v1, v2) {
  return new $.LineCurve(v1, v2, null, null, false);
};

$.LineCurve3$ = function(v1, v2) {
  return new $.LineCurve3(v1, v2, null, null, false);
};

$.PathAction$ = function(action, args) {
  return new $.PathAction(action, args);
};

$.Path$ = function(points) {
  var t1 = new $.Path(false, null, [], [], [], false, null, null, null, false);
  t1.Path$1(points);
  return t1;
};

$.QuadraticBezierCurve$ = function(v0, v1, v2) {
  return new $.QuadraticBezierCurve(v0, v1, v2, null, null, false);
};

$.Shape$ = function(points) {
  var t1 = new $.Shape([], false, null, [], [], [], false, null, null, null, false);
  t1.Path$1(points);
  return t1;
};

$.SplineCurve$ = function(points) {
  var t1 = new $.SplineCurve(points, null, null, false);
  t1.SplineCurve$1(points);
  return t1;
};

$.SplineCurve3$ = function(points) {
  var t1 = new $.SplineCurve3(points, null, null, false);
  t1.SplineCurve3$1(points);
  return t1;
};

$.tangentCubicBezier = function(t, p0, p1, p2, p3) {
  var t1, t2, t3;
  if (typeof p0 !== "number")
    throw $.iae(p0);
  if (typeof t !== "number")
    throw $.iae(t);
  t1 = 1 - t;
  if (typeof p1 !== "number")
    throw $.iae(p1);
  t2 = 6 * t;
  if (typeof p2 !== "number")
    throw $.iae(p2);
  t3 = 3 * t * t;
  if (typeof p3 !== "number")
    throw $.iae(p3);
  return -3 * p0 * t1 * t1 + 3 * p1 * t1 * t1 - t2 * p1 * t1 + t2 * p2 * t1 - t3 * p2 + t3 * p3;
};

$.interpolate = function(p0, p1, p2, p3, t) {
  var t1, t2, t3, t20;
  t1 = $.$$mul($.$$sub(p2, p0), 0.5);
  t2 = $.$$mul($.$$sub(p3, p1), 0.5);
  t3 = $.getInterceptor$JSNumber(t);
  t20 = t3.$mul(t, t);
  t3 = t3.$mul(t, t20);
  if (typeof p1 !== "number")
    throw $.iae(p1);
  if (typeof p2 !== "number")
    throw $.iae(p2);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (typeof t2 !== "number")
    throw $.iae(t2);
  if (typeof t3 !== "number")
    throw $.iae(t3);
  if (typeof t20 !== "number")
    throw $.iae(t20);
  if (typeof t !== "number")
    throw $.iae(t);
  return (2 * p1 - 2 * p2 + t1 + t2) * t3 + (-3 * p1 + 3 * p2 - 2 * t1 - t2) * t20 + t1 * t + p1;
};

$.removeHoles = function(contour, holes) {
  var shape, allpoints, verts, t1, holeIndex, shapeIndex, h, d, p, pts1, pts2, hole, t2, h2, shortest, dist, t3, prevShapeVert, prevHoleVert, t4, t5, areaa, t6, t7, t8, areab, shapeIndex0, holeIndex0, areaa2, tmpShape1, tmpShape2, tmpHole1, tmpHole2;
  if (typeof holes !== "string" && (typeof holes !== "object" || holes === null || holes.constructor !== Array && !holes.$isJavaScriptIndexingBehavior()))
    return $.removeHoles$bailout(1, contour, holes);
  shape = $.List_List$from(contour);
  allpoints = $.List_List$from(shape);
  verts = [];
  for (t1 = $.getInterceptor$JSStringJSArray(holes), holeIndex = null, shapeIndex = null, h = 0, d = null, p = null, pts1 = null, pts2 = null; h < holes.length; ++h) {
    hole = holes[h];
    if (typeof hole !== "string" && (typeof hole !== "object" || hole === null || hole.constructor !== Array && !hole.$isJavaScriptIndexingBehavior()))
      return $.removeHoles$bailout(2, null, holes, allpoints, verts, t1, shape, hole, holeIndex, shapeIndex, h, d, p, pts1, pts2);
    $.CONSTANT0.addAll$1(allpoints, hole);
    for (t2 = $.getInterceptor$JSStringJSArray(hole), h2 = 0, shortest = (1/0); h2 < hole.length; ++h2) {
      pts1 = hole[h2];
      dist = [];
      for (p = 0; p < shape.length; ++p) {
        pts2 = shape[p];
        d = pts1.distanceToSquared$1(pts2);
        dist.push(d);
        if ($.$$lt(d, shortest) === true) {
          shortest = d;
          shapeIndex = p;
          holeIndex = h2;
        }
      }
    }
    t3 = $.getInterceptor$JSNumber(shapeIndex);
    prevShapeVert = $.$$ge(t3.$sub(shapeIndex, 1), 0) === true ? t3.$sub(shapeIndex, 1) : shape.length - 1;
    t3 = $.getInterceptor$JSNumber(holeIndex);
    prevHoleVert = $.$$ge(t3.$sub(holeIndex, 1), 0) === true ? t3.$sub(holeIndex, 1) : hole.length - 1;
    if (holeIndex !== (holeIndex | 0))
      throw $.iae(holeIndex);
    if (holeIndex < 0 || holeIndex >= hole.length)
      throw $.ioore(holeIndex);
    t3 = hole[holeIndex];
    if (shapeIndex !== (shapeIndex | 0))
      throw $.iae(shapeIndex);
    t4 = shape.length;
    if (shapeIndex < 0 || shapeIndex >= t4)
      throw $.ioore(shapeIndex);
    t5 = shape[shapeIndex];
    if (prevShapeVert !== (prevShapeVert | 0))
      throw $.iae(prevShapeVert);
    if (prevShapeVert < 0 || prevShapeVert >= t4)
      throw $.ioore(prevShapeVert);
    areaa = $.area([t3, t5, shape[prevShapeVert]]);
    t6 = hole.length;
    if (holeIndex >= t6)
      throw $.ioore(holeIndex);
    t7 = hole[holeIndex];
    if (prevHoleVert !== (prevHoleVert | 0))
      throw $.iae(prevHoleVert);
    if (prevHoleVert < 0 || prevHoleVert >= t6)
      throw $.ioore(prevHoleVert);
    t8 = hole[prevHoleVert];
    if (shapeIndex >= shape.length)
      throw $.ioore(shapeIndex);
    areab = $.area([t7, t8, shape[shapeIndex]]);
    shapeIndex0 = shapeIndex + 1;
    holeIndex0 = holeIndex + -1;
    shapeIndex0 = $.CONSTANT1.$mod(shapeIndex0, shape.length);
    if (holeIndex0 < 0)
      holeIndex0 += hole.length;
    holeIndex0 = $.CONSTANT1.$mod(holeIndex0, hole.length);
    prevShapeVert = shapeIndex0 - 1;
    prevShapeVert = prevShapeVert >= 0 ? prevShapeVert : shape.length - 1;
    prevHoleVert = holeIndex0 - 1 >= 0 ? holeIndex0 - 1 : hole.length - 1;
    if (holeIndex0 < 0 || holeIndex0 >= hole.length)
      throw $.ioore(holeIndex0);
    t3 = hole[holeIndex0];
    t4 = shape.length;
    if (shapeIndex0 < 0 || shapeIndex0 >= t4)
      throw $.ioore(shapeIndex0);
    t5 = shape[shapeIndex0];
    if (prevShapeVert < 0 || prevShapeVert >= t4)
      throw $.ioore(prevShapeVert);
    areaa2 = $.area([t3, t5, shape[prevShapeVert]]);
    t6 = hole.length;
    if (holeIndex0 >= t6)
      throw $.ioore(holeIndex0);
    t7 = hole[holeIndex0];
    if (prevHoleVert < 0 || prevHoleVert >= t6)
      throw $.ioore(prevHoleVert);
    t8 = hole[prevHoleVert];
    if (shapeIndex0 >= shape.length)
      throw $.ioore(shapeIndex0);
    if (areaa + areab > areaa2 + $.area([t7, t8, shape[shapeIndex0]])) {
      shapeIndex = $.CONSTANT1.$mod(shapeIndex, shape.length);
      holeIndex = $.CONSTANT1.$mod(holeIndex, hole.length);
      prevShapeVert = shapeIndex - 1;
      prevShapeVert = prevShapeVert >= 0 ? prevShapeVert : shape.length - 1;
      prevHoleVert = holeIndex - 1 >= 0 ? holeIndex - 1 : hole.length - 1;
    } else {
      shapeIndex = shapeIndex0;
      holeIndex = holeIndex0;
    }
    tmpShape1 = $.CONSTANT0.getRange$2(shape, 0, shapeIndex);
    tmpShape2 = $.CONSTANT0.getRange$2(shape, shapeIndex, shape.length - shapeIndex);
    tmpHole1 = t2.getRange$2(hole, holeIndex, hole.length - holeIndex);
    tmpHole2 = t2.getRange$2(hole, 0, holeIndex);
    t2 = hole.length;
    if (holeIndex < 0 || holeIndex >= t2)
      throw $.ioore(holeIndex);
    t3 = hole[holeIndex];
    t4 = shape.length;
    if (shapeIndex < 0 || shapeIndex >= t4)
      throw $.ioore(shapeIndex);
    t5 = shape[shapeIndex];
    if (prevShapeVert < 0 || prevShapeVert >= t4)
      throw $.ioore(prevShapeVert);
    t6 = shape[prevShapeVert];
    if (prevHoleVert < 0 || prevHoleVert >= t2)
      throw $.ioore(prevHoleVert);
    t7 = hole[prevHoleVert];
    verts.push([t3, t5, t6]);
    verts.push([t3, t7, t5]);
    shape = [];
    $.CONSTANT0.addAll$1(shape, tmpShape1);
    $.CONSTANT0.addAll$1(shape, tmpHole1);
    $.CONSTANT0.addAll$1(shape, tmpHole2);
    $.CONSTANT0.addAll$1(shape, tmpShape2);
  }
  return $.makeLiteralMap(["shape", shape, "isolatedPts", verts, "allpoints", allpoints]);
};

$.removeHoles$bailout = function(state0, contour, holes, allpoints, verts, t1, shape, hole, holeIndex, shapeIndex, h, d, p, pts1, pts2) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      shape = $.List_List$from(contour);
      allpoints = $.List_List$from(shape);
      verts = [];
      t1 = $.getInterceptor$JSStringJSArray(holes);
      holeIndex = null;
      shapeIndex = null;
      h = 0;
      d = null;
      p = null;
      pts1 = null;
      pts2 = null;
    case 2:
      var t2, h2, shortest, dist, t3, prevShapeVert, prevHoleVert, t4, t5, t6, areaa, t7, t8, areab, shapeIndex0, holeIndex0, areaa2, tmpShape1, tmpShape2, tmpHole1, tmpHole2;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.CONSTANT1.$lt(h, t1.get$length(holes)))
                break L0;
              hole = t1.$index(holes, h);
            case 2:
              state0 = 0;
              $.CONSTANT0.addAll$1(allpoints, hole);
              for (t2 = $.getInterceptor$JSStringJSArray(hole), h2 = 0, shortest = (1/0); $.CONSTANT1.$lt(h2, t2.get$length(hole)); ++h2) {
                pts1 = t2.$index(hole, h2);
                dist = [];
                for (p = 0; p < shape.length; ++p) {
                  pts2 = shape[p];
                  d = pts1.distanceToSquared$1(pts2);
                  dist.push(d);
                  if ($.$$lt(d, shortest) === true) {
                    shortest = d;
                    shapeIndex = p;
                    holeIndex = h2;
                  }
                }
              }
              t3 = $.getInterceptor$JSNumber(shapeIndex);
              prevShapeVert = $.$$ge(t3.$sub(shapeIndex, 1), 0) === true ? t3.$sub(shapeIndex, 1) : shape.length - 1;
              t3 = $.getInterceptor$JSNumber(holeIndex);
              prevHoleVert = $.$$ge(t3.$sub(holeIndex, 1), 0) === true ? t3.$sub(holeIndex, 1) : $.$$sub(t2.get$length(hole), 1);
              t4 = t2.$index(hole, holeIndex);
              if (shapeIndex !== (shapeIndex | 0))
                throw $.iae(shapeIndex);
              t5 = shape.length;
              if (shapeIndex < 0 || shapeIndex >= t5)
                throw $.ioore(shapeIndex);
              t6 = shape[shapeIndex];
              if (prevShapeVert !== (prevShapeVert | 0))
                throw $.iae(prevShapeVert);
              if (prevShapeVert < 0 || prevShapeVert >= t5)
                throw $.ioore(prevShapeVert);
              areaa = $.area([t4, t6, shape[prevShapeVert]]);
              t7 = t2.$index(hole, holeIndex);
              t8 = t2.$index(hole, prevHoleVert);
              if (shapeIndex >= shape.length)
                throw $.ioore(shapeIndex);
              areab = $.area([t7, t8, shape[shapeIndex]]);
              shapeIndex0 = shapeIndex + 1;
              holeIndex0 = t3.$add(holeIndex, -1);
              if (shapeIndex0 < 0)
                shapeIndex0 += shape.length;
              shapeIndex0 = $.CONSTANT1.$mod(shapeIndex0, shape.length);
              t4 = $.getInterceptor$JSNumber(holeIndex0);
              if (t4.$lt(holeIndex0, 0) === true)
                holeIndex0 = t4.$add(holeIndex0, t2.get$length(hole));
              holeIndex0 = $.$$mod(holeIndex0, t2.get$length(hole));
              prevShapeVert = shapeIndex0 - 1 >= 0 ? shapeIndex0 - 1 : shape.length - 1;
              t4 = $.getInterceptor$JSNumber(holeIndex0);
              prevHoleVert = $.$$ge(t4.$sub(holeIndex0, 1), 0) === true ? t4.$sub(holeIndex0, 1) : $.$$sub(t2.get$length(hole), 1);
              t4 = t2.$index(hole, holeIndex0);
              t5 = shape.length;
              if (shapeIndex0 < 0 || shapeIndex0 >= t5)
                throw $.ioore(shapeIndex0);
              t6 = shape[shapeIndex0];
              if (prevShapeVert < 0 || prevShapeVert >= t5)
                throw $.ioore(prevShapeVert);
              areaa2 = $.area([t4, t6, shape[prevShapeVert]]);
              t7 = t2.$index(hole, holeIndex0);
              t8 = t2.$index(hole, prevHoleVert);
              if (shapeIndex0 >= shape.length)
                throw $.ioore(shapeIndex0);
              if (areaa + areab > areaa2 + $.area([t7, t8, shape[shapeIndex0]])) {
                shapeIndex = $.CONSTANT1.$mod(shapeIndex, shape.length);
                if (t3.$lt(holeIndex, 0) === true)
                  holeIndex = t3.$add(holeIndex, t2.get$length(hole));
                holeIndex = $.$$mod(holeIndex, t2.get$length(hole));
                prevShapeVert = shapeIndex - 1 >= 0 ? shapeIndex - 1 : shape.length - 1;
                t3 = $.getInterceptor$JSNumber(holeIndex);
                prevHoleVert = $.$$ge(t3.$sub(holeIndex, 1), 0) === true ? t3.$sub(holeIndex, 1) : $.$$sub(t2.get$length(hole), 1);
              } else {
                shapeIndex = shapeIndex0;
                holeIndex = holeIndex0;
              }
              tmpShape1 = $.CONSTANT0.getRange$2(shape, 0, shapeIndex);
              tmpShape2 = $.CONSTANT0.getRange$2(shape, shapeIndex, shape.length - shapeIndex);
              tmpHole1 = t2.getRange$2(hole, holeIndex, $.$$sub(t2.get$length(hole), holeIndex));
              tmpHole2 = t2.getRange$2(hole, 0, holeIndex);
              t3 = t2.$index(hole, holeIndex);
              t4 = shape.length;
              if (shapeIndex < 0 || shapeIndex >= t4)
                throw $.ioore(shapeIndex);
              t5 = shape[shapeIndex];
              if (prevShapeVert < 0 || prevShapeVert >= t4)
                throw $.ioore(prevShapeVert);
              t6 = shape[prevShapeVert];
              t7 = t2.$index(hole, holeIndex);
              t2 = t2.$index(hole, prevHoleVert);
              if (shapeIndex >= shape.length)
                throw $.ioore(shapeIndex);
              t8 = shape[shapeIndex];
              verts.push([t3, t5, t6]);
              verts.push([t7, t2, t8]);
              shape = [];
              $.CONSTANT0.addAll$1(shape, tmpShape1);
              $.CONSTANT0.addAll$1(shape, tmpHole1);
              $.CONSTANT0.addAll$1(shape, tmpHole2);
              $.CONSTANT0.addAll$1(shape, tmpShape2);
              ++h;
          }
      return $.makeLiteralMap(["shape", shape, "isolatedPts", verts, "allpoints", allpoints]);
  }
};

$.triangulateShape = function(contour, holes) {
  var shapeWithoutHoles, t1, shape, allpoints, isolatedPts, triangles, allPointsMap, i, key, t2, face, f, t3, t4;
  shapeWithoutHoles = $.removeHoles(contour, holes);
  t1 = $.getInterceptor$JSStringJSArray(shapeWithoutHoles);
  shape = t1.$index(shapeWithoutHoles, "shape");
  allpoints = t1.$index(shapeWithoutHoles, "allpoints");
  if (typeof allpoints !== "string" && (typeof allpoints !== "object" || allpoints === null || allpoints.constructor !== Array && !allpoints.$isJavaScriptIndexingBehavior()))
    return $.triangulateShape$bailout(1, allpoints, shapeWithoutHoles, t1, shape);
  isolatedPts = t1.$index(shapeWithoutHoles, "isolatedPts");
  if (typeof isolatedPts !== "string" && (typeof isolatedPts !== "object" || isolatedPts === null || isolatedPts.constructor !== Array && !isolatedPts.$isJavaScriptIndexingBehavior()))
    return $.triangulateShape$bailout(2, allpoints, null, null, shape, isolatedPts);
  triangles = $.process(shape, false);
  if (typeof triangles !== "string" && (typeof triangles !== "object" || triangles === null || triangles.constructor !== Array && !triangles.$isJavaScriptIndexingBehavior()))
    return $.triangulateShape$bailout(3, allpoints, null, null, null, isolatedPts, triangles);
  allPointsMap = $.makeLiteralMap([]);
  $.makeLiteralMap([]);
  for (t1 = $.getInterceptor$JSArray(allPointsMap), i = 0, key = null; i < allpoints.length; ++i) {
    t2 = $.S(allpoints[i].get$x()) + ":";
    if (i >= allpoints.length)
      throw $.ioore(i);
    key = t2 + $.S(allpoints[i].get$y());
    if (allPointsMap.containsKey$1(key) === true)
      $.print("Duplicate point " + key);
    t1.$indexSet(allPointsMap, key, i);
  }
  for (t2 = $.getInterceptor$JSStringJSArray(triangles), i = 0; i < triangles.length; ++i) {
    face = triangles[i];
    if (typeof face !== "object" || face === null || (face.constructor !== Array || !!face.immutable$list) && !face.$isJavaScriptIndexingBehavior())
      return $.triangulateShape$bailout(4, null, null, t1, null, isolatedPts, triangles, allPointsMap, t2, face, i, key);
    for (f = 0; f < 3; ++f) {
      if (f >= face.length)
        throw $.ioore(f);
      t3 = $.S(face[f].get$x()) + ":";
      if (f >= face.length)
        throw $.ioore(f);
      key = t3 + $.S(face[f].get$y());
      if (allPointsMap.containsKey$1(key) === true) {
        t3 = t1.$index(allPointsMap, key);
        if (f >= face.length)
          throw $.ioore(f);
        face[f] = t3;
      }
    }
  }
  for (t3 = $.getInterceptor$JSStringJSArray(isolatedPts), i = 0; i < isolatedPts.length; ++i) {
    face = isolatedPts[i];
    if (typeof face !== "object" || face === null || (face.constructor !== Array || !!face.immutable$list) && !face.$isJavaScriptIndexingBehavior())
      return $.triangulateShape$bailout(5, null, null, t1, null, isolatedPts, triangles, allPointsMap, t2, face, i, key, t3);
    for (f = 0; f < 3; ++f) {
      if (f >= face.length)
        throw $.ioore(f);
      t4 = $.S(face[f].get$x()) + ":";
      if (f >= face.length)
        throw $.ioore(f);
      key = t4 + $.S(face[f].get$y());
      if (allPointsMap.containsKey$1(key) === true) {
        t4 = t1.$index(allPointsMap, key);
        if (f >= face.length)
          throw $.ioore(f);
        face[f] = t4;
      }
    }
  }
  t2.addAll$1(triangles, isolatedPts);
  return triangles;
};

$.triangulateShape$bailout = function(state0, allpoints, shapeWithoutHoles, t1, shape, isolatedPts, triangles, allPointsMap, t2, face, i, key, t3) {
  switch (state0) {
    case 0:
      shapeWithoutHoles = $.removeHoles(contour, holes);
      t1 = $.getInterceptor$JSStringJSArray(shapeWithoutHoles);
      shape = t1.$index(shapeWithoutHoles, "shape");
      allpoints = t1.$index(shapeWithoutHoles, "allpoints");
    case 1:
      state0 = 0;
      isolatedPts = t1.$index(shapeWithoutHoles, "isolatedPts");
    case 2:
      state0 = 0;
      triangles = $.process(shape, false);
    case 3:
      state0 = 0;
      allPointsMap = $.makeLiteralMap([]);
      $.makeLiteralMap([]);
      for (t1 = $.getInterceptor$JSArray(allPointsMap), t2 = $.getInterceptor$JSStringJSArray(allpoints), i = 0, key = null; $.CONSTANT1.$lt(i, t2.get$length(allpoints)); ++i) {
        key = $.S(t2.$index(allpoints, i).get$x()) + ":" + $.S(t2.$index(allpoints, i).get$y());
        if (allPointsMap.containsKey$1(key) === true)
          $.print("Duplicate point " + key);
        t1.$indexSet(allPointsMap, key, i);
      }
      t1 = $.getInterceptor$JSStringJSArray(allPointsMap);
      t2 = $.getInterceptor$JSStringJSArray(triangles);
      i = 0;
    case 4:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.CONSTANT1.$lt(i, t2.get$length(triangles)))
                break L0;
              face = t2.$index(triangles, i);
            case 4:
              state0 = 0;
              for (t3 = $.getInterceptor$JSStringJSArray(face), f = 0; f < 3; ++f) {
                key = $.S(t3.$index(face, f).get$x()) + ":" + $.S(t3.$index(face, f).get$y());
                if (allPointsMap.containsKey$1(key) === true)
                  t3.$indexSet(face, f, t1.$index(allPointsMap, key));
              }
              ++i;
          }
      t3 = $.getInterceptor$JSStringJSArray(isolatedPts);
      i = 0;
    case 5:
      var f, t4;
      L1:
        while (true)
          switch (state0) {
            case 0:
              if (!$.CONSTANT1.$lt(i, t3.get$length(isolatedPts)))
                break L1;
              face = t3.$index(isolatedPts, i);
            case 5:
              state0 = 0;
              for (t4 = $.getInterceptor$JSStringJSArray(face), f = 0; f < 3; ++f) {
                key = $.S(t4.$index(face, f).get$x()) + ":" + $.S(t4.$index(face, f).get$y());
                if (allPointsMap.containsKey$1(key) === true)
                  t4.$indexSet(face, f, t1.$index(allPointsMap, key));
              }
              ++i;
          }
      t2.addAll$1(triangles, isolatedPts);
      return triangles;
  }
};

$.process = function(contour, indices) {
  var n, result, verts, vertIndices, v, t1, count, nv, count0, u, w, w0, a, b, c, t2, t3, t, s;
  if (typeof contour !== "string" && (typeof contour !== "object" || contour === null || contour.constructor !== Array && !contour.$isJavaScriptIndexingBehavior()))
    return $.process$bailout(1, contour, indices);
  n = contour.length;
  if (n < 3)
    return;
  result = [];
  verts = $.List_List$fixedLength(n, null);
  vertIndices = [];
  if ($.$$gt($.area(contour), 0) === true)
    for (v = 0; v < n; ++v)
      verts[v] = v;
  else
    for (t1 = n - 1, v = 0; v < n; ++v)
      verts[v] = t1 - v;
  count = 2 * n;
  for (v = n - 1, nv = n; nv > 2;) {
    count0 = count - 1;
    if (count <= 0) {
      $.print("Warning, unable to triangulate polygon!");
      if (indices)
        return vertIndices;
      return result;
    }
    u = nv <= v ? 0 : v;
    v = u + 1;
    if (nv <= v)
      v = 0;
    w = v + 1;
    w0 = nv <= w ? 0 : w;
    if ($.snip(contour, u, v, w0, nv, verts) === true) {
      if (u < 0 || u >= n)
        throw $.ioore(u);
      a = verts[u];
      if (v < 0 || v >= n)
        throw $.ioore(v);
      b = verts[v];
      if (w0 < 0 || w0 >= n)
        throw $.ioore(w0);
      c = verts[w0];
      if (a !== (a | 0))
        throw $.iae(a);
      t1 = contour.length;
      if (a < 0 || a >= t1)
        throw $.ioore(a);
      t2 = contour[a];
      if (b !== (b | 0))
        throw $.iae(b);
      if (b < 0 || b >= t1)
        throw $.ioore(b);
      t3 = contour[b];
      if (c !== (c | 0))
        throw $.iae(c);
      if (c < 0 || c >= t1)
        throw $.ioore(c);
      result.push([t2, t3, contour[c]]);
      $.CONSTANT0.addAll$1(vertIndices, [verts[u], verts[v], verts[w0]]);
      for (t = w, s = v; t < nv; ++t) {
        if (t < 0)
          throw $.ioore(t);
        t1 = verts[t];
        if (s >= n)
          throw $.ioore(s);
        verts[s] = t1;
        ++s;
      }
      --nv;
      count = 2 * nv;
    } else
      count = count0;
  }
  if (indices)
    return vertIndices;
  return result;
};

$.process$bailout = function(state0, contour, indices, t1, n, vertIndices, verts, count, v, result) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(contour);
      n = t1.get$length(contour);
    case 2:
      state0 = 0;
      t2 = $.getInterceptor$JSNumber(n);
      if (t2.$lt(n, 3) === true)
        return;
      result = [];
      verts = $.List_List$fixedLength(n, null);
      vertIndices = [];
      if ($.$$gt($.area(contour), 0) === true)
        for (v = 0; $.CONSTANT1.$lt(v, n); ++v) {
          if (v >= verts.length)
            throw $.ioore(v);
          verts[v] = v;
        }
      else
        for (v = 0; $.CONSTANT1.$lt(v, n); ++v) {
          t3 = $.$$sub(t2.$sub(n, 1), v);
          if (v >= verts.length)
            throw $.ioore(v);
          verts[v] = t3;
        }
      if (typeof n !== "number")
        throw $.iae(n);
      count = 2 * n;
      v = n - 1;
    case 3:
      var t2, t3, nv, count0, u, w, a, b, c, t4, t5, t, s;
      state0 = 0;
      nv = n;
      for (; nv > 2;) {
        count0 = count - 1;
        if (count <= 0) {
          $.print("Warning, unable to triangulate polygon!");
          if (indices)
            return vertIndices;
          return result;
        }
        u = nv <= v ? 0 : v;
        v = u + 1;
        if (nv <= v)
          v = 0;
        w = v + 1;
        if (nv <= w)
          w = 0;
        if ($.snip(contour, u, v, w, nv, verts) === true) {
          if (u !== (u | 0))
            throw $.iae(u);
          t2 = verts.length;
          if (u < 0 || u >= t2)
            throw $.ioore(u);
          a = verts[u];
          if (v !== (v | 0))
            throw $.iae(v);
          if (v < 0 || v >= t2)
            throw $.ioore(v);
          b = verts[v];
          if (w !== (w | 0))
            throw $.iae(w);
          if (w < 0 || w >= t2)
            throw $.ioore(w);
          c = verts[w];
          result.push([t1.$index(contour, a), t1.$index(contour, b), t1.$index(contour, c)]);
          t3 = verts.length;
          if (u >= t3)
            throw $.ioore(u);
          t4 = verts[u];
          if (v >= t3)
            throw $.ioore(v);
          t5 = verts[v];
          if (w >= t3)
            throw $.ioore(w);
          $.CONSTANT0.addAll$1(vertIndices, [t4, t5, verts[w]]);
          for (t = v + 1, t2 = verts.length, s = v; t < nv; ++t) {
            if (t >= t2)
              throw $.ioore(t);
            t3 = verts[t];
            if (s >= t2)
              throw $.ioore(s);
            verts[s] = t3;
            ++s;
          }
          --nv;
          count = 2 * nv;
        } else
          count = count0;
      }
      if (indices)
        return vertIndices;
      return result;
  }
};

$.area = function(contour) {
  var n, p, a, q, q0, t1, t2, t3, t4;
  if (typeof contour !== "string" && (typeof contour !== "object" || contour === null || contour.constructor !== Array && !contour.$isJavaScriptIndexingBehavior()))
    return $.area$bailout(1, contour);
  n = contour.length;
  for (p = n - 1, a = 0, q = 0; q < n; q0 = q + 1, p = q, q = q0) {
    t1 = contour.length;
    if (p < 0 || p >= t1)
      throw $.ioore(p);
    t2 = contour[p].get$x();
    if (q >= t1)
      throw $.ioore(q);
    t2 = $.$$mul(t2, contour[q].get$y());
    t3 = contour.length;
    if (q >= t3)
      throw $.ioore(q);
    t4 = contour[q].get$x();
    if (p >= t3)
      throw $.ioore(p);
    t2 = $.$$sub(t2, $.$$mul(t4, contour[p].get$y()));
    if (typeof t2 !== "number")
      throw $.iae(t2);
    a += t2;
  }
  return a * 0.5;
};

$.area$bailout = function(state0, contour, t1, n) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(contour);
      n = t1.get$length(contour);
    case 2:
      var p, a, q, q0, t2;
      state0 = 0;
      for (p = $.$$sub(n, 1), a = 0, q = 0; $.CONSTANT1.$lt(q, n); q0 = q + 1, p = q, q = q0) {
        t2 = $.$$sub($.$$mul(t1.$index(contour, p).get$x(), t1.$index(contour, q).get$y()), $.$$mul(t1.$index(contour, q).get$x(), t1.$index(contour, p).get$y()));
        if (typeof t2 !== "number")
          throw $.iae(t2);
        a += t2;
      }
      return a * 0.5;
  }
};

$.insideTriangle = function(ax, ay, bx, by, cx, cy, px, py) {
  var t1, t2, t3, t4, t5, t6, t7, apx, t8, apy, bpx, bpy, cpx, cpy, t9;
  t1 = $.$$sub(cx, bx);
  t2 = $.$$sub(cy, by);
  t3 = $.$$sub(ax, cx);
  t4 = $.$$sub(ay, cy);
  t5 = $.$$sub(bx, ax);
  t6 = $.$$sub(by, ay);
  t7 = $.getInterceptor$JSNumber(px);
  apx = t7.$sub(px, ax);
  t8 = $.getInterceptor$JSNumber(py);
  apy = t8.$sub(py, ay);
  bpx = t7.$sub(px, bx);
  bpy = t8.$sub(py, by);
  cpx = t7.$sub(px, cx);
  cpy = t8.$sub(py, cy);
  t8 = $.$$sub($.$$mul(t1, bpy), $.$$mul(t2, bpx));
  t7 = $.$$sub($.$$mul(t5, apy), $.$$mul(t6, apx));
  t9 = $.$$sub($.$$mul(t3, cpy), $.$$mul(t4, cpx));
  return $.$$ge(t8, 0) === true && $.$$ge(t9, 0) === true && $.$$ge(t7, 0) === true;
};

$.snip = function(contour, u, v, w, n, verts) {
  var t1, t2, t3, t4, ax, ay, t7, bx, by, t10, cx, cy, p, px, py;
  if (typeof contour !== "string" && (typeof contour !== "object" || contour === null || contour.constructor !== Array && !contour.$isJavaScriptIndexingBehavior()))
    return $.snip$bailout(1, contour, u, v, w, n, verts);
  if (u !== (u | 0))
    throw $.iae(u);
  t1 = verts.length;
  if (u < 0 || u >= t1)
    throw $.ioore(u);
  t2 = verts[u];
  t3 = $.getInterceptor$JSStringJSArray(contour);
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  t4 = contour.length;
  if (t2 < 0 || t2 >= t4)
    throw $.ioore(t2);
  ax = contour[t2].get$x();
  if (typeof ax !== "number")
    return $.snip$bailout(2, contour, u, v, w, n, verts, t3, ax);
  ay = contour[t2].get$y();
  if (typeof ay !== "number")
    return $.snip$bailout(3, contour, u, v, w, n, verts, t3, ax, ay);
  if (v !== (v | 0))
    throw $.iae(v);
  if (v < 0 || v >= t1)
    throw $.ioore(v);
  t7 = verts[v];
  if (t7 !== (t7 | 0))
    throw $.iae(t7);
  if (t7 < 0 || t7 >= t4)
    throw $.ioore(t7);
  bx = contour[t7].get$x();
  if (typeof bx !== "number")
    return $.snip$bailout(4, contour, u, v, w, n, verts, t3, ax, ay, bx);
  by = contour[t7].get$y();
  if (typeof by !== "number")
    return $.snip$bailout(5, contour, u, v, w, n, verts, t3, ax, ay, bx, by);
  if (w !== (w | 0))
    throw $.iae(w);
  if (w < 0 || w >= t1)
    throw $.ioore(w);
  t10 = verts[w];
  if (t10 !== (t10 | 0))
    throw $.iae(t10);
  if (t10 < 0 || t10 >= t4)
    throw $.ioore(t10);
  cx = contour[t10].get$x();
  if (typeof cx !== "number")
    return $.snip$bailout(6, contour, u, v, w, n, verts, t3, ax, ay, bx, by, cx);
  cy = contour[t10].get$y();
  if (typeof cy !== "number")
    return $.snip$bailout(7, contour, u, v, w, n, verts, t3, ax, ay, bx, by, cx, cy);
  if ($.$$gt($.EPSILON, (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)) === true)
    return false;
  for (p = 0, px = null, py = null; p < n; ++p) {
    if (p === u || p === v || p === w)
      continue;
    if (p >= verts.length)
      throw $.ioore(p);
    t1 = verts[p];
    if (t1 !== (t1 | 0))
      throw $.iae(t1);
    if (t1 < 0 || t1 >= contour.length)
      throw $.ioore(t1);
    px = contour[t1].get$x();
    py = contour[t1].get$y();
    if ($.insideTriangle(ax, ay, bx, by, cx, cy, px, py) === true)
      return false;
  }
  return true;
};

$.snip$bailout = function(state0, contour, u, v, w, n, verts, t1, ax, ay, bx, by, cx, cy) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (u !== (u | 0))
        throw $.iae(u);
      if (u < 0 || u >= verts.length)
        throw $.ioore(u);
      t1 = $.getInterceptor$JSStringJSArray(contour);
      ax = t1.$index(contour, verts[u]).get$x();
    case 2:
      state0 = 0;
      if (u >= verts.length)
        throw $.ioore(u);
      ay = t1.$index(contour, verts[u]).get$y();
    case 3:
      state0 = 0;
      if (v !== (v | 0))
        throw $.iae(v);
      if (v < 0 || v >= verts.length)
        throw $.ioore(v);
      bx = t1.$index(contour, verts[v]).get$x();
    case 4:
      state0 = 0;
      if (v >= verts.length)
        throw $.ioore(v);
      by = t1.$index(contour, verts[v]).get$y();
    case 5:
      state0 = 0;
      if (w !== (w | 0))
        throw $.iae(w);
      if (w < 0 || w >= verts.length)
        throw $.ioore(w);
      cx = t1.$index(contour, verts[w]).get$x();
    case 6:
      state0 = 0;
      if (w >= verts.length)
        throw $.ioore(w);
      cy = t1.$index(contour, verts[w]).get$y();
    case 7:
      var p, px, py;
      state0 = 0;
      if ($.$$gt($.EPSILON, $.$$sub($.$$mul($.$$sub(bx, ax), $.$$sub(cy, ay)), $.$$mul($.$$sub(by, ay), $.$$sub(cx, ax)))) === true)
        return false;
      for (p = 0, px = null, py = null; p < n; ++p) {
        if (p === u || p === v || p === w)
          continue;
        if (p >= verts.length)
          throw $.ioore(p);
        px = t1.$index(contour, verts[p]).get$x();
        if (p >= verts.length)
          throw $.ioore(p);
        py = t1.$index(contour, verts[p]).get$y();
        if ($.insideTriangle(ax, ay, bx, by, cx, cy, px, py) === true)
          return false;
      }
      return true;
  }
};

$.CylinderGeometry$ = function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.$$add(t1, 1);
  t1 = new $.CylinderGeometry(radiusTop, radiusBottom, height, null, null, null, t1, "", [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t1.CylinderGeometry$6(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded);
  return t1;
};

$.ExtrudeGeometry$ = function(shapes, amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, frames, material, steps) {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.$$add(t1, 1);
  t1 = new $.ExtrudeGeometry(shapes, null, t1, "", [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t1.ExtrudeGeometry$13$amount$bendPath$bevelEnabled$bevelSegments$bevelSize$bevelThickness$curveSegments$extrudeMaterial$extrudePath$frames$material$steps(shapes, amount, bendPath, bevelEnabled, bevelSegments, bevelSize, bevelThickness, curveSegments, extrudeMaterial, extrudePath, frames, material, steps);
  return t1;
};

$.ExtrudeGeometryWorldUVGenerator$ = function() {
  return new $.ExtrudeGeometryWorldUVGenerator();
};

$.TubeGeometry$ = function(path, segments, radius, segmentsRadius, closed, debug) {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.$$add(t1, 1);
  t1 = new $.TubeGeometry(null, null, null, radius, segmentsRadius, null, [], null, null, null, null, t1, "", [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t1.TubeGeometry$6(path, segments, radius, segmentsRadius, closed, debug);
  return t1;
};

$.TubeGeometry$FrenetFrames = function(path, segments, closed) {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.$$add(t1, 1);
  t1 = new $.TubeGeometry(null, null, null, null, null, null, null, null, null, null, null, t1, "", [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
  t1.TubeGeometry$FrenetFrames$3(path, segments, closed);
  return t1;
};

$.ArrowHelper$ = function(dir, origin, length, hex) {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.$$add(t1, 1);
  t1 = new $.ArrowHelper(null, null, t1, "", $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), "XYZ", null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.ArrowHelper$4(dir, origin, length, hex);
  return t1;
};

$.createMultiMaterialObject = function(geometry, materials) {
  var group = $.Object3D$();
  $.CONSTANT0.forEach$1(materials, new $.createMultiMaterialObject_anon(geometry, group));
  return group;
};

$.PerspectiveCamera$ = function(fov, aspect, near, far) {
  var t1, t2, t3, t4;
  t1 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  t2 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  t3 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  t4 = $.Object3DCount;
  $.Object3DCount = $.$$add(t4, 1);
  t4 = new $.PerspectiveCamera(fov, aspect, null, null, null, null, null, null, t1, t2, t3, near, far, t4, "", $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), "XYZ", null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t4.PerspectiveCamera$4(fov, aspect, near, far);
  return t4;
};

$.Color$ = function(hex) {
  var t1 = new $.Color(1, 1, 1);
  t1.Color$1(hex);
  return t1;
};

$.Face3$ = function(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  var t1 = new $.Face3(a, b, c, null, null, null, null, null, materialIndex, null);
  t1.Face3$6(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex);
  return t1;
};

$.Face4$ = function(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  var t1 = new $.Face4(a, b, c, d, null, null, null, null, null, materialIndex, null);
  t1.Face4$7(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex);
  return t1;
};

$.Frustum$ = function() {
  return new $.Frustum([$.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1)]);
};

$.Geometry$ = function() {
  var t1 = $.GeometryCount;
  $.GeometryCount = $.$$add(t1, 1);
  return new $.Geometry(t1, "", [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null, null, null);
};

$.BoundingSphere$ = function(radius) {
  return new $.BoundingSphere(radius);
};

$.Matrix3$ = function() {
  return new $.Matrix3($.Float32Array_Float32Array(9));
};

$.Matrix4$ = function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  var t1 = new $.Matrix4($.Float32Array_Float32Array(16));
  t1.Matrix4$16(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
  return t1;
};

$.Object3D$ = function() {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.$$add(t1, 1);
  return new $.Object3D(t1, "", $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), "XYZ", null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
};

$.Quaternion$ = function(x, y, z, w) {
  return new $.Quaternion(x, y, z, w);
};

$.UV$ = function(u, v) {
  return new $.UV(u, v);
};

$.Vector2$ = function(x, y) {
  return new $.Vector2(x, y);
};

$.Vector3$ = function(x, y, z) {
  return new $.Vector3(x, y, z);
};

$.Vector4$ = function(x, y, z, w) {
  return new $.Vector4(x, y, z, w);
};

$.DirectionalLight$ = function(hex, intensity, distance) {
  var t1, t2;
  t1 = $.Color$(hex);
  t2 = $.Object3DCount;
  $.Object3DCount = $.$$add(t2, 1);
  t2 = new $.DirectionalLight(null, null, intensity, distance, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t1, t2, "", $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), "XYZ", null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t2.DirectionalLight$3(hex, intensity, distance);
  return t2;
};

$.LineBasicMaterial$ = function(alphaTest, blendDst, blendEquation, blendSrc, blending, color, depthTest, depthWrite, fog, linecap, linejoin, linewidth, name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, side, transparent, vertexColors, visible) {
  var t1, t2;
  t1 = $.Color$(color);
  t2 = $.MaterialCount;
  $.MaterialCount = $.$$add(t2, 1);
  return new $.LineBasicMaterial(t1, linewidth, linecap, linejoin, fog, vertexColors, name, t2, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$.MeshBasicMaterial$ = function(alphaTest, blendDst, blendEquation, blendSrc, blending, color, combine, depthTest, depthWrite, envMap, fog, lightMap, map, morphTargets, name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, reflectivity, refractionRatio, shading, side, skinning, specularMap, transparent, vertexColors, visible, wireframe, wireframeLinecap, wireframeLinejoin, wireframeLinewidth) {
  var t1, t2;
  t1 = $.Color$(color);
  t2 = $.MaterialCount;
  $.MaterialCount = $.$$add(t2, 1);
  return new $.MeshBasicMaterial(t1, map, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, vertexColors, fog, name, t2, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$.MeshLambertMaterial$ = function(alphaTest, ambient, blendDst, blendEquation, blendSrc, blending, color, combine, depthTest, depthWrite, emissive, envMap, fog, lightMap, map, morphNormals, morphTargets, name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, reflectivity, refractionRatio, shading, side, skinning, specularMap, transparent, vertexColors, visible, wireframe, wireframeLinecap, wireframeLinejoin, wireframeLinewidth, wrapAround, wrapRGB) {
  var t1, t2, t3, t4, t5;
  t1 = $.Color$(color);
  t2 = $.Color$(ambient);
  t3 = $.Color$(emissive);
  t4 = wrapRGB == null ? $.Vector3$(1, 1, 1) : wrapRGB;
  t5 = $.MaterialCount;
  $.MaterialCount = $.$$add(t5, 1);
  return new $.MeshLambertMaterial(null, t1, t2, t3, wrapAround, t4, map, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, morphNormals, vertexColors, fog, name, t5, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$.Line$ = function(geometry, material, type) {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.$$add(t1, 1);
  t1 = new $.Line(geometry, material, type, t1, "", $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), "XYZ", null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Line$3(geometry, material, type);
  return t1;
};

$.Mesh$ = function(geometry, material) {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.$$add(t1, 1);
  t1 = new $.Mesh(geometry, material, 0, null, null, null, t1, "", $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), "XYZ", null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Mesh$2(geometry, material);
  return t1;
};

$.WebGLRenderer$ = function(alpha, antialias, canvas, clearAlpha, clearColorHex, maxLights, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
  var t1 = new $.WebGLRenderer(canvas, null, precision, $.Color$(clearColorHex), clearAlpha, maxLights, alpha, premultipliedAlpha, antialias, stencil, preserveDrawingBuffer, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, 8, 4, true, [], [], $.WebGLRendererInfo$(), [], 0, null, null, -1, null, null, 0, -1, -1, -1, -1, -1, -1, -1, -1, null, null, null, null, 0, 0, 0, 0, 0, 0, $.Frustum$(), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector3$(0, 0, 0), null, true, null, null, null, null, null, null, null, null, null, null);
  t1.WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$maxLights$precision$premultipliedAlpha$preserveDrawingBuffer$stencil(alpha, antialias, canvas, clearAlpha, clearColorHex, maxLights, precision, premultipliedAlpha, preserveDrawingBuffer, stencil);
  return t1;
};

$.WebGLRendererInfo$ = function() {
  var t1 = new $.WebGLRendererInfo(null, null);
  t1.WebGLRendererInfo$0();
  return t1;
};

$.WebGLRendererMemoryInfo$ = function() {
  return new $.WebGLRendererMemoryInfo(0, 0, 0);
};

$.WebGLRendererRenderInfo$ = function() {
  return new $.WebGLRendererRenderInfo(0, 0, 0, 0);
};

$.Program$ = function(id, glProgram, code, usedTimes) {
  var t1 = $.makeLiteralMap([]);
  return new $.Program(id, glProgram, code, usedTimes, $.makeLiteralMap([]), t1);
};

$.Buffer$ = function(glbuffer) {
  return new $.Buffer(glbuffer, null);
};

$.WebGLObject$_internal = function(object, opaque, transparent, buffer, render, z) {
  return new $.WebGLObject(false, null, null, null, null, null, null, buffer, object, opaque, transparent, render, z, null);
};

$.WebGLObject_WebGLObject = function(object, buffer, opaque, render, transparent, z) {
  var t1 = $.getInterceptor$JSStringJSArray(object);
  if (t1.$index(object, "__webglObject") == null)
    t1.$indexSet(object, "__webglObject", $.WebGLObject$_internal(object, opaque, transparent, buffer, render, z));
  return t1.$index(object, "__webglObject");
};

$.WebGLGeometry$ = function(faces3, faces4, materialIndex, numMorphNormals, numMorphTargets, vertices) {
  return new $.WebGLGeometry(null, vertices, faces3, faces4, materialIndex, numMorphTargets, numMorphNormals, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
};

$.WebGLGeometry$_internal = function(geometry) {
  return new $.WebGLGeometry(geometry.get$id(), null, null, null, 0, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, geometry);
};

$.WebGLGeometry_WebGLGeometry$from = function(geometry) {
  var t1 = $.getInterceptor$JSStringJSArray(geometry);
  if (t1.$index(geometry, "__webglBuffer") == null)
    t1.$indexSet(geometry, "__webglBuffer", $.WebGLGeometry$_internal(geometry));
  return t1.$index(geometry, "__webglBuffer");
};

$.WebGLMaterial$_internal = function(material) {
  return new $.WebGLMaterial(material, null, null, null, null, null, 0, 0, null);
};

$.WebGLMaterial_WebGLMaterial$from = function(material) {
  var t1 = $.getInterceptor$JSStringJSArray(material);
  if (t1.$index(material, "__webglMaterial") == null)
    t1.$indexSet(material, "__webglMaterial", $.WebGLMaterial$_internal(material));
  return t1.$index(material, "__webglMaterial");
};

$.WebGLCamera$_internal = function(camera) {
  return new $.WebGLCamera(camera, $.Float32Array_Float32Array(16), $.Float32Array_Float32Array(16));
};

$.WebGLCamera_WebGLCamera = function(camera) {
  var t1 = $.getInterceptor$JSStringJSArray(camera);
  if (t1.$index(camera, "__webglCamera") == null)
    t1.$indexSet(camera, "__webglCamera", $.WebGLCamera$_internal(camera));
  return t1.$index(camera, "__webglCamera");
};

$.WebGLImageList$_internal = function(imageList) {
  return new $.WebGLImageList(imageList, null);
};

$.WebGLImageList_WebGLImageList = function(imageList) {
  var __webglImageList;
  if ($.$$index(imageList.get$props(), "__webglImageList") == null) {
    __webglImageList = $.WebGLImageList$_internal(imageList);
    $.$$indexSet(imageList.get$props(), "__webglImageList", __webglImageList);
  }
  return $.$$index(imageList.get$props(), "__webglImageList");
};

$.ShaderChunk = function() {
  if ($.__ShaderChunk == null)
    $.__ShaderChunk = $.makeLiteralMap(["fog_pars_fragment", $.Strings_join(["#ifdef USE_FOG", "uniform vec3 fogColor;", "#ifdef FOG_EXP2", "uniform float fogDensity;", "#else", "uniform float fogNear;", "uniform float fogFar;", "#endif", "#endif"], "\n"), "fog_fragment", $.Strings_join(["#ifdef USE_FOG", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "#ifdef FOG_EXP2", "const float LOG2 = 1.442695;", "float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );", "fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );", "#else", "float fogFactor = smoothstep( fogNear, fogFar, depth );", "#endif", "gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );", "#endif"], "\n"), "envmap_pars_fragment", $.Strings_join(["#ifdef USE_ENVMAP", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#ifdef USE_BUMPMAP", "uniform bool useRefract;", "uniform float refractionRatio;", "#else", "varying vec3 vReflect;", "#endif", "#endif"], "\n"), "envmap_fragment", $.Strings_join(["#ifdef USE_ENVMAP", "vec3 reflectVec;", "#ifdef USE_BUMPMAP", "vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );", "if ( useRefract ) {", "reflectVec = refract( cameraToVertex, normal, refractionRatio );", "} else { ", "reflectVec = reflect( cameraToVertex, normal );", "}", "#else", "reflectVec = vReflect;", "#endif", "#ifdef DOUBLE_SIDED", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#else", "vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#endif", "#ifdef GAMMA_INPUT", "cubeColor.xyz *= cubeColor.xyz;", "#endif", "if ( combine == 1 ) {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );", "} else {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );", "}", "#endif"], "\n"), "envmap_pars_vertex", $.Strings_join(["#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP )", "varying vec3 vReflect;", "uniform float refractionRatio;", "uniform bool useRefract;", "#endif"], "\n"), "envmap_vertex", $.Strings_join(["#ifdef USE_ENVMAP", "vec4 mPosition = modelMatrix * vec4( position, 1.0 );", "#endif", "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP )", "vec3 nWorld = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * normal;", "if ( useRefract ) {", "vReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );", "} else {", "vReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );", "}", "#endif"], "\n"), "map_particle_pars_fragment", $.Strings_join(["#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_particle_fragment", $.Strings_join(["#ifdef USE_MAP", "gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );", "#endif"], "\n"), "map_pars_vertex", $.Strings_join(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "uniform vec4 offsetRepeat;", "#endif"], "\n"), "map_pars_fragment", $.Strings_join(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "#endif", "#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_vertex", $.Strings_join(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )", "vUv = uv * offsetRepeat.zw + offsetRepeat.xy;", "#endif"], "\n"), "map_fragment", $.Strings_join(["#ifdef USE_MAP", "#ifdef GAMMA_INPUT", "vec4 texelColor = texture2D( map, vUv );", "texelColor.xyz *= texelColor.xyz;", "gl_FragColor = gl_FragColor * texelColor;", "#else", "gl_FragColor = gl_FragColor * texture2D( map, vUv );", "#endif", "#endif"], "\n"), "lightmap_pars_fragment", $.Strings_join(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "uniform sampler2D lightMap;", "#endif"], "\n"), "lightmap_pars_vertex", $.Strings_join(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "#endif"], "\n"), "lightmap_fragment", $.Strings_join(["#ifdef USE_LIGHTMAP", "gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );", "#endif"], "\n"), "lightmap_vertex", $.Strings_join(["#ifdef USE_LIGHTMAP", "vUv2 = uv2;", "#endif"], "\n"), "bumpmap_pars_fragment", $.Strings_join(["#ifdef USE_BUMPMAP", "uniform sampler2D bumpMap;", "uniform float bumpScale;", "vec2 dHdxy_fwd() {", "vec2 dSTdx = dFdx( vUv );", "vec2 dSTdy = dFdy( vUv );", "float Hll = bumpScale * texture2D( bumpMap, vUv ).x;", "float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;", "float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;", "return vec2( dBx, dBy );", "}", "vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {", "vec3 vSigmaX = dFdx( surf_pos );", "vec3 vSigmaY = dFdy( surf_pos );", "vec3 vN = surf_norm;", "vec3 R1 = cross( vSigmaY, vN );", "vec3 R2 = cross( vN, vSigmaX );", "float fDet = dot( vSigmaX, R1 );", "vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );", "return normalize( abs( fDet ) * surf_norm - vGrad );", "}", "#endif"], "\n"), "specularmap_pars_fragment", $.Strings_join(["#ifdef USE_SPECULARMAP", "uniform sampler2D specularMap;", "#endif"], "\n"), "specularmap_fragment", $.Strings_join(["float specularStrength;", "#ifdef USE_SPECULARMAP", "vec4 texelSpecular = texture2D( specularMap, vUv );", "specularStrength = texelSpecular.r;", "#else", "specularStrength = 1.0;", "#endif"], "\n"), "lights_lambert_pars_vertex", $.Strings_join(["uniform vec3 ambient;", "uniform vec3 diffuse;", "uniform vec3 emissive;", "uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngle[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif"], "\n"), "lights_lambert_vertex", $.Strings_join(["vLightFront = vec3( 0.0 );", "#ifdef DOUBLE_SIDED", "vLightBack = vec3( 0.0 );", "#endif", "transformedNormal = normalize( transformedNormal );", "#if MAX_DIR_LIGHTS > 0", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( transformedNormal, dirVector );", "vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += directionalLightColor[ i ] * directionalLightWeighting;", "#ifdef DOUBLE_SIDED", "vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;", "#endif", "}", "#endif", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;", "#ifdef DOUBLE_SIDED", "vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "lVector = normalize( lVector );", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - mPosition.xyz ) );", "if ( spotEffect > spotLightAngle[ i ] ) {", "spotEffect = pow( spotEffect, spotLightExponent[ i ] );", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;", "#ifdef DOUBLE_SIDED", "vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;", "#ifdef DOUBLE_SIDED", "vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;", "#endif"], "\n"), "lights_phong_pars_vertex", $.Strings_join(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif"], "\n"), "lights_phong_vertex", $.Strings_join(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "vPointLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "vSpotLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "vWorldPosition = mPosition.xyz;", "#endif"], "\n"), "lights_phong_pars_fragment", $.Strings_join(["uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#else", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngle[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "#else", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif", "varying vec3 vViewPosition;", "varying vec3 vNormal;"], "\n"), "lights_phong_fragment", $.Strings_join(["vec3 normal = normalize( vNormal );", "vec3 viewPosition = normalize( vViewPosition );", "#ifdef DOUBLE_SIDED", "normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "#endif", "#ifdef USE_BUMPMAP", "normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );", "#endif", "#if MAX_POINT_LIGHTS > 0", "vec3 pointDiffuse  = vec3( 0.0 );", "vec3 pointSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vPointLight[ i ].xyz );", "float lDistance = vPointLight[ i ].w;", "#endif", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float pointDiffuseWeightFull = max( dotProduct, 0.0 );", "float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );", "#else", "float pointDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;", "vec3 pointHalfVector = normalize( lVector + viewPosition );", "float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );", "float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );", "pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;", "#else", "pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "vec3 spotDiffuse  = vec3( 0.0 );", "vec3 spotSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vSpotLight[ i ].xyz );", "float lDistance = vSpotLight[ i ].w;", "#endif", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );", "if ( spotEffect > spotLightAngle[ i ] ) {", "spotEffect = pow( spotEffect, spotLightExponent[ i ] );", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float spotDiffuseWeightFull = max( dotProduct, 0.0 );", "float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );", "#else", "float spotDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;", "vec3 spotHalfVector = normalize( lVector + viewPosition );", "float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );", "float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );", "spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;", "#else", "spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_DIR_LIGHTS > 0", "vec3 dirDiffuse  = vec3( 0.0 );", "vec3 dirSpecular = vec3( 0.0 );", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( normal, dirVector );", "#ifdef WRAP_AROUND", "float dirDiffuseWeightFull = max( dotProduct, 0.0 );", "float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );", "#else", "float dirDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;", "vec3 dirHalfVector = normalize( dirVector + viewPosition );", "float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );", "float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );", "dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;", "#else", "dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;", "#endif", "}", "#endif", "vec3 totalDiffuse = vec3( 0.0 );", "vec3 totalSpecular = vec3( 0.0 );", "#if MAX_DIR_LIGHTS > 0", "totalDiffuse += dirDiffuse;", "totalSpecular += dirSpecular;", "#endif", "#if MAX_POINT_LIGHTS > 0", "totalDiffuse += pointDiffuse;", "totalSpecular += pointSpecular;", "#endif", "#if MAX_SPOT_LIGHTS > 0", "totalDiffuse += spotDiffuse;", "totalSpecular += spotSpecular;", "#endif", "#ifdef METAL", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );", "#else", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;", "#endif"], "\n"), "color_pars_fragment", $.Strings_join(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_fragment", $.Strings_join(["#ifdef USE_COLOR", "gl_FragColor = gl_FragColor * vec4( vColor, opacity );", "#endif"], "\n"), "color_pars_vertex", $.Strings_join(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_vertex", $.Strings_join(["#ifdef USE_COLOR", "#ifdef GAMMA_INPUT", "vColor = color * color;", "#else", "vColor = color;", "#endif", "#endif"], "\n"), "skinning_pars_vertex", $.Strings_join(["#ifdef USE_SKINNING", "#ifdef BONE_TEXTURE", "uniform sampler2D boneTexture;", "mat4 getBoneMatrix( const in float i ) {", "float j = i * 4.0;", "float x = mod( j, N_BONE_PIXEL_X );", "float y = floor( j / N_BONE_PIXEL_X );", "const float dx = 1.0 / N_BONE_PIXEL_X;", "const float dy = 1.0 / N_BONE_PIXEL_Y;", "y = dy * ( y + 0.5 );", "vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );", "vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );", "vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );", "vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );", "mat4 bone = mat4( v1, v2, v3, v4 );", "return bone;", "}", "#else", "uniform mat4 boneGlobalMatrices[ MAX_BONES ];", "mat4 getBoneMatrix( const in float i ) {", "mat4 bone = boneGlobalMatrices[ int(i) ];", "return bone;", "}", "#endif", "#endif"], "\n"), "skinbase_vertex", $.Strings_join(["#ifdef USE_SKINNING", "mat4 boneMatX = getBoneMatrix( skinIndex.x );", "mat4 boneMatY = getBoneMatrix( skinIndex.y );", "#endif"], "\n"), "skinning_vertex", $.Strings_join(["#ifdef USE_SKINNING", "vec4 skinned  = boneMatX * skinVertexA * skinWeight.x;", "skinned    += boneMatY * skinVertexB * skinWeight.y;", "gl_Position  = projectionMatrix * modelViewMatrix * skinned;", "#endif"], "\n"), "morphtarget_pars_vertex", $.Strings_join(["#ifdef USE_MORPHTARGETS", "#ifndef USE_MORPHNORMALS", "uniform float morphTargetInfluences[ 8 ];", "#else", "uniform float morphTargetInfluences[ 4 ];", "#endif", "#endif"], "\n"), "morphtarget_vertex", $.Strings_join(["#ifdef USE_MORPHTARGETS", "vec3 morphed = vec3( 0.0 );", "morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];", "morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];", "morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];", "morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];", "#ifndef USE_MORPHNORMALS", "morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];", "morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];", "morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];", "morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];", "#endif", "morphed += position;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );", "#endif"], "\n"), "default_vertex", $.Strings_join(["#ifndef USE_MORPHTARGETS", "#ifndef USE_SKINNING", "gl_Position = projectionMatrix * mvPosition;", "#endif", "#endif"], "\n"), "morphnormal_vertex", $.Strings_join(["#ifdef USE_MORPHNORMALS", "vec3 morphedNormal = vec3( 0.0 );", "morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];", "morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];", "morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];", "morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];", "morphedNormal += normal;", "#endif"], "\n"), "skinnormal_vertex", $.Strings_join(["#ifdef USE_SKINNING", "mat4 skinMatrix = skinWeight.x * boneMatX;", "skinMatrix   += skinWeight.y * boneMatY;", "vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );", "#endif"], "\n"), "defaultnormal_vertex", $.Strings_join(["vec3 transformedNormal;", "#ifdef USE_SKINNING", "transformedNormal = skinnedNormal.xyz;", "#endif", "#ifdef USE_MORPHNORMALS", "transformedNormal = morphedNormal;", "#endif", "#ifndef USE_MORPHNORMALS", "#ifndef USE_SKINNING", "transformedNormal = normal;", "#endif", "#endif", "transformedNormal = normalMatrix * transformedNormal;"], "\n"), "shadowmap_pars_fragment", $.Strings_join(["#ifdef USE_SHADOWMAP", "uniform sampler2D shadowMap[ MAX_SHADOWS ];", "uniform vec2 shadowMapSize[ MAX_SHADOWS ];", "uniform float shadowDarkness[ MAX_SHADOWS ];", "uniform float shadowBias[ MAX_SHADOWS ];", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "float unpackDepth( const in vec4 rgba_depth ) {", "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );", "float depth = dot( rgba_depth, bit_shift );", "return depth;", "}", "#endif"], "\n"), "shadowmap_fragment", $.Strings_join(["#ifdef USE_SHADOWMAP", "#ifdef SHADOWMAP_DEBUG", "vec3 frustumColors[3];", "frustumColors[0] = vec3( 1.0, 0.5, 0.0 );", "frustumColors[1] = vec3( 0.0, 1.0, 0.8 );", "frustumColors[2] = vec3( 0.0, 0.5, 1.0 );", "#endif", "#ifdef SHADOWMAP_CASCADE", "int inFrustumCount = 0;", "#endif", "float fDepth;", "vec3 shadowColor = vec3( 1.0 );", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;", "bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );", "bool inFrustum = all( inFrustumVec );", "#ifdef SHADOWMAP_CASCADE", "inFrustumCount += int( inFrustum );", "bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );", "#else", "bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );", "#endif", "bool frustumTest = all( frustumTestVec );", "if ( frustumTest ) {", "shadowCoord.z += shadowBias[ i ];", "#ifdef SHADOWMAP_SOFT", "float shadow = 0.0;", "const float shadowDelta = 1.0 / 9.0;", "float xPixelOffset = 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset = 1.0 / shadowMapSize[ i ].y;", "float dx0 = -1.25 * xPixelOffset;", "float dy0 = -1.25 * yPixelOffset;", "float dx1 = 1.25 * xPixelOffset;", "float dy1 = 1.25 * yPixelOffset;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#else", "vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );", "float fDepth = unpackDepth( rgbaDepth );", "if ( fDepth < shadowCoord.z )", "shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );", "#endif", "}", "#ifdef SHADOWMAP_DEBUG", "#ifdef SHADOWMAP_CASCADE", "if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];", "#else", "if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];", "#endif", "#endif", "}", "#ifdef GAMMA_OUTPUT", "shadowColor *= shadowColor;", "#endif", "gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;", "#endif"], "\n"), "shadowmap_pars_vertex", $.Strings_join(["#ifdef USE_SHADOWMAP", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "uniform mat4 shadowMatrix[ MAX_SHADOWS ];", "#endif"], "\n"), "shadowmap_vertex", $.Strings_join(["#ifdef USE_SHADOWMAP", "vec4 transformedPosition;", "#ifdef USE_MORPHTARGETS", "transformedPosition = modelMatrix * vec4( morphed, 1.0 );", "#else", "#ifdef USE_SKINNING", "transformedPosition = modelMatrix * skinned;", "#else", "transformedPosition = modelMatrix * vec4( position, 1.0 );", "#endif", "#endif", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vShadowCoord[ i ] = shadowMatrix[ i ] * transformedPosition;", "}", "#endif"], "\n"), "alphatest_fragment", $.Strings_join(["#ifdef ALPHATEST", "if ( gl_FragColor.a < ALPHATEST ) discard;", "#endif"], "\n"), "linear_to_gamma_fragment", $.Strings_join(["#ifdef GAMMA_OUTPUT", "gl_FragColor.xyz = sqrt( gl_FragColor.xyz );", "#endif"], "\n")]);
  return $.__ShaderChunk;
};

$.UniformsUtils_merge = function(uniforms) {
  var t1, merged, u;
  t1 = {};
  t1.tmp_0 = null;
  merged = $.makeLiteralMap([]);
  for (u = 0; u < uniforms.length; ++u) {
    t1.tmp_0 = $.UniformsUtils_clone(uniforms[u]);
    $.forEach(t1.tmp_0, new $.UniformsUtils_merge_anon(t1, merged));
  }
  return merged;
};

$.UniformsUtils_clone = function(uniforms_src) {
  var uniforms_dst = $.makeLiteralMap([]);
  $.forEach(uniforms_src, new $.UniformsUtils_clone_anon(uniforms_dst));
  return uniforms_dst;
};

$.Uniform$ = function(texture, type, value) {
  return new $.Uniform(type, value, texture);
};

$.UniformsLib = function() {
  if ($.__UniformsLib == null)
    $.__UniformsLib = $.makeLiteralMap(["common", $.makeLiteralMap(["diffuse", $.Uniform$(null, "c", $.Color$(15658734)), "opacity", $.Uniform$(null, "f", 1), "map", $.Uniform$(null, "t", 0), "offsetRepeat", $.Uniform$(null, "v4", $.Vector4$(0, 0, 1, 1)), "lightMap", $.Uniform$(null, "t", 2), "specularMap", $.Uniform$(null, "t", 3), "envMap", $.Uniform$(null, "t", 1), "flipEnvMap", $.Uniform$(null, "f", -1), "useRefract", $.Uniform$(null, "i", 0), "reflectivity", $.Uniform$(null, "f", 1), "refractionRatio", $.Uniform$(null, "f", 0.98), "combine", $.Uniform$(null, "i", 0), "morphTargetInfluences", $.Uniform$(null, "f", 0)]), "bump", $.makeLiteralMap(["bumpMap", $.Uniform$(null, "t", 4), "bumpScale", $.Uniform$(null, "f", 1)]), "fog", $.makeLiteralMap(["fogDensity", $.Uniform$(null, "f", 0.00025), "fogNear", $.Uniform$(null, "f", 1), "fogFar", $.Uniform$(null, "f", 2000), "fogColor", $.Uniform$(null, "c", $.Color$(16777215))]), "lights", $.makeLiteralMap(["ambientLightColor", $.Uniform$(null, "fv", []), "directionalLightDirection", $.Uniform$(null, "fv", []), "directionalLightColor", $.Uniform$(null, "fv", []), "pointLightColor", $.Uniform$(null, "fv", []), "pointLightPosition", $.Uniform$(null, "fv", []), "pointLightDistance", $.Uniform$(null, "fv1", []), "spotLightColor", $.Uniform$(null, "fv", []), "spotLightPosition", $.Uniform$(null, "fv", []), "spotLightDirection", $.Uniform$(null, "fv", []), "spotLightDistance", $.Uniform$(null, "fv1", []), "spotLightAngle", $.Uniform$(null, "fv1", []), "spotLightExponent", $.Uniform$(null, "fv1", [])]), "particle", $.makeLiteralMap(["psColor", $.Uniform$(null, "c", $.Color$(15658734)), "opacity", $.Uniform$(null, "f", 1), "size", $.Uniform$(null, "f", 1), "scale", $.Uniform$(null, "f", 1), "map", $.Uniform$(null, "t", 0), "fogDensity", $.Uniform$(null, "f", 0.00025), "fogNear", $.Uniform$(null, "f", 1), "fogFar", $.Uniform$(null, "f", 2000), "fogColor", $.Uniform$(null, "c", $.Color$(16777215))]), "shadowmap", $.makeLiteralMap(["shadowMap", $.Uniform$([], "tv", 6), "shadowMapSize", $.Uniform$(null, "v2v", []), "shadowBias", $.Uniform$(null, "fv1", []), "shadowDarkness", $.Uniform$(null, "fv1", []), "shadowMatrix", $.Uniform$(null, "m4v", [])])]);
  return $.__UniformsLib;
};

$.ShaderLib = function() {
  if ($.__ShaderLib == null)
    $.__ShaderLib = $.makeLiteralMap(["depth", $.makeLiteralMap(["uniforms", $.makeLiteralMap(["mNear", $.Uniform$(null, "f", 1), "mFar", $.Uniform$(null, "f", 2000), "opacity", $.Uniform$(null, "f", 1)]), "vertexShader", $.Strings_join(["void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"], "\n"), "fragmentShader", $.Strings_join(["uniform float mNear;", "uniform float mFar;", "uniform float opacity;", "void main() {", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "float color = 1.0 - smoothstep( mNear, mFar, depth );", "gl_FragColor = vec4( vec3( color ), opacity );", "}"], "\n")]), "normal", $.makeLiteralMap(["uniforms", $.makeLiteralMap(["opacity", $.Uniform$(null, "f", 1)]), "vertexShader", $.Strings_join(["varying vec3 vNormal;", "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vNormal = normalMatrix * normal;", "gl_Position = projectionMatrix * mvPosition;", "}"], "\n"), "fragmentShader", $.Strings_join(["uniform float opacity;", "varying vec3 vNormal;", "void main() {", "gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", "}"], "\n")]), "basic", $.makeLiteralMap(["uniforms", $.UniformsUtils_merge([$.$$index($.UniformsLib(), "common"), $.$$index($.UniformsLib(), "fog"), $.$$index($.UniformsLib(), "shadowmap")]), "vertexShader", $.Strings_join([$.$$index($.ShaderChunk(), "map_pars_vertex"), $.$$index($.ShaderChunk(), "lightmap_pars_vertex"), $.$$index($.ShaderChunk(), "envmap_pars_vertex"), $.$$index($.ShaderChunk(), "color_pars_vertex"), $.$$index($.ShaderChunk(), "skinning_pars_vertex"), $.$$index($.ShaderChunk(), "morphtarget_pars_vertex"), $.$$index($.ShaderChunk(), "shadowmap_pars_vertex"), "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", $.$$index($.ShaderChunk(), "map_vertex"), $.$$index($.ShaderChunk(), "lightmap_vertex"), $.$$index($.ShaderChunk(), "envmap_vertex"), $.$$index($.ShaderChunk(), "color_vertex"), $.$$index($.ShaderChunk(), "skinbase_vertex"), $.$$index($.ShaderChunk(), "skinning_vertex"), $.$$index($.ShaderChunk(), "morphtarget_vertex"), $.$$index($.ShaderChunk(), "default_vertex"), $.$$index($.ShaderChunk(), "shadowmap_vertex"), "}"], "\n"), "fragmentShader", $.Strings_join(["uniform vec3 diffuse;", "uniform float opacity;", $.$$index($.ShaderChunk(), "color_pars_fragment"), $.$$index($.ShaderChunk(), "map_pars_fragment"), $.$$index($.ShaderChunk(), "lightmap_pars_fragment"), $.$$index($.ShaderChunk(), "envmap_pars_fragment"), $.$$index($.ShaderChunk(), "fog_pars_fragment"), $.$$index($.ShaderChunk(), "shadowmap_pars_fragment"), $.$$index($.ShaderChunk(), "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( diffuse, opacity );", $.$$index($.ShaderChunk(), "map_fragment"), $.$$index($.ShaderChunk(), "alphatest_fragment"), $.$$index($.ShaderChunk(), "specularmap_fragment"), $.$$index($.ShaderChunk(), "lightmap_fragment"), $.$$index($.ShaderChunk(), "color_fragment"), $.$$index($.ShaderChunk(), "envmap_fragment"), $.$$index($.ShaderChunk(), "shadowmap_fragment"), $.$$index($.ShaderChunk(), "linear_to_gamma_fragment"), $.$$index($.ShaderChunk(), "fog_fragment"), "}"], "\n")]), "lambert", $.makeLiteralMap(["uniforms", $.UniformsUtils_merge([$.$$index($.UniformsLib(), "common"), $.$$index($.UniformsLib(), "fog"), $.$$index($.UniformsLib(), "lights"), $.$$index($.UniformsLib(), "shadowmap"), $.makeLiteralMap(["ambient", $.Uniform$(null, "c", $.Color$(16777215)), "emissive", $.Uniform$(null, "c", $.Color$(0)), "wrapRGB", $.Uniform$(null, "v3", $.Vector3$(1, 1, 1))])]), "vertexShader", $.Strings_join(["varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", $.$$index($.ShaderChunk(), "map_pars_vertex"), $.$$index($.ShaderChunk(), "lightmap_pars_vertex"), $.$$index($.ShaderChunk(), "envmap_pars_vertex"), $.$$index($.ShaderChunk(), "lights_lambert_pars_vertex"), $.$$index($.ShaderChunk(), "color_pars_vertex"), $.$$index($.ShaderChunk(), "skinning_pars_vertex"), $.$$index($.ShaderChunk(), "morphtarget_pars_vertex"), $.$$index($.ShaderChunk(), "shadowmap_pars_vertex"), "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", $.$$index($.ShaderChunk(), "map_vertex"), $.$$index($.ShaderChunk(), "lightmap_vertex"), $.$$index($.ShaderChunk(), "envmap_vertex"), $.$$index($.ShaderChunk(), "color_vertex"), $.$$index($.ShaderChunk(), "morphnormal_vertex"), $.$$index($.ShaderChunk(), "skinbase_vertex"), $.$$index($.ShaderChunk(), "skinnormal_vertex"), $.$$index($.ShaderChunk(), "defaultnormal_vertex"), "#ifndef USE_ENVMAP", "vec4 mPosition = modelMatrix * vec4( position, 1.0 );", "#endif", $.$$index($.ShaderChunk(), "lights_lambert_vertex"), $.$$index($.ShaderChunk(), "skinning_vertex"), $.$$index($.ShaderChunk(), "morphtarget_vertex"), $.$$index($.ShaderChunk(), "default_vertex"), $.$$index($.ShaderChunk(), "shadowmap_vertex"), "}"], "\n"), "fragmentShader", $.Strings_join(["uniform float opacity;", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", $.$$index($.ShaderChunk(), "color_pars_fragment"), $.$$index($.ShaderChunk(), "map_pars_fragment"), $.$$index($.ShaderChunk(), "lightmap_pars_fragment"), $.$$index($.ShaderChunk(), "envmap_pars_fragment"), $.$$index($.ShaderChunk(), "fog_pars_fragment"), $.$$index($.ShaderChunk(), "shadowmap_pars_fragment"), $.$$index($.ShaderChunk(), "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", $.$$index($.ShaderChunk(), "map_fragment"), $.$$index($.ShaderChunk(), "alphatest_fragment"), $.$$index($.ShaderChunk(), "specularmap_fragment"), "#ifdef DOUBLE_SIDED", "if ( gl_FrontFacing )", "gl_FragColor.xyz *= vLightFront;", "else", "gl_FragColor.xyz *= vLightBack;", "#else", "gl_FragColor.xyz *= vLightFront;", "#endif", $.$$index($.ShaderChunk(), "lightmap_fragment"), $.$$index($.ShaderChunk(), "color_fragment"), $.$$index($.ShaderChunk(), "envmap_fragment"), $.$$index($.ShaderChunk(), "shadowmap_fragment"), $.$$index($.ShaderChunk(), "linear_to_gamma_fragment"), $.$$index($.ShaderChunk(), "fog_fragment"), "}"], "\n")]), "phong", $.makeLiteralMap(["uniforms", $.UniformsUtils_merge([$.$$index($.UniformsLib(), "common"), $.$$index($.UniformsLib(), "bump"), $.$$index($.UniformsLib(), "fog"), $.$$index($.UniformsLib(), "lights"), $.$$index($.UniformsLib(), "shadowmap"), $.makeLiteralMap(["ambient", $.Uniform$(null, "c", $.Color$(16777215)), "emissive", $.Uniform$(null, "c", $.Color$(0)), "specular", $.Uniform$(null, "c", $.Color$(1118481)), "shininess", $.Uniform$(null, "f", 30), "wrapRGB", $.Uniform$(null, "v3", $.Vector3$(1, 1, 1))])]), "vertexShader", $.Strings_join(["varying vec3 vViewPosition;", "varying vec3 vNormal;", $.$$index($.ShaderChunk(), "map_pars_vertex"), $.$$index($.ShaderChunk(), "lightmap_pars_vertex"), $.$$index($.ShaderChunk(), "envmap_pars_vertex"), $.$$index($.ShaderChunk(), "lights_phong_pars_vertex"), $.$$index($.ShaderChunk(), "color_pars_vertex"), $.$$index($.ShaderChunk(), "skinning_pars_vertex"), $.$$index($.ShaderChunk(), "morphtarget_pars_vertex"), $.$$index($.ShaderChunk(), "shadowmap_pars_vertex"), "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", $.$$index($.ShaderChunk(), "map_vertex"), $.$$index($.ShaderChunk(), "lightmap_vertex"), $.$$index($.ShaderChunk(), "envmap_vertex"), $.$$index($.ShaderChunk(), "color_vertex"), "#ifndef USE_ENVMAP", "vec4 mPosition = modelMatrix * vec4( position, 1.0 );", "#endif", "vViewPosition = -mvPosition.xyz;", $.$$index($.ShaderChunk(), "morphnormal_vertex"), $.$$index($.ShaderChunk(), "skinbase_vertex"), $.$$index($.ShaderChunk(), "skinnormal_vertex"), $.$$index($.ShaderChunk(), "defaultnormal_vertex"), "vNormal = transformedNormal;", $.$$index($.ShaderChunk(), "lights_phong_vertex"), $.$$index($.ShaderChunk(), "skinning_vertex"), $.$$index($.ShaderChunk(), "morphtarget_vertex"), $.$$index($.ShaderChunk(), "default_vertex"), $.$$index($.ShaderChunk(), "shadowmap_vertex"), "}"], "\n"), "fragmentShader", $.Strings_join(["uniform vec3 diffuse;", "uniform float opacity;", "uniform vec3 ambient;", "uniform vec3 emissive;", "uniform vec3 specular;", "uniform float shininess;", $.$$index($.ShaderChunk(), "color_pars_fragment"), $.$$index($.ShaderChunk(), "map_pars_fragment"), $.$$index($.ShaderChunk(), "lightmap_pars_fragment"), $.$$index($.ShaderChunk(), "envmap_pars_fragment"), $.$$index($.ShaderChunk(), "fog_pars_fragment"), $.$$index($.ShaderChunk(), "lights_phong_pars_fragment"), $.$$index($.ShaderChunk(), "shadowmap_pars_fragment"), $.$$index($.ShaderChunk(), "bumpmap_pars_fragment"), $.$$index($.ShaderChunk(), "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", $.$$index($.ShaderChunk(), "map_fragment"), $.$$index($.ShaderChunk(), "alphatest_fragment"), $.$$index($.ShaderChunk(), "specularmap_fragment"), $.$$index($.ShaderChunk(), "lights_phong_fragment"), $.$$index($.ShaderChunk(), "lightmap_fragment"), $.$$index($.ShaderChunk(), "color_fragment"), $.$$index($.ShaderChunk(), "envmap_fragment"), $.$$index($.ShaderChunk(), "shadowmap_fragment"), $.$$index($.ShaderChunk(), "linear_to_gamma_fragment"), $.$$index($.ShaderChunk(), "fog_fragment"), "}"], "\n")]), "particle_basic", $.makeLiteralMap(["uniforms", $.UniformsUtils_merge([$.$$index($.UniformsLib(), "particle"), $.$$index($.UniformsLib(), "shadowmap")]), "vertexShader", $.Strings_join(["uniform float size;", "uniform float scale;", $.$$index($.ShaderChunk(), "color_pars_vertex"), $.$$index($.ShaderChunk(), "shadowmap_pars_vertex"), "void main() {", $.$$index($.ShaderChunk(), "color_vertex"), "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#ifdef USE_SIZEATTENUATION", "gl_PointSize = size * ( scale / length( mvPosition.xyz ) );", "#else", "gl_PointSize = size;", "#endif", "gl_Position = projectionMatrix * mvPosition;", $.$$index($.ShaderChunk(), "shadowmap_vertex"), "}"], "\n"), "fragmentShader", $.Strings_join(["uniform vec3 psColor;", "uniform float opacity;", $.$$index($.ShaderChunk(), "color_pars_fragment"), $.$$index($.ShaderChunk(), "map_particle_pars_fragment"), $.$$index($.ShaderChunk(), "fog_pars_fragment"), $.$$index($.ShaderChunk(), "shadowmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( psColor, opacity );", $.$$index($.ShaderChunk(), "map_particle_fragment"), $.$$index($.ShaderChunk(), "alphatest_fragment"), $.$$index($.ShaderChunk(), "color_fragment"), $.$$index($.ShaderChunk(), "shadowmap_fragment"), $.$$index($.ShaderChunk(), "fog_fragment"), "}"], "\n")]), "depthRGBA", $.makeLiteralMap(["uniforms", $.makeLiteralMap([]), "vertexShader", $.Strings_join([$.$$index($.ShaderChunk(), "skinning_pars_vertex"), $.$$index($.ShaderChunk(), "morphtarget_pars_vertex"), "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", $.$$index($.ShaderChunk(), "skinbase_vertex"), $.$$index($.ShaderChunk(), "skinning_vertex"), $.$$index($.ShaderChunk(), "morphtarget_vertex"), $.$$index($.ShaderChunk(), "default_vertex"), "}"], "\n"), "fragmentShader", $.Strings_join(["vec4 pack_depth( const in float depth ) {", "const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );", "const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );", "vec4 res = fract( depth * bit_shift );", "res -= res.xxyz * bit_mask;", "return res;", "}", "void main() {", "gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );", "}"], "\n")])]);
  return $.__ShaderLib;
};

$.Scene$ = function() {
  var t1 = $.Object3DCount;
  $.Object3DCount = $.$$add(t1, 1);
  t1 = new $.Scene(null, null, null, null, null, null, t1, "", $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), "XYZ", null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Scene$0();
  return t1;
};

$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
Isolate.$finishClasses($$);
$$ = {};
$.Gamepad = {builtin$cls: 'Gamepad'};
$.TextTrack = {builtin$cls: 'TextTrack'};
$.Map = {builtin$cls: 'Map'};
$.PathSeg = {builtin$cls: 'PathSeg'};
$.num = {builtin$cls: 'num'};
$.TextTrackCue = {builtin$cls: 'TextTrackCue'};
$.ElementInstance = {builtin$cls: 'ElementInstance'};
$.Match = {builtin$cls: 'Match'};
$.MediaStream = {builtin$cls: 'MediaStream'};
$.Touch = {builtin$cls: 'Touch'};
$.DomMimeType = {builtin$cls: 'DomMimeType'};
$.String = {builtin$cls: 'String'};
$.DomPlugin = {builtin$cls: 'DomPlugin'};
$.ClientRect = {builtin$cls: 'ClientRect'};
$.Element = {builtin$cls: 'Element'};
$.SourceBuffer = {builtin$cls: 'SourceBuffer'};
$.SpeechGrammar = {builtin$cls: 'SpeechGrammar'};
$.Node = {builtin$cls: 'Node'};
$.Entry = {builtin$cls: 'Entry'};
$.EntrySync = {builtin$cls: 'EntrySync'};
$.SpeechInputResult = {builtin$cls: 'SpeechInputResult'};
$.SpeechRecognitionResult = {builtin$cls: 'SpeechRecognitionResult'};
$.CssRule = {builtin$cls: 'CssRule'};
$.File = {builtin$cls: 'File'};
$.CssValue = {builtin$cls: 'CssValue'};
$.Length = {builtin$cls: 'Length'};
$.StyleSheet = {builtin$cls: 'StyleSheet'};
$.Transform = {builtin$cls: 'Transform'};
$.$int = {builtin$cls: '$int'};
$.Number = {builtin$cls: 'Number'};
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT3 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT1 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT4 = new Isolate.$isolateProperties.JSString();
$.CONSTANT2 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT6 = new Isolate.$isolateProperties.JSDouble();
$.CONSTANT5 = new Isolate.$isolateProperties._Random();
$.CONSTANT7 = new Isolate.$isolateProperties.Object();
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._getTypeNameOf = null;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT2;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._Sort__INSERTION_SORT_THRESHOLD = 32;
$.double_INFINITY = (1/0);
$.double_NEGATIVE_INFINITY = (-1/0);
$.ExtTextureFilterAnisotropic_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
$.ExtTextureFilterAnisotropic_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
$.WebGLRenderingContext_ALPHA = 6406;
$.WebGLRenderingContext_ARRAY_BUFFER = 34962;
$.WebGLRenderingContext_BACK = 1029;
$.WebGLRenderingContext_BLEND = 3042;
$.WebGLRenderingContext_BYTE = 5120;
$.WebGLRenderingContext_CCW = 2305;
$.WebGLRenderingContext_CLAMP_TO_EDGE = 33071;
$.WebGLRenderingContext_COLOR_ATTACHMENT0 = 36064;
$.WebGLRenderingContext_COLOR_BUFFER_BIT = 16384;
$.WebGLRenderingContext_COMPILE_STATUS = 35713;
$.WebGLRenderingContext_CULL_FACE = 2884;
$.WebGLRenderingContext_CW = 2304;
$.WebGLRenderingContext_DEPTH_ATTACHMENT = 36096;
$.WebGLRenderingContext_DEPTH_BUFFER_BIT = 256;
$.WebGLRenderingContext_DEPTH_COMPONENT16 = 33189;
$.WebGLRenderingContext_DEPTH_STENCIL = 34041;
$.WebGLRenderingContext_DEPTH_STENCIL_ATTACHMENT = 33306;
$.WebGLRenderingContext_DEPTH_TEST = 2929;
$.WebGLRenderingContext_DST_ALPHA = 772;
$.WebGLRenderingContext_DST_COLOR = 774;
$.WebGLRenderingContext_DYNAMIC_DRAW = 35048;
$.WebGLRenderingContext_ELEMENT_ARRAY_BUFFER = 34963;
$.WebGLRenderingContext_FLOAT = 5126;
$.WebGLRenderingContext_FRAGMENT_SHADER = 35632;
$.WebGLRenderingContext_FRAMEBUFFER = 36160;
$.WebGLRenderingContext_FUNC_ADD = 32774;
$.WebGLRenderingContext_FUNC_REVERSE_SUBTRACT = 32779;
$.WebGLRenderingContext_FUNC_SUBTRACT = 32778;
$.WebGLRenderingContext_INT = 5124;
$.WebGLRenderingContext_LEQUAL = 515;
$.WebGLRenderingContext_LINEAR = 9729;
$.WebGLRenderingContext_LINEAR_MIPMAP_LINEAR = 9987;
$.WebGLRenderingContext_LINEAR_MIPMAP_NEAREST = 9985;
$.WebGLRenderingContext_LINES = 1;
$.WebGLRenderingContext_LINE_STRIP = 3;
$.WebGLRenderingContext_LINK_STATUS = 35714;
$.WebGLRenderingContext_LUMINANCE = 6409;
$.WebGLRenderingContext_LUMINANCE_ALPHA = 6410;
$.WebGLRenderingContext_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
$.WebGLRenderingContext_MAX_TEXTURE_SIZE = 3379;
$.WebGLRenderingContext_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
$.WebGLRenderingContext_MAX_VERTEX_UNIFORM_VECTORS = 36347;
$.WebGLRenderingContext_MIRRORED_REPEAT = 33648;
$.WebGLRenderingContext_NEAREST = 9728;
$.WebGLRenderingContext_NEAREST_MIPMAP_LINEAR = 9986;
$.WebGLRenderingContext_NEAREST_MIPMAP_NEAREST = 9984;
$.WebGLRenderingContext_ONE = 1;
$.WebGLRenderingContext_ONE_MINUS_DST_ALPHA = 773;
$.WebGLRenderingContext_ONE_MINUS_DST_COLOR = 775;
$.WebGLRenderingContext_ONE_MINUS_SRC_ALPHA = 771;
$.WebGLRenderingContext_ONE_MINUS_SRC_COLOR = 769;
$.WebGLRenderingContext_POINTS = 0;
$.WebGLRenderingContext_POLYGON_OFFSET_FILL = 32823;
$.WebGLRenderingContext_RENDERBUFFER = 36161;
$.WebGLRenderingContext_REPEAT = 10497;
$.WebGLRenderingContext_RGB = 6407;
$.WebGLRenderingContext_RGBA = 6408;
$.WebGLRenderingContext_RGBA4 = 32854;
$.WebGLRenderingContext_SHORT = 5122;
$.WebGLRenderingContext_SRC_ALPHA = 770;
$.WebGLRenderingContext_SRC_ALPHA_SATURATE = 776;
$.WebGLRenderingContext_SRC_COLOR = 768;
$.WebGLRenderingContext_STATIC_DRAW = 35044;
$.WebGLRenderingContext_STENCIL_BUFFER_BIT = 1024;
$.WebGLRenderingContext_TEXTURE0 = 33984;
$.WebGLRenderingContext_TEXTURE_2D = 3553;
$.WebGLRenderingContext_TEXTURE_CUBE_MAP = 34067;
$.WebGLRenderingContext_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
$.WebGLRenderingContext_TEXTURE_MAG_FILTER = 10240;
$.WebGLRenderingContext_TEXTURE_MIN_FILTER = 10241;
$.WebGLRenderingContext_TEXTURE_WRAP_S = 10242;
$.WebGLRenderingContext_TEXTURE_WRAP_T = 10243;
$.WebGLRenderingContext_TRIANGLES = 4;
$.WebGLRenderingContext_TRIANGLE_STRIP = 5;
$.WebGLRenderingContext_UNPACK_FLIP_Y_WEBGL = 37440;
$.WebGLRenderingContext_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
$.WebGLRenderingContext_UNSIGNED_BYTE = 5121;
$.WebGLRenderingContext_UNSIGNED_INT = 5125;
$.WebGLRenderingContext_UNSIGNED_SHORT = 5123;
$.WebGLRenderingContext_UNSIGNED_SHORT_4_4_4_4 = 32819;
$.WebGLRenderingContext_UNSIGNED_SHORT_5_5_5_1 = 32820;
$.WebGLRenderingContext_UNSIGNED_SHORT_5_6_5 = 33635;
$.WebGLRenderingContext_VALIDATE_STATUS = 35715;
$.WebGLRenderingContext_VERTEX_SHADER = 35633;
$.WebGLRenderingContext_ZERO = 0;
$.PI = 3.141592653589793;
$.PathAction_MOVE_TO = "moveTo";
$.PathAction_LINE_TO = "lineTo";
$.PathAction_QUADRATIC_CURVE_TO = "quadraticCurveTo";
$.PathAction_BEZIER_CURVE_TO = "bezierCurveTo";
$.PathAction_CSPLINE_THRU = "splineThru";
$.PathAction_ARC = "arc";
$.PathAction_ELLIPSE = "ellipse";
$.EPSILON = 1e-10;
$.ExtrudeGeometry____v1 = null;
$.ExtrudeGeometry____v2 = null;
$.ExtrudeGeometry____v3 = null;
$.ExtrudeGeometry____v4 = null;
$.ExtrudeGeometry____v5 = null;
$.ExtrudeGeometry____v6 = null;
$.Matrix4____v1 = null;
$.LineStrip = 0;
$.WebGLRenderer_PRECISION_HIGH = "highp";
$.__ShaderChunk = null;
$.__UniformsLib = null;
$.__ShaderLib = null;
$.GeometryCount = 0;
$.Object3DCount = 0;
$.MaterialCount = 0;
$.FrontSide = 0;
$.BackSide = 1;
$.DoubleSide = 2;
$.NoShading = 0;
$.FlatShading = 1;
$.SmoothShading = 2;
$.NoColors = 0;
$.VertexColors = 2;
$.NoBlending = 0;
$.NormalBlending = 1;
$.AdditiveBlending = 2;
$.SubtractiveBlending = 3;
$.MultiplyBlending = 4;
$.CustomBlending = 5;
$.AddEquation = 100;
$.SubtractEquation = 101;
$.ReverseSubtractEquation = 102;
$.ZeroFactor = 200;
$.OneFactor = 201;
$.SrcColorFactor = 202;
$.OneMinusSrcColorFactor = 203;
$.SrcAlphaFactor = 204;
$.OneMinusSrcAlphaFactor = 205;
$.DstAlphaFactor = 206;
$.OneMinusDstAlphaFactor = 207;
$.DstColorFactor = 208;
$.OneMinusDstColorFactor = 209;
$.SrcAlphaSaturateFactor = 210;
$.MultiplyOperation = 0;
$.RepeatWrapping = 0;
$.ClampToEdgeWrapping = 1;
$.MirroredRepeatWrapping = 2;
$.NearestFilter = 3;
$.NearestMipMapNearestFilter = 4;
$.NearestMipMapLinearFilter = 5;
$.LinearFilter = 6;
$.LinearMipMapNearestFilter = 7;
$.LinearMipMapLinearFilter = 8;
$.ByteType = 9;
$.UnsignedByteType = 10;
$.ShortType = 11;
$.UnsignedShortType = 12;
$.IntType = 13;
$.UnsignedIntType = 14;
$.FloatType = 15;
$.UnsignedShort4444Type = 1016;
$.UnsignedShort5551Type = 1017;
$.UnsignedShort565Type = 1018;
$.AlphaFormat = 16;
$.RGBFormat = 17;
$.RGBAFormat = 18;
$.LuminanceFormat = 19;
$.LuminanceAlphaFormat = 20;
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.$$div = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$div(receiver, a0);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.length = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$length(receiver);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.getRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).getRange$2(receiver, a0, a1);
};
$.floor = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).floor$0(receiver);
};
$.last = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$last(receiver);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.contains = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).contains$2(receiver, a0, a1);
};
$.$$mod = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mod(receiver, a0);
};
$.allMatches = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).allMatches$1(receiver, a0);
};
$.toInt = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).toInt$0(receiver);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSStringJSArray(receiver).$index(receiver, a0);
};
$.indexOf = function(receiver, a0, a1) {
  return $.getInterceptor$JSStringJSArray(receiver).indexOf$2(receiver, a0, a1);
};
$.mappedBy = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).mappedBy$1(receiver, a0);
};
$.isEmpty = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$isEmpty(receiver);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.reduce = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).reduce$2(receiver, a0, a1);
};
$.toStringAsFixed = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).toStringAsFixed$1(receiver, a0);
};
$.toList = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toList$0(receiver);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.removeRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).removeRange$2(receiver, a0, a1);
};
$.remove = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).remove$1(receiver, a0);
};
$.ceil = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).ceil$0(receiver);
};
$.$$shr = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shr(receiver, a0);
};
$.where = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).where$1(receiver, a0);
};
$.abs = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).abs$0(receiver);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.compareTo = function(receiver, a0) {
  return $.getInterceptor$JSStringJSNumber(receiver).compareTo$1(receiver, a0);
};
$.$$negate = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).$negate(receiver);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.join = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).join$1(receiver, a0);
};
$.$$le = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$le(receiver, a0);
};
$.length0 = function(receiver, value) {
  return $.getInterceptor$JSArray(receiver).set$length(receiver, value);
};
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSStringJSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isMap: function() {
    return false;
  },
  $isArrayBuffer: function() {
    return false;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $isBlob: function() {
    return false;
  },
  $isCanvasElement: function() {
    return false;
  },
  $isElement: function() {
    return false;
  },
  $isFile: function() {
    return false;
  },
  $isFileList: function() {
    return false;
  },
  $isImageData: function() {
    return false;
  },
  $isImageElement: function() {
    return false;
  },
  $isNode: function() {
    return false;
  },
  $isVideoElement: function() {
    return false;
  },
  $isKeyRange: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  }
});

$.$defineNativeClass("AbstractWorker", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.AbstractWorkerEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "name>,type>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMApplicationCache", {
  get$on: function() {
    return $.ApplicationCacheEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("ArrayBuffer", {
  $isArrayBuffer: function() {
    return true;
  }
});

$.$defineNativeClass("ArrayBufferView", {"": "buffer>",
  $isArrayBufferView: function() {
    return true;
  }
});

$.$defineNativeClass("BarInfo", {"": "visible>"});

$.$defineNativeClass("BatteryManager", {
  get$on: function() {
    return $.BatteryManagerEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("Blob", {"": "size>,type>",
  $isBlob: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$on: function() {
    return $.BodyElementEvents$(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "name>,type>,value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width=",
  getContext$1: function(contextId) {
    return this.getContext(contextId);
  },
  get$context2d: function() {
    return this.getContext$1("2d");
  },
  $isCanvasElement: function() {
    return true;
  }
});

$.$defineNativeClass("CanvasRenderingContext2D", {
  lineWidth$1: function(arg0) {
    return this.lineWidth.call$1(arg0);
  },
  drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
    return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
  },
  scale$2: function(sx, sy) {
    return this.scale(sx,sy);
  },
  get$scale: function() {
    return new $.BoundClosure1(this, "scale$2");
  }
});

$.$defineNativeClass("CharacterData", {"": "data>,length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("ClientRect", {"": "height>,width>"});

$.$defineNativeClass("CloseEvent", {"": "code>"});

$.$defineNativeClass("CompositionEvent", {"": "data>"});

$.$defineNativeClass("WebKitCSSKeyframesRule", {"": "name>"});

$.$defineNativeClass("WebKitCSSMatrix", {"": "a>,b>,c>,d>",
  scale$3: function(scaleX, scaleY, scaleZ) {
    return this.scale(scaleX,scaleY,scaleZ);
  },
  get$scale: function() {
    return new $.BoundClosure2(this, "scale$3");
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("CSSRule", {"": "type>"});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$1: function(arg0) {
    return this.get$clear().call$1(arg0);
  },
  get$color: function() {
    return this.getPropertyValue$1("color");
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  get$opacity: function() {
    return this.getPropertyValue$1("opacity");
  },
  get$position: function() {
    return this.getPropertyValue$1("position");
  },
  get$resize: function() {
    return this.getPropertyValue$1("resize");
  },
  get$size: function() {
    return this.getPropertyValue$1("size");
  },
  set$size: function(value) {
    this.setProperty$3("size", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("DataTransferItem", {"": "type>"});

$.$defineNativeClass("DataTransferItemList", {"": "length>",
  add$2: function(data_OR_file, type) {
    return this.add(data_OR_file,type);
  },
  add$1: function(data_OR_file) {
    return this.add(data_OR_file);
  }
});

$.$defineNativeClass("DedicatedWorkerContext", {
  get$on: function() {
    return $.DedicatedWorkerContextEvents$(this);
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~",
  get$on: function() {
    return $.DocumentEvents$(this);
  },
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$elements: function() {
    return this.get$children();
  },
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return this._children;
  },
  get$on: function() {
    return $.ElementEvents$(this);
  }
});

$.$defineNativeClass("DOMError", {"": "name>"});

$.$defineNativeClass("DOMException", {
  get$name: function() {
    var errorName = this.name;
    if ($._Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if ($._Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("MimeType", {"": "type>"});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout1(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout1(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Plugin", {"": "length>,name>"});

$.$defineNativeClass("PluginArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout2(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout2(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout2: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Selection", {"": "type>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMSettableTokenList", {"": "value="});

$.$defineNativeClass("DOMStringList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout3(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout3(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout3: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("DOMTokenList", {"": "length>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children~,id=,$$dom_lastElementChild:lastElementChild~",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$elements: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$elements")) {
      return this.get$children();
    } else
      return Object.prototype.get$elements.call(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.ElementEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_getAttribute$1: function(name) {
    return this.getAttribute(name);
  },
  $$dom_hasAttribute$1: function(name) {
    return this.hasAttribute(name);
  },
  $$dom_removeAttribute$1: function(name) {
    return this.removeAttribute(name);
  },
  $$dom_setAttribute$2: function(name, value) {
    return this.setAttribute(name,value);
  },
  $isElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height=,name>,type>,width="});

$.$defineNativeClass("Entry", {"": "name>",
  remove$2: function(successCallback, errorCallback) {
    return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$1: function(successCallback) {
    successCallback = $.convertDartClosureToJS(successCallback, 0);
    return this.remove(successCallback);
  }
});

$.$defineNativeClass("EntrySync", {"": "name>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("Event", {"": "type>",
  preventDefault$0: function() {
    return this.preventDefault();
  }
});

$.$defineNativeClass("EventException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventSource", {
  get$on: function() {
    return $.EventSourceEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.Events$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "elements>,name>,type>"});

$.$defineNativeClass("File", {"": "name>",
  $isFile: function() {
    return true;
  }
});

$.$defineNativeClass("FileError", {"": "code>"});

$.$defineNativeClass("FileException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout4(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout4(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout4: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isFileList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("FileReader", {
  get$on: function() {
    return $.FileReaderEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("DOMFileSystem", {"": "name>"});

$.$defineNativeClass("DOMFileSystemSync", {"": "name>"});

$.$defineNativeClass("FileWriter", {"": "length>,position>",
  get$on: function() {
    return $.FileWriterEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("FileWriterSync", {"": "length>,position>"});

$.$defineNativeClass("Float32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout5(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout5(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout5: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout6(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout6(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout6: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "action>,length>,name>"});

$.$defineNativeClass("Gamepad", {"": "id>,index>"});

$.$defineNativeClass("History", {"": "length>"});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout7(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout7(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout7: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout8(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout8(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout8: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  }
});

$.$defineNativeClass("XMLHttpRequest", {
  get$on: function() {
    return $.HttpRequestEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("XMLHttpRequestException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestProgressEvent", {"": "position>"});

$.$defineNativeClass("XMLHttpRequestUpload", {
  get$on: function() {
    return $.HttpRequestUploadEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,name>,width="});

$.$defineNativeClass("ImageData", {"": "data>,height>,width>",
  $isImageData: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLImageElement", {"": "height=,width=,x>,y>",
  $isImageElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height=,name>,pattern>,size=,type>,value=,width=",
  get$on: function() {
    return $.InputElementEvents$(this);
  },
  $isElement: function() {
    return true;
  },
  $isNode: function() {
    return true;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout9(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout9(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout9: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout10(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout10(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout10: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout11(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout11(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout11: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("JavaScriptCallFrame", {"": "type>"});

$.$defineNativeClass("HTMLKeygenElement", {"": "name>,type>"});

$.$defineNativeClass("HTMLLIElement", {"": "type>,value="});

$.$defineNativeClass("HTMLLinkElement", {"": "type>"});

$.$defineNativeClass("Location", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLMapElement", {"": "name>"});

$.$defineNativeClass("MediaController", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMediaElement", {
  get$on: function() {
    return $.MediaElementEvents$(this);
  }
});

$.$defineNativeClass("MediaError", {"": "code>"});

$.$defineNativeClass("MediaKeyError", {"": "code>"});

$.$defineNativeClass("MediaList", {"": "length>"});

$.$defineNativeClass("MediaSource", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStream", {"": "id>",
  get$on: function() {
    return $.MediaStreamEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamTrack", {"": "id>",
  get$on: function() {
    return $.MediaStreamTrackEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MessageEvent", {
  get$data: function() {
    return $.convertNativeToDart_SerializedScriptValue(this.data);
  }
});

$.$defineNativeClass("MessagePort", {
  get$on: function() {
    return $.MessagePortEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  start$0: function() {
    return this.start();
  },
  get$start: function() {
    return new $.BoundClosure0(this, "start$0");
  }
});

$.$defineNativeClass("HTMLMetaElement", {"": "name>"});

$.$defineNativeClass("Metadata", {"": "size>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("MouseEvent", {"": "clientX>,x>,y>"});

$.$defineNativeClass("MutationRecord", {"": "type>"});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout12(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout12(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout12: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("NavigatorUserMediaError", {"": "code>"});

$.$defineNativeClass("Node", {"": "$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,parent:parentElement~",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  replaceWith$1: function(otherNode) {
    var parent, exception;
    try {
      parent = this.parentNode;
      parent.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  $isNode: function() {
    return true;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout13(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout13(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout13: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Notification", {
  get$on: function() {
    return $.NotificationEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "start>,type>"});

$.$defineNativeClass("HTMLObjectElement", {"": "code>,data>,height=,name>,type>,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "index>,value="});

$.$defineNativeClass("HTMLOutputElement", {"": "name>,type>,value="});

$.$defineNativeClass("HTMLParamElement", {"": "name>,value="});

$.$defineNativeClass("PerformanceNavigation", {"": "type>"});

$.$defineNativeClass("WebKitPoint", {"": "x=,y="});

$.$defineNativeClass("PositionError", {"": "code>"});

$.$defineNativeClass("ProcessingInstruction", {"": "data>"});

$.$defineNativeClass("HTMLProgressElement", {"": "position>,value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("Range", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RangeException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RTCDataChannel", {
  get$on: function() {
    return $.RtcDataChannelEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCPeerConnection", {
  get$on: function() {
    return $.RtcPeerConnectionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCSessionDescription", {"": "type>"});

$.$defineNativeClass("Screen", {"": "height>,width>"});

$.$defineNativeClass("HTMLScriptElement", {"": "type>"});

$.$defineNativeClass("ScriptProfileNode", {"": "visible>",
  children$0: function() {
    return this.children();
  },
  get$children: function() {
    return new $.BoundClosure0(this, "children$0");
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,name>,size=,type>,value="});

$.$defineNativeClass("SharedWorkerContext", {"": "name>",
  get$on: function() {
    return $.SharedWorkerContextEvents$(this);
  }
});

$.$defineNativeClass("SourceBufferList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout14(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout14(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout14: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "type>"});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout15(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout15(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout15: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognition", {
  get$on: function() {
    return $.SpeechRecognitionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  start$0: function() {
    return this.start();
  },
  get$start: function() {
    return new $.BoundClosure0(this, "start$0");
  }
});

$.$defineNativeClass("SpeechRecognitionResult", {"": "length>"});

$.$defineNativeClass("SQLError", {"": "code>"});

$.$defineNativeClass("SQLException", {"": "code>"});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout16(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout16(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout16: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  $index: function(key) {
    return this.$$dom_getItem$1(key);
  },
  $indexSet: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.$index(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.$index(key));
    }
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  $isMap: function() {
    return true;
  }
});

$.$defineNativeClass("StorageEvent", {"": "key>"});

$.$defineNativeClass("HTMLStyleElement", {"": "type>"});

$.$defineNativeClass("StyleMedia", {"": "type>"});

$.$defineNativeClass("StyleSheet", {"": "type>"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "name>,type>,value="});

$.$defineNativeClass("TextEvent", {"": "data>"});

$.$defineNativeClass("TextMetrics", {"": "width>"});

$.$defineNativeClass("TextTrack", {
  get$on: function() {
    return $.TextTrackEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCue", {"": "id=,position>,size=",
  get$on: function() {
    return $.TextTrackCueEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout17(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout17(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout17: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
});

$.$defineNativeClass("TextTrackList", {
  get$on: function() {
    return $.TextTrackListEvents$(this);
  },
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout18(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout18(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout18: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("TimeRanges", {"": "length>",
  start$1: function(index) {
    return this.start(index);
  },
  get$start: function() {
    return new $.BoundClosure(this, "start$1");
  }
});

$.$defineNativeClass("Touch", {"": "clientX>,pageX>"});

$.$defineNativeClass("TouchEvent", {"": "touches>"});

$.$defineNativeClass("TouchList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout19(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout19(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout19: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("UIEvent", {"": "pageX>"});

$.$defineNativeClass("Uint16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout20(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout20(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout20: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout21(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout21(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout21: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  $index: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return this[index];
    } else
      return Object.prototype.$index.call(this, index);
  },
  $indexSet: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      this[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  reduce$2: function(initialValue, combine) {
    if (Object.getPrototypeOf(this).hasOwnProperty("reduce$2")) {
      return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
    } else
      return Object.prototype.reduce$2.call(this, initialValue, combine);
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  join$1: function(separator) {
    if (Object.getPrototypeOf(this).hasOwnProperty("join$1")) {
      return $.IterableMixinWorkaround_joinList(this, separator);
    } else
      return Object.prototype.join$1.call(this, separator);
  },
  mappedBy$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("mappedBy$1")) {
      return $.MappedList$(this, f);
    } else
      return Object.prototype.mappedBy$1.call(this, f);
  },
  where$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, f);
    } else
      return Object.prototype.where$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      return $.List_List$from(this);
    } else
      return Object.prototype.toList$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.$$eq($.length(this), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  addAll$1: function(iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, iterable);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  sort$1: function(compare) {
    if (Object.getPrototypeOf(this).hasOwnProperty("sort$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
    } else
      return Object.prototype.sort$1.call(this, compare);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, $.length(this));
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      var t1, t2;
      t1 = $.getInterceptor$JSStringJSArray(this);
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.get$last$bailout22(1, t1, t2);
      if (t2 > 0) {
        t1 = t1.get$length(this);
        if (typeof t1 !== "number")
          return this.get$last$bailout22(2, t1);
        return this.$index(t1 - 1);
      }
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this);
  },
  get$last$bailout22: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  removeRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, start, rangeLength);
  },
  getRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("getRange$2")) {
      return $.Lists_getRange(this, start, rangeLength, []);
    } else
      return Object.prototype.getRange$2.call(this, start, rangeLength);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout23(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout23(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout23: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width=",
  $isVideoElement: function() {
    return true;
  }
});

$.$defineNativeClass("WebGLActiveInfo", {"": "name>,size>,type>"});

$.$defineNativeClass("WebGLRenderingContext", {
  activeTexture$1: function(texture) {
    return this.activeTexture(texture);
  },
  attachShader$2: function(program, shader) {
    return this.attachShader(program,shader);
  },
  bindBuffer$2: function(target, buffer) {
    return this.bindBuffer(target,buffer);
  },
  bindFramebuffer$2: function(target, framebuffer) {
    return this.bindFramebuffer(target,framebuffer);
  },
  bindRenderbuffer$2: function(target, renderbuffer) {
    return this.bindRenderbuffer(target,renderbuffer);
  },
  bindTexture$2: function(target, texture) {
    return this.bindTexture(target,texture);
  },
  blendEquation$1: function(mode) {
    return this.blendEquation(mode);
  },
  get$blendEquation: function() {
    return new $.BoundClosure(this, "blendEquation$1");
  },
  blendEquationSeparate$2: function(modeRGB, modeAlpha) {
    return this.blendEquationSeparate(modeRGB,modeAlpha);
  },
  blendFunc$2: function(sfactor, dfactor) {
    return this.blendFunc(sfactor,dfactor);
  },
  blendFuncSeparate$4: function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return this.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
  },
  bufferData$3: function(target, data_OR_size, usage) {
    return this.bufferData(target,data_OR_size,usage);
  },
  clear$1: function(mask) {
    return this.clear(mask);
  },
  clearColor$4: function(red, green, blue, alpha) {
    return this.clearColor(red,green,blue,alpha);
  },
  clearDepth$1: function(depth) {
    return this.clearDepth(depth);
  },
  clearStencil$1: function(s) {
    return this.clearStencil(s);
  },
  compileShader$1: function(shader) {
    return this.compileShader(shader);
  },
  createBuffer$0: function() {
    return this.createBuffer();
  },
  createFramebuffer$0: function() {
    return this.createFramebuffer();
  },
  createProgram$0: function() {
    return this.createProgram();
  },
  createRenderbuffer$0: function() {
    return this.createRenderbuffer();
  },
  createShader$1: function(type) {
    return this.createShader(type);
  },
  createTexture$0: function() {
    return this.createTexture();
  },
  cullFace$1: function(mode) {
    return this.cullFace(mode);
  },
  deleteProgram$1: function(program) {
    return this.deleteProgram(program);
  },
  deleteShader$1: function(shader) {
    return this.deleteShader(shader);
  },
  depthFunc$1: function(func) {
    return this.depthFunc(func);
  },
  depthMask$1: function(flag) {
    return this.depthMask(flag);
  },
  disable$1: function(cap) {
    return this.disable(cap);
  },
  disableVertexAttribArray$1: function(index) {
    return this.disableVertexAttribArray(index);
  },
  drawArrays$3: function(mode, first, count) {
    return this.drawArrays(mode,first,count);
  },
  drawElements$4: function(mode, count, type, offset) {
    return this.drawElements(mode,count,type,offset);
  },
  enable$1: function(cap) {
    return this.enable(cap);
  },
  enableVertexAttribArray$1: function(index) {
    return this.enableVertexAttribArray(index);
  },
  framebufferRenderbuffer$4: function(target, attachment, renderbuffertarget, renderbuffer) {
    return this.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
  },
  framebufferTexture2D$5: function(target, attachment, textarget, texture, level) {
    return this.framebufferTexture2D(target,attachment,textarget,texture,level);
  },
  frontFace$1: function(mode) {
    return this.frontFace(mode);
  },
  generateMipmap$1: function(target) {
    return this.generateMipmap(target);
  },
  getAttribLocation$2: function(program, name) {
    return this.getAttribLocation(program,name);
  },
  getError$0: function() {
    return this.getError();
  },
  getExtension$1: function(name) {
    return this.getExtension(name);
  },
  getParameter$1: function(pname) {
    return this.getParameter(pname);
  },
  getProgramParameter$2: function(program, pname) {
    return this.getProgramParameter(program,pname);
  },
  getShaderInfoLog$1: function(shader) {
    return this.getShaderInfoLog(shader);
  },
  getShaderParameter$2: function(shader, pname) {
    return this.getShaderParameter(shader,pname);
  },
  getUniformLocation$2: function(program, name) {
    return this.getUniformLocation(program,name);
  },
  lineWidth$1: function(width) {
    return this.lineWidth(width);
  },
  linkProgram$1: function(program) {
    return this.linkProgram(program);
  },
  pixelStorei$2: function(pname, param) {
    return this.pixelStorei(pname,param);
  },
  polygonOffset$2: function(factor, units) {
    return this.polygonOffset(factor,units);
  },
  get$polygonOffset: function() {
    return new $.BoundClosure1(this, "polygonOffset$2");
  },
  renderbufferStorage$4: function(target, internalformat, width, height) {
    return this.renderbufferStorage(target,internalformat,width,height);
  },
  shaderSource$2: function(shader, string) {
    return this.shaderSource(shader,string);
  },
  texImage2D$9: function(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
    var t1, t2, t3;
    t1 = $ === format;
    if (t1)
      format = null;
    t2 = $ === type;
    if (t2)
      type = null;
    t3 = $ === pixels;
    if (t3)
      pixels = null;
    if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "number" && Math.floor(border_OR_canvas_OR_image_OR_pixels_OR_video) === border_OR_canvas_OR_image_OR_pixels_OR_video || border_OR_canvas_OR_image_OR_pixels_OR_video == null) {
      this._texImage2D_1$9(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels);
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.$isImageData() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_2$6(target, level, internalformat, format_OR_width, height_OR_type, $._convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.$isImageElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_3$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.$isCanvasElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_4$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.$isVideoElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_5$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  texImage2D$6: function(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
    return this.texImage2D$9(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, $, $, $);
  },
  _texImage2D_1$9: function(target, level, internalformat, width, height, border, format, type, pixels) {
    return this.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
  },
  _texImage2D_2$6: function(target, level, internalformat, format, type, pixels) {
    return this.texImage2D(target,level,internalformat,format,type,pixels);
  },
  _texImage2D_3$6: function(target, level, internalformat, format, type, image) {
    return this.texImage2D(target,level,internalformat,format,type,image);
  },
  _texImage2D_4$6: function(target, level, internalformat, format, type, canvas) {
    return this.texImage2D(target,level,internalformat,format,type,canvas);
  },
  _texImage2D_5$6: function(target, level, internalformat, format, type, video) {
    return this.texImage2D(target,level,internalformat,format,type,video);
  },
  texParameterf$3: function(target, pname, param) {
    return this.texParameterf(target,pname,param);
  },
  texParameteri$3: function(target, pname, param) {
    return this.texParameteri(target,pname,param);
  },
  uniform1f$2: function(location, x) {
    return this.uniform1f(location,x);
  },
  uniform1fv$2: function(location, v) {
    return this.uniform1fv(location,v);
  },
  uniform1i$2: function(location, x) {
    return this.uniform1i(location,x);
  },
  uniform1iv$2: function(location, v) {
    return this.uniform1iv(location,v);
  },
  uniform2f$3: function(location, x, y) {
    return this.uniform2f(location,x,y);
  },
  uniform2fv$2: function(location, v) {
    return this.uniform2fv(location,v);
  },
  uniform3f$4: function(location, x, y, z) {
    return this.uniform3f(location,x,y,z);
  },
  uniform3fv$2: function(location, v) {
    return this.uniform3fv(location,v);
  },
  uniform3iv$2: function(location, v) {
    return this.uniform3iv(location,v);
  },
  uniform4f$5: function(location, x, y, z, w) {
    return this.uniform4f(location,x,y,z,w);
  },
  uniform4fv$2: function(location, v) {
    return this.uniform4fv(location,v);
  },
  uniformMatrix3fv$3: function(location, transpose, array) {
    return this.uniformMatrix3fv(location,transpose,array);
  },
  uniformMatrix4fv$3: function(location, transpose, array) {
    return this.uniformMatrix4fv(location,transpose,array);
  },
  useProgram$1: function(program) {
    return this.useProgram(program);
  },
  vertexAttribPointer$6: function(indx, size, type, normalized, stride, offset) {
    return this.vertexAttribPointer(indx,size,type,normalized,stride,offset);
  },
  viewport$4: function(x, y, width, height) {
    return this.viewport(x,y,width,height);
  }
});

$.$defineNativeClass("WebKitNamedFlow", {"": "name>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WebSocket", {
  get$on: function() {
    return $.WebSocketEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("DOMWindow", {"": "innerHeight>,innerWidth>,name>,navigator>",
  requestAnimationFrame$1: function(callback) {
    this._ensureRequestAnimationFrame$0();
    return this._requestAnimationFrame$1(callback);
  },
  _requestAnimationFrame$1: function(callback) {
    return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function() {
    if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
  },
  get$on: function() {
    return $.WindowEvents$(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("Worker", {
  get$on: function() {
    return $.WorkerEvents$(this);
  }
});

$.$defineNativeClass("WorkerContext", {"": "navigator>",
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.WorkerContextEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WorkerLocation", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("WorkerNavigator", {"": "userAgent>"});

$.$defineNativeClass("XPathException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout24(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout24(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout24: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout25(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout25(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout25: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout0(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout0(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout0: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout26(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout26(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout26: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout27(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout27(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout27: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFrameSetElement", {
  get$on: function() {
    return $._FrameSetElementEvents$(this);
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout28(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout28(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout28: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("MediaStreamList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout29(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout29(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout29: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout30(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout30(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout30: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout31(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout31(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout31: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout32(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout32(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout32: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("IDBCursor", {"": "key>"});

$.$defineNativeClass("IDBCursorWithValue", {"": "value>"});

$.$defineNativeClass("IDBDatabase", {"": "name>",
  get$on: function() {
    return $.DatabaseEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBIndex", {"": "name>",
  count$1: function(key_OR_range) {
    var t1 = $ === key_OR_range;
    if (t1)
      key_OR_range = null;
    if (t1)
      return this._count_1$0();
    if (typeof key_OR_range === "object" && key_OR_range !== null && key_OR_range.$isKeyRange() || key_OR_range == null)
      return this._count_2$1(key_OR_range);
    if (!t1)
      return this._count_3$1(key_OR_range);
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  get$count: function() {
    return new $.BoundClosure3(this, "count$1");
  },
  _count_1$0: function() {
    return this.count();
  },
  _count_2$1: function(range) {
    return this.count(range);
  },
  _count_3$1: function(key) {
    return this.count(key);
  }
});

$.$defineNativeClass("IDBKeyRange", {
  $isKeyRange: function() {
    return true;
  }
});

$.$defineNativeClass("IDBObjectStore", {"": "name>",
  add$2: function(value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
    return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
  },
  add$1: function(value) {
    return this.add$2(value, $);
  },
  _add_1$2: function(value, key) {
    return this.add(value,key);
  },
  _add_2$1: function(value) {
    return this.add(value);
  },
  count$1: function(key_OR_range) {
    var t1 = $ === key_OR_range;
    if (t1)
      key_OR_range = null;
    if (t1)
      return this._count_1$0();
    if (typeof key_OR_range === "object" && key_OR_range !== null && key_OR_range.$isKeyRange() || key_OR_range == null)
      return this._count_2$1(key_OR_range);
    if (!t1)
      return this._count_3$1(key_OR_range);
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  get$count: function() {
    return new $.BoundClosure4(this, "count$1");
  },
  _count_1$0: function() {
    return this.count();
  },
  _count_2$1: function(range) {
    return this.count(range);
  },
  _count_3$1: function(key) {
    return this.count(key);
  },
  index$1: function(name) {
    return this.index(name);
  },
  get$index: function() {
    return new $.BoundClosure(this, "index$1");
  }
});

$.$defineNativeClass("IDBOpenDBRequest", {
  get$on: function() {
    return $.OpenDBRequestEvents$(this);
  }
});

$.$defineNativeClass("IDBRequest", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.RequestEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBTransaction", {
  get$on: function() {
    return $.TransactionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBVersionChangeRequest", {
  get$on: function() {
    return $.VersionChangeRequestEvents$(this);
  }
});

$.$defineNativeClass("SVGAltGlyphElement", {"": "format>"});

$.$defineNativeClass("SVGAngle", {"": "value="});

$.$defineNativeClass("SVGCircleElement", {"": "r>"});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "offset>,type>"});

$.$defineNativeClass("SVGCursorElement", {"": "x>,y>"});

$.$defineNativeClass("SVGElementInstance", {
  get$on: function() {
    return $.ElementInstanceEvents$(this);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type>,height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "scale>,height>,width>,x>,y>",
  scale$1: function(arg0) {
    return this.scale.call$1(arg0);
  }
});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x>,y>,z>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x>,y>,z>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type>,height>,width>,x>,y>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGGlyphRefElement", {"": "format>,x=,y="});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGLength", {"": "value="});

$.$defineNativeClass("SVGLengthList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout33(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout33(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout33: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGMatrix", {"": "a>,b>,c>,d>",
  flipY$0: function() {
    return this.flipY();
  },
  get$flipY: function() {
    return new $.BoundClosure0(this, "flipY$0");
  },
  scale$1: function(scaleFactor) {
    return this.scale(scaleFactor);
  },
  get$scale: function() {
    return new $.BoundClosure(this, "scale$1");
  }
});

$.$defineNativeClass("SVGNumber", {"": "value="});

$.$defineNativeClass("SVGNumberList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout34(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout34(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout34: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPathSegArcAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegArcRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicSmoothAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicSmoothRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticSmoothAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticSmoothRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoHorizontalAbs", {"": "x="});

$.$defineNativeClass("SVGPathSegLinetoHorizontalRel", {"": "x="});

$.$defineNativeClass("SVGPathSegLinetoRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoVerticalAbs", {"": "y="});

$.$defineNativeClass("SVGPathSegLinetoVerticalRel", {"": "y="});

$.$defineNativeClass("SVGPathSegList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout35(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout35(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout35: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPathSegMovetoAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegMovetoRel", {"": "x=,y="});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGPoint", {"": "x=,y="});

$.$defineNativeClass("SVGPolygonElement", {"": "points>"});

$.$defineNativeClass("SVGPolylineElement", {"": "points>"});

$.$defineNativeClass("SVGRadialGradientElement", {"": "r>"});

$.$defineNativeClass("SVGRect", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGScriptElement", {"": "type>"});

$.$defineNativeClass("SVGStopElement", {"": "offset>"});

$.$defineNativeClass("SVGStringList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout36(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout36(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout36: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGStyleElement", {"": "type>"});

$.$defineNativeClass("SVGElement", {
  get$elements: function() {
    return $.FilteredElementList$(this);
  },
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function() {
    return this.id;
  },
  set$id: function(value) {
    this.id = value;
  }
});

$.$defineNativeClass("SVGException", {"": "code>,name>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>,x>,y>",
  viewport$4: function(arg0, arg1, arg2, arg3) {
    return this.viewport.call$4(arg0, arg1, arg2, arg3);
  }
});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x>,y>"});

$.$defineNativeClass("SVGTransform", {"": "type>"});

$.$defineNativeClass("SVGTransformList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout37(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout37(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout37: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  reduce$2: function(initialValue, combine) {
    return $.IterableMixinWorkaround_reduce(this, initialValue, combine);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    t2 = t1.get$length(this);
    if (typeof t2 !== "number")
      return this.get$last$bailout38(1, t1, t2);
    if (t2 > 0) {
      t1 = t1.get$length(this);
      if (typeof t1 !== "number")
        return this.get$last$bailout38(2, t1);
      return this.$index(t1 - 1);
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last$bailout38: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        t2 = t1.get$length(this);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$gt(t2, 0) === true)
          switch (state0) {
            case 0:
              t1 = t1.get$length(this);
            case 2:
              state0 = 0;
              return this.$index($.$$sub(t1, 1));
          }
        throw $.$$throw($.StateError$("No elements"));
    }
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("AudioBuffer", {"": "length>"});

$.$defineNativeClass("AudioBufferSourceNode", {"": "buffer=",
  start$3: function(when, grainOffset, grainDuration) {
    var t1, t2;
    t1 = $ === grainOffset;
    if (t1)
      grainOffset = null;
    t1 = !t1;
    t2 = $ === grainDuration;
    if (t2)
      grainDuration = null;
    t2 = !t2;
    if (!!this.start)
      if (t2)
        this.start(when, grainOffset, grainDuration);
      else if (t1)
        this.start(when, grainOffset);
      else
        this.start(when);
    else if (t2)
      this.noteOn(when, grainOffset, grainDuration);
    else if (t1)
      this.noteOn(when, grainOffset);
    else
      this.noteOn(when);
  },
  get$start: function() {
    return new $.BoundClosure5(this, "start$3");
  }
});

$.$defineNativeClass("AudioContext", {
  get$on: function() {
    return $.AudioContextEvents$(this);
  }
});

$.$defineNativeClass("AudioParam", {"": "name>,value="});

$.$defineNativeClass("BiquadFilterNode", {"": "type>"});

$.$defineNativeClass("ConvolverNode", {"": "buffer=",
  normalize$0: function() {
    return this.normalize.call$0();
  }
});

$.$defineNativeClass("OscillatorNode", {"": "type>",
  start$1: function(when) {
    return this.start(when);
  },
  get$start: function() {
    return new $.BoundClosure(this, "start$1");
  }
});

// 262 dynamic classes.
// 411 classes
// 36 !leaf
(function() {
  var v0_MouseEvent = "MouseEvent|WheelEvent", v1_Uint8Array = "Uint8Array|Uint8ClampedArray", v2_TextPositioningElement = "SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement", v3_ComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v4_MediaElement = "HTMLMediaElement|HTMLAudioElement|HTMLVideoElement", v5_SvgElement = [v2_TextPositioningElement, v3_ComponentTransferFunctionElement, "SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement"].join("|"), v6_UIEvent = [v0_MouseEvent, "UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent"].join("|"), v7_Element = [v4_MediaElement, v5_SvgElement, "Element|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement"].join("|"), v8_CharacterData = "CharacterData|Text|CDATASection|Comment", v9_Document = "Document|HTMLDocument|SVGDocument", v10_DocumentFragment = "DocumentFragment|ShadowRoot", v11_Node = [v7_Element, v8_CharacterData, v9_Document, v10_DocumentFragment, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|"), v12_AbstractWorker = "AbstractWorker|SharedWorker|Worker", v13_WorkerContext = "WorkerContext|DedicatedWorkerContext|SharedWorkerContext", v14_MediaStream = "MediaStream|LocalMediaStream", v15_Request = "IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest", v16_AudioContext = "AudioContext|OfflineAudioContext";
  $.dynamicSetMetadata([["StyleSheet", "StyleSheet|CSSStyleSheet"], ["MouseEvent", v0_MouseEvent], ["UIEvent", v6_UIEvent], ["Uint8Array", v1_Uint8Array], ["WorkerContext", v13_WorkerContext], ["CSSValueList", "CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSMixFunctionValue"], ["IDBCursor", "IDBCursor|IDBCursorWithValue"], ["IDBRequest", v15_Request], ["AbstractWorker", v12_AbstractWorker], ["SVGComponentTransferFunctionElement", v3_ComponentTransferFunctionElement], ["ArrayBufferView", [v1_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["CharacterData", v8_CharacterData], ["CSSRule", "CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule"], ["Document", v9_Document], ["DocumentFragment", v10_DocumentFragment], ["DOMTokenList", "DOMTokenList|DOMSettableTokenList"], ["HTMLMediaElement", v4_MediaElement], ["SVGTextPositioningElement", v2_TextPositioningElement], ["SVGElement", v5_SvgElement], ["Element", v7_Element], ["Entry", "Entry|DirectoryEntry|FileEntry"], ["EntrySync", "EntrySync|DirectoryEntrySync|FileEntrySync"], ["Event", [v6_UIEvent, "Event|WebKitAnimationEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|AudioProcessingEvent|OfflineAudioCompletionEvent"].join("|")], ["Node", v11_Node], ["MediaStream", v14_MediaStream], ["AudioContext", v16_AudioContext], ["EventTarget", [v11_Node, v12_AbstractWorker, v13_WorkerContext, v14_MediaStream, v15_Request, v16_AudioContext, "EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|MediaController|MediaSource|MediaStreamTrack|MessagePort|Notification|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|DOMWindow|IDBDatabase|IDBTransaction|SVGElementInstance"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["AudioParam", "AudioParam|AudioGain"], ["NodeList", "NodeList|RadioNodeList"]]);
})();


//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=WebGL_Geometry_Extrude_By_U_Shapes.dart.js.map